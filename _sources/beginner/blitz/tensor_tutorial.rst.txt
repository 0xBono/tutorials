.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_beginner_blitz_tensor_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_blitz_tensor_tutorial.py:


What is PyTorch?
================

It’s a Python-based scientific computing package targeted at two sets of
audiences:

-  A replacement for NumPy to use the power of GPUs
-  a deep learning research platform that provides maximum flexibility
   and speed

Getting Started
---------------

Tensors
^^^^^^^

Tensors are similar to NumPy’s ndarrays, with the addition being that
Tensors can also be used on a GPU to accelerate computing.


.. code-block:: default


    from __future__ import print_function
    import torch







.. note::
    An uninitialized matrix is declared,
    but does not contain definite known
    values before it is used. When an
    uninitialized matrix is created,
    whatever values were in the allocated
    memory at the time will appear as the initial values.

Construct a 5x3 matrix, uninitialized:


.. code-block:: default


    x = torch.empty(5, 3)
    print(x)
 




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[0., 0., 0.],
            [0., 0., 0.],
            [0., 0., 0.],
            [0., 0., 0.],
            [0., 0., 0.]])


Construct a randomly initialized matrix:


.. code-block:: default


    x = torch.rand(5, 3)
    print(x)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[0.6643, 0.9951, 0.2708],
            [0.1221, 0.7395, 0.7421],
            [0.5474, 0.8879, 0.5282],
            [0.1071, 0.8497, 0.4291],
            [0.1026, 0.0658, 0.4563]])


Construct a matrix filled zeros and of dtype long:


.. code-block:: default


    x = torch.zeros(5, 3, dtype=torch.long)
    print(x)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0],
            [0, 0, 0]])


Construct a tensor directly from data:


.. code-block:: default


    x = torch.tensor([5.5, 3])
    print(x)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([5.5000, 3.0000])


or create a tensor based on an existing tensor. These methods
will reuse properties of the input tensor, e.g. dtype, unless
new values are provided by user


.. code-block:: default


    x = x.new_ones(5, 3, dtype=torch.double)      # new_* methods take in sizes
    print(x)

    x = torch.randn_like(x, dtype=torch.float)    # override dtype!
    print(x)                                      # result has the same size





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[1., 1., 1.],
            [1., 1., 1.],
            [1., 1., 1.],
            [1., 1., 1.],
            [1., 1., 1.]], dtype=torch.float64)
    tensor([[-1.1835, -0.4465, -1.2882],
            [ 0.6908, -1.1407,  0.0238],
            [-0.6665,  0.9505,  0.5753],
            [-1.3811, -0.7412,  0.2899],
            [-0.1034, -0.3764, -0.5287]])


Get its size:


.. code-block:: default


    print(x.size())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    torch.Size([5, 3])


.. note::
    ``torch.Size`` is in fact a tuple, so it supports all tuple operations.

Operations
^^^^^^^^^^
There are multiple syntaxes for operations. In the following
example, we will take a look at the addition operation.

Addition: syntax 1


.. code-block:: default

    y = torch.rand(5, 3)
    print(x + y)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[-0.9402, -0.0380, -0.6145],
            [ 0.9230, -0.4295,  0.5286],
            [-0.1355,  1.8648,  1.3335],
            [-0.9786, -0.2051,  0.3027],
            [ 0.5465, -0.1414, -0.2878]])


Addition: syntax 2


.. code-block:: default


    print(torch.add(x, y))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[-0.9402, -0.0380, -0.6145],
            [ 0.9230, -0.4295,  0.5286],
            [-0.1355,  1.8648,  1.3335],
            [-0.9786, -0.2051,  0.3027],
            [ 0.5465, -0.1414, -0.2878]])


Addition: providing an output tensor as argument


.. code-block:: default

    result = torch.empty(5, 3)
    torch.add(x, y, out=result)
    print(result)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[-0.9402, -0.0380, -0.6145],
            [ 0.9230, -0.4295,  0.5286],
            [-0.1355,  1.8648,  1.3335],
            [-0.9786, -0.2051,  0.3027],
            [ 0.5465, -0.1414, -0.2878]])


Addition: in-place


.. code-block:: default


    # adds x to y
    y.add_(x)
    print(y)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[-0.9402, -0.0380, -0.6145],
            [ 0.9230, -0.4295,  0.5286],
            [-0.1355,  1.8648,  1.3335],
            [-0.9786, -0.2051,  0.3027],
            [ 0.5465, -0.1414, -0.2878]])


.. note::
    Any operation that mutates a tensor in-place is post-fixed with an ``_``.
    For example: ``x.copy_(y)``, ``x.t_()``, will change ``x``.

You can use standard NumPy-like indexing with all bells and whistles!


.. code-block:: default


    print(x[:, 1])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([-0.4465, -1.1407,  0.9505, -0.7412, -0.3764])


Resizing: If you want to resize/reshape tensor, you can use ``torch.view``:


.. code-block:: default

    x = torch.randn(4, 4)
    y = x.view(16)
    z = x.view(-1, 8)  # the size -1 is inferred from other dimensions
    print(x.size(), y.size(), z.size())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    torch.Size([4, 4]) torch.Size([16]) torch.Size([2, 8])


If you have a one element tensor, use ``.item()`` to get the value as a
Python number


.. code-block:: default

    x = torch.randn(1)
    print(x)
    print(x.item())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([1.5340])
    1.533956527709961


**Read later:**


  100+ Tensor operations, including transposing, indexing, slicing,
  mathematical operations, linear algebra, random numbers, etc.,
  are described
  `here <https://pytorch.org/docs/torch>`_.

NumPy Bridge
------------

Converting a Torch Tensor to a NumPy array and vice versa is a breeze.

The Torch Tensor and NumPy array will share their underlying memory
locations (if the Torch Tensor is on CPU), and changing one will change
the other.

Converting a Torch Tensor to a NumPy Array
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. code-block:: default


    a = torch.ones(5)
    print(a)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([1., 1., 1., 1., 1.])



.. code-block:: default


    b = a.numpy()
    print(b)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1. 1. 1. 1. 1.]


See how the numpy array changed in value.


.. code-block:: default


    a.add_(1)
    print(a)
    print(b)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([2., 2., 2., 2., 2.])
    [2. 2. 2. 2. 2.]


Converting NumPy Array to Torch Tensor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
See how changing the np array changed the Torch Tensor automatically


.. code-block:: default


    import numpy as np
    a = np.ones(5)
    b = torch.from_numpy(a)
    np.add(a, 1, out=a)
    print(a)
    print(b)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [2. 2. 2. 2. 2.]
    tensor([2., 2., 2., 2., 2.], dtype=torch.float64)


All the Tensors on the CPU except a CharTensor support converting to
NumPy and back.

CUDA Tensors
------------

Tensors can be moved onto any device using the ``.to`` method.


.. code-block:: default


    # let us run this cell only if CUDA is available
    # We will use ``torch.device`` objects to move tensors in and out of GPU
    if torch.cuda.is_available():
        device = torch.device("cuda")          # a CUDA device object
        y = torch.ones_like(x, device=device)  # directly create a tensor on GPU
        x = x.to(device)                       # or just use strings ``.to("cuda")``
        z = x + y
        print(z)
        print(z.to("cpu", torch.double))       # ``.to`` can also change dtype together!




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([2.5340], device='cuda:0')
    tensor([2.5340], dtype=torch.float64)



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.763 seconds)


.. _sphx_glr_download_beginner_blitz_tensor_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: tensor_tutorial.py <tensor_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tensor_tutorial.ipynb <tensor_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
