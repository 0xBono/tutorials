.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.7793,  9.1548,  8.1812,  4.2313,  1.0583],
            [19.0985,  5.1219,  5.2188,  2.1850,  3.3169],
            [10.7687, 11.4826,  7.6820,  7.0433,  7.6300],
            [ 6.2608,  2.6449,  4.4917,  7.9069,  7.1750],
            [ 6.6391,  5.7546,  8.7974,  3.5588,  5.6711],
            [ 6.2608,  7.6447,  5.1961,  4.3947,  7.1750],
            [10.7687,  9.4775, 14.5821,  8.8270,  7.6300],
            [19.0985,  6.6908,  5.6863,  5.6068,  3.3169]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.2070, -3.4223,  0.1122, -1.0219, -0.6814, -0.5099, -0.9185, -0.8090],
            [ 0.1688, -0.3036, -0.7863, -1.7150, -0.5746, -1.0689, -0.2801, -1.0035],
            [ 0.6841,  1.0535, -1.7254, -0.1389, -1.2152,  0.6309, -0.4352,  0.2243],
            [-0.6301,  0.8676,  0.0877, -0.9533,  1.3012,  1.2081,  1.3687, -0.3317],
            [-0.7793, -0.5032,  1.1751, -0.7643, -0.9450,  1.1858,  2.1820,  1.1214],
            [ 0.6259,  1.0696,  0.0543,  0.2781,  0.4402, -0.3012, -0.8802,  0.0913],
            [-0.4840,  1.2621, -0.8894, -0.8053,  1.0948,  0.0808,  0.5241,  0.2146],
            [-0.1216, -0.3301, -0.4276,  0.1465,  1.1097,  1.1363,  0.1912, -0.5076]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2163, -0.4883,  1.2383],
            [-0.1175, -0.7814, -0.9868],
            [-0.2531, -1.1859,  1.9289]], requires_grad=True), Parameter containing:
    tensor([[-1.0224]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.4623,  0.9541, -2.2347,  2.1564, -1.3841,  0.9217, -2.5903,  0.9185],
            [ 0.8848, -3.5206, -6.5814, -0.5613, -2.3650, -3.0424, -2.0494,  0.9515],
            [-1.0036, -0.1451,  1.7979,  0.6432, -1.7073, -0.7164, -3.0992,  4.7019],
            [-6.6836, -1.2584, -5.4590, -0.6637, -1.6190, -1.6809,  0.3867,  1.1518],
            [-3.5598,  1.3934,  1.2230,  6.4871, -3.2757, -5.4392,  1.4154,  0.4118],
            [-6.8181,  3.1864, -0.0405, -2.8024, -1.5885, -2.0274, -5.4865,  3.5951],
            [-1.4705, -0.7396, -1.1230, -0.0710, -0.7316, -1.7910,  3.2254,  0.7251],
            [-3.4288, -0.3949, -1.5077,  2.0873, -2.0574, -0.1972, -5.3866,  4.2792]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.8569e-01,  7.5907e-03,  1.2866e-01, -3.0703e+00,  1.6980e+00,
             -2.1750e-01, -1.1531e+00,  2.0451e+00, -7.9357e-01,  1.6938e+00],
            [-4.8712e-02,  1.3046e+00,  1.1644e+00,  1.0726e+00, -3.1124e-01,
              2.4725e-01, -4.3599e+00,  2.8602e+00, -6.2523e-01, -6.3396e-01],
            [ 2.4794e-01,  2.3029e+00,  2.6712e-01, -4.4659e+00,  5.8796e+00,
              2.1261e+00, -2.8780e+00, -1.7996e+00, -1.9515e+00,  3.1809e+00],
            [ 5.1859e-01,  5.8332e-01, -1.6207e+00,  1.9347e+00,  4.0922e-01,
             -2.9327e+00, -8.9202e+00,  6.0328e+00, -7.2876e-01,  1.4903e+00],
            [-1.4461e-01, -1.3631e+00, -5.2457e+00, -1.9588e+00,  6.0288e-02,
              1.3992e+00, -8.3592e-01, -4.7611e+00, -9.4518e-02, -2.9732e-01],
            [-5.6808e-01, -1.6277e+00, -2.6491e-01,  5.4469e+00,  3.2608e+00,
              6.8437e-01, -1.5830e+00,  2.2695e+00, -1.9693e+00,  5.8662e+00],
            [ 2.5905e-02,  1.3683e+00,  5.6404e-01,  3.0722e-01, -1.8917e+00,
              3.1472e+00, -4.3372e-01,  9.1285e-02,  1.8508e+00, -5.1582e+00],
            [ 3.5850e-01,  1.9992e+00, -2.9206e+00,  2.0663e+00,  1.8921e+00,
             -2.1212e+00, -2.5812e+00, -1.3390e+00, -2.3231e+00,  3.7334e+00],
            [ 1.3077e-01,  2.7910e-01, -3.0964e+00, -9.7792e-01,  2.4142e+00,
              1.0504e+00, -2.0910e+00,  6.5604e-01,  1.1779e+00, -1.6688e-01],
            [-4.2551e-02, -7.5465e-01, -1.9764e+00,  5.9799e+00, -6.7019e-01,
             -2.5113e+00, -1.5233e+00, -5.7799e-01,  5.3619e+00, -3.0367e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.308 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
