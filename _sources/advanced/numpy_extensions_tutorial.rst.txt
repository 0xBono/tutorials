.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.9264,  5.5502,  4.4927,  7.9070,  7.5694],
            [11.1140,  7.8591, 12.7265, 12.3443,  6.6342],
            [10.3579,  4.5187,  3.6500,  3.0789,  3.0444],
            [ 4.0426,  3.1721,  3.7700, 14.1795,  0.4988],
            [10.3034,  4.9171, 10.8136,  4.4710,  5.4982],
            [ 4.0426,  8.0555,  5.9718,  6.0596,  0.4988],
            [10.3579,  8.0529,  7.7983,  3.8038,  3.0444],
            [11.1140, 16.0058, 10.3569,  5.2159,  6.6342]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5415, -1.1193,  0.5376, -0.9901, -1.6499,  0.7375,  0.7986,  1.0934],
            [ 0.2293, -0.4552,  0.4561, -0.6239, -0.7971, -2.3689, -0.6370,  2.2100],
            [-1.4431,  0.2648, -0.2836,  0.2529, -0.2506, -1.0900, -0.8070, -1.1669],
            [-0.4343,  0.3002,  1.1321,  0.6595,  2.3573, -0.2721, -1.1908, -0.0986],
            [ 0.0959,  2.3413, -0.6211,  0.2521,  1.5356, -0.2703,  1.2083, -2.1039],
            [ 0.6245,  0.1423,  0.8507,  0.3683,  1.6690,  0.1318,  0.9388, -0.5609],
            [-0.3068, -0.8680, -0.8215, -1.0669,  0.4410, -0.6496, -1.1816,  0.0578],
            [ 0.4354, -0.6875, -0.3569,  0.6297, -0.4810, -1.3512, -0.1851,  0.0539]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.9989,  1.9683,  0.1815],
            [-1.1071, -1.1309, -0.9825],
            [-1.4259, -0.1004,  0.6613]], requires_grad=True), Parameter containing:
    tensor([[1.1634]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.2269, -2.2275, -0.4497,  3.6776, -4.0712, -4.6053, -1.7005,  3.9197],
            [ 0.5153,  3.7207,  4.7821, -2.0691,  2.1256,  3.8719, -2.1045,  8.4626],
            [ 0.1490,  5.1629,  0.9292,  5.9995,  2.1724, -0.1613, -6.4003, -5.3999],
            [-2.8654,  2.5062, -1.8652,  1.5277, -2.8193,  4.0948, -1.2487, -0.7442],
            [-2.6440,  3.0697, -0.7732,  2.9007,  2.1879, -3.2475,  6.1553, -2.5816],
            [ 2.7661,  3.0468,  2.6063, -0.3533, -2.4272, -4.2423,  2.4155, -0.0393],
            [-2.8828, -2.3661,  2.0119,  7.6955,  5.7894,  2.7931,  4.3511,  0.2523],
            [ 7.7459, -1.4163,  5.7102,  4.3782,  1.1611, -5.2623, -2.8146,  4.5831]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.2284, -3.1478,  2.0526, -1.8739,  0.8403,  0.7754, -2.7206,  0.8284,
             -1.9083, -0.1768],
            [ 0.9120,  0.0468,  4.1121, -0.0966,  0.8029,  3.3907,  3.6087, -1.8542,
             -0.3257,  0.8690],
            [-0.3579, -1.2187,  0.8944, -0.7098, -2.7013,  1.9623,  2.9907,  3.8337,
              4.1527, -0.0624],
            [-3.4629, -2.9006, -3.9461, -0.8296, -3.3215, -1.6845,  3.6209, -3.5807,
             -0.2653, -0.6865],
            [-5.3785,  3.0469, -2.1273,  0.7264,  0.3835,  3.5486,  2.6563, -3.6991,
             -0.4397, -0.7159],
            [-2.2412, -2.3780,  2.5250,  5.6938, -0.3488, -4.4421,  2.0047,  0.6942,
              0.1297,  0.6510],
            [-0.7248,  1.3613,  6.1096, -1.2607, -2.4524,  0.9876,  0.9439,  0.6446,
             -2.8291,  0.0647],
            [ 3.8343, -2.6291, -6.3219,  0.9213,  2.8586,  4.5249, -0.5569,  6.3314,
             -2.5666,  0.5490],
            [ 2.1779,  0.9188,  1.8930,  2.6826, -0.3592,  1.0375, -1.2631,  2.8328,
              1.6184,  1.2651],
            [ 1.8700,  2.0668, -1.4368, -1.0850, -0.8597,  1.0096, -0.4999,  2.3223,
              0.7213, -1.3348]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.240 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
