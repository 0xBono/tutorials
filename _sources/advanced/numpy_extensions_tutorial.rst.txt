.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.0371,  8.0822,  2.0168,  6.9495,  9.2279],
            [ 3.6636,  3.9592,  1.6212, 10.0513,  6.1280],
            [16.1318, 13.8017,  4.5307,  6.7416, 13.3277],
            [10.6915,  7.5973, 11.1504,  5.9640, 13.7080],
            [ 8.6251,  5.4297,  7.8494,  4.5774, 10.1685],
            [10.6915,  7.2947,  0.9118,  4.1400, 13.7080],
            [16.1318,  8.8731,  9.2975,  9.5193, 13.3277],
            [ 3.6636, 10.2182,  6.5905,  5.1621,  6.1280]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.8133, -0.8983,  0.1602, -1.3732, -0.3643,  0.3773, -0.0871,  1.9231],
            [-0.0525,  0.3773,  1.2959,  0.4225,  1.5095, -1.7599,  0.3104,  0.7586],
            [-0.3138,  1.1372, -1.4264, -1.1739,  1.2943,  0.7262, -0.2775, -0.5213],
            [-0.6348,  0.5446, -0.2984, -0.9759, -0.1417, -1.4822, -0.6406,  0.4946],
            [ 0.8415, -0.3031,  1.5026, -0.5932, -0.0669,  0.3565,  1.7620,  0.1761],
            [ 0.3768, -0.4864,  0.3442,  1.3597,  1.6344,  2.7601,  1.0233,  0.7712],
            [-0.9706,  0.3645, -2.1280,  0.4870, -0.7184, -0.0806, -1.1531, -0.2662],
            [ 1.4821, -0.4894,  1.5981, -1.7230, -0.1433, -1.4319,  1.6013,  0.4264]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2062, -0.4182, -0.7128],
            [ 0.1243, -0.1588, -0.8306],
            [-0.7900, -1.2200,  1.1795]], requires_grad=True), Parameter containing:
    tensor([[-0.4107]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.5372, -1.8850,  0.3803, -2.7203, -0.5902,  2.5995, -2.0015, -3.5006],
            [-2.6408, -1.3122,  2.8850,  1.5242,  1.9197,  1.3713, -2.8078, -3.1797],
            [-5.4722, -0.8383, -1.6102,  2.5100,  3.4492,  1.0112,  0.5176, -0.2757],
            [ 2.3444, -0.2261,  1.1621,  0.4706, -3.8129,  1.7326, -1.9237, -0.9841],
            [-2.4843, -0.6016,  3.8183,  1.1139,  2.3097, -1.1552, -0.4767,  0.9936],
            [-1.3707,  2.0570, -0.4025,  0.2075, -0.7773,  2.6613,  0.6031, -5.8488],
            [-1.6785, -1.6809, -0.2851,  1.7915, -0.7827, -3.7196,  1.4969, -0.0987],
            [-2.3778, -1.1869, -0.6897,  3.4000,  4.2988,  2.3255,  3.5062, -2.1591]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.0336,  1.3573,  1.1439,  1.9112,  1.5323,  1.7836,  2.9703,  3.0405,
              1.9779,  1.2064],
            [ 0.3296, -0.1983,  0.9844,  1.7766, -0.6080,  2.0641, -0.1451,  0.8982,
              1.8502,  1.8010],
            [-0.6591,  2.2519, -3.2593,  0.9953,  3.0748,  1.8430,  0.7181,  4.6208,
              0.8185, -0.4296],
            [ 0.0706, -0.9185, -2.5940,  0.5884,  2.4109, -0.9305,  0.7571,  1.0223,
              1.4000,  1.2135],
            [-2.2901, -3.4554,  0.8436, -2.2048,  4.6251, -1.7050, -0.3909,  3.8517,
              0.9877, -0.4016],
            [-0.3191, -4.1281, -4.0416, -1.8583, -0.4985,  0.5957, -0.2736, -1.4698,
              0.4453,  0.0103],
            [-1.0591, -0.4402,  2.3338, -0.5977, -1.6602,  3.3214,  0.4528, -2.2597,
              1.1272, -2.0029],
            [-0.2147, -2.3276, -4.3368,  2.2014,  4.5865,  1.6521, -3.6178, -0.1925,
             -0.3661, -1.8741],
            [-0.2231,  0.4614,  2.8996,  0.3433, -2.5309,  1.1514,  1.2734,  0.4792,
             -3.6921,  0.5617],
            [-0.1166, -0.1003,  0.6345, -0.0083, -1.0734,  2.4988,  1.0953, -5.9202,
              1.0999,  1.2124]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.294 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
