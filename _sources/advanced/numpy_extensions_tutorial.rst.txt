.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.9582,  5.5207,  4.5878,  9.4509,  2.6675],
            [ 7.2124, 11.3786, 16.2830,  1.9706,  5.1796],
            [ 4.7514,  8.1371,  2.7730, 14.1898,  8.2850],
            [ 6.4343,  7.2807,  3.6497,  4.5623, 12.8275],
            [ 5.0202,  3.7065,  9.4999,  9.9127,  8.1768],
            [ 6.4343, 10.1545,  5.7345,  3.0556, 12.8275],
            [ 4.7514, 10.1076,  6.8417,  6.7259,  8.2850],
            [ 7.2124,  6.9289, 14.4364,  6.5322,  5.1796]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.4219,  0.4117,  0.9063,  0.5245,  0.0153, -0.0451,  1.2147, -0.0572],
            [-0.6808, -0.8316, -1.6536,  0.3206, -1.5820,  1.1059,  2.0657,  0.1360],
            [ 0.6206, -0.9127,  2.4011,  0.5190, -0.6652,  0.2991,  3.4262, -0.2643],
            [ 1.0284, -0.1488, -0.4532,  0.6656, -0.9530,  1.4891, -0.6178,  1.4157],
            [-0.3958,  1.4121, -2.3138, -0.2456,  1.1131,  0.7856,  0.4834, -0.4195],
            [ 0.2049,  0.2116, -0.4193,  0.8346,  1.3219, -0.1752, -1.2505, -0.8775],
            [ 0.6111,  0.4610, -0.4724, -0.3986, -0.6391,  0.1243, -0.2619, -0.3270],
            [ 1.9117, -0.4964,  1.3179, -0.0212, -1.4043, -0.5293, -0.8128,  0.3464]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.5371,  1.7861, -1.9821],
            [ 0.5648,  0.4708,  0.3976],
            [-0.2430,  0.3144,  0.3410]], requires_grad=True), Parameter containing:
    tensor([[-1.7614]], requires_grad=True)]
    Output from the convolution:  tensor([[  0.2221,  -1.7951,  -3.5615,   2.8031,  -1.9646,  -2.0682,   2.0416,
               1.2555],
            [  1.0025,  -0.2879,  -6.7811,   2.8918,  -6.0340,  -3.1928,   1.4370,
              -1.5332],
            [ -3.4021,   3.7256, -10.4963,   3.3643,  -7.3938,  -0.2712,  -6.4609,
               1.7712],
            [  0.6341,  -3.6157,  -2.0371,   0.5593,  -3.5572,  -1.2544,  -4.5710,
               0.2953],
            [ -4.5321,  -3.1652,  -3.5261,  -3.1917,  -1.8133,   2.4353,  -7.1012,
               5.3349],
            [  2.9482,  -1.7685,   2.3865,  -0.6076,  -1.0908,   1.2493,  -4.4291,
              -4.0636],
            [ -5.3166,  -1.6024,  -2.1523,  -2.0389,   1.7786,  -2.6142,   3.8338,
               1.3521],
            [ -2.9285,  -0.5505,  -3.5165,   1.8749, -11.0872,   3.4922,  -5.1005,
               0.5698]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.7111,  1.3202, -3.7581,  2.9014, -3.8684,  1.7552, -2.2676,  1.3765,
             -0.6629,  1.0833],
            [ 0.1249, -1.4925,  0.3447,  0.9288, -0.2840, -1.0007,  1.5264, -0.4742,
              0.2035, -0.1567],
            [ 0.8403, -0.7011,  3.6544, -2.1837,  1.9933, -1.4375,  0.3070, -4.9488,
              3.1857, -1.1689],
            [-0.1656,  2.1284, -5.4268,  7.8537, -4.6689,  3.2603, -0.7855, -5.9866,
              2.3186, -1.8570],
            [-0.2923,  1.8328, -5.1928,  5.0681,  0.9598,  2.7408,  3.9009, -0.2152,
              3.5208, -1.4908],
            [-0.1368, -2.2854, -0.2172, -0.8669, -3.2828,  0.0334,  1.4080, -3.1078,
              3.0400, -0.5021],
            [ 1.0930,  0.4105,  0.5553,  4.4734, -4.0774,  4.0919, -2.5328, -0.6081,
              0.2460, -1.1416],
            [-1.3594,  1.2120, -3.0474,  2.9325, -2.7972,  0.3767,  2.5856, -1.7992,
              3.5698,  1.1371],
            [ 0.5061, -0.1893,  0.0099,  0.6044, -0.0434, -0.5624, -1.0985, -1.1123,
             -0.3171,  0.1874],
            [-0.1470,  0.3189, -0.1542,  0.1264,  0.1347,  0.0543,  0.4511, -0.5487,
             -0.6854, -0.0976]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.184 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
