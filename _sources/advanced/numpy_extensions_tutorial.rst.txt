.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.0455,  5.7592,  3.8286,  0.4393,  5.6682],
            [ 2.7968, 14.8406,  7.9961,  3.0110,  3.7162],
            [ 8.8125,  6.0945,  3.3113, 11.1513,  5.2537],
            [ 5.8115,  3.4991, 11.4249, 12.6618,  3.4750],
            [ 3.9922,  9.4708,  6.5545,  2.0361,  2.1794],
            [ 5.8115,  6.2324,  7.2079,  5.7018,  3.4750],
            [ 8.8125,  0.5624,  2.6010, 14.6195,  5.2537],
            [ 2.7968, 15.5732,  6.5562,  8.8204,  3.7162]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2198e+00,  2.1195e+00, -4.4948e-02, -8.7057e-01, -7.7213e-01,
             -6.2347e-01,  8.3667e-01,  4.5494e-01],
            [ 6.2141e-01,  8.3472e-01,  3.3113e-01,  4.5983e-01, -1.0495e+00,
             -1.0706e+00, -1.1257e+00, -5.9930e-01],
            [-7.9730e-01, -4.2894e-04,  1.3072e+00, -1.3091e+00, -5.2643e-01,
              3.8349e-01,  5.1753e-01,  1.8246e+00],
            [-2.6188e-01,  2.6185e-01,  7.3139e-01, -3.0643e-01,  1.5511e+00,
              1.2592e+00,  1.5401e+00, -2.5504e-01],
            [ 5.9639e-01, -2.2974e+00,  4.9141e-01,  1.9110e+00, -7.9486e-01,
              8.8361e-01,  1.4519e+00, -1.2435e+00],
            [ 1.8092e-02,  4.8554e-01, -5.6376e-01,  1.7171e-01,  3.4876e-01,
              1.3271e+00,  3.3309e-01, -1.0326e+00],
            [ 4.2318e-02,  7.4516e-01, -7.0814e-01, -1.7348e+00,  4.9197e-01,
             -1.3106e+00,  1.6383e-01,  6.1896e-01],
            [ 1.3476e+00, -7.5883e-02,  1.0116e+00,  6.0651e-01,  4.5374e-01,
             -5.6522e-01, -9.0563e-01,  1.1359e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2539, -0.6016,  0.9534],
            [-0.6413,  1.4208, -0.1320],
            [-1.1301, -1.6467, -3.3793]], requires_grad=True), Parameter containing:
    tensor([[1.4541]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.3109, -4.2018, -4.2229, -2.3132,  4.6173,  6.0248,  0.0550,  1.5552],
            [ 3.3138, -3.7397, -3.1788, -4.9924,  1.4462,  2.7061, -3.3367, -5.6776],
            [ 3.2168,  0.6027,  0.0247, -4.7932, -4.1185, -5.6648,  5.4524,  6.8900],
            [-0.7219, -2.0428,  6.6330,  5.6928,  1.2751,  7.8956,  3.5391, -3.1311],
            [-1.0694,  2.3797,  7.1486, -1.9156, -1.1951,  0.9832, -2.8858, -2.8760],
            [-0.1717,  0.3573,  1.1142,  1.9904,  1.4851,  2.1475,  3.7867,  2.7882],
            [ 6.9376,  6.0581,  5.6170,  4.0333,  3.0425,  0.0652,  0.8149,  1.1037],
            [ 7.6121, -1.9622,  2.9995,  4.9887,  0.2360, -4.9401, -0.0103,  5.2747]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.6940e-01,  8.1358e-01, -1.5035e+00,  1.2549e-02, -1.9588e-01,
              2.6023e+00, -2.6794e+00, -1.3765e+00,  2.7527e+00, -9.5229e-01],
            [ 8.9341e-01, -2.4465e+00,  1.3339e-01, -1.3053e+00,  4.2101e+00,
             -2.4249e+00,  2.9433e-01,  3.0896e+00, -3.4467e+00, -2.8933e-01],
            [ 1.6688e+00,  1.6478e+00,  2.7869e+00,  2.8253e+00,  3.6293e-01,
              1.4419e+00,  4.1004e+00, -4.0965e+00, -5.5473e+00,  3.1702e+00],
            [ 2.5201e-01, -3.6458e+00,  1.9876e-01, -2.1578e+00, -6.0918e+00,
              2.5705e+00,  3.1688e+00,  1.2784e+01,  7.0914e+00,  3.1511e+00],
            [ 8.1951e-01, -4.9224e+00,  3.1604e+00, -9.8810e+00,  5.7939e+00,
             -3.8585e+00, -2.2433e+00, -1.6571e+00,  2.3921e+00, -1.7308e-01],
            [ 3.7816e-01, -3.1667e+00,  6.3869e-01, -4.4098e+00,  1.0946e+01,
              3.5981e+00,  5.8185e+00, -5.9158e+00, -5.9491e+00, -5.8379e+00],
            [-1.0551e-01, -7.8178e-01, -4.8211e+00, -7.1585e+00, -1.8163e+00,
             -5.7487e-01, -3.3719e+00, -1.8125e+00, -1.9863e+00,  2.1694e+00],
            [-2.2123e-01, -2.6382e+00,  1.1982e+00,  6.0291e-01, -2.3663e+00,
             -3.2861e+00, -2.4551e+00,  3.2726e+00, -4.8941e+00,  6.5914e-01],
            [-1.0815e-01,  2.2131e+00,  9.1900e-01, -3.3209e+00,  2.1171e+00,
              2.8720e+00,  3.0973e+00,  2.8157e-01, -1.5575e+00,  3.5323e+00],
            [-1.5551e+00, -2.5436e+00, -4.7961e+00, -1.4063e+00,  4.4565e-01,
             -1.0261e+00,  3.8047e+00,  1.4330e+00,  1.0718e+00,  8.0628e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.498 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
