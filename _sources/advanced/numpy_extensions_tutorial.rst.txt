.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.3501,  4.8893,  4.3754,  6.7963,  0.1594],
            [11.8113,  5.0895,  5.4490,  3.9526,  3.6225],
            [ 2.6746,  8.1317, 13.9054,  7.6299, 17.7709],
            [ 6.2614, 14.2377, 13.5514,  2.8063,  7.4051],
            [ 9.2231,  9.0457, 13.3665,  5.5945,  5.4019],
            [ 6.2614, 12.2846,  4.5738,  3.9186,  7.4051],
            [ 2.6746,  3.1011,  7.3864,  1.4221, 17.7709],
            [11.8113, 12.4916,  7.7031,  3.1208,  3.6225]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2728e+00,  2.1369e-01,  1.6882e+00, -9.2151e-01, -7.7278e-01,
             -2.9130e-01,  1.0915e+00,  8.3460e-01],
            [-1.3019e+00, -6.7881e-01, -9.2344e-01, -3.1668e-01,  2.6206e-03,
              8.6065e-01, -7.4255e-01,  3.2438e-02],
            [-2.6088e+00,  7.3776e-02,  8.3006e-01,  1.5147e+00,  2.1922e-01,
             -1.0550e+00, -3.2012e-01,  1.3979e+00],
            [ 1.2079e-01,  1.2159e+00,  2.0628e+00, -1.9166e+00, -5.8031e-01,
             -1.7069e-01,  5.9468e-01, -2.8126e+00],
            [-1.1659e+00, -1.2120e+00, -4.8768e-01,  6.9242e-01,  1.8263e+00,
              8.3503e-01, -3.0990e-01,  6.7249e-01],
            [ 8.2787e-01,  8.1772e-01,  6.1397e-02,  1.1031e+00,  1.6353e-01,
              3.0602e-01, -8.7690e-01,  1.8497e+00],
            [-6.9714e-01, -1.0743e-01, -2.1374e-01,  7.6790e-01,  1.3996e+00,
              1.7795e+00,  1.5014e+00,  8.3886e-01],
            [ 1.1946e+00,  3.3073e-01, -3.1040e-01, -1.3421e+00,  3.3614e-01,
              1.9320e-01,  7.1343e-01, -7.5089e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8589, -0.6705, -0.9726],
            [-1.2611, -1.0734,  0.0805],
            [ 1.1777, -0.8339, -1.3966]], requires_grad=True), Parameter containing:
    tensor([[-0.2636]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.8247,  1.6680, -3.1048, -3.1425,  0.7456,  1.3784,  1.0852, -4.1747],
            [-4.4900, -2.3473,  2.6695,  5.3450, -2.0311, -1.4507,  4.7067,  4.8936],
            [-2.8694, -3.6145, -0.7596, -2.1068, -4.4417,  1.5311,  3.7409,  0.3751],
            [-0.8836, -0.3907, -1.0311,  2.0245,  0.8526, -1.6519,  2.8812,  4.6743],
            [-5.2756,  0.0644,  1.8229,  2.0355, -0.2274, -1.1941,  2.7846,  1.1080],
            [ 3.5978,  0.8973, -2.9253, -5.6675,  0.6663,  0.7526, -1.0152,  1.9147],
            [-4.3976, -0.2870,  1.2825,  5.2111,  6.4029, -4.0148, -4.3242, -1.2905],
            [ 4.5254,  0.8026, -2.1833,  1.7835,  5.2522,  3.6379, -3.3850, -9.3899]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.3780,  1.9568,  1.8888, -0.5435, -2.7317, -0.9735,  0.7826,  0.0120,
             -0.0962, -0.0284],
            [ 2.8722,  0.4067, -4.7167, -2.4502,  0.1228, -1.7079, -1.4930,  1.4224,
              1.9599,  0.7328],
            [-3.7248,  0.7824,  3.6931, -1.8708, -5.2761, -0.0329,  4.9991,  2.4693,
             -0.4401, -0.5138],
            [ 2.5196,  1.4611, -3.5051,  2.0264,  1.2849, -4.8570, -1.3819, -0.7132,
             -0.2912,  0.5844],
            [-3.0891, -1.1413,  2.9099, -2.3818, -0.5745,  1.6669, -2.1801, -2.5014,
             -4.1688, -2.6776],
            [ 3.6346,  4.5788, -3.1688, -1.9684,  1.4558, -0.1700,  0.5708, -5.1709,
             -6.0263, -0.8912],
            [-5.1184, -0.3556,  6.1745,  1.8794,  2.5469,  3.8170,  0.1610,  1.1625,
             -3.0789, -3.4060],
            [ 4.7475,  2.2427, -7.1130, -2.3769,  4.4450,  1.9409,  0.2610,  0.2425,
              0.3153,  0.4389],
            [-4.0571,  1.2820,  4.5973, -3.6233, -3.2665,  1.7230, -0.4748,  1.8639,
              1.8362, -0.6237],
            [ 1.2341, -0.6397, -2.3728,  1.5912,  0.6538, -1.9926, -1.1363, -1.0940,
              1.0187,  1.3087]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.566 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
