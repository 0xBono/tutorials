.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.2580,  7.6399, 12.7849, 10.1126,  1.6143],
            [10.7063,  2.8169,  1.4097,  4.7214,  6.6008],
            [ 5.8302,  6.1990,  7.5179, 13.6757,  5.8629],
            [ 6.8494,  5.7320,  9.7872, 10.2800,  4.1720],
            [ 8.5725,  4.7277, 10.2450,  5.5718,  5.9986],
            [ 6.8494,  5.5184,  8.1337,  2.3573,  4.1720],
            [ 5.8302,  5.7769,  8.7752, 10.7476,  5.8629],
            [10.7063,  7.1310,  0.5211, 14.9046,  6.6008]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2126,  0.9949, -0.7921,  1.2316, -1.6443, -1.3642, -0.4760, -0.9935],
            [-1.4255, -1.2226, -0.1422, -0.4217,  0.3908, -1.9696,  0.2926,  0.7778],
            [-0.4143,  0.8796,  0.5897, -0.6979, -0.0651, -0.2994,  0.4291,  1.3872],
            [-0.2079, -1.9079, -0.7504, -0.4812,  0.5226, -0.6956, -0.3001,  0.8089],
            [ 0.8743,  0.6393, -0.4745,  1.2883, -0.2900,  0.1837,  1.1042, -0.7731],
            [ 1.2407, -0.8166,  0.5138, -0.2531, -0.0360, -0.0709,  0.0832,  1.1300],
            [-0.7163, -0.2943,  0.4358,  0.9265, -0.4568, -0.9167,  2.4132,  1.9187],
            [ 1.5774,  1.3101, -2.2664,  1.6344, -0.8283, -0.2294,  0.3531, -0.7674]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1301,  1.4683,  1.1176],
            [ 0.8534, -1.3672,  0.9916],
            [ 1.4029, -0.9319, -2.3447]], requires_grad=True), Parameter containing:
    tensor([[-1.4977]], requires_grad=True)]
    Output from the convolution:  tensor([[  1.9317,  -6.2735,  -2.5622,   6.0161,  -6.1778,  -0.3088,  -1.1946,
              -9.4602],
            [  0.9986,  -3.6256,  -2.4984,   3.0697,  -2.2329,  -5.1456,   2.4597,
              -4.7672],
            [  2.2105,   2.9875,  -2.8083,  -2.2853,  -0.6223,   2.4339,  -4.5716,
               0.3559],
            [  2.0529,   5.0353,  -2.9122,  -1.2871,  -6.7759,   8.4573,   0.9416,
              -1.8194],
            [ -9.0253,   2.9793,  -0.2612,   1.1653,   6.0159,   0.3107,  -1.6072,
              -1.0257],
            [ -2.6172,  -4.1759,  -0.4317,  -4.2546,  -3.8539,   0.5486,  -5.4984,
              -1.7145],
            [ -1.4378,   0.7362,  -4.9291,   1.2815,  -9.9351,  -5.7888, -11.0297,
               0.8032],
            [ -9.1951,   1.2979,  -4.6080,   2.6196,  -3.9720,  -0.8401,  -3.4263,
              -1.6373]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 8.1818e-01,  6.8747e-01, -3.4977e-02, -1.8196e+00, -2.4020e+00,
             -3.2414e+00, -2.4031e+00, -2.4089e+00, -1.5046e+00, -1.1484e+00],
            [ 1.8328e+00,  3.6145e-01,  1.8115e+00, -1.9092e+00,  6.0789e-01,
              1.2577e+00,  3.9295e+00,  3.1562e-01,  3.2304e+00,  4.5205e-02],
            [ 3.4892e+00, -8.8726e-01, -4.7934e-01,  1.3989e+00,  6.4834e+00,
              3.2702e+00,  7.1691e+00,  4.6863e+00,  1.3012e+00,  3.1280e+00],
            [ 2.7714e+00, -4.7731e+00, -3.5932e+00, -1.4558e+00,  7.2942e-01,
              3.4969e+00, -7.1041e-02,  1.1184e+00,  3.0712e+00, -9.2184e-01],
            [ 1.6929e+00, -2.7659e+00,  2.5566e+00,  4.4055e+00,  5.1381e+00,
             -7.8568e+00,  3.4435e+00, -5.3850e+00, -6.6045e+00, -2.8792e-03],
            [-5.3151e-01, -3.3197e+00,  8.8821e-01, -3.5633e+00,  7.3461e+00,
              8.1835e-01,  1.3418e+00,  1.3553e+00, -3.4958e+00, -5.6729e+00],
            [ 3.3994e-02,  2.5515e+00,  7.5255e+00, -8.2713e+00, -3.4964e+00,
              1.0868e+00, -6.9829e+00, -3.0468e-01,  3.3435e+00,  3.0238e+00],
            [-7.1072e-01, -3.9524e+00,  2.5012e-01,  4.0712e-01,  3.1278e+00,
              7.4804e+00, -4.3094e+00, -1.0059e+01, -3.4222e-02,  1.6393e+00],
            [ 3.3311e-01,  4.4843e-01, -7.7914e-01, -4.7153e+00,  7.3422e-01,
             -4.8026e-01,  4.4796e+00,  1.1331e+00, -2.6117e+00, -2.1954e-01],
            [-9.2771e-01, -1.0773e+00,  3.0174e+00,  2.8662e+00,  2.1645e+00,
             -3.4589e+00, -6.6630e+00,  3.1928e+00,  4.4088e+00,  4.9544e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.200 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
