.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.7767,  6.2135,  5.0423, 10.5969,  0.9213],
            [10.7594,  7.1377, 10.3577,  7.0403,  5.2323],
            [10.0740, 11.2788,  5.9953, 13.0441, 11.2938],
            [14.5484,  3.0811,  2.8050, 13.7831,  7.4615],
            [ 3.5174, 10.4063,  4.1121, 15.5696,  4.2524],
            [14.5484,  8.0420,  4.8384,  5.9792,  7.4615],
            [10.0740,  8.8123, 10.0371,  3.0948, 11.2938],
            [10.7594,  6.8812,  7.9069,  1.8853,  5.2323]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.0789,  1.0573,  0.7783,  0.8579,  0.9621, -1.3348,  1.5800,  1.1189],
            [ 0.3927, -0.2358,  0.3006,  2.0693, -0.8812,  1.3433, -0.0505,  0.2212],
            [-1.1353,  1.1122,  0.5189, -1.1174,  3.2282,  0.6225, -0.3451,  0.2207],
            [ 0.9569,  0.5882, -0.4536,  0.1035,  0.3902,  0.7774,  1.2182, -0.7713],
            [ 0.8629, -1.8216, -1.7018, -1.0731,  1.0916, -0.1193,  0.1695, -0.6834],
            [-0.1582,  0.3743,  0.5567,  0.1221,  0.8304,  0.3216, -1.0975,  1.0421],
            [-2.1114,  1.3513,  0.1103,  0.6795,  1.9056,  0.1971, -1.4677, -0.2877],
            [-0.1686, -0.0509, -0.5825, -2.2915, -1.6310, -1.7260, -0.1406, -0.7400]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.9415,  0.0382, -2.2830],
            [-0.6334,  0.6527,  0.4022],
            [ 0.6962, -0.6051, -1.7095]], requires_grad=True), Parameter containing:
    tensor([[-1.6839]], requires_grad=True)]
    Output from the convolution:  tensor([[ -1.4069,  -6.1219,  -4.0765,   6.6040,   4.4621,  -2.1558,  -6.7896,
              -2.6970],
            [  6.6484,   2.6473,  -6.4062,  -6.4640,  -1.4490,  10.0852,  -1.0683,
             -12.3618],
            [ -7.1664,  -3.0439,   6.6151,   2.1815,  -3.5321,  -2.9483, -11.1199,
              -0.4708],
            [ 10.6100,  -1.3082,  -4.5472,  -1.0064,  -8.0081,  -1.2879,   4.7391,
              -4.8049],
            [ -3.7732,   3.5676,   4.6594,   1.3325,  -7.6688,  -4.2288,  -1.3890,
              -0.1550],
            [  2.7338,  -4.7682,  -2.2385,   3.5579,  -6.3082,   1.9568,   6.8419,
              -3.1587],
            [ -0.6317,   3.2043,   0.9875,  -4.9814,  -2.9229,   0.0632,  -0.5436,
              -2.7902],
            [ -3.5110,  -9.5960,  -2.7124,   0.5203,   7.0950,   1.3163,  -0.1113,
               0.6478]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1363,  0.2729,  3.8797,  2.2071, -0.3806, -7.7659, -1.1530,  4.1659,
             -0.7853,  0.3698],
            [-2.5700, -1.0941, -0.3777,  3.5037, -0.4585, -1.5220,  1.4454, -3.1867,
             -0.7553,  3.1830],
            [ 0.9760, -4.9169,  0.0416, -0.9137, -1.6756, -4.1880,  0.6302,  1.5992,
             -2.4477,  3.6805],
            [-2.0083, -0.6446, -5.3202,  1.8424,  5.4424, -4.5867, -0.9248,  7.1899,
              0.0860, -0.5734],
            [-0.9748, -2.7931,  6.2375,  2.8477, -3.2436,  2.0131, -1.0273,  0.3638,
              1.8746,  1.9448],
            [ 2.7590, -2.4213, -6.4337,  5.4719, 10.4507, -0.4613, -0.4340, -2.3289,
             -1.2257,  2.0133],
            [-2.1702,  1.2691,  1.7367, -1.8428, -4.0081, -0.1158,  2.0046,  1.2851,
             -0.9253, -0.6523],
            [-2.6438,  3.6535, -1.4915, -2.1948,  1.4494, -6.4159,  1.3453,  3.5943,
             -1.5634,  1.4204],
            [ 0.4728, -1.5767,  1.5487,  0.0369,  0.8444,  1.1711, -0.2253, -0.3968,
              0.3779,  0.9555],
            [-0.8452,  1.9573,  0.3357, -2.4477,  1.0208, -0.5140,  3.0861,  2.8520,
             -1.2729, -0.7540]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.572 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
