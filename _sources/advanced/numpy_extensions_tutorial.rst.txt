.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.8350, 11.5074,  2.8476,  9.0757, 16.0503],
            [11.8756, 10.6002,  7.6986,  7.7418,  5.1046],
            [ 6.1670,  7.3362,  2.8317,  3.7643,  2.5388],
            [ 3.4499,  8.3309,  8.4438,  4.3011,  6.3352],
            [ 1.6196, 12.1615,  2.1192,  3.1750,  6.5102],
            [ 3.4499,  9.0400,  7.3614,  0.8027,  6.3352],
            [ 6.1670,  9.8385, 18.1818, 12.6172,  2.5388],
            [11.8756,  5.1563, 10.7671,  7.8292,  5.1046]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0162, -1.0763,  0.2679,  1.8294, -0.6165,  2.1985, -0.9137,  0.8262],
            [-0.3958,  1.0237,  1.1789,  0.7759,  1.5596,  1.3214, -0.0721, -0.4589],
            [-1.6678,  0.6647,  0.7561,  0.5542, -0.8071,  0.9719,  0.7636,  1.1134],
            [-0.0247,  0.2212,  0.1716,  0.1311, -0.3601, -0.6540, -1.9296,  0.9172],
            [-0.2265,  0.1561, -0.7177,  1.6820,  1.6635, -0.2804, -2.7099, -1.9060],
            [-0.1837,  1.6428, -0.1886, -0.8324, -0.1123, -0.1847, -0.8074, -0.6717],
            [-0.4174,  1.1935,  0.7615, -0.1878,  1.5651,  1.1732, -0.4938, -0.4088],
            [ 0.7938, -1.0069,  1.2416, -0.1516, -1.5583,  0.2964,  0.3559,  2.0691]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0041, -0.7750, -0.9645],
            [ 0.1673, -2.1290, -2.0496],
            [-1.7290, -0.8780,  1.6061]], requires_grad=True), Parameter containing:
    tensor([[-1.2041]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.0007e+00, -7.8899e+00, -3.6979e+00,  4.0359e-01, -5.1083e+00,
             -7.7845e-01, -1.0236e+00,  1.1135e+00],
            [-3.7190e+00, -3.9722e+00, -4.7477e+00, -6.4770e+00,  6.5334e-01,
             -2.3958e+00, -1.2733e+00,  5.0035e+00],
            [-5.1432e-01, -2.9591e+00,  1.9837e+00,  2.0208e-03, -1.2915e+00,
             -4.0700e+00, -2.1777e+00, -6.6781e+00],
            [-2.7443e+00, -4.0391e+00,  2.7105e+00,  2.9135e+00,  7.0550e-01,
             -6.3602e+00, -1.7016e+00,  2.2850e+00],
            [ 7.4244e-02,  4.0262e+00, -6.3456e+00,  1.3550e+00, -5.1303e+00,
             -3.8128e-01,  2.2042e+00, -8.2383e-01],
            [ 2.1305e-01, -4.9215e+00, -1.4813e+00, -4.8438e+00, -6.2192e+00,
             -5.5667e-01,  2.8340e+00,  5.5680e+00],
            [-7.0142e+00, -3.4354e+00, -3.4163e+00, -2.3891e+00, -1.4372e+00,
             -2.8320e+00, -1.0748e+00, -6.4096e+00],
            [-1.9371e+00, -5.6538e+00, -1.3183e+00, -3.9437e+00, -6.4386e+00,
             -4.4403e+00, -2.3311e+00, -4.5362e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.6153e+00,  1.1150e+00,  6.7708e-01, -1.8684e+00, -8.8055e-01,
             -6.9240e-01,  2.0518e-01, -1.0750e+00, -8.4449e-01, -5.9477e-01],
            [ 6.7283e-01,  3.3476e+00,  4.6597e+00, -1.9446e+00, -3.8608e+00,
             -5.6584e-01,  1.5371e+00,  3.4238e-01, -1.7350e+00, -9.5708e-01],
            [-5.7192e-01, -6.8489e-01, -7.5072e+00, -3.3322e+00,  3.6067e+00,
             -2.4288e+00, -1.6050e+00, -5.0546e-01,  9.9567e-01,  1.1885e+00],
            [ 3.0131e+00, -6.3473e+00, -8.9601e+00,  1.2676e+00, -3.1297e+00,
              2.0067e+00,  8.0482e-01, -1.9266e+00,  7.0293e-01, -1.2004e+00],
            [-4.8876e+00, -4.2256e+00,  8.9333e+00,  1.0946e+00,  5.8697e-03,
              5.0145e-02,  1.3962e-01,  3.9925e+00,  4.5240e-02,  6.0784e-01],
            [ 1.7512e+00,  2.0162e+00, -2.2821e+00,  4.2165e+00,  4.7369e+00,
             -3.7575e+00, -1.9435e+00, -6.6738e-01, -2.5388e+00, -1.0715e+00],
            [ 1.6043e+00, -6.9461e-01, -8.0653e-01,  5.0119e-01, -7.1270e-01,
              5.9799e+00, -2.4997e+00, -7.6848e+00,  1.7678e+00,  2.6258e+00],
            [ 1.4058e+00, -1.4451e+00, -1.9942e+00,  2.3010e-02,  1.7037e+00,
             -7.4158e+00, -3.7211e+00,  1.0735e+01,  7.2175e+00, -1.5047e+00],
            [ 4.9554e-01,  1.1125e+00, -3.2836e+00, -6.6132e-01, -4.0191e+00,
             -5.7635e+00,  5.7749e+00,  5.4564e+00,  2.7070e+00,  3.7339e+00],
            [ 1.3416e+00, -1.8799e+00, -2.9780e+00, -5.6260e-01, -1.9660e-01,
              3.4876e+00,  2.4826e+00,  3.2960e+00, -1.5371e+00, -2.1633e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.039 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
