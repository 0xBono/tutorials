.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.3988,  5.9136, 15.5668, 13.5833,  3.5083],
            [10.3436,  1.4297,  2.8641,  4.2305,  5.2627],
            [11.6705,  8.4598, 12.4608,  8.0763, 10.0943],
            [ 8.2792,  5.3592,  7.8376,  9.5770,  7.9038],
            [ 2.1141,  1.5930,  9.9269,  1.0724,  2.6569],
            [ 8.2792,  9.6825,  2.2675,  9.0369,  7.9038],
            [11.6705,  6.1425,  9.1530,  5.5641, 10.0943],
            [10.3436,  2.9997, 10.0079,  5.3059,  5.2627]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5376, -0.4009,  0.4001,  1.0983, -0.1076, -1.6260, -1.5058,  0.8010],
            [ 0.2327,  1.9923,  0.9348, -0.6911,  1.9801,  0.8551, -0.1794,  0.1918],
            [ 0.1333, -0.6489, -1.3863, -0.5070,  1.4215, -0.2826,  0.4524,  0.5742],
            [ 0.5301,  0.5871, -0.4551, -0.5535,  2.7170, -0.8937, -1.0926, -0.0319],
            [ 1.2229,  0.2697,  0.0299,  1.2901,  2.5726,  0.3306,  0.2410,  0.2587],
            [-0.6567,  1.8384,  0.0077, -0.2690,  0.6039,  1.2165, -0.6041,  0.6903],
            [-1.5491,  0.6299,  0.3132, -1.1788,  0.7239,  0.5333, -0.3903,  0.4666],
            [ 1.2628, -1.9321, -1.7344, -0.0977,  0.4425, -0.4691,  0.4302, -1.0964]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9633,  1.1144, -1.2915],
            [ 0.5698,  0.5564, -0.0057],
            [ 1.7114, -0.2411, -0.1888]], requires_grad=True), Parameter containing:
    tensor([[-0.5640]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.0891, -0.6216,  3.0788, -1.8159, -4.3882, -3.6969,  2.3512, -3.6387],
            [ 2.3809,  3.7106, -0.4190, -9.0044,  2.4394, -0.5766, -5.3738, -1.2204],
            [-4.7848,  3.5436, -1.5931, -0.9004,  2.6510,  0.6830, -4.1127, -6.4734],
            [ 0.5020, -0.1720, -9.0593,  0.0253,  4.7873,  0.8807, -4.7992, -2.9662],
            [-3.0716, -4.2108, -0.9560,  2.0486,  1.0356,  0.9073, -5.8017, -5.8595],
            [-0.9604, -1.3566, -0.0823, -2.3455,  3.7772, -2.8160, -3.6305, -2.6872],
            [-7.2621,  2.0290,  1.5827, -0.7427, -3.3369,  0.8293, -0.8031, -4.5580],
            [-0.2484,  1.5070, -0.4644, -0.1221, -5.7667, -0.4452,  2.7463,  1.2463]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1743,  1.1609,  2.9308, -0.8728, -2.9042,  0.7984,  2.4656, -3.0615,
              0.4399,  0.4495],
            [ 0.1943,  1.4443,  1.3415,  2.4877,  2.1746, -6.3765,  0.4319,  5.7943,
             -2.2773, -0.8687],
            [-0.8530,  1.5977,  2.7101,  0.4705, -1.8606,  4.7677, -0.9178, -1.7236,
              1.6951, -0.2496],
            [-0.5710, -1.1022,  0.2798,  6.0608, -1.1109, -5.2790,  5.7272,  0.7531,
             -2.0121,  0.9461],
            [-3.0959, -4.4828,  0.7966,  1.5333,  2.7488,  2.4229, -2.8528, -0.2431,
              1.4579, -0.9155],
            [-3.0244, -2.5816,  1.1987,  0.6152, -0.1207,  0.8470,  3.2003, -2.2022,
             -1.4462,  0.6948],
            [-2.7709, -4.3266, -2.6472,  3.0941,  1.4360, -0.6023, -1.2512,  1.3619,
              1.0875, -0.3286],
            [-2.1366,  0.3041, -1.1351, -1.5081,  0.0092,  3.2066,  1.0378, -3.0144,
              3.5366, -2.1464],
            [ 0.2519, -3.5654, -0.7346,  0.6731, -0.2600,  0.2201, -1.4140,  0.8201,
              1.0965, -0.0395],
            [-1.0306,  0.9016, -0.5369, -0.1629,  0.3368,  2.1697, -2.5066,  3.0122,
             -0.1758, -0.3253]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.229 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
