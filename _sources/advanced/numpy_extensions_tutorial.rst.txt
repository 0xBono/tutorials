.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.4516,  4.6145, 15.1986,  9.7650,  5.3060],
            [12.9153,  4.0136,  4.0111,  8.2555,  4.5168],
            [ 4.0658,  3.9207,  1.6693,  6.3064,  1.1918],
            [ 1.4470,  2.1343,  3.9230,  7.6885,  8.2141],
            [12.0297,  4.1734,  5.3341,  9.2863,  3.5135],
            [ 1.4470,  1.6849,  6.1917,  2.4869,  8.2141],
            [ 4.0658, 10.7392, 10.0671,  8.3430,  1.1918],
            [12.9153,  7.3905, 10.8474,  8.4361,  4.5168]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5018, -0.6835,  0.7896,  0.1011, -1.6356, -0.0362, -0.4085, -1.4634],
            [-0.7971, -0.5616,  0.1391,  0.0949, -0.5976, -0.8655, -0.2002, -0.5796],
            [ 0.6336, -0.6727,  1.3329,  0.3528, -0.5635,  0.7196,  1.0521, -1.1880],
            [ 0.8345, -1.4211, -1.0414,  0.6462, -1.3619,  0.6787,  0.0584,  0.4427],
            [ 1.6062,  1.2588,  1.3513, -1.0983, -0.5691,  0.8892, -0.1345, -0.0312],
            [-0.8110,  2.4068,  0.3290, -1.0821, -0.7087, -0.4226,  0.8391, -0.7708],
            [-1.7531, -0.1059,  1.3846, -0.6399, -1.0124,  0.7312,  0.0240,  0.0561],
            [-0.8710, -1.2370, -0.2314, -1.3292, -0.6745, -0.6690, -0.0776, -1.3993]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2201,  0.3804, -0.7129],
            [ 0.5259,  0.3285,  1.0863],
            [-0.7543,  0.3604, -0.3126]], requires_grad=True), Parameter containing:
    tensor([[1.1158]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.5721,  2.4899,  0.4872,  1.4770,  1.3420, -2.5480,  0.2614,  2.0328],
            [-0.1577, -3.9649, -0.4526,  0.4919,  1.9863,  1.3250,  0.8980, -0.6100],
            [ 1.7044,  3.7282,  0.8891,  1.0664,  2.1138,  3.2716,  2.2841,  2.3911],
            [ 3.1047,  0.2530,  1.2725, -0.0258,  1.7945,  1.3795,  0.2767,  0.1483],
            [-0.1308,  4.5217,  0.3026,  2.0194,  0.9320,  1.4950,  1.2789,  1.9928],
            [ 2.2052, -2.5871,  2.5793,  0.4419,  1.5617, -0.3439,  2.2906,  1.6843],
            [ 1.9931,  4.1242,  0.4396,  1.1573, -1.7360,  0.7222, -2.5558, -1.2864],
            [-0.6354, -0.2193,  2.7877,  1.5579,  3.6105,  3.7566,  2.6567,  3.4211]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-5.0979e-03,  1.0172e-01, -6.9872e-01,  9.8220e-01, -1.5294e+00,
             -2.0494e-01, -8.0909e-01,  2.7626e-01,  2.6665e-01,  2.6489e-01],
            [ 1.6725e-01, -7.1769e-01,  2.3032e+00, -4.7154e-01,  4.7422e+00,
              1.7599e-01,  1.9832e+00, -2.0875e+00,  5.8264e-01, -1.2106e+00],
            [-8.2190e-02,  1.8437e-01, -2.2600e+00,  1.7795e+00, -3.5220e+00,
              8.7660e-01, -1.7913e+00,  1.0253e+00, -1.1236e+00,  1.3187e+00],
            [-2.9399e-01, -1.4958e+00,  4.3233e-01, -2.1927e+00,  3.7131e+00,
             -1.8474e+00,  1.0368e+00, -7.7274e-01,  5.4688e-01, -2.9263e-01],
            [ 1.2615e+00, -1.6309e-01, -5.3509e-01,  6.3465e-04, -1.1136e+00,
              1.7037e-01,  1.4175e+00, -7.8511e-01,  1.5693e+00,  4.1267e-01],
            [-3.1827e-01, -1.3899e-01,  1.8313e+00, -3.5547e+00,  1.0820e+00,
             -2.0313e+00, -2.0322e+00, -1.8412e-01, -1.2045e+00, -6.5543e-01],
            [-1.8766e-01,  1.3966e+00,  5.8649e-02,  3.3164e+00,  7.2227e-01,
              1.3801e+00,  1.3230e+00, -2.1040e+00, -1.0300e+00,  1.0889e+00],
            [ 6.7900e-01, -2.0423e+00,  3.1182e+00, -3.6882e+00,  9.4602e-01,
              4.8869e-01, -2.3418e-01,  1.6463e+00, -8.3158e-01, -1.8258e+00],
            [-1.3627e+00,  7.1188e-01, -1.4267e+00,  1.2592e+00,  9.6768e-01,
             -1.9114e+00,  1.0900e+00, -1.4999e+00,  1.1576e-01,  1.0429e+00],
            [ 9.6413e-01, -9.6936e-01,  2.0289e-01, -1.0624e-01, -4.1908e-01,
              1.5240e+00, -8.9609e-01,  1.9756e-01,  1.7137e-01, -1.8229e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.160 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
