.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.5468, 11.6275,  3.7220,  6.3351,  7.6721],
            [ 8.2093,  2.7480, 11.2867,  5.5023,  6.2967],
            [13.3678,  9.0529,  4.9801,  3.0940, 11.7046],
            [ 3.4536,  8.2985,  6.4168,  5.7221, 11.0626],
            [10.6115,  6.3827,  7.9016,  6.1688,  8.2879],
            [ 3.4536,  2.3506,  1.6642,  5.0920, 11.0626],
            [13.3678,  7.6055, 12.3627, 15.2307, 11.7046],
            [ 8.2093,  6.7814,  5.2106,  4.0295,  6.2967]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8545, -0.8255,  1.9920,  0.0735, -0.0321,  0.7392,  0.1247, -0.1521],
            [-0.9211,  0.1629,  1.4426,  0.9090, -1.0642,  0.4380,  0.1094, -0.3348],
            [-0.3802,  0.0072, -1.5999,  0.0166,  1.5531, -0.3819, -0.3339, -1.7273],
            [ 0.6431,  0.8205,  1.5583, -1.0934,  2.1846,  0.6901,  0.0634,  1.9716],
            [-0.4850,  1.0802,  0.0026,  0.0041,  0.8648,  2.4241,  0.1470,  0.1176],
            [-0.8824, -1.5627,  0.2568,  1.3406,  0.3257,  0.6240,  0.6552, -0.1391],
            [ 0.3252, -1.6593,  0.2182, -0.7681,  1.2760, -1.9632,  0.6559, -1.4913],
            [ 0.1600, -0.5853, -0.1889, -0.6214, -0.4240,  0.7977,  0.7172,  1.5258]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1776, -0.9098, -1.6090],
            [-1.2039,  0.0505,  0.3444],
            [-1.2721,  1.1134, -0.1974]], requires_grad=True), Parameter containing:
    tensor([[-0.8918]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.2298, -0.5751,  0.8880,  1.1289, -7.6717, -6.3611,  2.8202,  3.1963],
            [-0.7124,  0.7550, -2.4848, -4.0177,  1.1542,  4.7850, -3.3845, -4.7097],
            [ 2.2571, -0.5413, -1.4502, -3.3304,  2.5980,  2.7296, -5.9597, -0.2820],
            [-4.4378, -2.5899, -1.6746, -1.4847, -0.4870, -4.7295,  1.5334,  0.4835],
            [-6.4535, -5.5193,  6.3859, -0.1382, -0.1469, -2.2715,  0.1163, -2.1115],
            [ 7.5780,  0.9938, -0.9434, -0.1055,  1.3504, -5.8093, -1.3338,  1.2143],
            [ 4.2386, -0.5482, -1.8712, -1.1054, -6.4568,  2.2870,  4.4385,  0.3068],
            [ 0.4591, -3.7162, -2.9583, -4.2277, -0.3723,  5.0739, -3.0565,  0.0488]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2359, -1.5738,  0.7197,  0.9537,  0.2791,  1.6947,  0.5885, -2.0610,
              1.9153,  3.0350],
            [-0.3289,  1.5721,  0.4048, -1.7159,  2.5611, -0.3193, -0.4949,  5.5206,
              0.8695, -0.6122],
            [-0.1167,  3.5030, -1.8288, -0.9153, -1.6690, -0.3947, -0.3125,  4.3978,
             -0.1339,  1.0536],
            [-0.4569, -0.7815, -2.0320,  3.1153, -3.1234,  2.8885,  1.2380,  3.4619,
             -1.8693, -2.7448],
            [-0.5609, -2.4983, -0.0513,  2.9760, -0.2981,  6.3306,  3.5826,  0.0195,
             -2.7660, -2.4261],
            [ 2.3491, -2.7039,  2.8513,  2.5266,  2.8745, -1.3670, -4.7025, -1.7327,
              0.8205, -2.1465],
            [-1.2767,  0.3294,  6.7027, -2.1696, -2.7884,  1.3163,  4.9698, -1.9771,
              2.2429,  0.9047],
            [ 0.1908,  2.9232,  0.3545, -1.5455,  0.2387,  4.3969, -0.1386,  0.6009,
              5.3729,  0.6052],
            [ 2.3675,  0.3879, -2.0764,  1.7151,  4.6361,  0.2558,  0.2287,  1.4119,
             -1.2243, -0.1371],
            [ 0.6735, -0.0156, -0.9428,  1.1476,  1.6242, -0.5647,  1.5919, -1.0316,
             -0.3724,  0.1313]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.083 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
