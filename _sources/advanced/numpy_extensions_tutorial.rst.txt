.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.1494,  2.9607,  6.8147,  6.8912,  5.6749],
            [ 2.5079,  8.2623, 19.2225,  1.6284,  6.4549],
            [ 1.2683,  3.8266, 10.4438,  7.8337,  0.7460],
            [ 3.6320,  8.3070,  3.5709,  6.5101, 19.9235],
            [18.5752,  9.4180,  7.6635, 12.6249,  0.4906],
            [ 3.6320,  7.9523,  3.4516,  7.2167, 19.9235],
            [ 1.2683,  8.9784,  3.9212,  4.5581,  0.7460],
            [ 2.5079, 10.3017,  8.7473,  6.6142,  6.4549]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.3167e-02, -1.3678e-01, -1.7029e-01, -2.1753e-01, -4.7384e-02,
             -8.8893e-01, -1.6251e+00, -8.9567e-01],
            [ 1.2319e+00, -6.4585e-01,  6.2745e-01,  1.6237e+00,  5.4710e-02,
             -2.7050e+00,  1.8817e+00, -2.5334e-02],
            [-2.1422e+00, -1.1546e+00, -1.4553e+00,  2.9630e-03, -8.8904e-01,
              8.4392e-01,  4.9496e-01,  1.1019e+00],
            [ 1.2584e+00, -4.2716e-01, -1.6479e-01,  1.0871e+00, -1.4311e+00,
             -5.9003e-01,  2.0982e+00,  1.9984e-01],
            [-1.1020e+00, -1.1156e+00, -1.1148e-01, -8.0093e-01,  2.6719e-01,
             -5.8449e-01,  9.4312e-01,  1.5649e+00],
            [-6.8805e-01,  1.9689e+00,  2.0106e-01,  9.1046e-01, -9.1480e-01,
             -6.0994e-01, -5.8775e-02,  6.4603e-01],
            [ 7.2732e-01, -1.4362e-01,  1.0201e+00, -1.6229e+00,  3.8518e-01,
              4.1616e-01, -4.4325e-01, -3.0960e+00],
            [ 1.0669e+00,  3.0062e-01, -4.7216e-01,  1.2577e-02,  5.7177e-01,
              7.2470e-01,  1.3539e-01, -1.5555e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1309,  0.1617, -0.2539],
            [ 0.8676,  0.2469, -0.7339],
            [ 0.6969,  0.9072, -1.4936]], requires_grad=True), Parameter containing:
    tensor([[0.7746]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.7490, -1.0991, -0.4082,  2.6432,  2.5643,  2.8506,  2.0616, -3.7148],
            [ 2.4885, -0.3847,  3.0866,  4.7294, -2.2892, -1.7424,  4.2913, -1.5494],
            [ 0.0158,  1.0958,  0.0546,  2.9636, -0.5138, -4.1893, -0.7682,  2.9287],
            [-5.4814,  3.1234,  6.1409, -2.1445,  0.0670, -1.4528,  0.3480,  1.8688],
            [-4.8137,  0.6249,  3.7159,  2.2454,  2.5325,  1.2977,  0.9891,  3.2956],
            [-2.3696, -1.4526,  7.0887,  3.9914, -2.4357,  2.4798,  2.2899, -1.5794],
            [ 3.1630,  1.1974,  2.8687,  3.2701, -0.6603,  2.9474,  2.9453, -1.6822],
            [ 0.7214,  3.2985,  1.8987,  2.0546, -1.3033, -0.8969,  5.6190, -1.4295]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-4.6525e-01, -3.4836e+00, -1.2208e+00,  4.5708e-03,  2.5338e+00,
              1.2707e+00, -6.7243e-01, -9.1231e-01, -4.7575e-02,  1.5805e-01],
            [ 1.3269e+00, -3.9347e+00, -1.2695e-01,  3.0786e+00,  1.0432e+00,
              2.7233e+00, -1.4816e+00, -1.5014e+00,  7.4395e-02,  4.5893e-01],
            [ 2.1834e+00, -2.4546e+00, -1.8720e+00,  4.8178e+00,  2.4194e+00,
              3.6123e+00, -2.6951e+00, -1.8067e+00,  1.1231e-01,  7.4732e-01],
            [ 1.5785e+00, -3.8536e-01, -2.6736e+00,  3.9456e+00, -3.7417e-01,
             -1.9020e+00, -4.6032e-01, -1.4728e+00,  8.6645e-01, -4.7969e-01],
            [-6.5537e-01,  2.1233e-01,  2.7553e-01,  2.3199e+00, -1.8890e-01,
              5.1181e-01, -4.5067e+00,  2.1617e+00,  1.3822e+00, -1.0802e+00],
            [-2.7902e+00, -3.8445e-01,  6.2110e-01,  1.1931e+00, -8.4361e-01,
             -2.3823e+00, -1.3079e+00,  3.3283e-01,  6.8402e-01,  2.4690e-01],
            [-7.5283e-01, -5.7638e-01,  1.0582e+00,  3.3296e-01,  1.0956e+00,
              2.5231e-01, -1.0710e+00,  2.3261e+00,  5.4340e-01, -5.0869e-01],
            [-6.1757e-01, -1.4041e+00,  1.5156e+00, -2.3235e+00,  2.0686e+00,
              3.1422e+00,  6.8320e-01,  2.1735e+00,  6.0898e-01, -5.7181e-01],
            [ 3.7405e-01,  1.8230e-01, -2.3359e+00, -1.6729e-01,  4.9298e+00,
              2.6705e+00, -1.9512e+00, -1.5839e+00,  4.9672e+00, -5.0887e+00],
            [-3.1662e-01, -7.2284e-01,  7.9072e-01,  7.2438e-01, -1.1767e+00,
              3.0190e+00,  1.8325e-01,  6.7526e-01,  4.3107e-02, -2.7726e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.255 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
