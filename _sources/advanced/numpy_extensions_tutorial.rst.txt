.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.2670,  2.8903,  9.7244,  4.6605,  7.8965],
            [ 9.2183,  8.4652,  5.1379,  7.3779,  4.9483],
            [ 4.5850,  4.8934, 12.7035,  3.4317,  0.6344],
            [ 7.6198,  4.6986, 10.8864, 11.0824,  5.1604],
            [ 7.5112, 15.5722,  4.2918, 11.7391,  0.0250],
            [ 7.6198,  4.0835,  2.4644,  5.8986,  5.1604],
            [ 4.5850, 16.3431,  7.6774,  1.9919,  0.6344],
            [ 9.2183,  9.1211,  2.3687,  2.8805,  4.9483]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3919,  0.4828,  0.3999, -0.4838, -0.7504, -1.1927,  0.7781,  1.1820],
            [-1.4550,  0.3460,  1.3630,  1.3759, -0.7630,  0.5283,  1.3880, -1.3683],
            [ 1.1943,  0.0589, -0.4146, -0.3508,  0.7602, -0.0069,  0.4894, -0.4646],
            [ 0.3296, -0.8162, -0.1972,  1.0776,  0.2255, -1.1309,  0.0858,  0.0636],
            [ 0.7646,  0.4164,  1.1023, -0.9252, -1.9234, -0.9264,  0.3281, -0.1527],
            [ 0.2732, -0.7701,  2.2185,  0.5926, -0.7866, -0.7348, -1.4687, -1.4918],
            [-1.4190, -0.6555, -1.5426, -0.7814,  0.3445, -1.4698, -0.4461,  0.6075],
            [ 0.1988, -1.6593,  0.0117,  0.9622,  0.3628,  2.2782,  1.2550, -0.1723]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.8205, -0.2917, -0.2122],
            [-0.9828,  0.9705,  0.1998],
            [ 0.8248,  0.6316, -0.1198]], requires_grad=True), Parameter containing:
    tensor([[-0.4625]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.9812,  0.5635, -1.4918, -0.6934,  0.9775,  2.6359,  0.5962,  1.2263],
            [ 1.4780,  0.0341,  0.7247,  1.5606, -0.0864, -3.4065, -0.6480, -0.7475],
            [-0.4471, -1.2917,  0.7045, -2.5581,  0.0975, -1.8396, -1.2465, -3.0969],
            [-2.7645, -0.6867, -0.1423,  1.8665, -0.2622,  0.8043, -0.0483,  1.7642],
            [-2.8635,  1.9552,  0.2796,  2.0839, -0.5769, -0.2513, -0.4217, -0.7232],
            [ 3.2212,  0.7069, -1.9148,  1.2626, -2.1703, -2.1202,  0.5128, -1.1015],
            [-1.7257, -2.7268, -1.3258, -0.7367, -4.1343, -3.3046, -3.0576,  0.4242],
            [-3.7767,  1.4609, -0.3532,  0.9356, -2.7001, -0.2205,  0.1723,  0.8700]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3096, -0.7582, -1.2297, -1.4185, -1.5695, -0.6284,  1.2519,  2.8105,
              1.2035,  0.5889],
            [-0.0739, -0.1823,  0.4780,  1.3473,  0.2917,  1.9067,  1.4977, -0.4555,
             -3.6841, -0.8794],
            [ 1.0802,  1.9986,  3.3020,  3.0818,  1.9651,  2.1026, -1.7108, -4.4646,
              0.1349,  0.5216],
            [ 0.0971, -0.0566, -0.8437, -2.0916,  0.7955, -2.4424,  1.5788,  1.8204,
              1.9059,  0.2037],
            [-0.7652, -0.8330,  0.0501, -1.7964, -2.2346, -2.6562,  0.2700, -1.5179,
             -1.6559, -0.5881],
            [-0.4947,  3.7240, -1.9071, -2.2339,  0.3713, -0.2296, -0.0055, -1.7591,
              0.8517,  0.3809],
            [ 0.8465,  1.7235, -2.3953,  0.0463,  0.9848,  0.6438, -0.7471, -2.3701,
             -0.5797, -0.6210],
            [ 0.9012, -1.7165,  0.0449,  0.4111,  2.8074, -2.4743, -2.0482,  0.9483,
              3.3740,  0.7062],
            [-1.7360, -0.4282, -0.6688,  1.5861, -0.5212, -0.9760,  4.6678,  4.1163,
             -0.1021, -0.5174],
            [ 0.6161,  0.3413, -0.5190, -1.4233, -1.0672,  1.0451,  0.3113, -1.5218,
             -0.6809,  0.1431]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.046 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
