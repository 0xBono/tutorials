.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.9544,  9.6347,  9.4749, 12.9581,  9.1610],
            [ 7.8246,  5.1626, 11.2004,  5.6056,  4.9572],
            [ 9.4649, 14.5799,  6.2199,  4.7591,  2.1194],
            [ 6.9262,  1.2395, 12.5761,  7.2525,  5.0752],
            [ 7.4852,  5.0192, 17.5304,  6.7520,  6.5258],
            [ 6.9262,  3.1757, 11.3617,  5.8243,  5.0752],
            [ 9.4649, 10.0667,  4.6190,  7.7083,  2.1194],
            [ 7.8246,  5.3820,  6.9886,  1.7410,  4.9572]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.3811,  0.3768,  0.4335,  1.5407,  1.1227, -1.8618, -1.1243,  0.2719],
            [ 0.9190,  0.6523,  1.7250, -0.1781,  0.5012, -0.3682, -0.3703, -0.2243],
            [ 1.2657, -0.6347, -2.0075,  0.5678,  1.7534, -2.3766, -0.3137,  0.5872],
            [-1.5037, -0.3819, -0.3434, -0.6264, -0.5375,  0.5202,  0.5996, -1.0228],
            [-0.7423,  0.1745,  0.6004,  1.1722,  1.0688, -2.9014,  0.2229, -0.4281],
            [-0.4813,  0.2314,  0.4560,  1.3068,  0.6308, -0.1078, -0.7578, -0.1468],
            [-1.6355, -1.3536, -0.4601, -0.2974, -1.5832, -1.1322,  1.3298, -0.2368],
            [-0.0365,  1.1481, -0.8367,  0.6744,  0.4419,  0.3583,  1.3852, -1.3610]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.6939,  0.5121,  1.8010],
            [ 0.3533,  1.0037,  1.5609],
            [ 1.0357, -0.1707, -1.5286]], requires_grad=True), Parameter containing:
    tensor([[0.4408]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2478,  0.4329,  3.2905, -3.3500,  3.0802,  5.4604,  4.4799,  0.3111],
            [ 1.2356,  1.1519, -3.9427, -1.6926, -0.4342, -5.1669,  0.2128,  6.6227],
            [-0.5261, -2.3372, -0.9768, -4.4509, -1.0084,  2.9571,  2.0011,  1.4883],
            [-0.6537, -4.6955, -4.3523,  1.1011,  3.0891, -3.6485,  4.8138, -1.6067],
            [-1.4091, -2.9083,  1.5338, -2.8848, -1.5987,  0.7670, -6.6801, -1.9648],
            [-1.6693,  2.5914,  0.9753, -4.3954,  1.6017, -3.1157, -5.1481, -1.7933],
            [-1.4966, -1.0678, -0.6740,  5.3755, -1.9391,  8.3990,  3.3807,  2.9436],
            [ 2.9616,  3.2794, -2.8371,  1.1410, -4.5638,  2.5254, -2.9916,  7.1484]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.3512e-01, -4.4246e+00, -2.4030e+00, -7.1044e+00, -2.6122e+00,
             -2.9641e+00, -1.4122e+00, -2.0907e-01, -2.9266e-01,  6.2075e-01],
            [ 6.0461e-01, -1.8383e+00, -1.5591e+00, -4.6996e+00,  1.4288e+00,
             -1.2516e+00,  2.0991e+00, -2.7933e+00,  6.8070e-01, -6.9826e-01],
            [-4.1897e-01, -3.2937e+00,  4.0751e-01,  2.8234e+00,  5.0929e+00,
              4.4862e+00,  1.6181e+00,  1.6674e+00, -2.2030e-03, -5.1667e-02],
            [ 3.3938e+00, -2.4433e+00,  3.4881e+00,  2.3841e+00,  7.7036e+00,
              3.8682e+00,  3.4414e+00,  4.9626e+00, -4.7505e-01,  4.6623e+00],
            [-6.7697e-01, -8.5468e-02,  2.0480e+00, -1.0229e-01,  3.5295e+00,
              6.1608e+00,  4.4633e+00,  2.7001e+00,  8.0481e-01,  8.6539e-01],
            [ 6.0407e-02, -4.9028e+00, -5.9269e+00,  1.9107e-01,  7.2636e-01,
              1.8092e+00, -7.6637e+00, -7.8615e-02, -3.4164e+00,  4.6108e-01],
            [ 3.3948e-01, -2.4120e+00, -1.2802e+00, -1.0982e+00, -1.9687e+00,
             -3.3295e+00, -2.1324e+00,  1.8208e+00,  2.6319e+00,  2.7084e+00],
            [-6.2222e+00, -2.5092e+00, -3.4020e+00, -2.6245e+00, -3.2365e+00,
             -5.6494e+00, -3.8043e+00, -2.1814e+00,  4.5143e+00, -3.8057e+00],
            [-3.5930e-01, -3.9819e+00, -6.6049e+00,  7.8123e-02, -2.1355e+00,
             -3.5965e+00,  1.0558e+00, -2.3427e+00, -4.7567e+00, -3.2268e+00],
            [-3.3396e+00,  3.0910e-01,  5.1688e+00, -1.4479e+00, -6.3716e-01,
              1.4950e+00,  8.2912e-01,  2.6155e-01,  7.1655e-01,  2.3530e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.557 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
