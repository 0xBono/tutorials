.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.8926,  7.8596,  1.9267,  6.2428,  6.2543],
            [ 8.8696,  4.5691,  2.6330,  8.2833,  9.5915],
            [10.2596,  6.2675, 11.4905,  9.2675,  3.9624],
            [ 2.3425,  7.2999,  7.7914,  8.1402,  3.5187],
            [ 1.4006, 10.2129,  5.0051, 11.8119,  1.3284],
            [ 2.3425, 10.9631, 10.2363,  8.7459,  3.5187],
            [10.2596,  5.9061,  5.4183,  7.3785,  3.9624],
            [ 8.8696,  9.2673, 13.1739,  5.1617,  9.5915]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1513, -0.2400, -1.3244,  1.6641,  1.1762, -0.1636, -0.6263,  0.5721],
            [ 0.7784,  1.3754, -0.1351, -1.0095, -0.3207, -1.1193,  1.1502,  1.6372],
            [ 0.5427, -0.9422, -0.2974,  0.5576,  0.6496, -0.0330,  1.2470, -0.1539],
            [ 0.7878, -0.9217, -0.1018, -2.8589, -1.0495,  1.1208, -1.8391,  0.3751],
            [ 0.4259,  1.0723, -0.9167, -0.6167, -0.2470, -0.4858, -1.3626, -1.6993],
            [-1.5029, -0.1501, -0.0211,  0.3357,  0.9944, -0.3298,  0.9918,  0.8764],
            [-0.9721,  0.4678,  0.2442, -0.1717, -0.8260,  2.1629,  0.6693,  0.0320],
            [-1.5354,  0.0936, -0.7648, -0.0252,  0.4108, -0.3940,  0.3522,  1.6521]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6301, -0.9100, -1.9345],
            [ 1.0251,  2.1448, -1.1486],
            [ 2.7490,  0.7164,  0.3444]], requires_grad=True), Parameter containing:
    tensor([[-0.9322]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.3179e+00,  4.4209e+00,  5.5125e-01,  2.1224e+00,  1.4543e-01,
             -6.0144e+00, -3.4125e+00,  2.2905e+00],
            [ 2.8872e+00, -7.9831e+00, -2.7480e+00,  1.4592e+00,  2.6919e+00,
              9.2163e-02, -3.3527e+00,  1.6882e+00],
            [-7.3503e-01,  4.3699e+00, -1.6990e+00, -3.3151e+00,  6.2128e+00,
              5.9943e-01, -4.5371e+00, -5.8428e+00],
            [ 2.8870e+00, -1.4575e-01,  3.8101e+00, -4.2825e+00, -3.1777e+00,
              1.1664e+00, -2.8448e+00, -4.0930e+00],
            [-3.8011e+00,  2.8148e+00,  7.3856e-01,  3.1244e+00,  1.6059e+00,
              1.3704e+00, -6.6316e+00,  3.1725e+00],
            [ 3.3761e-01, -6.9735e+00,  6.0574e+00,  7.1269e+00,  2.1281e+00,
             -3.4864e+00, -2.8030e+00, -1.2205e+00],
            [ 1.4945e+00, -1.2752e+01, -5.9203e+00,  2.5417e+00,  7.1328e+00,
             -2.3135e+00, -8.9685e+00, -8.4563e-01],
            [ 6.2719e-01, -2.2865e+00,  2.1957e-03, -1.6691e+00,  5.7097e+00,
              1.8175e+00, -1.2744e+00, -3.7728e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.4018, -0.6864, -0.3353, -1.1073, -2.2281,  1.1393,  2.7255,  1.3005,
             -1.4352, -0.1684],
            [ 0.7498,  0.4249,  0.0572,  5.6663, -2.9714, -3.0932,  2.3480,  6.1944,
              0.8239, -1.7022],
            [ 2.0398,  0.3119, -2.2291, -4.7839,  1.0549, -9.6653, -3.4954,  0.0609,
              4.6731,  1.1691],
            [ 1.7468, -1.5203, -3.0379, -3.5505, -4.2091,  3.3046, -5.0490, -1.9114,
             -0.1749,  4.7498],
            [ 1.9044, 10.3215,  4.2601, -1.5635, -2.6785,  1.8974,  2.1411, -8.6143,
             -1.7284,  8.0732],
            [ 4.0743,  1.0556,  6.2707, -1.2713, -9.3069,  4.8201,  1.5944, -6.6967,
             -9.4832,  2.0417],
            [-1.6374, -1.4953,  4.8348, -3.8205, -6.9321, -0.3445,  2.8245, -5.2334,
              1.3704, -0.2492],
            [ 1.2407,  1.4262,  2.1452, -1.8522, -6.3414, -1.9177, -2.5168, -2.8812,
             -0.9394,  4.7923],
            [ 2.9235,  2.3320,  3.9847,  4.1605, -5.2978, -2.7449, -0.4744, -3.6055,
             -6.1647,  1.8297],
            [ 2.3003,  0.0906,  4.7704, -1.3782, -0.8025,  1.3017,  3.4940, -4.0499,
             -0.9357, -0.6373]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.602 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
