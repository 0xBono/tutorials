.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.1100, 11.9124,  2.3651,  6.3837,  1.3255],
            [ 9.8551,  6.9151,  4.0328,  2.2180, 10.9594],
            [ 1.1709,  7.3684, 15.9856,  2.1630,  8.9944],
            [ 8.3747,  5.4973, 10.3623,  5.4137, 11.0011],
            [11.9526,  9.1079,  5.6564, 11.8364,  8.6656],
            [ 8.3747,  6.6353, 11.1069,  5.1526, 11.0011],
            [ 1.1709,  4.5765, 11.9158,  5.5328,  8.9944],
            [ 9.8551, 12.0930,  8.6174,  3.4080, 10.9594]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9240, -0.3192, -0.4795, -1.4512,  0.2763, -0.1254,  0.7310,  0.3479],
            [-0.8674, -1.1569, -0.7669,  0.8898, -0.0454, -2.1510,  0.0214,  0.8150],
            [-0.5547, -0.1181,  0.0512, -0.4096,  0.0983,  1.0261,  1.2302,  1.6344],
            [-1.6262,  0.2720, -0.0793,  0.9926, -0.2031,  0.0507, -0.4359, -1.1561],
            [ 0.0193,  0.6265,  0.8692,  1.3845,  1.1647,  1.0519,  0.2428,  0.0560],
            [ 0.4909,  0.6566, -0.5475,  1.2614,  0.4591, -0.1374, -0.4488, -0.2194],
            [-1.9373, -1.0579, -0.7044,  0.9381,  1.2055,  0.8689,  0.2292,  2.0606],
            [ 1.5936,  0.2548, -0.2591, -2.4097,  0.4136,  1.2782,  2.1754, -3.0363]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7551,  0.1602,  0.3470],
            [-1.0125, -2.0671, -0.9210],
            [-1.2101,  0.1572, -0.8320]], requires_grad=True), Parameter containing:
    tensor([[0.1219]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.4229, -2.5057,  5.9118, -2.8735,  2.8174,  4.9824,  2.1121, -0.8383],
            [-3.0460, -3.1117, -2.4981,  1.7173, -1.2898, -4.0187,  5.2296,  0.9962],
            [-4.9007, -2.4518, -3.9359, -0.6576,  4.6552,  2.9922,  1.7325,  1.1104],
            [ 2.7130,  2.5051,  0.1307,  0.4506,  1.0306,  7.4086, -0.5539, -0.4873],
            [-2.6607, -0.6705, -3.3001,  1.0069, -1.9321,  0.5552, -0.0889,  1.2544],
            [ 0.3866, -0.2248, -0.6064, -2.7762, -2.1065,  1.0446, -3.6545, -3.8446],
            [ 3.4006,  0.2401,  1.3581,  0.5696,  1.9464,  0.2552,  0.0221,  0.5212],
            [ 0.9052, -1.3566,  0.3092, -3.5979, -0.0805,  3.1400,  4.0990,  0.3605]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.3035,  1.4772, -0.9780, -1.2115,  0.3518, -0.8691,  1.2074,  0.6582,
             -0.6050, -0.1999],
            [ 2.2926,  5.1565,  5.4609,  1.8029, -0.3734, -0.5942, -2.2151,  3.1953,
              2.9604,  0.2050],
            [ 2.2199,  4.0696, -1.5803, -2.2023, -0.8977, -1.4976,  1.9093, -2.1797,
              1.3394,  1.0647],
            [ 0.3630, -2.1562,  0.8603, -1.7454, -0.6037,  1.7264, -0.7345,  3.2327,
              0.5170,  1.7303],
            [-0.8584,  2.3111, -3.0615,  2.7483,  0.9846,  3.7908,  3.1517,  3.6448,
             -0.8621, -0.5380],
            [ 0.0751, -1.7965,  0.2591, -4.4357,  0.9899, -2.5834, -0.6262,  1.1359,
              3.0859,  0.7900],
            [-0.4209, -0.3456, -6.5734, -1.7369, -0.8639,  2.7482,  1.0140,  5.2755,
              1.6193,  2.4545],
            [ 0.3463, -2.1224,  1.1999, -0.7493, -1.3119, -4.4752,  1.7685,  3.7244,
              3.1302,  1.8307],
            [ 0.4643,  0.1092, -0.8633, -2.0676,  0.5581, -2.4601,  4.4315,  3.3354,
              3.2096,  0.7496],
            [ 0.4528, -1.2832,  0.9032, -1.1140,  0.8611, -0.2317,  2.6555, -0.2477,
              1.5638,  0.0402]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.529 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
