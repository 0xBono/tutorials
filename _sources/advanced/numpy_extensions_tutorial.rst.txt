.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.6777,  5.5268,  0.9207,  5.2438, 13.9087],
            [ 1.0665, 19.6005,  5.3676,  2.6342,  3.6879],
            [ 9.7774, 14.6869,  5.2539,  9.1108, 10.5846],
            [ 8.5893,  5.0794,  1.5533,  7.0707, 14.0363],
            [ 1.6891,  8.2139,  6.8969,  5.5068,  0.2969],
            [ 8.5893,  6.1675,  7.1332,  6.6201, 14.0363],
            [ 9.7774,  6.5390, 11.8117, 12.8199, 10.5846],
            [ 1.0665,  5.6516,  6.6397,  5.1397,  3.6879]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5628, -0.8099, -0.5297, -0.1730,  2.1855, -0.3833,  0.6872, -1.1108],
            [-0.7384,  1.0757,  1.2088, -0.8574,  0.5685,  0.4041,  0.7389, -0.3291],
            [ 0.3222, -0.4933,  0.7749, -0.0149, -0.2950,  0.9746,  0.0615, -0.6736],
            [ 0.4739, -0.1560,  1.5112, -0.3155, -1.3099, -1.2127, -1.5227, -1.8749],
            [ 1.2026,  2.0887, -0.3501, -0.2248,  0.6123, -2.7938, -0.0366,  2.3428],
            [ 1.4864, -0.3038,  0.3385, -1.9135,  0.7466, -0.4664,  1.7957,  0.0823],
            [-0.6597, -1.0988, -0.4069, -1.3786, -0.3664,  0.0254,  0.2298,  0.9120],
            [-0.6002, -0.2660,  0.5211,  1.7243, -0.0845,  0.1159, -1.8355,  0.4890]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3540,  0.9039, -0.7804],
            [ 1.0328, -0.5723,  0.6203],
            [-0.1919,  1.6341, -0.0641]], requires_grad=True), Parameter containing:
    tensor([[0.7189]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.5864, -0.4911,  3.5400, -1.0734,  3.3287, -0.6759,  3.2357, -0.1004],
            [-1.3390,  2.6118,  0.7663,  3.3777,  1.5379,  1.1921, -0.7197,  4.1732],
            [ 0.0821, -0.2726,  3.8962,  3.3130,  2.6129,  0.5700,  1.3263,  0.5800],
            [-3.3647,  1.2567,  0.2660, -0.2844,  0.6261,  4.5228,  0.2290,  1.2789],
            [ 0.8492,  1.8484,  0.2823,  0.3690,  3.5044, -0.3354, -1.4033,  0.0838],
            [-2.1381, -0.9214,  0.7033, -0.6138, -2.0888, -0.8579,  1.4299,  1.2173],
            [ 0.8636, -1.0579,  2.0715,  1.5641, -3.1290,  0.0120, -0.9162, -5.6329],
            [-4.6965,  2.0200,  3.1541, -0.1695,  1.9995, -3.7141, -2.8180, -0.5410]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.5995e-01, -1.0792e+00, -3.5623e-01,  1.5748e+00,  6.0173e-01,
              5.3253e-02,  1.5469e+00, -8.6222e-01, -1.6802e-01, -1.4966e-01],
            [-8.3353e-01, -4.8638e-01,  1.8322e+00, -1.7015e+00, -5.0446e-02,
              2.1363e+00,  3.5039e-01,  1.3093e+00, -2.5524e-02, -5.1989e-02],
            [ 5.8568e-02,  6.0210e-01, -4.5141e+00,  3.1263e+00,  2.4692e+00,
             -4.5058e-01,  2.2952e-01,  9.9185e-01,  1.6810e+00, -2.3632e-01],
            [ 3.8886e-01, -1.9243e+00,  3.9426e+00, -1.4727e-01, -6.2144e-01,
             -6.4043e-01,  1.5178e-01,  1.7677e+00, -9.5620e-01,  2.4763e-01],
            [ 2.4732e-01,  2.6100e+00, -1.5183e+00, -1.6773e+00,  2.7251e+00,
              2.3422e+00, -5.3250e-01, -4.0261e+00,  3.9271e+00, -1.3412e+00],
            [ 1.2057e+00, -4.8129e-01,  6.3827e-01, -9.9853e-01, -8.9629e-01,
              1.6943e+00, -1.4110e+00,  4.7845e+00, -2.9393e+00,  1.1745e+00],
            [-5.0266e-01,  2.4819e+00, -1.3616e+00,  1.5211e+00, -2.9908e+00,
              1.2203e+00,  2.7937e+00, -2.4332e+00,  3.0874e+00, -4.9051e-01],
            [ 9.6201e-01, -2.6051e+00,  2.5520e+00, -3.3648e+00, -3.6771e-01,
             -2.0772e+00,  2.0239e+00,  2.3877e+00, -9.1762e-02,  2.8136e-01],
            [-3.9055e-01,  2.8875e+00, -3.5029e+00,  1.4252e+00, -5.9448e-01,
              1.7938e-01,  5.1667e-01,  1.1398e+00,  7.3671e-01, -5.8188e-02],
            [ 4.0414e-02, -5.3676e-01,  1.7438e+00, -8.2014e-01, -7.2368e-03,
             -5.8065e-01, -1.1453e+00,  5.2169e-01, -1.0952e-01,  3.5776e-03]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.216 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
