.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.0335,  4.1742, 11.7389,  3.6805,  8.6251],
            [ 6.8405,  6.4224,  1.7258,  6.8059,  3.7094],
            [ 0.7480, 10.4188,  6.2636,  3.9136,  7.9232],
            [17.7148,  9.5940,  1.9726,  5.7009,  7.1006],
            [ 8.9194,  7.5653,  3.5827,  4.4983,  4.6541],
            [17.7148,  2.4135,  7.1579, 14.4517,  7.1006],
            [ 0.7480,  8.5472,  3.0421,  2.4295,  7.9232],
            [ 6.8405,  7.2594, 15.1852,  3.7833,  3.7094]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 8.5776e-01, -8.0894e-02, -6.8473e-02,  1.6912e-01,  7.7324e-01,
             -1.1322e-02, -1.8073e+00, -4.0029e-01],
            [ 5.8116e-01, -4.3510e-01,  2.3243e-01, -2.8207e-02,  7.2082e-01,
             -4.6889e-02, -3.9755e-01, -1.6481e-01],
            [ 2.5161e+00,  3.1809e+00,  1.9171e-01, -3.5259e-02,  1.2573e+00,
             -9.8535e-01,  1.6645e-01,  3.4616e-01],
            [-1.1867e+00,  1.0498e+00, -1.1099e+00, -2.3125e+00, -5.5887e-01,
              8.8337e-01, -1.0139e+00, -2.0213e-02],
            [ 9.6979e-01,  7.1276e-01,  6.2168e-01,  1.4168e+00,  1.6128e+00,
             -2.5994e-02,  7.3807e-01, -1.9883e+00],
            [-4.7439e-01, -3.2601e-01,  9.7049e-02, -5.6138e-01,  6.2568e-01,
             -8.4236e-01,  5.9794e-01, -5.2286e-01],
            [-2.2820e-01, -1.8019e+00, -1.9326e-03, -9.5443e-01, -9.6495e-01,
             -9.8332e-02, -7.6075e-02,  4.7468e-01],
            [ 9.7195e-01,  2.4663e-01, -7.2155e-01,  8.3164e-01,  1.0271e+00,
             -1.2244e-01,  3.7993e-01,  1.5701e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4721, -0.5840, -1.7372],
            [-1.1802, -0.2230, -0.5603],
            [ 0.9368, -1.0963,  1.6727]], requires_grad=True), Parameter containing:
    tensor([[0.1976]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.7845,  0.4126,  0.8277,  2.6733,  0.0102, -0.4953, -1.0841, -0.7099],
            [ 4.9090,  2.3643,  2.4982,  0.4340, -1.8763, -3.5976, -3.1474,  1.0967],
            [ 0.4942, -0.2657,  0.0856, -1.4472, -3.5926,  0.5268, -2.6716, -0.5413],
            [-0.0845,  0.1380, -3.4820, -4.3610,  0.9834, -2.6116, -2.5309, -1.7749],
            [-0.3719, -0.4084, -2.1940, -1.9250,  4.1829, -0.1786,  3.2434, -3.4279],
            [ 0.8271, -5.5973, -1.3453,  1.0872,  2.2771,  4.6087,  0.4845, -3.6403],
            [ 3.8015,  0.4472,  1.3260,  1.0731, -5.5365, -2.3816, -8.8575, -1.5661],
            [-2.1094, -1.1554, -4.0144, -3.3728, -3.6177,  0.9747, -1.3092,  1.0443]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.5934,   1.1493,   0.3575,  -2.9792,  -3.0538,  -2.2362,  -3.1789,
               0.3481,  -4.4338,  -1.5285],
            [ -0.5606,  -1.9101,  -2.9561,  -2.9266,  -2.2573,   2.0864,  -1.8630,
              -3.0752,   0.8485,  -2.9465],
            [  2.6032,  -1.0169,   2.4209,   2.4581,  -4.1407,   0.7461,   4.6891,
             -10.4262,   3.4025,  -1.1586],
            [  1.9464,  -1.4019,  -4.1734,   0.4485,   1.1493,  -4.5089,  -2.7804,
              -1.2548,  -5.4254,  -0.0525],
            [ -4.0289,   3.0273,  -6.7575,  -0.1548,   1.1670,  -2.8635,  -0.5044,
               1.1391,  -1.7558,   0.3446],
            [  1.7232,   3.9131,   2.7744,   2.7392,   2.8329,  -2.8053,  -2.9276,
               0.0424,  -1.7962,   1.5262],
            [  2.1077,   2.1350,   3.4022,   1.8518,  -2.7954,   3.7812,  -2.1504,
               5.2792,   1.2704,   3.8101],
            [  0.0247,   0.2720,   2.8958,  -2.4115,   1.1606,   0.3573,  -0.2142,
               4.4151,   0.4366,  -1.3264],
            [ -1.3812,   1.2983,   1.0436,  -3.0797,   2.8571,  -3.2343,   1.5947,
              -3.4103,  -0.0530,  -3.6034],
            [  0.3929,  -1.0405,   0.0441,   1.6401,  -3.0317,   0.0458,   2.8432,
              -1.2278,  -0.8848,   2.1657]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.223 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
