.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.5095,  3.1604,  7.1926, 16.6685,  8.8135],
            [ 6.2539,  6.8889,  6.5393,  5.4200,  6.0445],
            [ 8.0785,  3.0652,  7.9539, 12.0719, 11.8213],
            [ 4.1780,  3.8574,  2.8317,  4.8791,  7.8432],
            [ 1.5358,  7.0855,  3.4425,  5.2983, 11.0622],
            [ 4.1780,  8.7682,  3.4525, 18.9573,  7.8432],
            [ 8.0785,  9.7727,  4.5391,  6.7826, 11.8213],
            [ 6.2539,  3.1628,  9.0409,  8.2979,  6.0445]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.2116, -1.4804,  2.0259,  0.0759, -0.2482,  1.7422, -0.7163,  0.5052],
            [-1.1739,  0.4962,  0.3584, -0.5167,  1.1909,  0.4815,  0.4772,  1.0794],
            [-0.7024, -1.0448,  0.2842, -0.5399,  1.1342,  0.9307,  0.1876, -0.6295],
            [ 0.9335,  0.9258, -1.8284,  1.0538,  0.1312, -0.0647, -0.2315,  1.7510],
            [ 0.3332,  0.2402,  1.4825, -0.4804,  1.6992, -0.7125, -1.9645,  1.6057],
            [ 0.1555, -1.8040, -0.1996, -0.3359,  0.5447,  0.3608, -1.0278,  0.3091],
            [-0.7037,  1.8356, -0.6783, -0.6071, -0.7114,  0.1187, -0.5601,  0.3895],
            [-0.4851,  0.3803, -0.0825, -0.6140, -0.8008,  1.6348, -1.1874,  1.5749]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2934, -1.2627, -0.8096],
            [-0.3730, -0.4410, -1.5380],
            [-1.2175,  0.2050, -0.7175]], requires_grad=True), Parameter containing:
    tensor([[0.1449]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.0362, -1.3903,  6.3700,  0.5155,  2.1294, -3.9318, -0.1554, -1.2908],
            [-0.9300,  2.4916,  0.7332,  3.0378,  1.2208, -4.3124,  0.9370,  0.2186],
            [ 0.9440, -0.0319,  1.3244, -4.2348,  0.9378, -1.9686, -1.9406,  3.6571],
            [ 4.2988, -1.2911,  1.1076, -3.5328, -3.8548,  2.1007,  1.0036,  2.2956],
            [ 3.8216,  0.2898, -2.1990,  1.6895, -6.1652,  0.0205,  2.8583,  4.7654],
            [ 1.5473,  0.9009, -0.7041, -0.0786,  1.2238,  1.4860,  3.7683,  3.2667],
            [-2.5105,  3.1173,  0.9269, -1.4003,  0.9856, -0.8600,  1.1286,  1.7484],
            [-2.5296, -0.1132,  3.5421,  3.3979, -1.2361, -0.1082, -4.4953, -4.7858]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1945, -0.7513, -0.9372, -0.1483, -0.1045,  1.9093,  0.7627,  0.0139,
              0.1751,  0.0271],
            [-0.2229, -0.5668, -0.9466, -0.4121,  3.4301, -2.5159,  0.2245,  1.4508,
             -0.0818, -0.5255],
            [-0.7021, -0.3460, -2.5394,  0.2677,  0.4477,  0.6192, -4.9168,  0.3788,
              2.2995, -0.4182],
            [-0.3565,  0.2784, -2.8933, -0.5421, -2.7489, -1.1791, -2.2478, -2.7720,
              2.5562,  1.4989],
            [-0.8463, -0.3764,  1.9559, -4.4082,  0.8561, -1.9517, -0.0159,  0.9398,
             -0.8498,  1.7113],
            [ 0.5646,  0.0689,  4.3726, -0.7638, -0.2113,  0.9081, -0.7986,  0.8452,
             -3.4993, -0.8666],
            [ 1.7264,  1.9019,  0.1343,  0.3692,  1.0800,  2.2490, -1.2507, -0.3326,
             -0.4383, -1.0699],
            [ 1.7473, -1.3617, -0.2028, -1.6705,  0.4911,  0.7478, -0.3379,  1.4102,
              1.5524,  1.0747],
            [ 0.5441, -3.0279, -0.5282, -2.2595,  1.7026,  0.6423,  1.4764,  3.0648,
              1.3412,  0.9366],
            [-1.3402, -0.6423, -0.2555, -0.0857, -0.3178,  1.4617,  0.3637,  0.5617,
              0.4747,  0.0325]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.249 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
