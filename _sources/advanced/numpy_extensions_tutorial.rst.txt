.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.5035,  4.3195,  7.5091,  4.9610, 13.7381],
            [ 8.2259,  3.7439,  6.0304,  3.0924,  4.1861],
            [ 8.4559,  4.4023,  6.0735,  7.9843,  4.5724],
            [10.4399,  8.2480,  3.1917,  6.3006,  4.4060],
            [ 3.6701,  5.7879,  6.7849,  2.4256,  3.0584],
            [10.4399, 10.6261, 10.9052,  4.2309,  4.4060],
            [ 8.4559,  5.8287,  7.7050, 10.9958,  4.5724],
            [ 8.2259,  8.3726,  7.5702,  6.5990,  4.1861]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.0082, -1.0663, -0.7274, -0.3796,  0.8340,  0.7226, -2.1099, -1.1427],
            [-0.7316,  0.0967, -0.0354, -0.9440, -0.7135,  0.3133,  0.1810, -1.6483],
            [-0.0322,  0.6694, -0.3614,  1.6413,  0.4488, -0.5278,  0.2432,  1.6548],
            [ 0.5728, -0.1201, -1.0360,  0.0796,  0.6443,  0.2085, -0.7945,  0.5785],
            [ 1.8206, -0.0372,  0.6307,  0.9621, -1.0635, -0.0948, -0.3279,  1.0029],
            [-1.1552,  1.7077, -0.0522, -0.1687, -0.0082, -0.6007, -1.0814,  0.1570],
            [-1.2435,  1.4300, -0.9045,  0.1810,  1.0629,  0.2163, -0.9193, -0.4913],
            [ 0.7505,  0.7113,  0.2257, -0.7964, -0.3322,  0.2836, -0.3973,  1.5186]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1537, -0.9358, -2.2185],
            [ 0.4594, -0.1124, -0.2785],
            [ 0.1622,  1.5993,  0.5501]], requires_grad=True), Parameter containing:
    tensor([[0.8538]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.8626,  4.0367,  0.3688,  5.4651,  0.8972, -2.5608,  1.9905,  1.5058],
            [ 5.8712,  0.7491,  2.2320,  4.3358,  1.6303,  3.0543, -2.8771,  0.2257],
            [ 1.5207,  6.2193,  1.8628, -0.0531,  3.6376,  5.5891,  0.7541, -7.6364],
            [-5.7504, -2.8895,  0.0803, -1.7076, -3.8862,  5.5788,  8.5399, -1.8401],
            [ 0.4382,  1.2061,  4.6816,  2.1192, -5.6447,  1.5350,  8.8435, -1.4195],
            [ 4.4144,  4.5751,  4.3653,  3.1254,  2.9864, -1.2707, -1.6263, -4.9840],
            [-2.8988, -1.4786,  3.7600,  5.5418, -1.1412, -5.3453, -0.6148, -2.6167],
            [-8.0531, -1.7480,  3.6397,  0.9567, -0.4188,  4.7575,  4.7629, -1.3392]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.8960e-01, -7.0606e-01,  4.6443e-01,  2.7899e+00,  7.3278e-01,
              3.7894e-01,  1.4815e+00, -1.0938e+00, -9.3840e-01, -4.0194e-02],
            [-9.6220e-01,  1.6062e+00,  1.6486e+00, -2.4858e+00, -4.0985e+00,
             -1.2022e+00,  2.6604e+00,  2.8364e+00,  2.4572e+00,  1.0196e+00],
            [-7.6075e-01,  1.7240e+00,  6.3407e-01, -7.0115e+00, -3.0579e+00,
              4.2884e-02, -9.1720e-01, -7.2595e-01, -5.2558e-01,  1.3572e+00],
            [ 1.5451e-01, -7.5395e-01,  1.2542e+00,  2.6454e+00,  6.4928e-01,
             -3.9900e+00, -2.2842e+00, -1.2256e+00, -9.3439e-01, -1.8913e-01],
            [ 2.3285e-01, -2.0475e+00,  4.1169e+00,  4.7517e+00, -2.1071e+00,
              1.3620e+00,  2.9717e+00,  5.0170e+00, -4.4163e+00, -5.1901e+00],
            [-2.8423e-01, -2.0038e-01,  3.0125e+00, -4.0271e-01,  1.2269e+00,
             -3.5137e-01, -5.0391e+00,  4.7691e-01, -1.1638e+00, -2.8474e+00],
            [ 2.3138e+00, -3.6412e-01, -8.0390e+00, -3.2038e-01, -1.5165e+00,
             -2.9131e+00, -3.2911e+00,  5.7399e-01,  6.3484e+00,  3.8722e-01],
            [ 3.5132e-01,  2.1121e+00, -7.3594e-01, -4.0077e+00, -6.8294e-03,
              3.2487e+00,  1.8488e-01,  8.7197e-01,  2.8630e+00,  3.2622e+00],
            [ 1.1762e-01,  4.4171e+00,  4.1075e+00, -5.0320e-01,  2.8240e+00,
              1.3237e-01,  1.1588e+00, -1.5771e+00, -1.4745e-01,  4.8137e-01],
            [-8.0216e-02, -5.4274e-01,  2.3497e+00,  2.3817e+00, -9.8017e-01,
              8.2781e-01, -1.0200e+00, -6.3430e-01, -1.9591e+00, -6.8692e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.541 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
