.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[17.0394,  8.1792,  5.4061,  6.7328,  8.3274],
            [ 8.1471,  7.9661,  3.5989, 12.0207,  7.9165],
            [ 8.1625,  3.3039,  5.2813,  5.5406,  6.3420],
            [ 8.9095,  2.9697,  6.4821,  1.5852,  8.4002],
            [ 1.6576, 10.5287, 10.0353,  9.1061,  5.1127],
            [ 8.9095, 10.1173, 10.6824,  2.4626,  8.4002],
            [ 8.1625,  5.3784, 15.9971,  5.1007,  6.3420],
            [ 8.1471,  5.3125,  0.8988,  4.2224,  7.9165]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9864, -0.3067,  0.4603, -1.4751, -1.0186,  0.9364,  0.2201, -0.0184],
            [-0.7014, -0.2325, -1.8260,  0.6658, -0.3979,  0.1360, -2.0304, -1.5816],
            [-2.4290, -1.3669, -0.2390,  0.1381, -0.1223,  1.2964,  0.1245,  1.1908],
            [-0.0795,  0.5249,  0.1543,  0.9265,  0.8281, -0.4051, -0.2315,  1.1506],
            [-0.5737, -0.0367, -1.4772, -0.2242,  1.1731,  1.5507, -0.7556, -1.2214],
            [ 0.0962,  0.2136, -0.2590, -0.3310, -0.2436, -0.5704,  0.8279, -1.9603],
            [-1.1431, -1.5656,  0.0243,  0.3611, -1.8551,  0.4158, -0.5806, -0.1596],
            [ 1.4237, -0.9201, -1.2056, -0.3758, -0.0846, -0.2777, -1.7485, -0.8334]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3717,  0.2102,  2.5785],
            [ 0.0040,  1.8964, -0.4158],
            [ 0.1374, -0.1844, -0.4012]], requires_grad=True), Parameter containing:
    tensor([[0.0536]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.8232,  4.1608,  6.7842, -1.2221,  3.5961,  2.4935,  3.5666, -3.3979],
            [ 4.1943, -0.3321, -5.6863, -1.5318,  1.4098, -1.1094, -3.1426,  0.5872],
            [ 0.7514, -0.0798, -3.2154,  7.4288, -2.0935, -0.6300, -0.9664,  3.6028],
            [ 3.3876, -1.7994,  5.3437,  1.1368, -1.3995, -2.8718,  3.3417,  0.8070],
            [-2.2137, -0.4642,  1.0723, -2.2043, -5.8784, -1.4741, -7.9306, -0.4655],
            [-2.8225,  3.3930, -4.6804, -2.1506, -2.5416, -4.7731,  6.6286,  3.6635],
            [ 7.4536, -1.7729,  3.7738, -3.1943, -1.6942,  2.9010, -0.5590,  1.6530],
            [-3.4465,  0.5041, -1.5182, -4.2837,  1.0833, -0.4098,  3.2888, -0.3290]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.9525,  0.1675,  6.6757, -2.7759,  1.7061, -2.2770, -0.5351,  2.0150,
             -3.0311,  4.8223],
            [-0.5332,  4.4486, -6.1059,  1.4887,  2.6465,  0.4084,  2.5621, -0.2663,
              5.9657,  0.2154],
            [ 0.4646, -2.7493, -0.0512,  7.6041, -4.5421,  3.0669,  3.1426, -1.9615,
              3.5395, -3.8427],
            [ 0.0962,  1.2755,  6.3639, -1.6343,  5.8872,  1.7315,  2.8472,  6.9162,
             -1.4113,  0.9834],
            [-0.9777,  1.3505, -5.9837,  3.7762,  3.8614, -0.7918,  5.9923, -1.9052,
             -1.9414, -0.1340],
            [ 0.3493, -5.8855,  3.9896, -2.7817, -1.3463,  3.9496, -7.6569, -7.7580,
              1.7837, -3.3557],
            [-0.9711,  2.1149, -6.0006,  6.4584,  5.9771, -3.6482, -2.1858,  6.2287,
             -0.4193,  2.0384],
            [-0.1075, -3.4945,  2.5467,  3.8248, -2.6218, -1.5607,  1.8093,  4.4141,
             -1.7015, -0.5070],
            [-0.2220, -0.4819,  1.1000, -1.0291, -2.7691, -0.1667,  2.1939, -2.6416,
             -0.6344, -0.0937],
            [-0.0717,  0.1140,  0.1903, -0.2098,  0.1281,  0.6882, -0.1708, -0.3737,
              0.4041,  0.1237]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.164 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
