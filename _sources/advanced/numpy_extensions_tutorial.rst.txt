.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.9087,  8.1758,  6.0454, 12.2182,  4.8247],
            [ 5.5588,  5.6647,  3.9214,  1.5261,  8.2141],
            [ 6.6833,  5.1444,  7.9823,  5.8604,  5.7357],
            [16.6355,  2.4258,  8.4978,  9.1751, 14.9015],
            [ 2.3171,  0.8571,  8.4247,  8.7743,  6.6220],
            [16.6355,  4.5072, 10.6665,  4.5145, 14.9015],
            [ 6.6833, 10.8327,  1.2048,  7.2810,  5.7357],
            [ 5.5588,  4.8893,  3.7833, 10.6660,  8.2141]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8798,  1.0074, -0.9544,  0.4797,  1.3378,  2.9918, -0.0053, -0.5581],
            [-1.0572, -0.0075, -0.9037,  0.6895,  0.7551, -0.6049,  0.2527,  0.5995],
            [ 0.8385,  0.9737, -0.5085,  0.5970,  0.8449, -0.5964,  1.0280, -1.6136],
            [-1.1704,  1.8886,  0.2415, -0.1590,  0.4702,  0.0921, -0.5248, -0.5367],
            [-1.1041, -0.8188, -1.4829, -0.4456,  0.9289, -1.5460, -0.2466, -0.4775],
            [ 1.3729, -0.5163,  2.2810, -1.0657,  1.5369, -0.3164,  0.6312,  0.4840],
            [-0.4589,  1.2140, -0.2645,  0.7779, -0.9268, -0.8181, -0.7074, -1.0705],
            [-0.7596, -0.8232, -0.4677,  0.3971,  0.1739, -1.0569,  0.8363, -1.1194]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6091, -0.2738,  0.2969],
            [-0.9136, -0.9100, -0.5905],
            [ 2.2105, -0.7496, -0.8563]], requires_grad=True), Parameter containing:
    tensor([[1.1904]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9848,  2.5199,  0.4349, -0.1149,  1.6875,  0.4749,  2.6562,  1.6189],
            [-0.8104,  3.3492, -1.6602, -2.4848,  3.4821,  0.1246, -2.6041,  5.5495],
            [ 1.6060,  4.8601,  1.2244,  1.0120,  0.5314,  3.9488,  1.0537, -4.0547],
            [ 2.0631,  1.6438,  3.3190,  4.2529,  2.4750,  0.4480,  7.5410, -3.7386],
            [ 3.0339,  0.5210, -2.7035, -2.5371,  5.2207,  2.3574,  0.3686,  5.0967],
            [ 4.6034, 12.8401, -0.8894, -4.8740,  2.4517,  0.7414,  0.5037,  6.8393],
            [-0.8717,  3.5511,  6.1561,  4.4212,  0.9782,  3.7184, -0.8399, -2.0421],
            [ 3.6199, -2.4346,  2.0815,  3.9103,  0.7417, -0.6159,  1.7774,  0.3633]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1569, -0.0552,  0.2513, -0.1040,  0.0330, -1.2351, -1.0326,  0.6752,
              0.0612,  0.0112],
            [ 0.6776,  1.7463,  1.3499, -1.1451,  0.6171, -1.5537, -2.4134, -1.5943,
             -0.1218, -0.1096],
            [-0.5644,  3.7396,  2.0145,  1.7918, -0.9850,  6.5201,  0.6343, -0.8436,
              0.1888, -0.2901],
            [-3.1391, -5.4539,  0.5099,  3.5773, -3.0221, -1.3347,  1.1949,  2.3654,
              2.2833,  1.0529],
            [ 2.5317, -2.5114, -0.4246,  1.3585,  0.2605, -1.5519, -3.6712, -3.6740,
              2.0304,  1.6636],
            [ 3.3218,  1.7871,  2.0897, -1.5523, -1.1410,  3.6665, -1.6467, -4.2058,
             -0.9325, -0.1654],
            [-3.2521,  0.8434,  3.2365,  3.1726, -3.0451, -1.1757,  0.7179, -0.4422,
             -3.5027, -1.6564],
            [ 1.5542,  0.5025,  5.8019,  4.4287,  3.0466,  0.9386,  4.4417,  0.7201,
             -1.6708, -0.1058],
            [-0.5864, -1.7476, -3.3750,  0.2043,  6.8827,  2.8848, -1.1874, -1.6495,
              0.5171,  0.3389],
            [-2.0819,  1.5251, -0.8603, -2.2507,  1.2030, -0.8796,  0.6167,  2.1254,
             -0.4394, -0.5343]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.541 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
