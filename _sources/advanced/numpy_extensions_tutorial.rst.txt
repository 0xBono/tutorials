.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.4737,  5.7841,  9.4825,  5.9461,  4.6190],
            [ 9.7266,  2.7411,  7.1441,  7.1622, 17.2795],
            [11.8693,  5.1701,  7.9369, 12.6189, 13.2105],
            [13.1041, 10.6392,  8.7006,  8.6586,  3.2489],
            [ 0.1214, 10.7458, 13.1594,  2.5626,  2.0561],
            [13.1041, 12.0093,  8.7410,  3.7275,  3.2489],
            [11.8693,  8.0989,  5.8156,  6.8892, 13.2105],
            [ 9.7266,  8.1422,  1.5092,  7.8210, 17.2795]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.5148, -0.2914, -0.3307, -1.4511,  0.7027,  0.0337,  2.1805, -0.7996],
            [ 0.4232,  0.7303,  1.4970, -1.1474,  0.8967,  0.0486,  0.4469, -0.5975],
            [-0.8473, -0.3535, -1.2046, -1.4365,  0.9218,  1.0726, -1.1731, -0.4379],
            [ 0.4274,  0.4717, -1.0150,  0.2181,  0.9406, -0.4616, -0.2777,  1.7752],
            [-0.7762,  0.7670, -0.8446,  0.7346, -0.1997,  0.5250,  0.9454, -0.9034],
            [-0.2035, -0.5012, -1.1555,  0.4310, -1.3206, -0.9918, -2.7966, -1.6917],
            [-1.4350,  1.8328,  0.2305, -0.5069, -1.5272,  1.8539, -0.1641,  0.6915],
            [-0.2588, -0.2663, -0.9251,  3.1975,  1.6104,  0.4101,  0.6711, -1.3831]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4353, -0.4607, -2.0489],
            [-0.5595, -0.9919,  0.1112],
            [ 1.1121, -1.1793, -0.1331]], requires_grad=True), Parameter containing:
    tensor([[-0.6217]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.6082, -3.3356,  1.5417, -0.8228,  4.3205, -4.3551, -3.3490, -1.9707],
            [-2.2096, -3.9011, -1.5291, -1.5195,  3.2569, -0.1198,  2.1739,  5.4260],
            [-1.1240, -2.5438,  0.6840,  3.6379, -0.3692, -0.0311,  1.0631,  3.5723],
            [-1.8760, -3.3779, -4.9851,  3.3077,  0.3384,  1.4331, -0.9619, -0.7268],
            [-1.5925,  0.3925, -0.4676,  1.7870,  2.4502, -0.4394, -1.0585, -1.0850],
            [ 1.2703,  3.9269,  0.8545, -4.0656,  4.8439,  3.7414,  4.9637,  5.2945],
            [-2.0867, -3.3812, -3.6296, -0.6498, -8.6727, -0.1047, -1.7083, -2.2291],
            [-3.2767, -5.1370, -4.5940, -1.4327, -2.8340, -5.0014, -0.9277,  1.0290]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 8.1811e-01,  1.8001e+00,  7.8052e-01,  2.6877e+00, -1.9873e+00,
              2.0608e-01, -9.0912e-01,  5.1392e-01,  1.3299e+00,  1.6198e+00],
            [ 1.3953e+00,  2.5688e+00,  1.3110e+00, -7.7657e-01, -3.1221e+00,
             -5.1519e+00, -2.1326e+00,  8.6178e-01,  1.6243e+00,  3.2488e+00],
            [-1.1696e+00,  1.2860e+00,  1.4580e+00, -1.1191e+00,  2.6939e+00,
             -2.7135e+00, -1.1370e+00, -3.8167e+00, -3.0694e-02, -1.8735e+00],
            [-9.5688e-01,  1.0195e-01,  5.0532e+00,  5.4708e-01,  3.1863e+00,
             -8.7098e-01, -3.8483e+00, -3.2772e+00,  1.1654e+00,  2.2960e+00],
            [-2.1055e+00, -2.2779e+00, -2.6776e+00,  2.0815e+00,  5.8499e-02,
              3.3733e+00,  2.1905e+00, -3.4749e+00,  1.3317e+00, -2.0464e+00],
            [-1.2606e+00, -2.2555e+00, -1.4332e+00,  4.0659e+00,  1.8180e+00,
              4.7558e+00,  2.7085e+00,  1.3309e+00,  2.9732e+00,  1.8853e+00],
            [ 4.4802e+00, -1.7704e+00,  1.3922e-01, -2.0356e+00, -4.5657e+00,
              1.0977e+00, -5.7893e+00,  2.8262e+00, -7.8435e-01, -6.6999e-01],
            [ 4.8874e+00,  3.9461e+00,  4.6263e+00, -4.7396e+00, -4.8888e+00,
             -3.8439e+00, -3.3649e+00,  2.1598e+00,  1.5673e+00,  2.0953e+00],
            [-8.0834e-02,  5.0297e+00,  1.7479e+00, -2.1717e+00, -1.1040e+00,
             -3.1207e+00,  2.3675e-01,  5.9590e-01,  6.4523e-01, -1.3651e-01],
            [-3.1799e+00,  2.6650e+00,  1.7052e+00,  1.0477e+00, -3.1482e-01,
             -1.9653e+00,  8.9476e-04, -9.1136e-01,  1.1433e+00,  1.2752e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.614 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
