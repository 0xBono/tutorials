.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.4926,  4.5225,  5.6260,  6.6504,  6.8698],
            [ 8.5596, 12.7475,  1.1895, 14.7749,  5.3931],
            [ 4.3453,  9.1124,  8.5140,  8.1365, 11.4822],
            [ 2.9900, 11.2090,  6.5703,  4.5615,  3.7867],
            [ 7.5349, 11.6469,  6.5036,  6.3915,  9.3123],
            [ 2.9900, 10.0590,  6.7216,  9.7668,  3.7867],
            [ 4.3453,  6.6966,  9.5987,  6.9970, 11.4822],
            [ 8.5596,  3.6528,  2.2476,  0.4190,  5.3931]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3461,  2.2252, -0.3184, -0.1841, -0.0488,  1.3215, -0.6936,  0.4817],
            [-0.4015, -1.0995,  1.8229,  0.2786,  0.2433,  1.2158, -0.0338, -1.7223],
            [ 2.0920,  0.4086,  0.9215, -0.3462, -0.4918, -0.8947, -0.7692,  2.5710],
            [-0.9312,  1.1804,  1.0160, -0.8428,  0.8006, -0.5381,  0.2414,  0.9649],
            [-0.0926,  1.7084, -0.3115, -1.2590,  0.6267,  1.2825, -0.5170,  1.3158],
            [ 0.2336, -1.2767, -1.8466, -0.2595,  0.1653,  0.6001,  2.0196, -0.3978],
            [-1.0281,  0.2251, -0.0979,  0.1938,  0.0175, -0.5547,  0.0765, -0.6925],
            [-0.0959, -0.2962, -0.3188,  0.0778, -1.2932,  0.8958, -1.0216,  0.5984]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4546, -0.2683,  0.9974],
            [ 0.2181, -0.6521, -0.9457],
            [ 0.3295, -0.9581,  0.8155]], requires_grad=True), Parameter containing:
    tensor([[0.9306]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.8190, -0.2433,  0.1590,  2.9718, -0.5661,  1.3163,  2.0581,  0.4889],
            [ 4.3661, -3.9562,  3.7538, -2.2904,  1.0778, -1.6975,  3.2088, -0.7270],
            [-1.2038,  1.3778, -0.4602,  0.9372,  0.9182, -0.7131,  3.2776,  2.5885],
            [ 0.0674, -3.0065,  2.2191, -1.1402,  1.1902,  0.4537,  3.8991, -0.6441],
            [ 4.6214,  1.7241,  3.1957,  4.3024,  4.5828,  0.3725,  1.9891, -2.8430],
            [ 0.6188, -1.8220, -1.2426,  0.5906, -0.2368,  2.0506,  0.6230,  2.4293],
            [ 2.3689,  1.0034, -0.0190,  1.0837,  1.5899,  0.3015,  4.2124, -2.3357],
            [ 2.8806,  0.5137,  3.8081,  1.9886,  0.7426, -1.6630, -0.9094, -2.2864]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.9721,  0.0990,  1.0185, -1.1017, -0.3824, -2.5499,  1.9063, -2.2357,
              1.5864, -0.3762],
            [ 1.3526, -1.1559,  2.1885, -4.1795,  2.5309, -3.6052,  1.9923, -1.9480,
             -1.4312, -0.0207],
            [ 0.9344,  1.2438,  1.4718, -0.4187,  0.0767,  4.5915, -0.3030,  5.6075,
              1.3344,  2.6518],
            [ 2.3878, -0.8349,  1.2704, -4.3937,  1.7128,  1.2140,  2.3848, -3.0362,
             -0.1356, -3.4982],
            [ 1.3197,  0.2999, -1.6641,  2.7188,  2.3423,  1.9998, -3.7604,  1.1609,
             -4.0642,  3.3824],
            [ 1.1316, -2.1907, -0.7588, -1.3183, -4.5315, -2.0882, -3.7178,  1.3298,
              1.5715, -0.6334],
            [-1.4659,  2.7319, -2.8169,  3.9400, -0.6750,  2.6616,  0.8472,  1.4290,
             -2.7086, -0.3764],
            [ 1.5921, -0.5021,  1.6483, -1.4619,  1.7862,  0.7039, -1.2424, -1.5954,
              0.6623, -0.3066],
            [-0.1363,  0.9308, -3.8375,  2.8551, -0.6903, -0.9913, -2.6345,  2.6917,
              0.4460,  0.7069],
            [ 0.3925, -1.3544,  1.6352, -0.5074,  0.1848, -1.2673,  1.4816, -0.0494,
              0.4236, -0.8705]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.338 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
