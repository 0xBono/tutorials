.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.6318,  1.6159,  5.0536,  9.5866,  8.4774],
            [ 6.7123,  4.1091,  6.1200,  3.2456,  7.2661],
            [ 6.7543,  8.3266,  6.0216,  1.6296,  7.1695],
            [ 6.8046,  9.3187,  3.3156, 12.6731,  5.9096],
            [ 4.8368, 14.4276,  8.4159,  3.4999, 10.9501],
            [ 6.8046,  4.9292, 10.5668,  5.3358,  5.9096],
            [ 6.7543,  8.7065,  5.4091, 14.5789,  7.1695],
            [ 6.7123,  6.0785,  7.4714, 12.4995,  7.2661]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1804,  0.5077,  1.2363,  1.6565, -0.5250,  2.3609, -1.4710,  1.6156],
            [ 0.5044, -0.8401, -1.1665, -1.5358,  0.7195, -0.0644,  0.3799,  1.3929],
            [-0.1932, -0.4189, -0.4797,  0.1664,  0.0933,  0.0870, -0.6988, -1.4216],
            [ 0.6081,  0.5897,  1.0015, -1.1209, -0.0200, -0.7688, -1.1325,  0.7152],
            [ 0.4074,  0.4577,  0.0289,  1.1010, -0.4321, -0.5814, -0.7966, -0.4268],
            [-0.2677, -0.0889, -1.4483, -0.4857, -0.1496,  1.5835,  1.2719, -1.0949],
            [-2.1976,  1.8350,  1.4875, -1.0743,  0.0637, -0.3170,  0.4174,  0.9261],
            [-0.0212, -0.2337, -0.6661, -1.2281,  1.3452,  0.4769, -1.1416,  1.2837]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0957, -0.6077, -0.0638],
            [-0.1834,  0.3442,  0.2298],
            [ 0.9034,  1.2390,  0.3278]], requires_grad=True), Parameter containing:
    tensor([[1.3602]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.3378, -0.5846,  4.0573,  3.7197,  0.2960,  1.5229,  2.4289,  4.1157],
            [ 1.3779,  2.1219,  3.7587,  1.6436,  0.8139,  3.4245,  4.4710,  3.5039],
            [ 1.6405,  1.8249,  1.9572,  0.8537,  3.6953,  4.3223,  1.3639, -1.7463],
            [-1.1080, -0.7735,  1.5329,  1.8134,  0.3173, -0.6036, -0.8589,  1.3268],
            [-1.9480, -1.4566,  1.3962,  1.4443,  0.9284,  2.9202,  3.5751,  3.3367],
            [ 0.1262,  4.5130,  3.2092,  2.4987,  5.1881,  5.2209,  1.4570, -1.2064],
            [-0.8607,  3.1325,  1.6972, -0.0225, -0.9677, -2.7691, -4.0539, -1.9447],
            [ 2.1139,  0.2336,  1.8527,  1.9945, -1.8229, -2.7046, -1.8250,  1.2374]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.9424, -2.0922, -1.3731, -1.3587, -0.2154,  1.0019, -0.0926, -1.3609,
             -0.6358, -0.0632],
            [-0.2219, -0.6418, -0.0443, -1.9908,  1.2728,  2.1614, -0.0935, -0.5448,
              0.3012,  0.2121],
            [ 1.2654,  3.0948,  1.0871,  2.8483,  3.5682,  0.8857,  0.9560,  2.1911,
              1.6965,  0.3861],
            [ 1.2798,  0.5883,  1.3566,  3.3600,  2.1857, -0.7280,  0.6845,  0.8732,
              0.3316,  0.0773],
            [ 0.6634, -2.9612, -0.1497, -0.9893, -1.1397, -0.7627, -2.7561, -3.6954,
             -1.4944, -0.1575],
            [-0.9701, -0.4099, -0.4457, -3.3037, -2.1503, -4.3533, -3.6446, -3.0401,
             -0.9395,  0.0195],
            [-0.9518,  0.7378,  0.2020,  0.7729,  0.0584, -3.5483, -0.9963,  0.1845,
              0.7155,  0.3409],
            [-0.2494, -0.7793, -1.6518,  2.3951,  4.5624,  2.1567,  1.9120, -0.0738,
              0.3133,  0.2603],
            [ 0.0994,  0.3716,  1.0436,  1.1805,  0.8603,  0.9553,  0.8851, -0.1531,
              0.2477,  0.1874],
            [ 0.2981,  0.3402,  0.8187,  1.1491, -1.2368, -1.6776, -0.4188, -0.3449,
              0.1007,  0.0795]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.229 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
