.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.0306,  5.8632,  7.1789,  6.4099,  1.3435],
            [ 7.6971, 10.0042, 10.2529,  7.8485,  8.6178],
            [ 3.1537, 14.5285,  0.8098,  8.4308,  5.2155],
            [ 2.2845,  1.4913,  1.6108,  5.8119,  8.7328],
            [11.0027,  0.9506,  4.2772,  9.3901,  5.3608],
            [ 2.2845,  0.6853,  7.3798,  8.4915,  8.7328],
            [ 3.1537,  8.3501,  3.3018,  1.6585,  5.2155],
            [ 7.6971,  7.1149, 10.4553,  9.9598,  8.6178]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-4.4199e-02, -1.0394e+00, -1.0076e+00,  1.0106e+00, -2.2765e-02,
             -9.2140e-01, -4.5490e-01, -1.4262e+00],
            [-1.3933e+00,  5.4883e-01, -5.0912e-01,  7.6014e-01, -3.2735e-01,
             -1.0493e+00,  5.8878e-04,  1.8148e+00],
            [ 6.8612e-01, -1.6116e-01, -1.4934e+00,  7.2607e-01, -6.4627e-01,
             -7.2513e-01,  1.2998e+00, -1.1281e+00],
            [-1.5651e-01,  6.0762e-02,  1.5163e+00,  4.0786e-01,  1.1284e+00,
              4.3360e-01,  1.4042e+00, -1.3471e+00],
            [-2.3133e-01,  6.1652e-01,  8.0304e-01, -2.7923e-01,  5.6599e-02,
             -3.1714e-01, -3.8259e-01, -4.8186e-01],
            [ 1.3781e+00,  1.3249e+00,  8.5800e-01, -9.1499e-01, -1.3001e+00,
             -1.4276e-01,  4.6408e-01,  4.3854e-01],
            [ 1.3066e+00, -1.7900e-01,  3.0995e-01, -3.1828e-01, -1.6833e+00,
             -5.5768e-01,  4.2199e-01,  7.4704e-01],
            [-6.9451e-02, -1.3648e+00,  3.9576e-01,  1.2333e+00, -4.0761e-01,
              1.8639e-01, -1.2433e+00,  1.3572e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.3843, -1.3277,  0.7278],
            [-1.4038,  0.1830, -2.2646],
            [ 0.6473, -0.7318,  0.6511]], requires_grad=True), Parameter containing:
    tensor([[0.2409]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.8962,  2.3576, -0.7986,  2.4688, -1.9403,  1.6078, -2.1023,  3.3109],
            [ 2.6956,  0.5463,  0.9154,  0.1648,  2.8130, -0.8115,  3.1771, -2.3319],
            [-2.7691,  3.9463, -2.7901,  0.5375,  0.6200, -3.6028,  1.9799,  2.3256],
            [ 3.8456, -1.4487, -2.3030,  3.1903,  0.7762,  7.0098,  0.8377,  4.0023],
            [ 2.3943,  0.3486,  3.7010,  3.1896,  3.7769, -4.3927,  0.0515, -4.8042],
            [-0.2651, -0.1821, -2.6717,  2.7854,  2.6125, -3.5123, -1.5972,  1.9436],
            [-1.5128,  2.8058, -4.6221,  1.5665, -2.6963, -6.9944,  5.9088, -4.7941],
            [ 0.2847,  1.6881, -0.1695,  1.0256, -4.2438,  4.1673, -1.4338,  0.3819]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.2699,  3.7703, -3.7780, -2.1350,  1.2874,  1.0493, -0.8267,  0.7320,
             -0.0652,  0.1207],
            [-0.2809, -3.8960, -0.1463, -5.2103,  7.2481,  0.9832,  0.1283,  0.3247,
             -1.5896,  0.1099],
            [ 1.4757,  0.6973, -2.9988,  8.0713, -3.2649, -0.7983,  0.3755, -5.8723,
              2.4868, -1.9750],
            [-0.9967,  1.1749,  1.5471, -5.0895,  5.2869, -2.7788, -3.1184,  4.4217,
             -1.3798,  1.2505],
            [-1.1723, -4.4548,  4.3332,  2.7900, -2.1069, -2.6364,  6.6630, -1.1451,
              2.7256,  2.6847],
            [-0.0976,  2.9365,  0.9854,  1.8614, -3.3317, -6.1152, -4.1267,  5.5706,
             -2.4759, -0.5536],
            [-0.5012,  2.1264,  0.5524, -5.5833, -0.9628, -3.0202,  1.5429,  0.0635,
              1.7066, -2.5861],
            [-0.0769, -3.4302,  3.2063,  0.9887,  0.6365,  2.8949,  6.8559, -3.7695,
              1.8572, -0.4706],
            [-0.0719,  2.1857, -1.3770,  0.6214, -0.3002, -1.9601, -2.9932,  3.3760,
             -3.7358,  3.2185],
            [-0.0471, -0.5937,  0.9504, -0.4639, -0.0403, -0.1883,  1.6407, -2.3647,
              1.9585, -0.9021]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.246 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
