.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.5624,  3.6905,  3.1087, 12.5883,  8.7673],
            [ 9.6561,  3.6718, 11.5983,  5.2109,  7.8765],
            [ 5.1398,  6.3492, 10.5063, 14.5986,  5.6487],
            [ 4.9437,  2.3492, 11.2815,  6.1561,  2.9143],
            [ 0.0594,  8.8163, 14.3611, 10.7903,  4.7783],
            [ 4.9437, 15.2292,  2.7430,  8.6494,  2.9143],
            [ 5.1398, 16.5147,  5.4647,  2.1481,  5.6487],
            [ 9.6561,  7.4559,  8.9307, 10.4400,  7.8765]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 8.4705e-01,  2.3761e-01, -9.8596e-01,  9.6976e-02, -4.7762e-01,
             -7.8815e-02,  1.4217e+00, -4.3813e-01],
            [-7.4703e-01, -1.2379e+00,  1.9974e+00,  1.9669e+00, -6.0193e-01,
             -9.4388e-01, -1.4075e+00, -2.3534e-01],
            [-6.5290e-01, -5.4726e-01, -5.1547e-01,  8.1006e-01, -8.3296e-01,
              2.6073e+00,  2.9623e-01, -1.0530e+00],
            [ 4.6734e-01, -7.8423e-01, -1.2991e+00,  4.3297e-01, -2.0296e+00,
             -9.6880e-01, -1.1706e-01,  2.0238e+00],
            [-2.6860e-01,  1.0643e+00, -7.6447e-01,  7.9360e-01, -1.0069e+00,
             -2.1028e-01,  5.1859e-01, -9.4485e-01],
            [ 1.0313e+00,  7.2365e-01,  1.7088e-03,  8.1555e-01,  3.3986e-01,
              2.1184e+00,  1.4963e+00, -1.9317e+00],
            [ 1.6331e+00,  9.2053e-01, -1.3799e+00, -8.8290e-01, -6.9166e-02,
              2.0092e+00,  2.5625e-01,  4.0751e-01],
            [ 2.4730e-02, -5.3387e-01,  1.9126e+00, -6.6213e-01,  1.2511e-02,
             -5.1709e-01, -7.0308e-01,  2.1067e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4458,  0.0192,  1.0722],
            [-0.2468, -0.9007, -0.9050],
            [-1.5809,  0.7349, -1.0363]], requires_grad=True), Parameter containing:
    tensor([[-0.8880]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.3499, -5.0180, -0.4834, -0.6467,  0.3444, -2.1695,  0.2331, -3.7037],
            [-4.9393,  0.3366,  3.4772,  0.4505,  2.2800,  4.7647, -1.6754, -1.1731],
            [-2.1564,  3.0127,  0.4595,  2.8933,  2.4979,  2.0327,  2.3030,  3.4011],
            [-1.6839, -1.7206, -4.3263,  1.3170, -3.0405,  1.9496, -1.3487, -0.3297],
            [-2.4142, -2.6897, -2.2505, -1.4438, -2.0653, -2.1612,  0.4269,  0.7258],
            [-0.3617,  2.3431, -0.5009, -4.6634,  1.9610, -4.7075,  2.8765, -1.0202],
            [ 0.3081, -6.4157, -1.8925, -1.5836, -4.1801, -4.5303, -6.2405, -0.5141],
            [ 2.0483,  1.0082, -2.0107,  4.2209, -3.0694,  4.7623,  0.3401, -1.5785]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4083, -0.0685, -0.9166, -0.0456,  0.6391, -0.5178,  1.0658, -2.2198,
             -0.1208, -1.1914],
            [ 0.7765,  0.6747,  2.4229,  0.0843,  0.1450,  1.1552,  1.6165,  2.5833,
              2.8198,  0.8820],
            [ 1.4057, -1.8393,  0.1474, -1.6664, -4.4108,  0.5569, -4.3082,  1.3406,
             -2.6526,  0.6695],
            [-1.3534,  0.8216, -0.0790, -0.9526,  1.9536, -0.7879, -1.8332,  1.6057,
             -0.4364,  2.6652],
            [-1.0592,  0.4665, -0.1967,  2.0446,  0.7561, -0.6197,  4.0319,  0.4432,
             -0.7513, -0.7606],
            [-3.2899,  3.1320, -4.7023,  2.3827,  0.6420, -2.5251, -2.2556, -4.8053,
             -0.2377, -1.8407],
            [-0.8250,  0.7502, -1.4220, -2.2481, -2.7566,  0.5093, -1.2912,  1.6646,
              0.0382, -1.2856],
            [ 1.8786, -2.7166,  2.4483,  1.0702, -2.6724,  1.5522, -3.9230, -2.0607,
              0.3632, -1.2922],
            [ 0.2831,  0.9933, -0.5225,  2.9760, -1.2195, -0.4358, -2.7598, -1.0811,
             -0.9239,  1.5166],
            [-0.2758, -0.5418,  1.6722, -0.2774,  0.4700, -0.5899, -0.3666,  1.4163,
             -1.4059,  1.1964]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.185 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
