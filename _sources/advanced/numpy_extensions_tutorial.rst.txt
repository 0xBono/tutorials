.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.3417, 10.2923,  3.1273,  3.8777,  4.6125],
            [ 4.9699,  5.6445, 11.3851,  3.2654,  4.3058],
            [ 5.2875,  5.0474, 14.3140,  6.5610,  1.9524],
            [ 9.5297,  5.5390,  8.0726,  9.8293,  5.5796],
            [ 1.1069, 13.4690, 10.7353,  4.0437,  0.4442],
            [ 9.5297,  8.6937,  7.4790,  3.5708,  5.5796],
            [ 5.2875,  4.6248,  4.7148,  9.9276,  1.9524],
            [ 4.9699,  5.8968,  7.4092, 11.2025,  4.3058]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3790, -2.0566, -0.2291, -1.2651,  0.0583,  1.6818, -0.2035, -0.0193],
            [ 0.3907, -0.3989, -0.6394, -0.9262,  0.9178,  0.4620, -1.2294, -0.1167],
            [ 0.8489, -1.6134, -0.0614,  1.5083, -0.3535, -1.7628,  1.2004,  0.6429],
            [ 0.0385, -0.3671, -0.2064,  1.0546, -0.2632, -1.2562, -0.7267, -0.4465],
            [-0.7381, -0.3789, -0.1388, -0.7359,  0.6803,  0.6503,  1.0177,  1.0792],
            [-0.2003,  1.1608, -1.0786, -1.2372, -1.0502,  0.0513,  0.2943, -1.6682],
            [-1.7850, -1.3346, -2.5136,  0.1942,  1.5339, -0.2019, -0.4821, -0.4611],
            [-0.5841,  1.0135,  0.4017, -0.9575,  0.3991, -0.4823,  1.2164, -0.2897]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2989, -0.6758, -1.1595],
            [-0.1280, -1.2153,  0.0750],
            [-0.4313,  0.1707, -0.8418]], requires_grad=True), Parameter containing:
    tensor([[0.3718]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.2635,  2.1297,  3.6397,  1.2486,  1.7170,  0.3637,  2.9601,  0.7740],
            [-1.7488,  3.4127,  3.3934,  4.7619,  4.2117,  5.5908,  2.4673, -2.1123],
            [ 3.1693, -0.4669,  1.1873,  1.0510,  3.1993,  1.3451, -2.1635, -2.5117],
            [ 0.2507, -2.9504,  0.4716,  1.1417,  2.9006,  1.1507,  2.3645, -0.5295],
            [-0.0411,  0.8488, -2.7943, -1.5035,  0.0905,  1.3130, -1.7617,  1.0757],
            [ 2.9860, -0.4717, -1.6214, -0.6752,  1.5735,  2.3996,  2.1381, -0.6207],
            [ 1.2805,  0.9887,  1.3246, -0.6722,  2.4429,  3.1247,  0.7058,  0.1707],
            [-0.1870,  1.1295, -0.7495, -0.2175,  0.0103,  0.5862,  2.2168, -3.1328]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0786, -0.5085, -1.6025, -2.8473, -2.5556, -0.4664,  0.9745, -0.8247,
             -2.1936, -1.0089],
            [ 0.0806, -0.0766, -0.8430, -1.4079,  0.1899,  4.2474,  2.5711, -0.2987,
             -2.1781, -1.5730],
            [ 0.3069,  1.1791,  1.7140,  0.1386,  1.2806,  1.1608,  3.1641,  0.5898,
             -1.9979,  1.3034],
            [-0.0169,  1.2338,  0.3490,  2.5302,  1.8340,  5.9697,  2.5329,  0.2238,
              1.2389, -0.4822],
            [ 0.0112, -1.6767,  1.1039,  1.1373,  2.9420,  2.4638,  1.4267, -0.3631,
              0.7485,  1.1320],
            [-1.2031, -2.6231, -3.5344, -1.5916, -1.1319,  2.6060,  0.5788,  3.3841,
             -0.7327,  0.3336],
            [-1.1436, -2.3318, -4.4034,  1.2908, -1.9422, -2.0118,  4.5247,  1.5742,
              1.8398,  0.6924],
            [-0.7026, -0.9802,  1.7082, -0.7908, -1.1946,  1.0248,  0.1583,  4.6028,
             -1.1042, -2.2135],
            [-0.4173,  1.7732, -0.1436,  0.9804,  0.5763, -2.2704,  4.0380, -1.3551,
             -1.1274,  0.7291],
            [ 0.3533,  0.2698,  0.7285,  0.9666, -0.3334,  1.9654, -2.2225,  1.8852,
             -0.7023, -1.4181]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.957 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
