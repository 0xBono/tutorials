.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.3254, 12.4623,  8.8171,  1.8592,  0.1482],
            [ 4.4570,  2.0350,  6.6207,  4.7989,  5.3971],
            [ 3.6207,  4.2131, 12.9276,  5.0543,  8.5635],
            [ 3.9950, 10.4906, 19.1421,  5.7460,  2.8286],
            [ 4.7851,  9.1939,  4.6408,  2.6558,  6.3149],
            [ 3.9950, 10.1343,  4.6515,  5.3928,  2.8286],
            [ 3.6207,  9.9263,  4.2162,  9.7499,  8.5635],
            [ 4.4570, 13.9804,  4.4899,  3.9722,  5.3971]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.2698,  0.4278,  1.0243, -0.8214, -1.9633,  0.4015,  0.4112, -0.4625],
            [-0.0178, -1.2525,  0.4232, -0.7543, -0.3733,  0.0498, -0.1149, -0.1616],
            [-1.8989,  0.8023,  0.6226,  0.2931, -1.2860,  0.1663, -0.4819, -1.2023],
            [-0.3753,  0.2177, -0.5603, -0.7731,  0.8411,  0.3199, -1.0453, -0.2655],
            [-1.6207, -2.1209, -0.3255,  1.5293,  1.9660, -0.3165,  0.8258, -0.0453],
            [-0.9715, -2.2066,  0.9292, -0.7229, -0.4801,  1.3346,  1.9942, -0.1865],
            [ 1.1703,  0.0835, -0.8967, -0.5467, -1.0532, -0.0530, -0.6176, -0.2972],
            [-0.8961, -0.6715, -1.5236,  1.5316,  1.2017,  0.2501,  1.1254,  0.3640]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.5300,  0.5703, -1.0884],
            [ 1.1887, -0.4189, -0.4675],
            [-0.6159,  1.6817,  0.9967]], requires_grad=True), Parameter containing:
    tensor([[-0.5946]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.1077e+00, -6.2219e-01,  8.7835e-01, -1.2618e+00,  1.0184e+00,
             -2.2884e+00, -4.5813e+00, -4.4525e+00],
            [-2.3182e+00, -1.0981e+00, -3.9952e-01,  1.3287e+00, -4.5274e+00,
              1.6329e+00,  3.9423e+00, -1.3282e+00],
            [-4.8738e+00,  1.5483e+00, -9.5683e-02, -3.7702e+00,  1.3751e+00,
              6.3917e-02,  5.9420e-01, -3.8811e-01],
            [-5.8387e-01, -7.8803e-01, -9.2474e-01, -2.4468e-01, -5.3881e+00,
             -3.6794e+00,  3.6960e+00,  8.9429e-01],
            [-5.7050e+00, -2.5231e+00,  1.2322e+00, -2.1789e+00, -2.2921e+00,
             -5.3434e+00,  1.8409e+00,  3.1476e+00],
            [ 2.2978e+00, -8.4159e-01,  4.5514e+00,  3.7455e+00, -2.3546e+00,
             -3.6392e+00, -3.4781e+00, -2.0140e+00],
            [-2.0278e+00,  1.1703e+00,  3.6255e-01, -1.1754e+00,  8.7362e-01,
             -2.2954e-01, -4.7632e-01, -3.3209e+00],
            [-3.6705e-01,  4.1340e-01, -2.5259e+00,  1.0315e+00, -5.6980e-03,
             -2.8420e+00,  6.2480e-01, -1.4291e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0428, -1.5868,  0.6661,  0.8401,  3.8132, -0.6403, -1.0698,  0.1066,
              0.5796, -1.6521],
            [-1.6218,  0.6072, -2.4394,  2.5731,  0.8784,  0.5891,  2.0964, -0.3804,
             -0.2380, -1.6940],
            [ 3.9061, -1.9737, -6.4227, -7.2952,  0.7686,  7.7287,  2.5194, -0.7144,
              4.4122, -0.0117],
            [ 2.0646,  2.5665, -1.2203,  0.6032, -1.5200, -3.7598,  0.9821,  3.6197,
              2.0327, -1.5495],
            [-0.4571,  4.2606,  4.2166, -3.5211, -0.3514, -4.0194,  2.6215, -0.5300,
              0.4169,  0.5055],
            [-1.4601,  1.8492,  3.3753,  7.3797, -2.4783, -3.7119,  1.6594, -0.8668,
              5.0841,  1.4718],
            [-0.2054,  1.2845,  1.9641, -3.7964,  1.6301,  3.7960, -1.3370, -2.6537,
             -1.9340,  0.4021],
            [ 1.0524, -3.8352, -0.1517,  6.6972,  5.9047, -4.1688,  1.7093, -1.6473,
              0.9981,  1.5596],
            [-1.6886,  2.5827,  1.3683, -2.0582, -2.6739,  1.0200, -0.2425, -0.6085,
             -1.0856, -0.5436],
            [ 0.5879, -1.7433, -0.8080,  0.2993,  2.5015, -0.9736,  0.1859, -0.0646,
             -1.6581, -0.6538]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.598 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
