.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.0587, 11.0488, 12.8424,  3.1781,  8.2548],
            [ 4.1171,  7.9860,  2.7866,  5.1730,  7.3504],
            [11.3147,  1.5998, 14.0050,  6.4192, 14.9096],
            [ 6.9832, 13.1654,  4.2822,  2.5068,  3.8099],
            [ 3.5187,  5.3300,  4.7836, 15.2209,  9.8106],
            [ 6.9832, 14.7069,  7.7406,  7.4028,  3.8099],
            [11.3147,  1.6122,  7.8506,  7.0089, 14.9096],
            [ 4.1171, 10.0786,  8.5611,  3.2245,  7.3504]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.5123,  0.7537, -0.4726,  1.2353, -0.4725,  0.0193, -0.7468,  0.5546],
            [-0.2911,  0.1852, -1.7030, -1.4031,  0.4036,  2.4064, -0.1676, -2.1515],
            [ 0.2065,  0.6031,  0.6230, -1.4837, -0.0360, -0.7080, -0.6833,  0.1944],
            [ 1.2125, -1.8789,  1.5152, -0.0792,  0.1244,  1.1697,  0.4498, -0.1620],
            [-2.1070,  1.0328, -0.8881, -0.4328, -0.3637,  0.6576,  0.9056, -0.3391],
            [-1.4624,  1.6615,  0.8852,  0.2275, -1.6716,  0.2382, -1.9473, -1.6588],
            [-0.6391,  0.6689, -0.1933,  1.4114,  1.2063,  1.2940,  1.0220, -0.5804],
            [ 0.4945, -0.6157,  2.0045,  1.2349, -0.0353,  0.0309, -0.8166, -0.9884]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4671,  1.1408,  0.3520],
            [ 0.3552, -0.6057,  0.3006],
            [ 0.1073,  3.2382, -0.4037]], requires_grad=True), Parameter containing:
    tensor([[-1.1202]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.8324, -7.4048,  3.0953, -4.6975,  4.5602, -4.6611, -0.2612, -3.1109],
            [-1.5355,  2.2926, -0.7693, -2.7050, -7.0242,  1.4243,  3.8543,  1.9223],
            [-4.4777, -3.9072, -1.3936,  1.7761,  0.5161, -9.5217, -0.8055, -3.1030],
            [ 0.7342, -0.0710,  7.2874, -6.9867, -1.8746,  1.1823, -4.0031, -0.2451],
            [ 1.6178, -7.9348, -2.2707, -0.8495, -0.6645, -7.8649, -3.7124,  2.5658],
            [-5.0293,  2.9154, -4.0597,  1.2480, -0.8999, -3.6245, -4.4195, -0.1258],
            [ 1.6902, -3.3663, -7.0309,  3.5588, -0.9113, -6.6389, -0.6015,  0.8501],
            [-0.1380, -3.8317, -1.6816, -8.4005, -3.7407, -1.8787, -3.3010,  0.4184]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.9498e-01,  4.9671e-01,  1.6015e+00, -8.4826e-01, -3.7576e-01,
              4.4536e-01, -8.9281e-01, -2.9194e+00, -2.0866e+00, -4.2215e-01],
            [-6.3377e-01,  6.8964e-01, -4.2085e-01,  1.1300e+00, -6.5142e-01,
             -1.0327e+00, -1.7377e+00,  1.4196e+00,  7.7327e-01, -2.5131e-01],
            [-2.0587e-01, -2.4789e-01,  2.2184e+00, -7.0974e+00, -1.6213e+00,
             -9.8193e-01, -2.0355e+00, -8.8546e+00, -3.5057e+00,  4.6724e-01],
            [-6.0193e-01, -6.3303e+00,  4.8526e+00, -3.9794e+00,  7.7361e-01,
             -3.6863e-01, -4.9836e+00,  2.8106e+00,  1.1534e+00, -7.6188e-02],
            [-9.4887e-01, -1.9564e-01, -8.6469e+00, -4.8242e+00, -4.9165e+00,
             -3.3047e+00, -5.7841e+00, -1.8692e+00, -6.7794e-01,  5.0165e-01],
            [-4.2165e-01, -3.9810e+00, -2.1097e+00, -1.1820e+00,  5.0060e+00,
             -4.5823e-02, -3.2781e+00,  1.4884e+00,  2.9475e-01, -4.3535e-02],
            [ 4.7208e-01, -2.2449e+00, -1.8042e+00, -1.1721e-01, -2.3708e+00,
             -4.5511e+00, -7.5649e-01, -3.6342e+00,  3.5642e+00, -1.8365e-01],
            [ 8.5321e-02, -2.5216e-01,  2.2341e+00,  5.2000e+00, -3.2387e+00,
              3.5052e+00,  2.4195e+00,  1.2157e-02, -2.1844e+00,  7.0888e-03],
            [-1.3004e-01,  4.1525e+00,  2.4375e-01,  3.9766e+00,  2.1750e-01,
             -5.8310e+00, -6.5019e-01, -1.1003e-02,  2.1504e+00, -4.3804e-01],
            [-7.4232e-02, -2.1792e+00,  2.1354e+00, -1.2062e-01,  1.0963e+00,
              1.8315e+00,  2.3850e+00, -1.0193e+00, -2.3301e+00,  2.9999e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.598 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
