.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.8166, 13.6417,  7.2706,  5.1229,  5.4640],
            [ 6.0262,  5.6638, 18.7100,  2.1045,  7.2456],
            [ 3.1946,  8.3926,  5.8639,  9.8892,  3.7556],
            [14.2591,  7.9943,  6.8348,  2.7392,  6.4664],
            [18.3990,  2.8107,  0.7365,  7.3784, 17.1728],
            [14.2591,  6.4991,  2.6680, 13.7864,  6.4664],
            [ 3.1946,  4.3096,  1.4869, 10.7272,  3.7556],
            [ 6.0262, 10.5918,  7.2762,  2.6344,  7.2456]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6183, -1.2501, -1.5404,  1.1995, -1.2010, -0.6815,  0.1434, -0.4204],
            [ 1.5040,  0.4321,  2.1609, -0.7442,  0.2701, -0.8538,  0.7685,  1.1871],
            [-0.2929,  0.1696,  0.6823, -0.4925, -2.2745,  0.6421, -0.3478,  1.3392],
            [ 0.2598,  1.2926, -0.9338,  0.0546, -1.2862, -0.6739,  1.2177, -1.0801],
            [ 0.6040,  1.1853,  1.3730, -0.0618, -1.3902, -0.5426, -0.9282, -0.2177],
            [ 0.4035,  0.1079,  0.3597, -0.0722,  0.3484, -0.2765,  0.7686, -0.7271],
            [ 0.9125, -0.3678, -0.7598, -1.0599,  0.9696, -0.8391, -1.1544,  1.4295],
            [ 2.8513, -1.4912,  0.2910,  1.6527,  0.8877,  0.0274,  2.0920,  1.8092]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.1523, -0.1295, -0.5411],
            [ 0.2753, -1.1454, -0.6956],
            [ 0.0621,  0.3800,  0.5898]], requires_grad=True), Parameter containing:
    tensor([[2.7539]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.8216,  2.8582,  3.7909,  6.3914,  6.1703,  2.6420,  1.8463, -0.3349],
            [ 3.4866,  3.5349,  2.0414,  4.3773,  5.0684, -1.3310, -0.0633,  6.4883],
            [ 3.7331,  1.7860, -1.0913,  5.9065,  4.5064,  7.9351,  6.2704,  3.7630],
            [ 6.1218,  1.0679,  3.0376,  2.7027,  4.4491,  3.2685, -1.4342, -2.4154],
            [ 2.4935,  0.9997,  0.1136,  6.6146,  6.7758,  2.3141,  4.0202,  3.3215],
            [ 7.1453,  1.9878, -1.9448,  8.5286,  1.4065, -0.5067,  1.4953, -2.2440],
            [ 7.6572,  0.1881,  0.4577,  6.0461,  4.5197,  3.1684, -0.4728, -1.5256],
            [ 4.0940,  6.6637, -0.9553, -1.0498,  2.4446, -0.3451,  2.2859,  5.1090]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.9622, -0.2245, -0.9625, -2.1274, -0.2735,  1.1225, -1.5040,  2.1528,
              0.2846, -0.5483],
            [ 2.1401,  0.1014,  1.0316,  1.8030,  1.4089,  0.6976, -2.2965,  0.4665,
             -0.0882, -0.5345],
            [-2.1668, -1.0069,  0.4816, -1.9581,  2.4474, -4.7181, -0.1370,  0.7701,
              0.6827,  1.0477],
            [ 0.0107, -3.3632, -1.6986,  5.3193,  3.4866,  1.8777, -1.8632,  0.8689,
             -0.2553, -0.4184],
            [-0.1381, -2.4583,  4.9187,  7.2502, -4.1600, -5.6218, -0.4190,  1.3162,
             -0.8582, -1.3326],
            [-1.4270,  1.9273,  1.7190, -1.5964, -5.0192,  0.6264,  7.4077,  0.0501,
             -2.0225,  0.4850],
            [-0.2466,  1.5831,  2.1842,  1.7118,  0.2150, -4.7963, -2.5790,  0.1196,
              1.1785,  0.6756],
            [-2.2191,  2.2406,  0.2087,  0.8794, -1.5196, -4.7152, -2.2628,  2.9390,
              1.5341, -0.5932],
            [-0.2793,  1.4419, -0.3255,  0.4305,  0.4060, -0.1184,  0.1606,  0.9405,
              1.3208,  0.6604],
            [-0.0626, -0.3200, -0.2158,  0.6079,  0.2690,  0.4899, -0.4548, -1.2909,
             -1.1841, -0.2798]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.578 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
