.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.9741,  5.4023,  8.1810,  1.8088,  4.8054],
            [ 1.8741, 11.7683,  7.0285,  7.1411,  9.6776],
            [ 3.6506, 14.6155,  5.8719,  4.7893, 19.6752],
            [ 6.7224,  9.9345,  7.1015,  4.3500,  3.1028],
            [ 0.7410, 13.8413, 10.8739,  6.5289,  1.2554],
            [ 6.7224,  8.4952,  7.8192,  6.0268,  3.1028],
            [ 3.6506,  7.1118,  8.4690, 11.7571, 19.6752],
            [ 1.8741, 14.5897,  9.0373,  6.8427,  9.6776]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-7.7432e-01,  9.1079e-01,  8.9649e-02,  1.7353e+00,  5.8250e-01,
             -9.4662e-01, -6.9045e-01, -1.2417e-01],
            [-1.3605e+00, -2.7338e+00,  1.3403e+00,  5.1635e-01,  1.0270e+00,
             -3.5797e-01, -4.1702e-01, -7.4843e-01],
            [ 1.1349e+00,  1.0666e+00, -8.1009e-02, -1.9441e-01, -3.1269e-01,
             -3.8375e-01, -2.0296e-01, -8.8993e-01],
            [-4.5790e-01,  3.8590e-01, -2.7078e+00, -6.3595e-01, -1.1026e+00,
              1.4800e+00,  1.5639e+00,  2.6083e+00],
            [-6.9362e-01, -3.8520e-01, -3.1076e+00,  6.9113e-01,  7.3591e-01,
             -4.6180e-01, -1.0690e+00,  1.4066e+00],
            [ 5.9539e-01,  7.1707e-01, -3.5670e-01, -1.7343e+00,  1.6742e-01,
              1.0372e-02, -6.6284e-02, -2.7051e-01],
            [ 1.8310e+00, -1.2357e+00,  3.9135e-01, -2.9555e-02,  9.2050e-01,
              9.3885e-02, -1.1999e+00, -1.9238e+00],
            [-2.4156e-02, -1.0255e+00, -3.7411e-01,  1.0485e-03, -1.2870e+00,
              1.1780e+00,  1.6034e-02,  1.9575e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2506, -0.8322, -1.0355],
            [ 0.4384,  0.6424, -0.9752],
            [ 1.6770,  0.5160, -1.4399]], requires_grad=True), Parameter containing:
    tensor([[-1.3689]], requires_grad=True)]
    Output from the convolution:  tensor([[-6.1272, -0.4918,  0.0339,  0.2010,  0.1332,  0.1112, -0.4841, -2.4632],
            [-5.1866, -1.9572, -5.6423, -3.4445, -0.7856,  2.7091,  1.3381, -2.9580],
            [-0.9454, -2.5889, -3.7943,  0.8619, -5.5703, -1.5989,  5.1790, -1.3447],
            [-0.7713,  1.3605, -0.9931,  4.7743, -1.5977, -1.6909, -0.9218, -5.5945],
            [ 3.5924,  3.1760, -4.4983,  4.6731, -3.8613, -4.2023,  1.4215,  1.4595],
            [-0.7875, -3.7101, -7.7323,  1.0004, -0.9774, -0.1086, -6.0822, -2.6879],
            [-0.8703,  0.9362, -4.0981,  1.5591, -0.2960, -6.9865, -3.4442, -1.6817],
            [-2.7373, -0.0461, -1.9154,  3.8282,  1.7128, -1.7704, -4.6081, -3.7774]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3221,  1.0257,  0.9210, -0.6766,  0.4843,  2.6713,  1.0136, -1.5913,
             -2.8334, -0.9276],
            [-0.7285, -1.0612,  2.2381,  1.4333, -2.6168, -1.6861, -0.4767, -1.8456,
             -3.0327, -0.2412],
            [-2.1290, -1.3393,  0.6194, -1.3730, -1.6303, -0.1785,  6.3184,  1.3056,
             -5.7143, -0.6176],
            [ 1.6375, -0.4539, -5.4080,  0.6764,  2.1900, -0.1034,  3.4564, -1.7219,
             -4.3588,  0.0828],
            [ 1.5767,  1.5955, -1.1321, -1.3173,  3.8361,  0.3884, -2.2849,  1.9145,
              1.7394, -0.7997],
            [-0.5218,  2.1609,  2.2799,  1.3860,  1.8883,  0.1912, -4.7784, -0.9326,
              2.8002, -2.3439],
            [ 0.3683, -0.8004, -1.9295, -1.1297,  2.4227,  4.9782, -4.3888, -0.9845,
              8.1459,  0.5041],
            [ 1.1776, -0.1079, -0.9708, -0.6420, -1.9445,  1.6465, -1.2497, -4.2135,
              2.1823, -0.6687],
            [-0.2634, -0.4479,  1.7324, -1.8568,  0.3200,  2.2246, -3.7619, -5.8344,
              3.5666,  1.5637],
            [-2.9514, -0.6197,  3.7372,  3.5150, -0.5549, -2.1179,  0.9766,  0.3384,
              0.2732, -1.0137]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.294 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
