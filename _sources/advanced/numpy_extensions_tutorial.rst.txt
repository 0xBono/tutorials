.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.2825,  4.4239,  8.7498,  5.4125, 11.5263],
            [ 0.8667,  5.1936,  6.7281, 15.0024, 18.0987],
            [ 7.9482,  8.3042,  2.1160,  9.2948, 11.0276],
            [ 3.8385,  5.2769,  8.2941,  6.6915,  9.1620],
            [12.5419,  7.1261, 15.7883,  6.9639,  1.2078],
            [ 3.8385,  3.9597,  4.9592,  8.6559,  9.1620],
            [ 7.9482,  4.3687,  3.2508,  8.8794, 11.0276],
            [ 0.8667,  5.4423,  4.5639,  8.7167, 18.0987]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1394e+00, -8.0230e-02,  4.5240e-01,  9.8294e-01, -3.0263e-01,
              5.9060e-01,  3.5613e-01,  1.9581e-01],
            [-1.5495e+00,  3.4762e-01, -2.4367e+00,  1.0149e+00,  3.1524e-01,
              2.8858e-02,  2.2361e-01,  9.9516e-02],
            [-3.8966e-01,  5.2412e-01, -1.6683e+00, -3.5706e-04,  2.4538e-01,
             -4.2758e-01,  9.0759e-01, -6.9454e-01],
            [ 7.3054e-01, -1.3853e+00,  7.6704e-02,  1.6842e+00, -1.4574e+00,
             -1.8642e+00,  3.4992e-02, -7.1059e-01],
            [ 2.4694e-02,  6.3285e-01,  1.2638e-01, -4.9705e-01, -9.7290e-01,
              1.1219e+00,  4.6299e-01,  4.4182e-01],
            [ 9.1757e-01, -2.8683e+00,  1.2562e+00,  3.9900e-02, -3.8301e-01,
             -8.8419e-01,  7.4452e-01,  2.9957e-01],
            [-4.4927e-01, -3.3388e-01,  1.6274e+00, -2.8465e+00,  1.3606e+00,
             -8.6459e-01,  1.5782e+00, -6.1395e-01],
            [-8.0162e-01, -2.2246e+00,  5.8836e-01,  3.8690e-01,  2.3611e-01,
             -6.7480e-01, -8.7209e-01, -8.2527e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4334, -0.3401, -1.0069],
            [ 0.4266, -0.6930, -1.9070],
            [ 0.8344,  1.3509, -0.8749]], requires_grad=True), Parameter containing:
    tensor([[0.4669]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.7072,  0.5992,  1.7552,  2.1494,  0.1453,  1.1159,  0.9734,  0.6777],
            [-4.1013, -5.9242, -5.5828,  2.5745,  1.1064,  5.0273,  3.3642,  2.1842],
            [ 2.0658,  3.2419, -1.5749, -1.5947, -1.0379,  5.9103,  3.7052, -1.8286],
            [-2.3378,  6.0151, -0.8190, -8.2793, -2.3955,  0.6355,  1.4729,  0.2516],
            [ 0.0222,  8.0303,  1.7354, -5.2957,  6.4960,  5.8104,  2.6998,  2.7690],
            [ 2.6200,  4.4401,  1.7016, -2.9955,  2.7155,  4.1154,  2.3826,  4.0409],
            [ 2.7033,  1.8335,  4.8733,  2.6515, -2.1479, -3.5141, -1.7352, -5.7845],
            [ 2.4392, -2.6418,  2.4623,  7.9337,  0.8504,  3.5074,  4.2259, -4.2072]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2548, -0.2942,  0.8001,  1.6241,  0.1022, -0.9445,  0.3126,  0.0259,
              0.2775,  1.0110],
            [-0.2434, -0.0543,  1.6030,  2.7684,  0.5087, -0.7364,  0.2529, -2.3173,
             -0.3652,  2.7102],
            [-0.5586, -1.3518, -1.7089,  1.2397,  1.4609, -2.4538, -2.0127, -4.8427,
             -2.9579,  1.8544],
            [-0.1686,  0.9697, -0.7828, -1.0860,  0.8635, -3.8719,  1.4927,  2.2802,
             -1.2762, -1.3268],
            [-0.3835,  0.4988,  1.1429,  1.5690,  5.4398, -6.1104, -5.2578,  3.8502,
              2.6080, -1.8396],
            [ 0.8743, -0.9086, -0.2344,  0.3953,  2.1769,  0.1035, -8.6019, -1.0621,
              5.5196,  1.3120],
            [ 1.3658, -3.7223, -7.2573,  0.8076,  1.1903,  5.2603, -2.4718, -5.6978,
              2.7538,  2.6499],
            [ 2.9906,  3.0122, -4.0860,  1.0856, -3.4017, -0.3347, -0.2128, -8.7898,
             -2.9157,  0.8884],
            [ 1.0515,  1.0915, -2.3875, -0.3264,  1.1964, -0.3348,  0.3026, -1.6674,
             -2.5437, -0.1487],
            [ 0.4563,  1.0664,  0.1602,  0.4559,  1.4529,  0.9098,  1.2238,  0.5336,
             -0.6799, -0.0545]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.078 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
