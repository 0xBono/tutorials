.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[15.9535,  6.9515,  6.0989,  5.3835,  8.5717],
            [ 3.2820,  6.7264,  7.2940, 19.0109,  6.6195],
            [ 7.0593,  3.8638,  2.7734,  6.4442,  5.1066],
            [ 5.7478,  6.5620,  3.1668,  7.2243,  5.5481],
            [ 4.1191,  9.6360,  9.1017,  7.2216,  1.5718],
            [ 5.7478,  4.0217,  4.6029, 14.8538,  5.5481],
            [ 7.0593,  4.5057,  6.2041,  1.0419,  5.1066],
            [ 3.2820, 10.0826,  5.5179, 12.1746,  6.6195]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9678,  1.8526,  0.3028,  0.6349,  0.3867,  1.2723,  0.0417, -0.7818],
            [-0.8857,  1.8638,  0.8127, -0.2392,  0.7270,  0.6190,  1.1480, -0.2262],
            [-0.3829, -1.3526,  1.1372, -0.5751,  1.2230,  0.9015, -0.6069,  1.2082],
            [-1.6500,  0.1982, -1.1846, -0.3816,  1.2481,  0.6208,  1.5033,  0.4339],
            [-0.7343, -0.4921,  0.4868, -0.3934,  2.0876, -0.0454, -0.6439,  0.6391],
            [ 0.8178,  0.5257, -0.4099,  0.4397, -0.6171, -0.1691,  1.9781,  0.0585],
            [ 0.9987,  0.1506,  0.0397,  1.7582,  0.6136, -0.4452,  1.6365, -1.8496],
            [ 1.2150, -0.9818,  0.5350, -0.5532, -1.4410, -0.0507,  0.9118, -0.9491]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0409, -1.2347,  1.4082],
            [ 1.2780, -0.2068, -0.5627],
            [-0.4691,  0.0877,  1.7271]], requires_grad=True), Parameter containing:
    tensor([[-0.1300]], requires_grad=True)]
    Output from the convolution:  tensor([[ -0.8737,   5.0995,   3.3365,  -2.8654,  -6.0539,   0.7202,  -2.5105,
              -0.2965],
            [  0.4594,  -2.6357,  -4.5593,  -0.0670,   3.2062,   3.7516,  -0.3969,
               0.1573],
            [ -3.3205,   1.9507,   4.9008,  -3.3703, -12.1388,  -3.0218,   2.7709,
               2.8030],
            [ -3.4597,  -0.1401,  -3.5021,   0.5702,   7.8656,   5.3106,  -2.6506,
               3.0767],
            [ -3.8411,   3.0971,   5.8974,  -1.8786,  -1.5589,  -2.5341,   0.8852,
               0.2540],
            [  3.1400,   2.4887,   0.5073,  -2.1098,   1.7210,   5.3374,   1.0729,
              -0.2964],
            [ -3.3710,  -1.2640,  -1.7924,   2.6164,   4.3998,  -1.3715,   1.7715,
               2.1010],
            [  5.1221,   2.9149,   0.3059,  -9.7308,  -3.4135,   1.2165,  -1.0113,
              -1.1510]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.6797e+00,  1.8889e+00, -3.1671e+00,  6.3290e-02,  2.9577e+00,
             -1.2576e-01, -2.1598e+00, -8.4999e-01,  1.1214e+00, -1.4947e-02],
            [-3.1569e+00, -2.4213e-01,  4.8182e+00, -1.9892e+00, -3.2306e+00,
              2.2683e+00,  1.6937e+00,  6.8897e-01, -1.0194e+00, -2.5468e-01],
            [ 1.7994e+00, -5.0545e-01, -3.2132e+00,  1.3981e-01,  1.1109e+00,
             -1.2559e+00, -2.0562e+00, -1.3313e+00,  8.1747e-01,  1.3183e+00],
            [-6.2380e-01, -2.9395e+00,  4.6615e-01, -8.7312e-01, -1.4190e+00,
              4.3465e+00,  4.3908e-01, -1.2344e+00,  3.2172e+00, -3.3548e+00],
            [ 1.4851e+00,  2.8028e+00, -7.1293e-02,  1.1125e+00, -6.9938e-01,
             -1.5170e-01,  2.4491e+00, -6.3845e+00,  2.3686e+00,  1.9686e+00],
            [-8.2511e-01,  1.3002e+00, -3.2898e-01,  1.0693e+00, -6.3431e-01,
             -1.6618e+00,  2.4067e+00, -5.1437e-01, -6.1654e-01, -1.0093e+00],
            [ 2.1288e+00,  3.3256e+00, -3.4430e+00, -4.9588e-02, -5.1663e-01,
              2.2363e+00,  8.4284e-02,  1.6906e-01,  2.7669e+00, -3.7849e+00],
            [-2.9981e+00, -8.0103e-01,  6.2104e-01, -1.5763e+00, -1.4140e+00,
             -9.1758e-01,  2.1402e+00,  1.3213e-01, -2.3159e-01,  3.5064e+00],
            [ 1.4372e+00, -5.3662e-03, -3.5848e+00, -6.9790e-01, -4.9265e-02,
              2.3400e-02,  1.1002e+00, -8.0154e-01, -2.3959e+00, -2.9793e+00],
            [-1.2126e-01,  9.2013e-02,  1.7959e-01, -6.0528e-01,  7.6177e-01,
              1.6544e+00,  9.6383e-01, -6.3249e-01, -2.7733e-01,  3.1418e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.126 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
