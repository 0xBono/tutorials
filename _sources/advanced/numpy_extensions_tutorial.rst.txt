.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.4884,  5.2819,  3.7309,  5.0614,  3.5632],
            [ 9.7976,  6.9809,  3.1309,  7.4619, 10.3167],
            [10.0879,  3.7543,  5.7854,  3.3495,  6.2846],
            [ 8.0341, 11.1488,  3.1756,  7.4200,  9.6509],
            [ 2.0583,  4.5517,  6.0962,  1.9636,  6.4175],
            [ 8.0341,  8.8471,  6.6635,  4.5300,  9.6509],
            [10.0879,  6.4014,  4.0137, 12.0505,  6.2846],
            [ 9.7976,  4.6626,  6.2172,  8.9643, 10.3167]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7479, -0.5455,  0.7052,  0.1841, -0.4483, -1.6635, -0.6031,  0.0766],
            [ 0.0125,  0.3242,  0.7619,  0.5714, -0.3032,  0.1513,  0.0179,  0.4510],
            [-1.0227,  0.8164, -0.3934,  1.4606, -0.1143,  0.7798, -0.3103,  0.3019],
            [ 0.5537, -0.1944,  0.2589, -0.7012, -1.3004, -0.2596, -1.2372,  1.0289],
            [-0.8678, -1.1334,  0.4613, -1.4692,  0.5134, -0.5264, -1.3090,  0.4658],
            [-0.7671, -1.4757,  0.0432, -1.0932, -1.2862, -0.0636, -0.7180, -1.3127],
            [ 2.1403, -0.2960, -0.8974, -0.9886,  0.5285, -0.0193,  0.9715, -0.2646],
            [-2.1092,  1.8123,  0.4287,  1.2522,  0.2533, -0.6087, -0.2408, -0.5237]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-2.4895,  0.6510,  0.8209],
            [ 0.9208,  0.7474, -1.0074],
            [-0.9195, -0.2513, -0.2385]], requires_grad=True), Parameter containing:
    tensor([[-1.5987]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.3632, -3.0407,  4.6932, -1.8172, -5.3530, -2.8868, -2.9085,  0.6434],
            [-1.0237, -1.5428, -2.4523, -2.0883, -0.0661, -0.7794, -4.2877, -1.3241],
            [-1.3692, -3.1220, -3.0417,  3.1063, -4.3133, -0.1780,  1.2943,  0.6679],
            [-5.6810, -3.6099,  4.0962, -2.2276, -3.5102,  4.4447, -4.9925, -1.6524],
            [ 1.2580, -2.0489, -3.0654, -0.5645, -2.6508, -1.2075,  0.2791, -3.7426],
            [-6.0867, -5.1941,  0.4254,  0.1293, -2.3251,  1.7541, -3.2475,  2.7048],
            [ 2.6703,  0.5437, -1.5821, -5.6124, -8.4545,  3.9786,  0.2527, -2.8871],
            [-1.9075, -1.4531, -4.9464, -6.1020, -1.7754,  7.0863, -4.3312, -2.8545]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.1133, -0.7965,  0.8386,  0.5189,  1.0973, -0.3959, -1.0849, -2.4785,
              0.9672,  0.8972],
            [-0.6043,  5.3737, -1.8237, -1.5412, -4.5411,  1.5465,  1.4602, -5.2106,
              2.3375,  0.9852],
            [ 1.5708,  1.1843, -1.8006, -4.0147,  5.3951,  1.6469, -1.6475, -2.6905,
              1.9348, -1.4938],
            [-1.8910,  3.6921,  1.2706,  0.9116,  1.2449, -2.6387, -1.4733,  0.2248,
              0.7055, -2.8214],
            [-0.6516,  1.8282, -3.1971, -0.2192,  1.0214, -1.1191,  3.8928,  3.4152,
             -3.0002, -1.4610],
            [-0.4721,  2.5807, -0.6493,  2.6770, -0.1038, -2.4998,  2.2598,  0.1469,
             -1.5068,  1.9941],
            [ 1.0673, -0.4740, -0.4578,  2.3857, -0.9840,  4.4793, -2.9159, -1.7685,
              2.2130,  1.4364],
            [-1.6089,  0.2442,  0.4623,  1.7111, -0.2845, -4.6001,  1.0307,  1.1300,
             -0.1963,  0.1815],
            [ 0.8013,  0.2435, -0.1910, -0.3831, -0.8267,  2.4680,  0.1220, -0.6186,
              0.5536, -0.8923],
            [-0.2994, -0.0607,  0.0829,  1.0176,  0.8968, -0.1082,  0.3529, -0.7373,
             -0.1014, -0.1804]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.565 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
