.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.0761,  2.4350,  6.9095,  9.0608,  5.1836],
            [13.3978,  3.6478, 14.2941,  5.3512,  5.1206],
            [ 7.3975, 12.3605,  9.1613,  5.1076,  6.6420],
            [12.4837,  4.5954, 12.5492,  7.0752,  1.7384],
            [12.9094,  8.0211,  2.7903,  3.1981,  3.8593],
            [12.4837, 17.5382,  4.3906,  3.9767,  1.7384],
            [ 7.3975,  1.3661,  2.7014, 12.2059,  6.6420],
            [13.3978,  3.9152, 10.6801,  9.0827,  5.1206]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8001,  0.7052,  0.3036,  0.3969, -0.9265, -1.9637,  1.2650, -0.3042],
            [ 0.6218,  2.0128,  1.9788, -0.6499,  1.7360,  1.4068,  0.2296, -0.7428],
            [ 0.1623, -1.2922, -2.2717, -1.5863,  1.4721,  0.1709, -0.1304,  0.3589],
            [-0.2900,  0.6488,  0.1933,  1.8341,  0.0507, -0.1750,  0.1094, -0.3217],
            [-0.5934,  0.3532,  0.6110,  0.4809, -0.8981, -0.2675, -0.0072, -0.6703],
            [-0.8935, -1.4021, -0.7672, -0.6117, -1.2325, -2.2283,  0.4164,  0.6813],
            [ 0.7959, -1.0799,  0.8394,  0.6513, -2.0873, -0.9692, -0.0324, -0.2030],
            [-0.1209, -0.1175, -0.3543,  2.4419,  0.3766,  0.8863,  1.7733, -0.4978]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2406, -1.4748,  1.1618],
            [-0.0896, -0.1598,  0.4101],
            [-0.3137, -0.0246, -0.0937]], requires_grad=True), Parameter containing:
    tensor([[1.4368]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.9462,  2.2501,  1.3905,  0.4906,  2.2333, -0.6416,  1.7897,  5.9164],
            [ 1.8856, -0.0794,  2.7056,  2.2164,  1.1679,  1.5911,  2.1260,  0.9342],
            [ 0.1573, -1.2269,  4.0537,  1.6418,  1.5120,  1.3702,  0.1926,  2.6373],
            [-0.9645,  2.1085,  3.4451,  0.8080, -1.0602,  3.4838, -0.4013,  0.8307],
            [-0.6583,  1.2346,  1.7676,  2.7478,  1.0869,  0.2179,  3.7339, -1.0174],
            [ 0.6120,  2.1134,  2.5467,  0.5062,  1.9165,  0.0179,  3.9077, -1.0287],
            [ 2.0051,  1.9849,  0.0608,  1.1775,  3.2079,  2.5986,  2.9717, -4.7437],
            [ 4.6112, -0.9952,  2.8227,  1.8664, -0.5763,  2.7678,  0.3965,  0.0352]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0796,  0.5003, -0.5160,  0.0820,  1.8021, -1.9263, -0.4478,  1.4542,
             -0.0319, -0.6583],
            [ 0.0631,  0.0790, -1.0421, -0.6127, -0.0562,  2.0688, -3.4080,  2.9344,
             -3.0926,  2.1391],
            [-0.0795,  1.0694, -1.7012,  0.2768,  2.3049, -0.7674,  0.0534, -1.5274,
              2.6828, -0.0749],
            [ 0.0801, -0.5916, -0.6656, -1.0757,  1.9102, -2.0533, -0.8344, -0.4500,
             -0.3291,  0.6491],
            [-0.2357,  2.4160, -1.8846, -0.2045,  1.2203,  0.6680, -4.9491,  3.6763,
             -1.1247,  0.9414],
            [ 0.2421, -0.6523,  0.0300, -2.4279,  2.0555, -2.5464,  2.2049, -0.5715,
             -0.3241,  0.1958],
            [ 0.3461,  0.7617,  0.5985,  0.1717, -0.0649, -3.2020,  4.3936, -1.2457,
              0.3021, -0.5882],
            [-0.0163, -0.9536,  1.5449, -1.7784, -0.9918, -1.6934,  3.5653, -1.3426,
             -1.2754,  0.7373],
            [ 0.1656,  0.3213,  0.7404, -0.4606, -0.6290,  0.1342,  0.5668, -0.2600,
             -0.0576,  0.3871],
            [-0.1679,  0.3455, -0.0094,  0.1194, -0.3128,  0.3141, -0.0839, -0.1601,
             -0.0249, -0.0774]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.569 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
