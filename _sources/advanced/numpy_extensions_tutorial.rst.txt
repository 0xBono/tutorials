.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.9395,  2.5894, 11.9059,  8.1269,  3.1939],
            [ 4.4357, 10.4610, 14.6597,  5.9534,  4.4849],
            [ 2.5570, 10.5817,  6.2463, 11.5485,  8.3265],
            [12.1250, 14.6291,  2.4307,  7.7849,  3.7138],
            [13.1179,  5.2381,  7.6407, 11.2920, 13.1790],
            [12.1250,  5.4760,  2.3900,  9.1483,  3.7138],
            [ 2.5570, 10.5860,  4.4014,  6.3659,  8.3265],
            [ 4.4357,  7.6242,  5.2053,  5.2341,  4.4849]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.5227, -0.6184, -1.9370,  1.6836,  0.6913,  1.5538,  0.4270, -1.3301],
            [-0.7894, -1.4738, -0.2142,  0.6968,  1.9573,  0.3210, -1.8250, -1.8457],
            [ 2.2344, -0.3054,  1.9840,  1.0025, -1.0886,  0.0668,  1.4267,  0.8653],
            [-0.8562,  1.2363, -1.3716,  0.1420, -0.4239, -0.8862, -0.0752,  0.2175],
            [ 0.5770,  0.8059,  1.1866,  0.2778,  0.5050, -0.2372, -0.0063,  0.1657],
            [ 1.2565,  0.7937, -1.1320, -0.2636,  0.1448,  1.7375,  0.6779,  0.4641],
            [ 1.2126,  0.4801,  1.0020, -0.7365, -0.0924,  0.2788, -0.8843, -0.1847],
            [ 0.3878,  2.5236, -1.5859,  0.0634,  0.2292,  0.2530, -0.7679, -0.1810]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.2135, -1.2935,  0.8925],
            [ 0.6111, -1.5973, -0.1144],
            [-0.9499,  0.3897,  0.4485]], requires_grad=True), Parameter containing:
    tensor([[0.0403]], requires_grad=True)]
    Output from the convolution:  tensor([[-6.8192, -0.6374,  1.3517, -0.1722,  2.7028, -2.2398, -0.3229, -0.3349],
            [-2.1027,  6.7610,  0.2731, -0.6542, -1.2376,  1.3555,  0.5952,  2.8584],
            [ 0.3476,  2.1257, -0.6211, -0.3253, -0.7524,  0.4643,  3.2757, -3.4057],
            [ 3.4567,  1.4542, -2.5337,  1.0071,  1.8327, -1.1701,  1.2354, -6.4056],
            [ 3.4171,  6.1212, -4.0942, -0.6452, -1.6743,  1.1938, -5.1291,  0.9309],
            [-0.3475, -0.2966, -5.8230,  0.8856,  1.5849,  2.2600, -1.8101,  0.1200],
            [ 2.3391,  0.2799,  0.0377,  1.0315, -3.4165,  2.5975, -4.8018,  4.2129],
            [-1.7666, -0.8963,  1.3873,  0.6117, -0.4327,  2.6506,  2.3088, -0.4225]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 8.4712e-02, -1.1438e+00,  2.8955e+00, -3.0147e+00,  4.3990e+00,
             -2.8154e+00,  1.7530e+00,  1.9884e+00, -1.8966e+00,  1.3896e+00],
            [ 1.9445e+00, -2.9199e-01,  3.6443e-01,  3.4556e-01,  1.7518e+00,
             -4.4948e+00,  3.3573e+00, -4.3049e+00,  1.2650e+00, -1.2917e+00],
            [ 1.6893e+00, -2.1236e+00, -2.9615e+00,  6.3962e-01, -2.4387e+00,
             -2.1363e-03,  1.9806e+00, -5.0418e+00,  1.4899e+00,  8.3452e-01],
            [-1.1812e+00, -2.3327e+00,  5.0885e+00, -2.7213e-01, -3.5540e+00,
              2.2421e+00, -8.5168e-01,  3.3165e+00,  3.9684e-02,  1.0278e-01],
            [ 7.1857e-02,  4.0639e-01,  7.2930e-01, -4.3594e+00, -1.3662e-01,
             -3.0045e+00,  6.2642e+00, -5.3364e+00,  5.0353e-01, -9.7871e-01],
            [ 1.7077e+00, -2.1949e+00,  2.1184e-01, -2.8691e+00,  5.2426e+00,
             -5.6794e-01,  4.0155e+00, -3.4177e+00,  2.4132e+00, -2.5484e-01],
            [ 7.7574e-01, -2.4890e+00,  9.4723e-01,  1.9870e+00, -8.0392e-01,
              1.7300e+00, -3.1559e-02, -1.0731e+00,  3.2596e+00, -7.1521e-01],
            [ 1.1649e+00, -3.2454e+00,  1.9030e+00,  7.0915e-01, -2.0739e+00,
             -2.2485e+00,  7.0259e-01, -1.1404e+00, -2.3171e+00,  1.1636e+00],
            [ 3.3281e-01, -1.9118e+00,  4.7739e-01, -2.5787e+00,  2.8169e-01,
              1.0437e+00,  9.6190e-01,  2.6117e+00, -2.0906e+00, -3.6802e-01],
            [-1.3980e+00,  7.9895e-01,  4.8011e-01,  6.1000e-01,  3.3654e-01,
              3.5264e-01, -5.5030e-01, -2.0327e+00,  5.9748e-01,  7.3871e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.539 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
