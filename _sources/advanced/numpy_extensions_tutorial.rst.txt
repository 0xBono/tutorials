.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.9791, 12.6936,  6.2782,  1.9917,  1.4572],
            [ 4.3220,  2.2696, 10.4413,  6.7026,  5.0255],
            [ 0.9365,  4.3768,  2.4685, 11.3197,  8.3508],
            [ 4.2392,  8.9685,  8.4426,  3.8845, 10.6721],
            [ 5.0490,  4.4656,  5.0930,  8.9992,  0.7910],
            [ 4.2392,  6.5112,  9.0745,  5.7000, 10.6721],
            [ 0.9365, 10.0042,  5.5130, 13.5583,  8.3508],
            [ 4.3220,  9.1766, 10.0342,  5.1022,  5.0255]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.2694,  0.2625,  0.2146, -0.1870,  0.2889, -1.2717,  1.1374, -0.5420],
            [-0.9562,  0.8284,  0.6245, -0.1368, -0.7775, -0.5899, -0.3850,  0.6203],
            [-0.0211, -1.1264, -0.1724,  0.0972,  1.6094, -0.0918, -1.5647,  0.2204],
            [ 1.7504, -1.1179,  0.4375, -0.1746,  0.8716, -0.2137, -0.8904, -1.1002],
            [-0.4554,  2.2524, -0.5690,  0.5168,  0.4886, -1.4031, -0.2611,  1.3668],
            [ 0.1824, -0.1614, -0.6027,  1.6043,  0.6338, -0.8220, -1.9413, -0.0200],
            [ 0.3517,  0.2787,  1.4362,  0.9566, -1.1710,  0.3126,  0.0582, -1.2079],
            [-1.2057, -1.6073, -0.1105,  0.7775,  0.3841,  1.4749, -0.8342, -1.0564]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1643,  0.8102, -0.1741],
            [ 0.2387, -0.8332, -0.0736],
            [-1.6072,  1.4513, -1.0964]], requires_grad=True), Parameter containing:
    tensor([[-0.2083]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.5505,  0.6461, -2.3789, -0.5022, -2.4941, -0.2274,  4.1781, -5.6652],
            [ 5.4262, -5.0813,  1.9190, -0.8031,  0.1098, -3.4610, -2.8823,  6.4727],
            [-3.2635,  2.0870, -1.1583, -2.9117,  0.7761, -1.9986,  1.2370, -1.8414],
            [ 0.6182, -0.5585,  1.0596, -1.6770, -6.8896,  2.9792,  3.4486, -2.7586],
            [-3.3381, -0.9195, -2.4650, -0.6231,  0.9363, -4.3554, -4.1117,  5.0269],
            [-1.0348,  3.5530,  1.0264, -5.5944, -0.6057, -0.2803,  6.0930, -8.7858],
            [ 1.2631, -3.6227,  0.4315,  1.4935, -0.9951, -1.4235, -1.0501,  0.9424],
            [-3.9623,  2.0865,  4.8737, -6.7610,  7.8452, -5.1773,  6.4254, -6.3222]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.2482, -1.6245,  0.4286, -1.9570,  1.1259, -1.1175, -1.3036,  0.3310,
              0.3207, -0.1317],
            [-1.0403,  3.5887, -0.8994, -0.2177, -2.0640, -0.3516, -1.1812, -0.8738,
             -0.6860, -0.1116],
            [ 2.6936, -4.5225,  2.7435, -2.4060,  3.7037, -5.2413, -0.4233, -2.4963,
             -0.1400, -1.0312],
            [-2.0459,  5.5201, -3.6479, -0.3911,  0.7170,  0.6662, -3.1119,  2.1781,
             -2.0021, -0.3557],
            [ 0.6754, -2.9937,  1.3173, -0.9637,  1.2321, -3.4980,  2.8000, -1.4120,
              1.0381, -0.8053],
            [-2.5162,  2.0809, -4.6835,  0.1899,  2.1165, -2.0490, -1.3244,  1.0283,
             -0.0387,  0.5560],
            [-0.2025, -1.0132, -2.5294, -2.2716,  0.5597,  1.9397, -2.2004,  3.1756,
             -3.0758,  1.6815],
            [-1.9480,  0.0073, -0.3216,  1.1324,  0.3352, -2.8136,  1.0060,  2.0240,
             -1.6511, -0.0507],
            [ 0.3891,  1.4396, -4.0392,  0.3392, -0.2950,  3.2119, -2.8868,  0.5466,
              1.4463, -0.7022],
            [ 0.3357, -1.6047,  1.3095,  0.7574,  0.9461, -0.5168,  1.0003,  1.6499,
             -1.1041,  0.7800]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.091 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
