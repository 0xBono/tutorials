.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.4155,  6.6625, 12.4225, 15.1640,  6.7573],
            [ 7.0836,  6.5218, 10.1133,  9.0111,  7.7671],
            [ 6.8574,  9.3489,  8.0267, 10.1195,  9.2868],
            [ 3.3209,  8.8068,  3.3562,  5.4063,  4.9858],
            [ 1.8079, 15.6047,  4.5359,  2.4014,  3.1199],
            [ 3.3209, 16.3369,  1.2183, 10.1249,  4.9858],
            [ 6.8574,  4.0209,  9.0040,  2.4513,  9.2868],
            [ 7.0836,  6.8979,  7.0558, 10.3614,  7.7671]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9490,  0.9659, -1.0875, -1.4121,  0.8316, -0.7630, -0.0542, -2.3297],
            [-0.8860,  0.3730,  0.1956,  0.1671,  0.0764, -0.7446, -0.2347, -0.5567],
            [-0.9972, -1.0784,  0.3143,  1.0569,  0.9234, -0.1847, -0.5127, -0.2655],
            [-0.5411, -0.2201,  0.6398, -3.1502, -0.2165, -1.2484, -0.6194,  2.6759],
            [-1.5375, -0.9360,  0.1102, -1.3671,  2.0928,  1.3794,  0.7214, -1.3282],
            [ 0.4153,  0.8712,  0.3633, -2.1979,  0.1986,  0.3333,  1.8772, -0.2579],
            [-0.7111,  0.9183,  1.4158, -0.2214,  0.0544,  0.0970, -0.9511,  0.1934],
            [-1.6149,  0.5903, -1.1711, -0.2556, -0.2885,  1.2961,  0.8133, -0.4868]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1462, -0.9449, -0.8380],
            [-0.1032, -0.5105, -0.4467],
            [ 1.2341, -0.3559,  1.5540]], requires_grad=True), Parameter containing:
    tensor([[-0.0931]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.6929, -0.0705,  0.4570, -3.5290, -3.5136, -1.0773, -3.2645, -0.5333],
            [-2.5468,  0.6441,  1.0916,  0.1433, -0.0208,  1.7360,  3.7909,  2.0058],
            [-2.0211,  2.4531, -0.7758,  3.0880, -3.6125,  2.5924, -0.6898,  0.5572],
            [-0.4031, -0.5845,  2.9848,  0.2765,  2.9622,  0.0286,  2.5970, -2.1307],
            [ 0.7697, -0.3293, -1.8221, -0.7884, -0.9305, -0.0141, -3.0675,  0.8681],
            [-0.4131, -0.7135, -0.6704, -2.2343, -0.6552,  1.0896, -2.1126,  2.2265],
            [-1.4468, -2.0302,  2.5723, -0.5965,  7.0080, -0.8536,  5.9113, -2.5432],
            [ 1.9003,  5.8002, -0.5901,  2.3795, -2.2231, -3.4604,  1.4696, -0.7760]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0989,  0.7897, -0.2358, -1.8590, -1.7371, -0.1225,  0.8504, -0.9814,
             -0.7735,  0.2091],
            [ 0.0144,  0.4801,  0.7734, -1.0422,  0.9062,  2.0225, -0.6560, -0.0412,
              0.2730, -0.1769],
            [-0.7744,  1.5081,  1.5476,  2.1459,  0.7800,  3.1799,  2.4813,  0.2312,
              3.1524, -0.0868],
            [-0.5867, -0.0207,  0.0258, -4.6757,  2.1308, -0.2175, -0.1561,  2.1807,
             -1.0908,  1.9176],
            [ 0.3409, -1.5449,  1.2625, -1.7347,  2.3941,  0.0967, -1.5739, -3.5246,
             -1.1855, -0.0692],
            [-0.8604,  0.4708, -2.0526,  0.4823,  0.0793, -1.3462,  2.2379, -2.2346,
              0.8807, -2.7449],
            [ 0.5957,  0.2930,  0.8654, -1.4444, -1.8017, -2.3530,  1.9876, -0.6215,
              1.5382, -0.9436],
            [ 0.9823, -2.0931,  0.1845, -1.1948, -0.5053, -4.6910, -2.2166, -0.7308,
             -1.2937,  1.4427],
            [-0.9792, -0.7656, -0.1938,  0.0232,  3.0848, -1.7099,  1.7293, -0.4202,
              0.1217,  0.5984],
            [ 2.0454, -0.3789,  1.3058,  1.9728,  0.0427,  0.8511,  3.4074, -0.9792,
              1.1842, -0.4531]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.531 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
