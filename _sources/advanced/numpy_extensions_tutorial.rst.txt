.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.3751, 12.4349,  6.8720,  9.8260,  5.7473],
            [ 5.7549,  6.9154, 10.3140,  2.9981,  7.2575],
            [ 2.4129, 10.7350,  4.5864,  5.7275,  3.0222],
            [ 8.1386, 12.7848, 15.3892, 11.5451,  9.1811],
            [13.6588,  6.5451,  4.3302,  3.6811,  3.6930],
            [ 8.1386, 15.8735,  8.9587,  5.3046,  9.1811],
            [ 2.4129,  6.2944,  2.4946,  8.5067,  3.0222],
            [ 5.7549,  9.6155,  7.4316,  4.9194,  7.2575]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5835, -1.5463, -1.0669, -1.3540, -0.9972,  0.2027,  1.9734,  0.8225],
            [-0.5469,  0.3375, -1.4005, -0.4918, -0.4868,  0.3727,  1.6051, -0.0929],
            [-1.7677, -0.0958,  0.0682,  1.5521, -0.6590, -0.5124,  2.2458,  0.6475],
            [ 0.3469,  0.1643,  0.9023, -1.0243,  0.5149,  0.4349,  0.6591,  0.6414],
            [-1.0129,  1.2940,  0.2172,  1.2868,  0.3885, -1.2661, -0.8895, -1.5890],
            [ 1.3054, -0.8912, -0.6811, -0.4431,  0.1949, -0.1012,  3.0673,  0.5338],
            [-0.7711, -0.2128, -0.3891, -2.7111,  1.2440,  0.4669, -0.9952, -1.0071],
            [-0.3148, -0.3343, -0.2715,  1.6262,  1.0700, -0.1908, -0.2833,  0.4195]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3545, -0.8406, -0.3461],
            [-1.0687, -0.7147,  1.1941],
            [-0.6195,  1.0363, -2.1889]], requires_grad=True), Parameter containing:
    tensor([[-0.2500]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.5819,  4.4051, -6.8956,  1.2073, -2.9121, -4.3376, -0.7583,  0.6301],
            [-0.6060, -2.3368, -2.8419,  0.5698, -0.6597, -1.0333,  3.4389, -0.8634],
            [ 1.3267, -0.9601, -4.4754,  2.5631, -2.6368, -3.0761,  0.1831, -1.8331],
            [-2.5384, -5.2179,  2.4102, -4.4331,  5.5384,  5.6498,  1.1001,  1.5358],
            [-2.9663,  1.7636, -2.4810, -5.3458,  1.1442, -1.4028, -2.1069,  5.9330],
            [ 3.6061,  3.0792, -1.9000, -0.9512, -0.4386,  1.3557,  0.2027,  2.5618],
            [-0.1513, -2.5404,  3.7717,  1.6582, -4.4086,  1.2004, -3.0723, -4.4301],
            [ 4.8900, -3.4701,  0.9130,  2.5487,  0.6232,  1.6238,  1.2749,  2.6974]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.9405e-01, -1.4706e+00,  6.9299e-01,  9.0997e-01,  2.2807e-01,
              7.4394e-01, -1.8247e-01, -1.5229e+00, -7.0599e-01, -7.7815e-02],
            [-1.0360e+00,  7.4255e-01,  1.9717e+00, -6.8588e-01, -3.5645e-01,
             -2.3186e+00, -2.6195e+00,  1.5640e+00,  2.5272e+00,  4.0173e-01],
            [-9.6662e-01,  3.4484e-01, -2.7810e+00,  3.0232e+00,  1.3714e-01,
              2.5208e-01,  4.5801e+00, -2.0504e+00, -2.8726e+00, -5.3221e-02],
            [-3.2300e-01, -1.2723e+00,  6.9464e-01, -2.0964e+00,  1.4740e+00,
             -2.2855e+00,  1.5751e-01,  1.5705e+00,  6.8140e+00, -1.8106e+00],
            [-1.4475e+00, -1.0093e+00,  2.0301e+00,  3.1021e+00, -4.4483e+00,
              3.6182e+00, -3.6919e+00,  4.6886e+00, -1.8482e+00,  4.0523e+00],
            [-2.0879e+00,  4.0605e+00, -3.1959e-01, -2.7202e+00, -1.0585e+00,
              3.1814e+00, -6.1180e-03,  4.1406e+00, -4.6059e+00,  3.6458e+00],
            [ 2.5287e-01,  1.2850e+00, -4.3218e+00,  3.2251e+00,  3.1860e+00,
             -5.9940e-01,  2.6700e+00,  1.6094e+00,  5.0687e+00, -2.1497e+00],
            [ 1.2828e-01, -2.0811e-01,  5.1438e+00, -2.6437e+00, -5.8649e-02,
             -1.9912e+00,  3.5150e+00,  3.0502e+00, -1.1420e+00,  2.7802e+00],
            [ 1.0170e-01,  2.5376e+00, -7.9150e-01, -2.2151e-01,  1.4147e+00,
              2.7728e+00,  8.0058e-01, -1.5893e+00,  3.2173e+00,  6.0881e-01],
            [ 1.3606e-01,  5.6009e-01, -8.3226e-01,  2.2734e+00,  1.1153e+00,
             -1.2404e+00, -1.0618e+00,  4.2793e+00, -1.7062e+00,  9.1258e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.230 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
