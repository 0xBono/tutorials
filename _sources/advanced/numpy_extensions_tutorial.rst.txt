.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.5882,  7.7421,  8.3286,  9.1640,  4.3196],
            [ 3.7847,  4.7322,  7.8586,  7.0242, 12.3183],
            [15.1663, 12.7637,  7.0923,  7.4535,  2.0623],
            [ 0.6959,  0.8827,  5.9468,  9.1646,  4.2190],
            [ 3.0292,  4.7383,  8.1092,  7.9151,  3.2567],
            [ 0.6959,  6.2874,  4.0713,  6.2108,  4.2190],
            [15.1663, 11.9605,  2.2004,  4.6044,  2.0623],
            [ 3.7847,  9.7129,  2.4467, 11.6454, 12.3183]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8505,  1.9044,  2.3118, -0.5110, -1.3504,  0.9340, -0.1376,  0.5509],
            [ 0.0521,  0.1346, -0.4880,  1.2161,  0.0095,  1.5045, -0.7634, -0.7858],
            [-0.3902, -1.1203, -0.2392, -0.1303, -0.3059,  1.5132, -0.3260, -2.0627],
            [ 0.6163, -1.2325, -0.6716,  1.0534,  0.1613,  0.9566,  0.0761, -1.2479],
            [ 1.5844, -0.3159,  1.3105, -0.7081,  0.1623,  1.0676,  1.3218,  1.2027],
            [ 0.8168,  0.4030, -0.2060, -1.1122,  2.1801, -0.0469,  0.8139, -0.1947],
            [-0.4511, -1.4541, -0.0616,  1.0087,  0.3094,  0.3347,  0.2094, -1.2036],
            [-1.4308,  0.4916,  0.5731, -0.7401,  0.4491,  0.1568, -0.5331,  0.5674]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0295, -1.4350,  0.8420],
            [-0.5522,  0.7554,  0.7259],
            [-0.0824, -0.5224, -0.8806]], requires_grad=True), Parameter containing:
    tensor([[-2.6274]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.5574e+00,  2.5340e+00, -6.5860e-01, -2.4095e-03, -1.4519e+00,
              3.2699e-01, -6.6984e+00, -6.4908e+00],
            [-4.2244e-01,  2.0617e-01, -2.0723e+00, -3.9904e+00, -5.6195e+00,
             -5.6021e+00, -2.6237e-02,  1.0097e+00],
            [-2.3566e+00, -2.7947e+00, -4.3482e+00, -7.6650e-01, -8.5551e-01,
              1.7416e+00, -1.1772e+00, -9.4687e+00],
            [-1.2027e+00, -1.7949e+00, -4.3051e+00, -2.6318e+00, -8.0442e-01,
             -5.4872e+00, -5.4269e+00,  3.4196e-01],
            [ 5.8153e-02, -1.0380e+00, -7.2791e+00, -1.1201e+00, -1.1019e+00,
             -5.4816e+00,  1.6732e+00, -1.9522e+00],
            [ 2.7587e-01, -2.1938e+00, -3.1092e+00, -8.4844e-01, -2.8670e+00,
              2.7864e-01, -4.1534e+00, -1.8982e+00],
            [-1.9189e+00, -4.0117e+00,  3.7897e-01, -5.0223e+00, -4.7184e+00,
             -1.5290e+00, -8.8400e+00, -6.1084e+00],
            [-1.1536e+00, -2.6903e+00,  1.2777e+00, -2.4978e+00, -3.2525e+00,
             -1.9566e+00, -4.0834e+00, -8.2324e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 7.6842e-01, -3.9578e-01, -2.1986e+00,  1.8447e+00,  9.5582e-01,
              1.5063e+00,  6.0707e-02,  4.1130e+00,  4.1896e-01, -1.0877e+00],
            [-2.8664e-01, -2.0447e+00,  1.8660e+00,  7.8185e-01,  7.4532e-01,
             -2.0334e+00, -1.7370e+00, -1.4767e+00, -3.4186e+00,  3.5610e-02],
            [ 4.5765e-02,  1.0469e+00, -2.4346e+00, -3.5167e+00,  1.3796e+00,
             -9.9839e-01,  4.7269e-01, -1.9362e+00,  2.8337e+00,  2.9641e+00],
            [-1.9579e+00, -3.4414e+00, -1.0663e+00, -5.9140e-01,  2.8151e+00,
             -6.3317e-01, -2.3389e+00, -1.6135e+00, -1.9472e+00,  1.3765e+00],
            [-2.4662e+00,  6.0992e-01,  3.5461e+00,  1.2730e+00, -1.8556e-01,
             -3.6024e-02,  4.4369e-01, -3.7280e-01, -1.9900e-01,  5.4793e-03],
            [ 1.1353e+00,  5.2045e+00,  1.9670e+00, -4.0209e+00, -7.9151e+00,
              8.0210e-01, -5.6932e-01, -2.3379e+00,  5.9614e-02, -2.3535e+00],
            [ 3.3481e+00,  2.7385e+00, -6.3015e+00, -4.2135e+00,  5.9007e+00,
              5.8535e-01,  6.9931e-01,  2.4738e+00, -6.2710e-01,  2.0441e-01],
            [ 2.3209e+00, -2.7399e-01, -2.8636e+00,  4.8471e+00, -2.8839e+00,
             -7.7520e+00,  1.6712e+00,  2.1929e+00, -2.9673e+00,  1.4213e+00],
            [ 6.6629e-01, -7.8206e-02,  2.3242e+00,  7.4926e-02, -1.3626e+00,
              2.4992e+00,  2.5487e+00, -7.3860e-01,  6.2992e-02,  2.1443e-01],
            [ 7.1169e-02,  3.5231e-01,  1.2423e-01, -1.1613e+00, -5.5519e-01,
             -1.6007e+00, -2.2085e+00, -5.5200e-01,  8.5975e-01, -6.6525e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.167 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
