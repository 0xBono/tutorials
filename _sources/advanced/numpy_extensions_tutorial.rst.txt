.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.4243,  5.4599,  5.5456,  8.6482, 12.8469],
            [11.7969, 11.0979,  6.1372,  0.5457,  6.4415],
            [ 7.8442,  3.4087,  1.8223,  2.2982, 12.7146],
            [ 4.9705,  1.3213,  2.4658,  5.8022,  1.5659],
            [ 1.6978,  2.8151,  7.3368,  7.4319,  9.5555],
            [ 4.9705,  5.9028, 13.4515,  4.9453,  1.5659],
            [ 7.8442, 13.8923, 12.7771,  7.5996, 12.7146],
            [11.7969, 15.1527,  9.0198,  9.7134,  6.4415]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0045, -0.7121, -0.6705,  1.2020, -0.3473, -0.8919, -1.9703,  1.3242],
            [ 0.0107, -0.8949, -0.7285, -1.3913,  0.0971, -1.4622, -1.0708, -0.4380],
            [ 0.1300, -0.4150,  0.2290, -1.5084,  0.6480, -0.5934,  0.7297, -0.8936],
            [-0.2838, -1.2681,  0.1201, -2.6069,  0.7219,  0.8360,  1.4499,  0.8412],
            [ 0.0058, -0.1974, -0.1124, -1.9685, -1.6115,  0.4830, -0.1563,  1.4343],
            [ 0.9300, -0.4178,  1.6111,  0.8545,  0.1941, -1.3888, -0.3526,  0.4167],
            [ 2.1000, -0.1937,  0.6907,  1.3264,  1.0104,  0.2371, -1.6373, -1.2364],
            [-0.8355,  0.7691,  1.2668,  0.1550,  0.2892, -0.9538,  1.2493,  0.4170]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.8692, -1.9421,  0.5022],
            [ 1.0790, -1.0171, -0.1786],
            [ 0.3150,  1.0134, -0.0528]], requires_grad=True), Parameter containing:
    tensor([[-1.0409]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.9747, -0.6523, -3.1313, -1.5242, -1.2017,  0.6258,  2.7519, -0.6599],
            [-7.4821,  1.2888, -1.0106, -0.9625, -6.5984, -3.2210,  3.6418, -2.4378],
            [-1.1498, -7.3632,  0.9338,  0.7575,  3.3842, -5.7409, -0.2291, -3.8573],
            [-0.4250, -0.0973, -0.7294, -3.9962, -0.3166, -2.2867, -0.0426, -1.8692],
            [-5.0993,  5.0112, -2.1154, -2.7869, -0.6620, -9.1883,  5.7929, -3.6835],
            [ 1.4921, -4.3717,  3.8555, -1.7988,  5.2587, -8.6274,  0.0573, -1.0658],
            [ 2.5268, -4.7437,  3.2249, -2.7856,  5.1341, -5.2716, -4.7165, -0.5957],
            [-3.8457,  2.0865, -3.9161, -2.0252,  2.1575, -3.8237,  3.0322,  3.7022]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-5.4732e-01,  9.0609e-01, -2.1894e+00,  4.0800e-01, -1.9703e-01,
              7.5677e-01, -2.2712e+00,  4.6692e+00, -3.1986e+00,  6.8204e-01],
            [ 2.2790e+00, -2.3438e+00, -2.7218e-01,  2.9975e+00, -2.8035e+00,
              3.0842e+00, -4.9529e+00,  4.6222e+00, -9.6614e-01, -4.5692e-01],
            [ 3.8524e+00, -6.4064e+00,  1.4675e+00,  2.6075e+00, -4.7807e+00,
              2.7055e+00, -6.3305e+00,  2.1249e+00,  1.6728e+00, -3.4176e-03],
            [ 1.5041e+00, -9.0485e-01, -1.2124e+00,  3.9827e+00, -2.0374e-01,
              3.5425e+00, -3.4421e+00, -1.5606e+00,  1.1951e+00, -3.3019e-01],
            [-5.1947e-01,  4.4199e-01, -3.2202e-01, -2.9367e-01,  4.6082e-01,
              7.0735e-01,  7.2622e-01, -1.6180e+00, -5.1289e-02,  3.5565e-01],
            [ 2.0876e-01, -9.8150e-01,  1.3001e+00, -1.0689e-01,  5.2923e-01,
             -1.2128e+00, -1.7515e+00,  6.6666e+00, -4.8754e+00,  6.3681e-01],
            [-2.8146e+00, -8.7526e-01,  7.2646e-01,  1.0665e+00,  2.0580e+00,
             -3.5213e+00, -1.9349e+00,  6.7073e+00, -3.7171e+00,  5.7325e-01],
            [-1.6271e+00,  1.3311e+00,  1.0268e+00,  3.2094e+00,  1.0369e+00,
             -1.7979e+00,  1.7619e+00, -2.3724e+00,  1.0178e+00, -6.3369e-01],
            [-4.9757e-01, -1.5853e+00, -2.1971e+00,  1.0909e-01, -4.1607e-01,
             -2.1029e-02,  1.3371e+00, -2.3038e-01,  2.1300e+00,  5.5554e-03],
            [ 6.7243e-03,  2.1556e-01,  7.2204e-01,  6.2122e-01,  1.1492e+00,
             -6.7321e-03, -6.3446e-01,  3.7612e-01, -5.5796e-01,  2.7694e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.904 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
