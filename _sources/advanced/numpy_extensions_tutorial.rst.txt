.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.5550,  7.0948,  7.1338,  2.6938,  2.6517],
            [ 2.5204,  3.4843,  7.5524,  7.9355,  1.1675],
            [ 6.7183,  6.5886,  8.5154,  9.0140,  1.1837],
            [10.4598,  4.8671, 14.0390,  3.2839,  5.0334],
            [ 2.9759, 13.5173,  2.9346,  6.2968,  5.5597],
            [10.4598,  2.1544,  5.0662, 12.0079,  5.0334],
            [ 6.7183, 10.9145,  0.2131,  2.0754,  1.1837],
            [ 2.5204,  9.2604,  6.9146,  2.1937,  1.1675]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1262,  1.0450, -0.9367,  1.2837,  1.4271,  0.9864, -0.0156, -2.1101],
            [-0.8596,  0.4105,  0.5318, -0.0805,  0.1561, -0.2265, -0.0927,  1.2442],
            [-0.7583, -0.3100, -0.6296, -1.6017,  0.0041,  1.2164,  0.3684, -1.5417],
            [ 0.1256,  1.9023,  0.6608,  1.8443,  0.3859,  0.2064,  0.0373, -0.5054],
            [-0.0220, -1.2896,  0.4670,  0.3722, -0.0649,  0.8004,  0.4539, -0.0383],
            [ 0.3888,  0.0721,  0.5081, -0.5037, -1.2046, -0.3970, -1.0741,  0.3707],
            [-0.7121,  0.1377,  0.2838,  0.0899, -0.2920, -1.3196,  0.9224,  1.4471],
            [-1.0057,  1.0840,  1.7246, -0.6926, -0.1704, -0.4260, -0.7820, -0.8673]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1954, -0.0382, -0.0983],
            [ 0.5590,  2.2516, -0.6897],
            [-0.9680,  0.0527,  0.0602]], requires_grad=True), Parameter containing:
    tensor([[-1.2053]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.1251, -0.8431,  0.5607,  4.8627, -3.2414, -4.4794, -3.3406, -7.6857],
            [-5.8840, -2.6450,  0.5049, -1.5178,  2.1717, -1.7652,  3.2545, -5.2811],
            [ 1.3446, -1.1448,  0.4471, -5.4735, -1.3745, -0.7575, -0.4525, -1.2842],
            [ 0.6247, -8.0268, -1.4174, -2.1658, -1.7518, -0.7929, -3.6476,  2.0003],
            [-2.9433, -4.3891,  2.9311, -4.5755, -6.8413,  0.5386, -4.1409,  2.1920],
            [ 1.8981, -1.0433, -0.5783,  2.6537,  2.3932,  0.9824, -4.4765,  2.8278],
            [-4.4871, -0.3848, -2.4389, -3.5198, -0.2344,  1.4769,  1.8529, -1.3899],
            [-0.6166, -2.3785, -1.3845, -3.3492, -0.6358, -0.5388, -1.3852, -0.1838]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1169e-01, -1.5290e-01,  1.0915e-01,  3.4740e-01,  1.5631e-01,
             -1.0276e-01,  1.1945e-02, -1.2968e-01,  3.8028e-02,  6.0252e-04],
            [ 2.2089e-01,  1.6514e+00,  3.6423e-01, -3.9519e+00, -3.6220e+00,
              2.2189e+00,  2.7720e+00, -1.9013e+00,  8.5720e-02,  3.8142e-02],
            [-7.1691e-03,  5.1269e-01,  1.2094e+00,  4.0058e+00,  8.0530e-01,
             -3.7038e+00,  2.1673e+00,  3.5883e+00, -2.0154e+00,  6.6849e-02],
            [-1.4300e+00, -2.8954e+00,  9.2130e-02, -9.4662e-01,  4.0803e+00,
              2.1316e+00, -2.4071e+00, -1.1408e+00,  4.7393e+00, -1.2202e+00],
            [ 1.8801e+00,  1.7804e+00, -3.6687e-01,  6.2211e-01, -3.6210e+00,
             -3.2138e-01, -1.5493e+00, -7.1955e-01, -1.2630e-01,  9.1432e-02],
            [-9.7623e-01, -5.3033e-01,  6.6032e-01,  2.2674e+00, -1.8518e+00,
              1.9074e+00, -1.9288e+00,  3.5270e+00, -8.3844e-01,  7.1109e-03],
            [ 2.2976e-01,  2.7699e-01,  5.2231e+00, -6.9160e-01, -3.9080e-01,
              4.3674e+00, -3.6318e+00,  1.1957e+00, -1.2928e+00,  1.3977e-01],
            [-2.9151e-01, -4.7036e+00,  2.8053e-01, -2.3424e+00, -1.3892e+00,
              2.5843e+00, -3.1975e-01,  5.0869e+00,  6.7295e-01, -6.9243e-01],
            [ 1.0172e+00,  2.0352e-02,  2.8110e+00,  8.5185e-01, -6.7906e+00,
              4.6941e+00,  3.4461e+00, -2.7913e+00,  1.3815e+00, -2.7252e-01],
            [-1.1117e-02, -4.9163e-01, -8.9760e-01,  2.4480e+00, -6.8810e-01,
             -2.6518e+00,  3.7873e-01, -3.1231e-01,  1.2430e-02,  2.8568e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.305 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
