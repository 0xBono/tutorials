.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.9848,  6.5130,  1.9857,  4.9151, 16.2456],
            [ 8.0113,  6.6610,  4.9605,  7.8590,  5.8628],
            [ 2.7760, 12.4300,  9.1688,  4.3491,  3.5773],
            [ 5.3838,  5.3063,  5.2229,  5.1498,  6.0659],
            [ 2.5185,  6.9512,  8.1455,  6.0565,  3.6942],
            [ 5.3838,  7.8067, 10.2276,  3.5881,  6.0659],
            [ 2.7760, 10.0029, 10.9470,  9.2733,  3.5773],
            [ 8.0113,  6.0698,  7.4399,  3.0824,  5.8628]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9271, -0.1970, -1.5845, -0.9490,  0.5652,  1.5121,  0.4952, -1.0851],
            [-1.0675,  0.3719, -0.0836,  0.2485, -2.6082, -0.9572, -0.3129,  1.4372],
            [ 0.3937, -0.3998,  0.0081, -0.4662, -1.4186,  1.0100,  0.6960,  0.6666],
            [-0.7685,  0.3266, -1.8662, -0.2508,  0.3805,  1.3754, -0.2820, -0.6634],
            [-2.1903,  0.5239,  0.7563,  0.2998,  0.7894,  0.6675, -0.5310,  1.1494],
            [-0.0468,  0.1206,  0.1914,  1.0525,  0.9105, -1.1777, -0.1653,  1.8068],
            [ 0.3116, -0.2387, -0.2894, -0.1148, -0.3655,  0.4058, -0.2137, -0.0133],
            [-1.0332,  0.1500, -0.2909,  0.7307,  1.0290, -0.5267, -0.5971, -0.6854]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6524, -0.0051, -0.0598],
            [-2.9072, -0.0624, -1.0475],
            [ 0.6301, -2.7214, -0.6575]], requires_grad=True), Parameter containing:
    tensor([[1.1074]], requires_grad=True)]
    Output from the convolution:  tensor([[  4.0079,  -4.7435,   0.1151,  -0.4061,  -6.2092,   0.0940,  -0.9352,
               4.1445],
            [ -2.1710,  -0.2015,  -5.3899,   2.9878,  -0.3954,   0.3044,  -2.0060,
               6.4506],
            [  4.9271,  -3.3730,  -2.6133,  -3.5419,   5.1183,   2.4223,   0.6135,
              -1.9773],
            [  2.5668,  -0.2932,   4.2478,  -3.6325,   0.0163,   2.4900,  -3.3678,
               5.5427],
            [  3.5257,   2.5636,  -5.6257,   0.7554,  -4.5704,  -4.8255,   2.2442,
              -3.9883],
            [  3.7080,   2.9602,   2.3032, -10.8859,  -5.4635,  -4.9259,  -3.0920,
               2.7913],
            [ -2.5492,  -0.9396,   2.2891,   5.3397,  -6.4117,  -0.7940,   0.3241,
               1.2939],
            [  3.2072,   3.5768,  -0.5097,  -0.3466,   7.7208,   1.0364,   9.0757,
               3.8005]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1867,  1.2730,  0.5332, -0.3423, -0.2109,  0.2473, -0.0945, -0.9205,
             -0.0142, -0.0867],
            [ 0.0830,  5.6712,  3.0363, -0.6656, -1.0650,  0.1367, -1.1027, -3.2293,
             -0.2340, -1.4685],
            [-3.8614, -0.1180,  4.9734,  1.7639, -4.4449, -3.7725, -0.9818,  2.4835,
             -4.4314, -0.0931],
            [-1.0693, -1.1237, -6.0083,  8.0549, -5.1216,  0.9135,  0.8014, -2.1082,
              3.1209, -0.0205],
            [-0.2924, -1.7712, -2.5432, -0.8282,  4.2330, -0.1031,  3.0359,  7.4080,
             -0.4928,  1.0062],
            [ 2.0876, -2.4906,  4.8546, -7.9901,  7.2504, -0.2728,  1.5692, -3.9074,
              4.0893, -0.6576],
            [-3.5425,  1.8734, -2.1831,  1.2085, -1.2036, -0.0695, -2.6612,  2.1365,
             -5.5265, -0.3368],
            [ 0.0846, -1.5751, -0.2875,  2.6657,  1.6568,  2.9191, -1.8563,  0.2576,
              0.8865,  1.7926],
            [ 1.0124, -4.0670,  1.6286,  0.6482,  5.9465,  2.8194,  1.6465,  2.6937,
              3.0786,  1.9561],
            [-0.1854,  1.4653, -2.7552, -0.4781, -0.2457,  3.8329,  1.4676, -1.8620,
              2.5953,  0.7003]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.528 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
