.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.1143, 14.7460, 10.8824,  2.0497,  2.6401],
            [ 4.1663, 18.7365,  7.1069,  5.4408,  7.3052],
            [ 6.3969, 10.0481,  6.4050,  7.0058,  8.8649],
            [ 4.3226,  2.2507,  4.0992,  7.9263,  3.7655],
            [ 4.0349, 11.9726,  4.4064,  2.4414,  1.3535],
            [ 4.3226,  3.1905,  9.3382,  6.5015,  3.7655],
            [ 6.3969, 12.8960,  2.5749,  5.9655,  8.8649],
            [ 4.1663,  3.5397,  4.3987,  3.4237,  7.3052]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1566, -0.9429, -0.7371,  0.1531,  0.1417, -0.4986,  0.1287,  0.5690],
            [-2.0642, -1.2341,  0.0458,  1.1764,  1.3342, -0.3284,  0.0795,  0.1049],
            [-1.3481, -1.1796, -0.4151,  0.5131, -0.3000,  0.0506, -0.3348,  1.6414],
            [-1.0403, -0.5514, -1.3337,  0.8688,  0.9277,  0.9462, -0.0704, -0.1606],
            [ 0.5783,  0.3754,  1.1585,  1.7630,  0.6002,  0.3542, -0.0867, -0.5850],
            [-1.3026, -0.9787,  2.1255,  1.9888,  1.4639, -1.1452, -1.0235, -1.8439],
            [ 0.3130,  1.2091, -0.8662, -0.2901,  0.5037, -0.6704,  0.1655, -1.1606],
            [ 0.5733, -0.6901, -0.2036,  0.5548, -1.2546,  0.5615, -0.2928,  0.6922]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4593,  0.0482, -0.1700],
            [ 0.6334,  0.1071,  0.7675],
            [ 0.3690,  0.4139, -1.5701]], requires_grad=True), Parameter containing:
    tensor([[-0.1547]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.0580, -2.5403,  2.0439, -0.4506, -0.5396,  1.1118,  3.3675,  0.4412],
            [ 1.1149,  1.8230, -2.2602,  2.6749, -0.8343, -2.4293, -2.8156, -1.9786],
            [-1.5329, -1.9093,  1.6316, -0.0186, -3.0827, -1.0475, -1.0445,  2.3672],
            [ 4.1865,  2.3535,  1.0621, -2.1023, -0.9829,  1.0489,  2.4437,  1.0750],
            [ 2.3232,  1.1944, -2.5431, -3.3917, -3.1188,  1.8858, -1.1517, -4.1339],
            [-3.4626, -1.3627, -0.4010,  0.6672,  1.0636,  0.5682, -0.2955,  4.0070],
            [ 2.9279, -1.4843,  0.9347, -0.8680, -2.2452,  1.9505, -0.0747, -3.0549],
            [-5.1853, -1.8830, -0.4720,  3.1871,  1.1913,  0.4689, -1.3953, -1.5178]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2577, -0.0218,  0.4518, -0.4760,  0.4299, -1.1751,  0.5488, -0.7767,
              0.1766, -0.1350],
            [ 0.8788,  0.2801, -0.1740,  0.8748, -0.8082,  1.6301, -0.5635,  1.8046,
             -0.5740,  0.5583],
            [-0.5279, -0.5579, -2.1969, -0.9513,  0.9046,  0.3940,  0.2279, -2.1928,
              1.6984, -1.0400],
            [-0.4198, -0.5189,  2.4853,  0.0080,  0.1916, -0.2316,  3.5038, -2.5037,
              0.6658, -0.3546],
            [-0.2492,  0.2615, -0.6119, -0.4705, -0.7450,  1.0510, -3.4762,  2.8400,
             -2.7076, -0.1589],
            [ 1.0720,  1.8553,  1.8856,  0.3984,  3.5570, -0.8919, -0.9106,  0.9655,
              2.8791, -0.4302],
            [-0.6026,  0.4943, -1.6138, -3.9963, -0.2989, -0.5019, -0.1234, -1.2501,
             -2.4071,  1.0841],
            [-0.5263, -2.0272,  0.7068,  0.6629,  1.7495,  3.0764, -2.0068,  1.0834,
              1.7626,  0.2281],
            [-0.2565,  0.4064, -0.3373,  2.8288,  2.4203, -2.7902, -0.5424, -1.3931,
             -2.4881, -1.9828],
            [-0.1074,  0.3455,  1.0258, -1.7269,  0.1674, -0.9407, -1.5546, -0.5139,
              2.3911,  2.7408]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.529 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
