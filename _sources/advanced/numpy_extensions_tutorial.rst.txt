.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[20.5284,  0.8908,  2.8689,  6.6621,  8.3347],
            [ 4.6425, 10.8859,  7.8955, 10.1569,  1.1566],
            [ 9.2105,  2.7486,  3.4911,  3.4413,  6.7956],
            [ 8.4725,  7.1751,  1.0510,  8.7648,  5.2509],
            [12.8072,  7.2794,  2.2851,  6.8255,  7.9431],
            [ 8.4725,  3.0124,  5.4410,  6.7790,  5.2509],
            [ 9.2105,  9.7856,  4.9032,  7.1263,  6.7956],
            [ 4.6425,  7.6053,  6.3765,  9.7373,  1.1566]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.4812e+00, -7.7996e-01, -2.7281e+00, -7.5688e-01,  9.1368e-02,
             -1.6806e+00,  3.9626e-02, -3.7795e-01],
            [ 6.2112e-01, -4.0268e-01, -4.1526e-01,  1.2690e+00,  1.5456e+00,
             -4.3117e-01,  7.3473e-01,  1.6348e-01],
            [ 2.6888e-01,  2.1273e-01, -4.5781e-01, -1.8588e-01, -1.5966e+00,
              4.2771e-02, -9.4206e-01,  8.2102e-01],
            [-2.2894e-01, -2.1216e-01,  6.4633e-01,  4.2376e-01, -2.3391e-01,
              6.0469e-02, -1.7354e+00, -1.1917e+00],
            [-1.5166e-01,  5.7422e-01, -4.9689e-01,  8.5398e-01, -2.2401e+00,
             -1.9975e-02, -8.4017e-01, -2.4863e+00],
            [-8.1252e-01, -9.8516e-01,  2.1513e-02, -1.4145e+00, -2.3411e-01,
             -2.2814e-01,  1.5976e-01,  4.8148e-01],
            [ 2.6556e-01,  2.8377e-01, -1.3759e+00, -5.4483e-01, -7.8164e-01,
             -1.2400e-01,  2.3298e-02, -9.6628e-02],
            [-8.2542e-01,  6.2877e-01, -1.3143e+00, -1.9216e-02,  1.8400e-03,
              1.8523e-01,  4.0788e-02, -1.5987e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0752, -0.2585, -0.1219],
            [-0.3075, -2.2579, -0.4250],
            [-0.9316, -0.9254, -0.6627]], requires_grad=True), Parameter containing:
    tensor([[0.9663]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.4670, -2.5058,  3.4334,  4.6725,  3.1344,  5.2305,  4.3074,  0.7603],
            [ 1.9517,  0.9657,  9.5692,  6.0273,  2.1357,  0.9903,  2.3646,  1.1139],
            [ 1.9383,  3.2786,  8.5425,  3.7311, -0.7808,  2.8911,  0.1924, -3.4110],
            [-0.5485,  4.5523,  3.7134,  0.4981,  0.7304,  2.2150, -2.6579, -1.6883],
            [-0.4691,  0.6633, -1.9533, -3.4392,  0.0768,  2.3142, -0.7903,  0.9998],
            [ 1.8524,  3.5304,  3.2444, -1.1437,  0.0907,  0.8008,  0.7801, -4.9837],
            [ 5.0223,  6.9845,  7.8123,  3.7860, -0.7951, -0.4679, -5.9636, -4.5282],
            [ 0.6248,  2.8865,  5.7902,  3.3116,  0.7299,  3.2722, -2.8326, -2.0199]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1990, -0.6556, -0.3077, -0.4943,  0.1402, -0.3367, -0.2814,  0.6953,
              0.1931, -0.0474],
            [-0.7131, -6.4797, -2.4329, -3.3125,  0.3357, -2.2391,  1.0661,  4.9547,
             -0.1660, -0.2217],
            [-2.8448, -5.7168, -3.1570, -1.3574, -0.8778,  5.7674, -0.0215, -2.0835,
             -0.6399, -0.4932],
            [-1.3574, -1.9195, -1.5349,  2.8313,  5.9467,  0.9200,  1.6572, -4.3420,
             -2.2974, -0.2831],
            [-0.5289, -0.9659,  2.5335,  5.3209,  5.7868,  3.2084, -4.0015, -3.3219,
              1.6109,  0.3198],
            [ 0.1416,  2.5558,  3.8012,  3.5564, -1.2401, -4.0613, -2.7919, -0.3665,
             -0.2693,  0.6284],
            [ 0.3865, -0.1123,  1.5219, -3.4169, -4.1683, -0.9970,  4.0647,  1.9296,
             -2.2668, -0.5011],
            [-0.2278,  4.2677,  1.7238, -2.4287,  2.4318,  2.9051,  4.6848,  2.0130,
              2.3769, -0.2849],
            [ 1.9604,  2.6374,  1.6949, -0.0279,  1.6847,  2.4037,  2.2736,  2.0347,
              1.1713,  0.8557],
            [-0.1972, -0.1150, -0.7421, -0.1462,  0.1923,  1.1553,  0.7322,  0.3389,
             -0.0899, -0.0523]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.150 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
