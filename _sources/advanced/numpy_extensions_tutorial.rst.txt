.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.1982, 15.1907, 12.8059,  6.9814,  2.4448],
            [ 4.9481,  4.1429,  4.4781,  3.6941,  6.2823],
            [12.0402,  9.0536, 11.1135, 11.9269, 11.2768],
            [ 9.7413,  4.8944, 10.1970, 10.7516,  7.3252],
            [18.1866,  8.5818,  3.5895,  7.0508,  2.5230],
            [ 9.7413,  8.5921,  4.7726, 11.7473,  7.3252],
            [12.0402,  9.0578,  9.5308, 13.9242, 11.2768],
            [ 4.9481,  6.2776, 14.4709,  5.0382,  6.2823]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.1720,  0.8480,  1.3472, -0.3258, -0.2667, -0.4415,  0.6105, -0.7115],
            [-0.6628,  1.4006,  0.4265,  0.7053,  0.5366,  0.3893, -0.5925,  2.4144],
            [-0.7304, -0.6691,  0.4956,  0.6935, -2.3096, -1.8071,  0.0362, -0.2838],
            [ 0.2472,  0.0337,  3.4764,  1.3152, -0.9654,  0.6102,  0.9240, -0.3046],
            [-0.5337, -0.0474,  1.6385,  1.6879,  1.0506, -1.3856, -1.5761,  0.5977],
            [ 1.0994,  0.2271, -1.7236, -0.7897, -0.4524, -0.9863,  0.1568, -0.2480],
            [ 0.1493, -0.9866,  1.0503, -0.0964, -0.0889,  0.3172, -2.7176, -0.3672],
            [ 1.0995, -1.3305,  2.0565,  1.8592, -0.1093,  1.1284,  1.8212, -1.5701]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4145,  0.0273, -0.2560],
            [ 0.8727,  0.4383,  0.2949],
            [ 0.6069, -0.4727, -0.8046]], requires_grad=True), Parameter containing:
    tensor([[1.0170]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7361e-01,  7.2387e-01,  2.6857e+00,  2.6538e+00,  8.7047e-01,
              3.5430e+00,  3.1701e+00, -2.6631e+00],
            [-1.9973e+00,  2.4607e-01,  1.6377e+00,  2.9121e+00, -1.6249e-01,
              1.2294e+00, -5.2387e-02,  2.0987e+00],
            [ 3.0784e+00,  2.3301e+00,  3.4523e+00,  1.6312e+00,  2.5713e+00,
              1.0388e+00,  9.8855e-01,  1.8979e+00],
            [-8.9662e-01,  1.5806e+00, -5.0553e-01,  1.1152e+00, -9.0336e-01,
              6.3550e-01, -1.8653e+00,  2.8543e+00],
            [ 1.6677e-01, -7.3601e-01,  2.0081e+00, -3.4391e-01,  1.1365e-03,
              4.5265e+00,  2.3124e+00,  3.6460e+00],
            [ 2.3685e+00,  4.6976e+00,  1.5957e-01,  1.1564e+00,  3.5010e+00,
              4.8522e-01,  1.5497e+00, -1.1738e+00],
            [ 1.4908e+00, -2.8870e-01,  2.3106e+00, -2.1702e+00, -1.6669e+00,
             -3.7637e+00,  1.7254e-02, -6.8454e-01],
            [ 5.4516e-01,  7.3272e-01,  2.0753e+00,  8.7588e-01,  2.5810e+00,
              3.9918e+00,  3.8064e+00,  3.7808e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.7388,  0.6867,  1.6952, -2.1513,  0.9799, -0.1268, -0.4574,  0.9888,
             -0.1230,  0.1672],
            [-0.8665,  1.1493, -2.9082,  2.2360,  0.7614,  3.4019,  2.3233, -0.4399,
              0.2214, -0.2878],
            [ 0.1234, -0.7521,  1.8725, -0.1753,  0.1973, -2.2849, -1.2782,  0.4856,
             -0.2715,  0.9248],
            [-0.2201, -1.5405,  3.3991,  2.5999,  0.2029, -0.1068,  1.2589,  1.7389,
              0.6693, -0.5926],
            [-2.5715,  0.8701, -0.6822, -3.0795, -3.6615, -5.0662,  2.5879,  0.0892,
              0.9209,  1.0353],
            [ 1.1539, -2.6985,  0.5205,  1.0686,  2.0164,  5.2432,  1.5658,  1.7460,
              0.2038,  0.1964],
            [ 1.0023, -0.0804, -0.1833,  2.4900,  0.9348, -2.6980, -4.9666, -1.9322,
              1.0818,  0.3660],
            [-3.1316,  1.7304, -2.1278,  1.4040, -0.6276, -1.3439,  0.4550, -0.8137,
              1.8293,  0.3365],
            [ 0.6708,  1.2801,  2.0212, -2.0190, -0.8982,  0.5380,  0.1476,  0.2600,
              0.4110,  0.8264],
            [ 0.8283, -0.6711, -0.4083, -1.6713,  0.1580,  1.6591, -0.7227,  0.8979,
             -0.0924, -1.0905]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.541 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
