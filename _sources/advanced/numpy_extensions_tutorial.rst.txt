.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.6805,  4.7457, 15.1791,  5.8468,  6.5858],
            [ 5.5645,  7.2372,  6.3195,  4.3835,  1.9517],
            [ 5.1504,  7.2847,  4.4571,  5.3811,  2.8293],
            [ 7.6255,  7.3514,  3.7902,  3.4300,  9.9293],
            [ 2.7577,  2.0253,  1.8436,  4.7026,  2.4151],
            [ 7.6255,  5.0891,  4.5832, 10.1171,  9.9293],
            [ 5.1504,  3.8439,  9.5427,  8.6427,  2.8293],
            [ 5.5645,  4.6124,  7.4972,  6.4046,  1.9517]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1008e+00, -9.4630e-01,  5.7784e-01,  3.2090e-01,  1.1771e+00,
              3.6661e-01, -4.8216e-01, -7.7214e-02],
            [-9.3774e-02, -3.6849e-01,  9.6091e-03,  1.4625e+00,  1.4170e+00,
             -9.0599e-02, -4.3755e-01,  8.2508e-01],
            [-9.2545e-02,  4.2106e-02, -6.5052e-01,  1.5187e-01,  1.4827e+00,
             -2.2322e+00, -9.2072e-01,  2.6431e-01],
            [ 1.0384e+00, -7.1391e-01,  7.8153e-01, -7.4581e-01, -6.1871e-02,
             -6.6861e-01,  6.2354e-03,  4.4844e-01],
            [ 1.9897e-01,  1.9604e-02, -1.4726e+00,  3.5127e-01, -4.5116e-01,
              1.1132e+00,  9.6456e-01, -5.4417e-01],
            [-4.5313e-01,  1.2270e-01,  1.5485e-01, -1.5381e-03, -3.2930e-01,
             -1.6525e+00, -9.4889e-02, -4.8753e-01],
            [ 1.1989e-01, -8.9661e-01, -2.2926e-01,  1.1352e+00,  5.9285e-01,
             -1.4307e+00,  3.5384e-01,  1.3116e-01],
            [-9.1092e-01, -2.0110e-01, -1.7642e+00,  1.0388e-01,  1.3083e+00,
             -4.3021e-01, -8.8724e-01, -4.4906e-03]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4539, -2.4728, -0.9164],
            [-0.1725,  0.5835,  0.4766],
            [-0.2622, -3.0112, -1.3602]], requires_grad=True), Parameter containing:
    tensor([[0.1959]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.6238,  2.4203,  2.9497, -3.5934, -2.8923,  1.8616,  7.0368,  0.8246],
            [-4.8831, -1.2618,  1.6762,  4.0046,  4.8871,  1.2820,  3.9616,  2.6970],
            [-1.3767,  6.1424,  3.1598, -2.4347, -0.8133,  3.3682,  6.1405, -1.0815],
            [-4.7813, -6.5161, -0.5290,  2.4096, -7.9902,  3.0852,  2.5439,  1.0098],
            [ 1.4865,  4.1063,  2.7157, -1.6916,  2.8598,  1.5137,  2.4892, -0.5491],
            [-5.0968, -6.2095, -0.0398,  5.5371, -4.0265, -2.8662, -0.1637, -2.6678],
            [-1.1966, -1.6378, -1.2793, -0.9883,  5.1129,  5.7775, -3.6767,  1.3133],
            [ 1.3833,  0.9676,  3.3029,  3.7899, -2.5979, -2.3447, -0.8642, -3.8524]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.4642, -2.6355, -0.8739,  3.0940,  0.9674, -1.7310,  3.2953,  0.6605,
             -1.3599, -0.3896],
            [-0.1868,  0.6714,  0.9223, -1.7210, -2.0131, -2.9763, -0.5690,  0.8978,
              2.1899,  0.6984],
            [ 0.1794, -5.6447, -0.2866,  4.5789,  0.8607, -4.0822,  5.0665,  2.7449,
              2.3774,  0.6028],
            [ 0.2446, -1.2171, -1.7957, -3.3678, -6.1438,  1.4731,  2.7828, -2.6056,
              5.0784,  1.9518],
            [-1.5127,  3.5665,  3.2989, -0.3776,  1.6242, -5.1215,  0.0402,  3.5993,
              2.7669,  0.4833],
            [-0.2643, -2.0462, -1.6597, -4.5939, -6.4646,  0.6847,  1.0529, -1.8299,
              5.0416,  2.9402],
            [ 0.7921,  6.5305,  5.2389, -3.5949,  4.1025,  0.3339, -5.7666, -4.0129,
             -3.9207, -1.1202],
            [ 0.7494,  0.6627,  0.3049, -3.3233, -4.6156, -3.6158,  2.0959,  4.5322,
              0.2143, -0.3473],
            [-0.1760,  0.9139,  2.8298, -3.0398, -0.4850, -2.6880, -6.7892, -2.5079,
             -1.1392, -0.4681],
            [-0.2803, -3.2636, -1.9611, -0.0589,  1.2763,  2.8286,  3.8528,  3.7445,
              0.9111, -0.1105]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.146 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
