.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[15.5264,  6.9693, 13.2667, 12.4025,  8.0692],
            [ 6.8347,  7.0753,  7.3493,  4.9289,  7.6609],
            [ 8.9208,  9.7821,  5.7154,  4.5649,  6.8763],
            [ 8.1384,  9.3526,  4.4662,  2.2381, 10.9270],
            [ 9.1682,  3.0803,  4.8140, 13.6409,  7.2044],
            [ 8.1384,  2.1556,  8.0507,  5.1033, 10.9270],
            [ 8.9208,  8.4330,  5.7267, 11.1882,  6.8763],
            [ 6.8347, 10.7289, 10.4140,  7.8832,  7.6609]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6164,  0.9656, -1.2661,  0.6894,  0.0167, -0.3719, -1.2233, -0.0282],
            [-0.3996, -1.6977,  0.2246, -0.6498,  0.5695,  0.2534,  0.1294, -0.5603],
            [-0.8441, -0.5646, -0.4633,  1.3837, -0.8255,  0.0461, -0.1107, -2.8188],
            [-0.4021,  1.2268, -0.8232,  0.0276,  1.4627, -0.7781, -2.0245, -0.2447],
            [ 1.1985, -0.7532, -2.0907, -1.0791,  0.9902, -0.1339,  0.3274, -1.3515],
            [ 1.4921, -0.0140, -0.5460, -0.6249,  2.2142,  0.4630,  1.2095,  0.5660],
            [ 0.6587,  0.9798, -1.5533, -1.3496, -0.2778, -0.6544,  0.1222, -1.3493],
            [-2.1884,  0.2510, -0.0113, -0.5818,  0.9438, -2.0026,  0.3781, -1.0419]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5666, -1.1022,  1.2415],
            [ 0.1365,  0.9529,  0.8773],
            [-0.0259, -0.0431, -1.5446]], requires_grad=True), Parameter containing:
    tensor([[-0.0361]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.7188, -0.9599, -0.3455, -0.6771, -1.1004, -3.7058,  3.2207, -1.7819],
            [-0.7990,  1.3993,  0.7361,  2.3481,  1.9980,  2.3199,  1.1618, -2.7469],
            [-1.2620,  1.6323,  0.8484,  0.8125,  1.5782,  2.0644, -1.5193,  0.5117],
            [ 2.4906, -3.2194, -1.9736, -3.0818,  1.8778, -0.5762, -3.4285, -1.5556],
            [ 2.3728, -1.7590,  1.5909,  1.9707, -0.9039, -1.6509,  2.0747,  2.1194],
            [-2.3351, -1.1229, -2.4520, -0.8831, -1.2955,  0.3203, -1.4481,  1.1219],
            [-0.4867,  1.7644,  1.8108, -4.3305, -0.8540,  0.1592, -0.0232,  2.1513],
            [-0.5354,  4.8013,  1.5193, -1.4002,  5.0760, -1.3472, -1.4302, -3.9440]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-8.0833e-01, -1.9386e+00,  1.0956e+00,  1.1625e+00,  2.0929e-01,
             -5.9947e-01,  1.1819e+00, -2.6020e+00,  4.5821e-01,  7.6636e-01],
            [-4.6047e-01,  6.2526e-01,  2.8779e+00, -2.9039e+00,  3.5771e+00,
              8.5827e-01, -3.5644e+00,  1.1150e-02,  3.1383e+00, -3.7402e-02],
            [-7.6807e-02,  8.3248e-01, -1.1576e+00, -1.6819e+00,  1.5496e+00,
             -1.4990e+00, -3.8621e+00,  3.2726e+00,  2.6509e-01, -5.8130e-01],
            [-6.0261e-02, -3.9569e-01, -3.0119e+00,  1.6196e+00, -1.1039e+00,
              2.9950e+00,  1.5220e+00,  3.2642e+00, -2.2164e-01,  2.6955e+00],
            [-4.0800e-01, -3.0747e-01,  1.3577e+00, -1.6617e-01, -1.6907e+00,
             -2.3829e+00, -4.6330e-01, -1.6868e+00,  2.2028e+00, -7.1829e-01],
            [ 1.6333e-01,  1.2645e+00,  7.4492e-01, -2.1778e+00,  2.2322e+00,
              1.6752e+00,  1.5440e+00,  2.4170e+00, -1.6289e+00, -6.3314e-01],
            [ 4.5314e-01,  1.3862e+00, -2.1693e+00, -1.8815e+00,  2.0629e-01,
             -2.6874e+00, -3.5464e+00,  8.6279e-02,  5.7441e-01,  2.4547e-01],
            [-5.7681e-01, -1.0805e+00,  8.7556e-01,  2.5135e-01,  1.0475e+00,
             -3.8191e+00,  5.1152e+00, -2.3031e+00,  3.8655e-01, -4.8330e+00],
            [ 1.3365e-01,  6.5874e-01,  7.8078e-01,  4.5154e-01, -2.5967e+00,
             -5.9145e-02,  4.9552e-01, -3.1911e+00, -3.2304e+00,  1.3117e+00],
            [-2.1105e-02,  3.6420e-04, -1.2022e+00,  2.1689e+00, -2.9269e-02,
              2.9785e+00, -2.0044e+00,  2.6022e+00,  1.2982e+00,  1.7858e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.215 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
