.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.8940,  6.4395,  6.9235,  4.1627,  4.9722],
            [ 9.7169,  2.7874,  4.2807, 10.1009,  6.1313],
            [ 5.2037, 18.6523, 16.6168,  5.7209,  4.0706],
            [ 5.9981,  7.6732,  7.3313,  7.8080,  6.0301],
            [ 2.3077,  3.3363,  1.3406,  7.7128, 11.9159],
            [ 5.9981, 14.5589,  7.7516, 12.7868,  6.0301],
            [ 5.2037,  5.5362,  1.6360,  9.8377,  4.0706],
            [ 9.7169,  7.3519, 14.7736,  7.0671,  6.1313]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.1695, -2.0545, -0.3588,  0.5042,  1.1936, -1.1750, -0.6956,  0.2344],
            [ 1.7388, -1.5124,  0.0184,  0.5968, -0.3302, -1.2322, -0.5062, -0.0495],
            [ 0.0083, -1.0015, -0.5492, -0.2342, -0.6960, -1.0834,  0.1195,  0.3970],
            [-0.8203, -2.4929, -1.7402, -0.9926,  0.7856,  1.8356, -0.1790, -0.4281],
            [ 1.3055,  1.6643, -0.7716, -0.0516, -0.1235,  0.4168, -0.7478, -0.1239],
            [ 0.4474, -0.3435,  2.5973, -0.3581, -0.2483, -1.2173, -0.1394,  1.6741],
            [-0.9846,  0.7729, -1.8279,  0.3945, -1.8306,  0.4534,  2.8418,  0.0722],
            [-0.2357,  0.8090, -0.4201,  0.1063,  0.5446, -0.5030,  1.3125, -1.5108]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5923,  1.3893,  0.7954],
            [-0.1025, -1.0189, -0.4057],
            [ 0.7069, -1.8177, -0.5231]], requires_grad=True), Parameter containing:
    tensor([[1.3493]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.1485,  1.9483,  1.5133, -1.0667,  2.0470,  6.5180, -2.6254,  1.0198],
            [ 0.9701, -0.4330, -3.6121,  3.5108,  7.8986, -0.3007, -2.3958, -3.3653],
            [ 7.1244,  3.3866, -1.5204,  3.1313, -5.9003, -5.1936, -1.5153,  2.2341],
            [ 3.0428,  2.0350,  3.2550,  0.9753, -5.8691,  3.2609,  1.3776,  3.5305],
            [-2.6939, -1.2690, -0.9556,  5.0837,  2.0272,  2.2171,  3.3108,  0.0541],
            [-2.2208, -3.2266, -0.9436,  1.2464,  1.2030, -1.7833,  0.7445, -1.1728],
            [ 3.2800,  2.3803,  2.3243, -3.2348,  3.4754,  0.0789, -1.6655,  2.5169],
            [ 1.7382,  7.8204, -1.6244, -0.9159,  0.9189,  1.5874,  0.3949,  2.2906]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.0824, -4.6394, -3.5083, -0.4511,  0.3174,  2.8480,  1.7986, -2.4727,
             -0.5100,  0.3736],
            [ 0.3560,  3.8592,  1.1399,  0.3727, -1.4386, -3.1654, -1.6569,  2.4814,
              1.2419,  0.0260],
            [-2.1099,  5.4548,  2.6794, -1.9712,  1.4291, -1.7452, -3.3952,  1.2169,
              1.8661,  0.8824],
            [ 0.4576, -1.5098,  2.4790,  3.1814,  1.8033,  3.6220,  6.7367, -1.5975,
             -4.8480, -1.4190],
            [ 0.0439, -0.1970, -0.8244,  1.4322, -2.4800, -0.7961, -1.7688,  3.3481,
             -0.6814, -0.7185],
            [-0.0876,  1.6541, -0.5436, -4.2994, -4.5411, -3.7313, -5.8572, -0.8791,
              0.7873, -0.0372],
            [-0.9956,  3.6856, -2.0043,  1.9478,  1.8831, -1.9751,  4.9669, -1.9498,
             -0.0856,  0.2548],
            [-0.2055,  0.8816, -5.5007, -0.2451,  1.1085,  2.9832,  1.9465,  0.5029,
              0.0469, -0.5665],
            [ 0.6863, -1.1086,  1.8187, -2.9767, -1.0777,  1.4483, -1.2281, -1.2964,
              1.4510,  0.6617],
            [-0.2947, -0.0565,  2.8352, -1.0874,  1.1738, -1.6884,  0.4668, -1.9361,
              2.0604,  0.6886]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.080 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
