.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.7487,  3.1803,  1.4954,  4.4112,  5.2532],
            [ 3.3685, 13.1897,  9.8331,  5.2737,  5.2471],
            [ 7.5427,  1.6183,  7.4121,  3.3568,  4.3456],
            [ 9.5058,  4.3517,  1.6691,  5.7549,  2.7143],
            [ 2.7290, 17.0638, 12.1127,  1.8577,  5.0947],
            [ 9.5058,  9.2443,  7.3166,  2.9536,  2.7143],
            [ 7.5427,  1.8831,  5.9629,  7.0788,  4.3456],
            [ 3.3685,  7.2121,  4.5493,  6.9343,  5.2471]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1939, -1.8293, -1.1225, -0.1417,  1.0611,  1.1404,  0.5323, -0.7077],
            [ 0.0433, -0.0623,  1.4613, -0.1423, -0.9776, -1.8833, -0.1677, -0.5715],
            [ 0.5363,  0.5176,  0.7114, -0.0127,  0.5764,  0.7487,  0.6145, -0.4813],
            [ 1.1361,  0.7560,  0.9731, -0.6307, -1.6690,  0.4618, -1.1041, -0.1357],
            [ 0.7891,  0.3342, -0.3200, -0.8967, -0.7547,  0.0863, -0.5615, -0.6641],
            [ 0.2477, -0.2983, -1.0827,  1.4895, -0.3033, -2.1538,  0.2212,  0.9049],
            [-0.4242, -0.9405, -1.3770, -0.8582,  1.0284,  0.1909,  0.1217, -0.4424],
            [-0.2326,  0.7538,  0.9375,  1.7553,  0.3107, -0.3322,  0.2409,  0.0440]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2872, -0.4458,  1.8803],
            [ 0.9082,  0.1538, -1.1258],
            [-1.2553, -0.6848,  0.5887]], requires_grad=True), Parameter containing:
    tensor([[-0.5557]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7697, -2.5297,  2.4793,  1.7241,  2.1933, -0.7161,  1.3749, -0.1988],
            [ 3.2646,  3.4983, -0.3520, -2.3441, -0.4527, -4.1444, -3.2368, -5.5482],
            [-3.6137, -5.2606, -2.4755, -3.7035,  4.5274, -2.0023,  1.3319,  3.1581],
            [-2.9783,  0.2367, -0.6042,  4.0432,  0.0930,  0.2356,  0.8494, -0.1219],
            [ 1.4377, -1.9276, -3.3245, -1.5933, -0.2330, -2.9069, -4.4145, -4.1807],
            [-3.7927, -2.9583, -0.8475, -1.8112, -0.6554, -2.8965,  5.2188,  5.6245],
            [ 3.6322, -2.2205, -1.2455,  2.8059, -2.0057,  6.0491, -2.9782, -0.4133],
            [-5.9684,  1.5787, -2.3615,  2.0622,  3.6592, -8.5559, -3.3181,  0.1481]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0996,  0.0905, -0.7291,  0.0425, -0.3788,  3.3586, -2.3450,  0.6446,
             -1.1038, -2.8244],
            [-0.1192,  0.0596, -1.7834,  3.1888,  0.7329, -1.5548, -0.9734, -0.3737,
              1.7386,  2.5044],
            [-0.1498,  1.0640,  0.8505, -2.9732,  0.8234,  3.7638,  1.5133,  2.1590,
             -0.9609,  0.6914],
            [ 0.1911, -1.9142,  2.3064,  1.0024,  0.0344, -1.2896, -3.2340,  1.4745,
             -0.3910, -3.0193],
            [ 2.0526,  0.7082, -4.4474, -4.3477,  0.6339,  1.7570, -0.0986, -4.6692,
              1.9281, -0.4744],
            [-2.9414, -2.3939,  3.4028,  0.4617, -1.4941, -0.7110, -0.5887,  0.7456,
             -4.0344,  2.0661],
            [ 0.5215,  0.0733, -0.1833,  0.4572,  0.7441,  2.7894, -2.6940,  3.5024,
              5.1916,  0.3982],
            [ 0.1604,  1.2517,  4.9025,  2.0060, -2.1918,  3.1161,  2.9266,  0.0279,
             -0.0961, -1.0819],
            [ 0.2779, -0.7696, -3.1422, -1.2902,  1.7179, -0.6376, -1.4196, -2.1691,
             -1.4624,  0.8052],
            [-2.0685, -1.7490,  2.3616,  0.4583, -1.0464, -0.4398, -2.2589, -0.2583,
              0.9117, -0.1082]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.640 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
