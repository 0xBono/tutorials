.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.6379, 15.2113,  5.9453,  4.0942,  2.6512],
            [ 4.5318,  8.8208,  2.4195, 17.6651,  5.0793],
            [16.0320, 15.6581,  4.5653, 11.3284,  9.2068],
            [ 9.1659,  6.2767,  6.5531,  6.9864,  5.3742],
            [ 3.6027,  5.1659,  0.3053,  3.6248,  0.8049],
            [ 9.1659,  8.7370,  8.7326,  1.4457,  5.3742],
            [16.0320,  4.0976,  4.2401, 11.3153,  9.2068],
            [ 4.5318,  2.9620,  6.5620,  6.8685,  5.0793]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.3705e+00,  1.9870e+00, -1.7437e-01, -5.5666e-01,  3.5226e-01,
              2.2647e-03,  1.0763e+00,  1.2285e+00],
            [ 1.8302e-02, -8.8235e-01, -5.3352e-01, -3.1402e-01, -5.3451e-01,
              9.1143e-01,  1.3901e+00,  6.6527e-01],
            [-4.4989e-01, -3.0550e+00, -1.9365e+00, -2.2759e-01,  1.6730e-01,
             -1.2580e-02, -1.6220e-01, -1.4328e+00],
            [-1.2040e+00, -6.5758e-01, -1.8573e-01,  1.3763e+00, -2.9924e-01,
              1.6705e+00,  5.6854e-01, -1.7763e+00],
            [ 3.5784e-01,  7.6615e-01,  2.1910e-01, -3.2981e-01,  4.8262e-01,
              4.1870e-01,  4.6217e-01,  7.9920e-01],
            [ 5.9355e-01, -9.1390e-01, -5.8056e-01, -1.8070e+00, -5.8538e-01,
             -7.6164e-02, -4.9193e-01, -6.1434e-01],
            [-1.0909e+00, -2.0675e+00,  4.7825e-01, -1.0649e+00,  5.3456e-01,
              1.4637e+00, -2.9468e-01, -1.1903e+00],
            [-2.4919e-01,  9.6806e-01,  6.0006e-01, -1.2230e+00,  1.3129e+00,
             -6.6881e-01,  3.5891e-02,  1.4690e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3820, -0.6726,  0.8569],
            [ 1.3330,  1.0530,  0.9412],
            [ 0.3919, -0.8032,  2.7234]], requires_grad=True), Parameter containing:
    tensor([[-0.0679]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.2231, -0.5616,  2.0234, -3.7985, -6.5894,  0.4213,  1.8182, -6.2516],
            [-0.5895,  0.5718, -2.1414, -2.3128, -4.3030, -1.2418, -1.8865, -2.6507],
            [-0.4723,  3.9117, -0.7678, -0.0480, -3.4017, -3.0252, -1.8103, -2.1891],
            [-2.7237,  1.6552,  0.0230,  0.6567,  0.6632,  0.6215, -4.6808, -3.0463],
            [-4.0981, -1.1979, -1.2749, -4.8740, -0.0182, -3.0765, -0.7531, -6.0354],
            [ 3.1236, -2.6514, -4.7337, -2.8895, -1.5408, -9.5691, -3.8047, -2.9264],
            [-3.1825, -1.5820,  1.8145, -6.0072,  3.4634, -0.9418, -4.7642, -3.5771],
            [ 3.2450, -0.8558,  1.0887,  0.4983,  0.7344,  2.0000, -2.9797,  3.6432]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-6.7982e-02,  7.0537e-01, -1.3120e+00,  1.2422e+00,  8.5629e-02,
             -4.2594e-01, -5.4275e-01,  3.7910e-01, -5.5070e-01, -4.4239e-03],
            [ 3.3202e-01,  1.0258e-01,  3.6546e+00, -1.3383e+00, -2.5099e+00,
              4.3172e-01, -1.9995e+00, -9.4665e-01,  5.0528e-01, -1.6404e-01],
            [ 1.7326e+00, -3.5003e-01, -2.1236e+00,  3.3481e+00, -1.7154e+00,
              1.6146e+00, -1.0803e+00,  1.4479e+00, -3.3653e-01,  5.1661e-01],
            [ 3.7838e-01, -5.0532e+00,  5.5575e+00, -5.4516e+00, -3.4015e+00,
              8.3718e-01, -1.8221e+00,  2.8505e+00,  6.2842e+00, -7.6561e-01],
            [ 1.0923e+00, -2.1495e-01, -2.9498e+00, -5.9974e+00, -1.3617e+00,
              4.4255e+00, -4.2837e+00, -2.6022e+00,  3.1097e+00, -1.7666e-01],
            [-1.7271e-01, -2.9315e+00,  5.1307e+00, -2.7664e+00, -1.0122e+00,
             -1.8060e-01,  6.3130e+00, -1.9384e+00, -6.9426e-01, -3.8660e+00],
            [ 6.2256e-01, -9.1713e-02, -1.0014e+00, -1.1069e+00,  4.1662e+00,
             -7.9925e-01, -1.2962e+00,  1.6853e+00,  3.7210e+00, -2.3466e+00],
            [ 7.1098e-01, -1.4930e+00,  3.8448e+00, -2.3200e+00, -2.3832e+00,
              1.5902e+00,  3.9584e+00,  5.6236e-01, -4.5543e-01,  4.1034e+00],
            [ 1.0546e+00,  4.8514e-02, -5.8627e-01, -2.7706e+00,  5.9837e-01,
             -1.9984e+00, -4.3233e+00,  3.9877e+00,  2.6911e+00,  3.2193e+00],
            [ 2.9429e-01, -7.7687e-01,  1.9467e+00, -2.6651e-01, -3.3280e+00,
              2.0667e-01, -8.1911e-01, -6.7292e-01, -1.2886e+00,  1.8016e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.575 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
