.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.5079,  1.6001,  7.0000,  7.2436, 10.8592],
            [ 4.0127,  3.8926,  4.5311,  8.4257,  7.4999],
            [14.4522,  7.5237,  4.4883,  3.8971,  2.1090],
            [11.4675,  2.5740,  6.8292, 15.8890, 12.1311],
            [ 7.0890,  7.3432,  8.4480, 11.1853,  8.2460],
            [11.4675,  3.0189, 17.9458,  7.1831, 12.1311],
            [14.4522,  8.0475,  4.2385,  9.1686,  2.1090],
            [ 4.0127,  5.9643,  0.3863,  1.3773,  7.4999]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1096,  1.2543, -0.9517,  1.4381, -0.5939, -0.0241,  0.8749,  1.9494],
            [-1.0683,  1.2293, -2.3449, -0.7836, -0.1692,  0.0868,  0.3697, -0.8905],
            [-1.0541, -0.3005,  1.4195,  0.5466, -2.6850, -0.5458, -0.2725, -0.6840],
            [ 0.3166,  0.9026, -0.1383,  1.1192,  0.6619,  1.1059, -1.0365,  0.0510],
            [ 0.1886,  0.7289, -1.0093,  0.6032, -0.7735,  0.3473,  2.0686, -1.5599],
            [ 0.3010, -1.2246,  1.4873, -0.0333,  0.4605,  1.0170, -0.1466,  1.1620],
            [-0.7853,  1.4540, -1.1786, -0.9757, -1.2930, -0.3913, -1.2707, -1.7135],
            [ 0.5919, -1.4805,  0.6884, -0.7094, -0.1821,  0.0198,  0.4504, -0.0232]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7064, -1.6648, -0.5696],
            [-0.5645, -2.0853, -0.7634],
            [-0.5142,  0.1233,  0.4143]], requires_grad=True), Parameter containing:
    tensor([[0.1222]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.4869,  3.6496,  6.0844, -1.9980,  1.4289, -2.5173,  1.1274,  4.1388],
            [-3.0333,  1.3528,  2.4115,  2.0606,  3.7976,  3.8880,  4.2961,  4.8612],
            [-3.3278,  1.7821, -1.5458,  2.3840,  5.0852, -3.7070, -3.7096, -0.7162],
            [-1.3708,  0.7335,  0.6408,  3.1552, -0.7138, -4.2287, -2.5904,  0.8844],
            [ 0.9054, -2.3033, -1.1899, -0.4065,  0.0299,  3.7888, -0.1606, -0.1114],
            [-2.0666, -0.1560,  0.9491,  2.1222,  3.2043,  3.4177, -1.6653,  1.7093],
            [ 0.5184, -0.4946,  4.5144,  3.2649,  1.6892,  0.1402, -1.3989,  1.0347],
            [ 0.7676, -4.6225,  4.2096,  0.5042,  0.5265, -4.2845,  0.1837, -0.8393]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.1838e+00, -2.5049e+00, -1.8104e+00, -3.1927e-01,  1.8205e+00,
             -1.3073e+00,  2.3052e+00, -2.1455e+00, -2.2179e-01,  2.0985e-01],
            [-2.0471e+00, -1.5946e+00,  6.7764e-01, -2.0614e-01,  4.7069e-02,
              2.2512e-01, -4.8528e-01, -2.7276e+00, -1.4183e+00, -2.4704e-02],
            [-6.3280e-01,  5.2138e+00,  2.5946e+00,  9.2027e-02, -8.6914e-01,
              2.1343e-01, -2.3242e+00, -4.7249e+00, -1.6707e+00, -5.4265e-01],
            [ 7.4879e-01,  3.3404e+00, -4.0450e-01,  4.7305e+00,  2.2293e+00,
             -2.7709e+00, -5.9413e+00, -4.2903e+00, -1.7740e+00, -2.1333e-02],
            [-2.6873e-01,  4.1782e+00,  3.2941e+00, -4.9155e-01,  1.2983e+00,
             -4.1834e+00, -6.7748e+00, -2.8171e+00,  1.2033e+00,  2.0624e-01],
            [ 2.0209e+00,  2.3116e+00,  9.3832e-01,  1.3464e+00,  3.3416e-01,
              2.7212e+00, -1.5058e+00, -1.6728e+00,  2.3266e+00,  1.1882e+00],
            [ 1.6094e+00, -4.7015e+00, -4.2351e+00,  1.0408e+00, -4.8388e+00,
             -8.0272e-01, -6.3922e-01, -4.2799e+00,  8.4003e-01,  3.2953e-01],
            [-1.1248e+00, -6.1402e+00,  1.7098e+00, -4.9403e-02, -5.2951e+00,
             -3.8164e-01, -4.4388e+00, -4.3555e+00,  1.8503e+00,  9.5664e-01],
            [-1.1853e+00,  5.8189e-04,  3.9321e+00, -2.1528e+00, -5.2588e+00,
             -1.8783e+00, -3.1588e+00,  7.2945e-01,  2.4952e+00,  2.8961e-01],
            [-2.5035e-01,  1.0237e+00, -5.2253e-01, -1.8396e+00,  7.9890e-01,
              3.3297e-01,  1.0528e-01,  8.8883e-01, -1.5002e-01, -3.4424e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.577 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
