.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.8721, 17.0676,  4.1710,  7.0694,  7.1410],
            [ 9.7011,  5.7885,  9.8795,  8.7703,  5.5652],
            [10.1615,  5.8943,  7.9695,  6.0351,  5.3396],
            [12.7721,  4.1185, 18.4538,  2.2734,  1.0093],
            [ 1.0134,  3.5648,  2.9777,  6.1606,  4.0549],
            [12.7721, 14.0884,  2.6607,  2.8958,  1.0093],
            [10.1615,  4.8824, 11.2512,  6.9106,  5.3396],
            [ 9.7011,  5.4109,  8.2038,  0.6872,  5.5652]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2892,  2.4259,  0.2000, -0.7490, -0.8496,  0.0608, -0.6434, -0.2400],
            [ 0.2439, -0.1333, -0.1399,  0.5010, -0.5002, -0.3511, -1.1987, -0.7347],
            [ 0.9570,  1.7128,  0.9355,  0.3445, -0.8155, -0.9652,  1.8812,  0.9035],
            [ 1.3132,  2.2737,  0.6465, -0.6473,  0.4393, -0.2356, -0.5701, -1.1979],
            [ 1.1817,  1.1029, -1.0976, -0.2494, -0.1617,  0.2194,  0.1429,  0.5500],
            [-0.1903,  0.6599,  0.5542,  0.8354, -2.3993,  0.1025,  0.1935, -1.6090],
            [-1.0205, -1.4387, -0.5808,  1.6286, -0.6583, -1.6285, -1.7661, -0.6640],
            [ 0.2258, -0.3272,  1.1712,  0.5920, -0.6678, -0.3099,  0.8284,  2.0744]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1865, -1.7492, -0.3957],
            [ 0.4336, -0.4858, -1.9141],
            [ 0.0825,  1.9281,  1.1297]], requires_grad=True), Parameter containing:
    tensor([[-0.6150]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.5077e+00,  1.3500e+00,  7.6201e+00,  1.2766e+00, -3.2128e+00,
              1.5389e+00,  6.6622e+00,  2.6554e+00],
            [ 5.1237e+00, -3.7783e+00, -4.5694e+00,  3.5229e+00,  2.5445e+00,
             -5.9553e+00,  1.3602e-03,  2.5128e+00],
            [-3.2980e+00,  1.0955e+00, -5.8702e+00, -7.3568e+00,  2.1765e-01,
             -5.6173e-01, -4.1663e+00,  2.7494e+00],
            [-9.9906e-01,  3.0058e+00,  6.1902e+00,  4.4443e+00,  4.4119e+00,
              1.2545e+00, -1.8323e+00, -3.4974e+00],
            [ 1.0808e+00,  1.8437e+00, -2.3653e+00, -2.7510e+00,  9.7839e-01,
              2.8973e+00, -1.5820e+00, -9.1878e+00],
            [-3.5360e+00, -1.5005e-01, -1.6805e+00, -6.7975e+00, -7.9993e+00,
             -7.3618e+00,  8.1755e-01,  1.2374e+00],
            [-1.1210e+00,  3.5318e-01,  4.6872e+00,  3.0639e+00,  1.9970e-01,
             -3.4599e+00, -3.6766e+00, -1.7245e+00],
            [ 1.7406e+00, -1.1775e+00, -4.3472e+00, -2.1381e+00,  2.5573e+00,
              5.5818e-01, -2.1061e+00, -9.7563e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.7221e-02,  2.1822e+00,  3.4940e+00,  2.4471e+00,  2.3062e+00,
              4.0400e-01, -1.0141e-01,  1.8226e+00,  2.2539e+00,  4.8549e-01],
            [ 3.0033e+00, -1.0420e-03, -4.6936e+00, -6.5811e-01,  2.2038e+00,
              6.2172e+00, -1.0683e-01, -2.3207e+00,  2.2066e-01,  2.1837e+00],
            [-7.2431e-01,  2.1068e+00, -8.5954e-01, -9.7355e+00, -5.9165e+00,
             -5.7246e-01,  3.5936e+00, -1.5316e+00, -2.3419e+00, -1.8129e+00],
            [-4.5759e-01, -1.8964e+00,  6.2024e+00,  2.7083e+00, -9.8770e-01,
             -6.0723e+00,  5.1964e-01,  2.1451e+00,  2.6642e+00,  2.6726e+00],
            [-2.0593e+00, -4.6788e+00, -1.0715e+00,  4.0557e+00,  3.2563e+00,
             -2.3767e+00, -1.7939e+00, -1.8811e+00,  5.0993e-03,  5.8591e-01],
            [-1.1938e-01, -3.6916e+00, -9.8909e+00, -5.4261e+00, -1.9599e+00,
              1.8702e+00, -1.9873e-01, -2.2605e+00, -4.2375e+00, -2.5214e+00],
            [ 6.0456e-02,  2.9355e+00, -1.0365e+00, -1.6283e+00, -3.2018e+00,
             -4.9879e+00, -6.6272e+00, -2.8132e+00,  2.5921e+00,  2.8420e+00],
            [ 2.1937e+00,  4.3406e+00,  1.9369e+00,  5.1043e-01,  6.4172e-01,
              7.1404e+00,  7.8259e+00, -2.3456e+00, -5.7186e+00, -3.8376e-01],
            [-6.9626e-01,  1.4778e+00,  4.5633e+00,  1.0685e+00, -1.2222e+00,
              9.2086e-01,  4.1529e+00,  8.7946e+00, -5.1225e-01, -2.3841e+00],
            [-1.3794e-01, -3.2227e+00, -1.7521e+00,  3.2778e+00, -2.7771e-02,
             -2.2553e+00, -4.8893e+00, -1.6603e+00,  2.3158e+00,  1.0714e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.577 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
