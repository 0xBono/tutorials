.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.7669,  6.3303,  9.9810,  2.9043,  1.1606],
            [ 5.1579,  4.4930, 11.8347, 12.0465,  2.0810],
            [ 1.7796, 16.7161,  5.7205,  6.4748,  5.2057],
            [ 3.4795,  4.2876,  2.1723,  7.8809, 10.7064],
            [ 8.4757,  3.3884, 11.5945,  6.0748,  2.6064],
            [ 3.4795,  6.6422, 12.5769,  4.6546, 10.7064],
            [ 1.7796,  8.9436,  4.7346,  7.8573,  5.2057],
            [ 5.1579,  5.9388,  4.6822,  9.5287,  2.0810]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0963,  0.8463, -1.8496, -0.8378,  0.3957,  2.2710,  1.4613, -2.3297],
            [-0.3486, -0.1839,  0.8181,  0.1134, -0.4258, -0.3782, -0.6535, -1.3491],
            [-0.4326,  0.4624,  0.7290, -0.6270,  0.7012,  0.8406, -2.1146,  0.1150],
            [-0.5896, -0.2887,  0.5191, -0.8691, -0.6527, -0.7903,  0.7274,  1.2610],
            [-0.5570,  0.4491, -0.4943,  0.1849, -0.2806, -0.2667,  0.8935,  0.8802],
            [-1.3156, -0.4172,  0.9180,  0.7572,  1.2481,  0.5221, -0.8798, -0.5481],
            [ 0.4098, -0.2444,  1.4250,  0.4439, -0.3966,  0.6098,  1.8018, -1.7316],
            [-0.4871, -1.0923, -0.6961,  0.1813, -2.0431,  0.6120,  0.1089,  0.6010]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1638, -0.5406,  0.9900],
            [-0.5748, -0.4359, -0.2851],
            [-0.3618,  1.8055,  0.0401]], requires_grad=True), Parameter containing:
    tensor([[-0.7027]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.8910,  0.7238, -2.6466, -1.3227, -1.7239, -3.6102,  1.5138,  1.8505],
            [ 0.0151, -7.0045, -0.0191,  2.2790, -0.3916, -0.3905,  1.5701, -5.4135],
            [-4.6326, -0.2015,  3.0314, -2.6563,  2.6251,  0.2711,  0.6789, -2.7341],
            [-3.5652,  3.2735, -2.7411, -2.0196, -4.1766,  0.1569, -5.4821,  0.1904],
            [ 0.4005,  1.9583, -1.1363, -0.5909, -0.6336,  2.7442, -2.1377,  1.4498],
            [-1.6726, -1.1494, -2.4713, -2.6801,  2.4683, -2.5279, -1.3343,  1.7936],
            [ 5.6338,  2.4332, -3.6705,  1.6469,  2.2098, -2.1384,  2.7289,  0.0396],
            [-0.0528, -3.9890, -2.7152, -1.4156, -2.4743, -4.1003, -0.4581, -5.2985]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.8869e-01, -1.0783e+00,  2.0930e+00, -6.9019e-01,  2.4590e-01,
             -1.2717e+00,  7.3344e-01,  1.6887e-01,  8.0995e-01,  1.3055e+00],
            [-8.0851e-01, -8.7914e-01,  9.8681e-01,  1.6058e+00, -2.3908e-01,
              5.4799e-01, -6.7800e-01, -2.1381e+00, -3.6710e+00,  2.4946e-01],
            [-1.4431e+00,  3.0242e+00, -3.4432e+00, -1.0030e+00, -1.2574e+00,
              5.2026e-01,  2.2779e+00,  3.1867e+00,  2.6079e+00,  1.8672e+00],
            [-1.5302e-01,  1.3354e+00,  1.7100e-01,  7.4599e-01,  4.0041e+00,
              2.9485e+00, -2.3758e+00, -7.3719e+00,  1.1449e+00, -1.3351e+00],
            [ 2.0403e-01, -1.5465e+00,  1.9329e+00,  2.3708e+00, -5.0710e+00,
             -3.5864e-01, -1.8584e+00,  1.4263e+00,  2.1496e+00,  7.3974e-02],
            [ 3.1227e-01, -9.7567e-01,  2.2783e+00,  1.3595e+00,  1.4924e+00,
              8.7975e-01,  1.5262e+00,  2.3027e+00,  2.0825e-01, -1.0339e+00],
            [-8.7864e-01, -9.6252e-01,  5.4609e-01, -3.0959e+00,  4.8186e-01,
             -3.0553e+00, -2.3453e+00, -3.6434e+00,  1.1367e+00, -1.7249e+00],
            [-6.5235e-01,  2.3976e+00,  1.0915e+00, -1.8606e+00,  4.1727e+00,
              3.0374e+00,  4.3870e-01,  2.4952e+00, -2.3910e+00,  4.6127e-01],
            [-4.7495e-01,  4.4409e-01, -5.2986e-01,  6.5111e-01, -1.1069e+00,
             -1.8629e+00, -4.0030e-02,  1.8536e+00, -3.2626e+00, -5.9531e-02],
            [-2.3399e-01,  1.3120e+00, -1.0618e+00,  2.1079e+00, -1.4392e+00,
              3.4452e-01, -6.2208e-01, -2.4406e+00, -1.9655e-01, -3.1604e-03]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.583 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
