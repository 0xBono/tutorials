.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.9098,  8.0860,  6.0810,  9.7673,  2.3931],
            [ 1.3717,  4.4540,  7.6233,  4.7204,  7.9319],
            [ 2.8601,  5.2465, 12.6266, 17.6016,  8.8523],
            [ 2.9998,  3.0492,  7.8434,  4.9097,  9.3232],
            [16.4229, 11.8667,  3.6209,  5.2766,  1.8906],
            [ 2.9998,  3.4146,  9.9077,  7.9977,  9.3232],
            [ 2.8601, 14.8863, 14.3466, 12.2090,  8.8523],
            [ 1.3717,  6.3420,  8.7842,  3.9336,  7.9319]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9728, -0.0898, -0.3618, -1.6207,  0.4112,  1.6273,  1.0921,  0.1846],
            [ 0.1300, -1.1750, -0.5075,  0.1994, -1.1174, -0.8229, -0.2864,  1.7300],
            [ 0.9355,  3.0877, -1.4782,  0.8495,  0.7720, -1.2706,  0.9426,  0.2409],
            [ 0.8657,  1.6279, -0.8865, -0.2752,  0.3514,  0.2338, -1.1545, -2.8289],
            [ 0.1616, -0.3478,  0.2552, -0.5846, -0.4632, -0.0155,  1.1275,  1.1195],
            [-0.0594, -1.3520,  2.0728, -1.7520, -0.1447, -0.9102,  0.6881,  0.3564],
            [-0.0807,  1.3126, -0.4734, -0.2436, -0.6069,  0.3183,  1.7527,  0.1397],
            [-1.1882,  1.3919, -1.2601,  1.0670,  0.6357, -0.4564, -0.4461, -1.4830]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1861,  1.4682, -0.1071],
            [ 0.4942, -1.6998,  0.2688],
            [ 0.6522, -0.6095,  0.8103]], requires_grad=True), Parameter containing:
    tensor([[-1.2760]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.1322, -2.5144,  0.4084,  3.2762, -1.7090, -2.8589,  4.2617, -1.0470],
            [-6.1463, -0.0379, -4.3429,  0.0430, -9.4650,  2.7165, -3.5501, -6.4348],
            [ 0.5042, -1.1082, -2.5579,  0.4620, -2.1054,  5.1460, -3.9892,  2.5629],
            [ 1.1245, -2.2210,  0.5991, -4.9123,  1.8348, -2.4015, -1.2905,  1.5991],
            [ 1.8769, -6.3962, -1.5868, -2.1882, -0.8064, -3.5755,  0.7761, -2.3067],
            [-1.2230, -0.2409, -3.1781,  0.9962,  3.2594, -6.4264,  5.9794, -1.8204],
            [-1.2278, -1.5002, -5.5039,  1.3173,  1.1070, -4.8340, -0.7421, -1.9397],
            [-1.0757,  1.2697,  1.4903, -1.4873, -2.0600, -1.3294, -3.8783, -1.4783]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2096,  1.5887, -0.7614, -1.0194, -0.3073, -0.8663,  0.4477,  0.6206,
             -3.1539,  0.2246],
            [ 0.6557, -1.3788, -0.3357, -0.7232,  1.2453,  2.7537,  1.0845,  0.1285,
              4.0546, -0.5981],
            [ 1.3364,  0.6565,  0.6379,  2.2249, -1.9358, -0.8603,  1.7681, -2.0154,
              0.8654, -1.5620],
            [ 1.3581, -2.4152,  3.0289,  0.0627, -2.1497,  1.6666,  1.5470, -2.1949,
              3.8228,  0.0189],
            [ 1.6214,  0.0303, -1.9688, -0.1046, -1.3480,  0.8648,  0.5129, -1.8320,
             -2.9418,  0.1031],
            [ 0.6491, -0.9841, -1.1718,  2.2327,  1.7495, -1.1180, -1.3569,  2.0244,
              2.9034,  0.3137],
            [ 0.3973,  2.6099,  1.1680, -0.0802, -0.4403,  0.8597, -1.4816,  3.6434,
              0.4330, -1.5493],
            [-0.0360, -2.6378, -1.8321, -2.6405,  0.9553,  2.1930, -3.5203, -4.3368,
             -1.0186,  0.3440],
            [ 0.2057,  1.0914,  3.3023, -3.3256,  3.9952, -1.1492,  0.1826,  2.5969,
              1.6532,  0.2148],
            [-0.6680, -0.0597,  0.3429, -2.0890,  1.5896, -1.4442, -0.5673,  0.3592,
             -1.1122, -0.4106]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.103 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
