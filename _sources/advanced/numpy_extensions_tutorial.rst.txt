.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.4437,  9.2127,  1.7273,  8.7440, 16.0897],
            [ 6.7704,  5.3482,  7.7793,  5.1610,  4.4508],
            [17.5911,  5.2624,  2.4349,  7.9995, 10.9397],
            [11.5720,  5.6782,  6.6346,  4.8329, 10.4595],
            [ 6.2324, 16.4744,  1.6639,  3.1873,  1.7154],
            [11.5720,  5.7835, 10.8655,  7.7974, 10.4595],
            [17.5911,  9.0010,  6.9456,  8.4628, 10.9397],
            [ 6.7704, 15.4570,  6.1589,  7.4481,  4.4508]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.8312,  2.2596,  0.0995, -0.6892, -0.7744, -2.0005,  1.4614,  0.8912],
            [-0.3673,  1.5956,  0.4584,  0.7017,  0.3743, -0.7782, -1.5712, -0.5011],
            [-0.3935,  1.5241,  0.1717,  0.8698, -0.6719, -0.0297, -1.4076,  0.7783],
            [-1.7731, -2.1207,  0.6924, -0.7958, -0.2143, -0.6587, -1.2697, -0.4144],
            [-0.4398,  0.0738,  0.0290, -1.4366, -0.8525, -0.4528, -0.8115,  0.0227],
            [ 0.0561,  0.8097, -0.0237,  1.9292, -0.1845,  0.3279,  2.1202,  1.0920],
            [-0.2614,  0.6860, -1.0546, -0.3326, -0.1544, -0.0853,  0.0825,  1.9620],
            [-1.7366,  0.9117, -1.5686, -0.9963, -0.0492,  1.5684, -2.0636, -0.8888]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4544, -2.3112, -1.5646],
            [-0.4687,  0.0668,  1.2889],
            [ 0.0309, -0.6260, -0.3928]], requires_grad=True), Parameter containing:
    tensor([[-0.5607]], requires_grad=True)]
    Output from the convolution:  tensor([[ 7.1783e-01, -2.2738e+00,  9.4888e-01,  1.5660e-01, -4.6752e+00,
              1.7059e+00,  3.8814e+00, -1.6232e+00],
            [ 4.2185e-01,  2.1019e+00, -1.9196e+00, -3.4563e+00,  1.1183e+00,
              3.2537e+00, -5.1908e+00, -7.4143e+00],
            [-4.9551e+00,  3.4431e+00, -2.4294e+00, -2.2745e+00, -4.7504e+00,
             -4.6111e+00,  1.3970e-01,  3.3546e+00],
            [ 6.4131e+00, -1.7863e+00, -7.1803e+00,  1.0520e+00,  4.5352e+00,
              6.5001e+00,  1.0945e+00, -2.2564e+00],
            [-3.3588e+00, -4.3892e+00,  1.0394e+00,  5.3183e+00,  3.3834e+00,
             -1.4704e+00, -2.7956e+00,  8.5209e-02],
            [-2.1149e+00,  3.0532e+00,  5.9672e+00,  8.5325e-01, -2.3016e+00,
              1.2213e+00,  3.0851e-02, -1.9359e+00],
            [-2.0844e+00, -5.4778e+00, -5.9326e+00, -2.3421e+00,  4.7351e+00,
              3.2282e-03, -1.8925e+00,  4.4734e-01],
            [ 2.6386e+00,  4.6072e+00,  2.1394e+00,  2.0501e+00, -2.8530e-01,
             -1.1570e+00,  4.4206e+00,  2.3400e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0518, -0.1354, -0.8773, -0.3237,  1.0414, -0.4390, -3.0926, -0.2618,
              0.0561, -0.4190],
            [-0.3183,  1.6707, -1.1955, -0.5226, -1.6594, -3.4553,  2.2213,  2.8641,
             -2.2330, -0.8545],
            [ 0.4142, -0.8280, -3.1790, -1.9077, -4.4349, -1.1176, -1.8205, -1.2744,
              1.6161,  1.4046],
            [ 0.3587, -2.0359, -5.5977, -0.8307,  3.1743,  2.1602,  0.1941,  3.1274,
             -4.5489, -3.6515],
            [-1.2577,  3.0180,  2.9723,  3.5678,  1.4099, -3.6005,  1.8121,  3.1489,
             -1.9610,  0.9854],
            [ 0.9454, -1.5164, -3.6177, -1.0226, -2.7872, -5.3465, -0.2168, -0.5356,
              3.4418,  3.2711],
            [ 0.0752, -0.5474, -0.4704,  2.6573,  5.5836,  5.1142,  3.1634, -3.2177,
             -1.9458, -1.9338],
            [-0.5318,  1.4879,  0.2968, -1.1715, -4.0536, -2.7878, -1.4953,  2.3248,
              9.0197,  3.3896],
            [ 0.2757, -0.7850, -0.9669,  1.3621,  2.0712,  1.6492, -0.7225,  0.4017,
             -1.5084, -2.5285],
            [-0.0169,  0.3657, -0.2503, -0.4017, -0.5230,  0.2617,  0.0710,  0.3804,
              1.6804,  0.8242]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.558 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
