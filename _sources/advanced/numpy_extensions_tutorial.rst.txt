.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.2817, 10.1507,  6.9332,  3.4156,  9.5407],
            [ 9.6158,  1.8470, 12.4382,  9.7398,  6.9218],
            [12.1790,  2.0845,  7.8967,  5.5826,  0.8388],
            [ 9.9877,  8.3241,  3.7322,  9.2140,  2.4127],
            [ 3.7063,  5.3986,  1.6031,  3.0493,  3.1154],
            [ 9.9877,  8.2519, 11.0613,  9.6547,  2.4127],
            [12.1790, 13.9269,  1.8301, 14.8728,  0.8388],
            [ 9.6158,  3.3946,  4.7649, 15.3877,  6.9218]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.2013,  0.3902, -0.2840,  1.9743, -0.9111,  0.2025,  0.6972, -0.4098],
            [-1.5512,  1.2098, -1.0529, -1.5879,  1.3181, -0.2103, -0.0169,  0.9505],
            [-0.8603,  1.2046, -0.2039, -0.7282, -1.0090, -1.0014, -1.3172, -1.8742],
            [ 0.7804, -0.0142,  0.0143,  1.8276,  0.7029, -0.6013, -0.6151, -0.6603],
            [ 0.0348,  0.3271,  0.7818,  0.4149,  1.4671,  0.2585,  1.5011,  2.1222],
            [-0.6184, -1.0871,  2.3747,  0.1754, -1.4613,  0.0138, -0.9953,  0.5574],
            [ 0.6147, -0.3507,  0.9678,  0.1675, -0.7248,  0.0911, -1.2201,  1.8724],
            [-0.3660,  0.0752,  1.1329,  1.4732, -0.8427,  0.4225, -0.7661, -1.2940]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8104,  0.2467,  0.8417],
            [ 0.2451,  1.2657,  1.9633],
            [-2.8197,  0.7952,  1.8103]], requires_grad=True), Parameter containing:
    tensor([[0.6871]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.4129, -4.5663,  1.3436, -0.5090,  1.6420,  5.7163, -2.6583, -5.3159],
            [-0.0959,  2.6182, -1.5112, -2.4939, -0.6906,  1.9236, -1.8545, -2.9409],
            [ 2.4191,  1.6920,  1.9748,  6.8009, -0.3018, -7.4529,  0.4655,  5.1181],
            [ 1.8974,  2.3168,  6.9387,  2.6658,  6.0804,  5.5941, -2.3684,  2.8685],
            [-7.0630, -5.0387,  7.1483,  1.9601,  1.9235,  2.5654, -1.2181,  5.4444],
            [-7.7896, -8.8945, -0.1747,  4.8142,  4.8791, -0.2467, -6.8461,  2.6890],
            [-2.4704, -2.0707, -9.2841, -8.9908,  4.8535,  5.4323,  2.2615,  1.9342],
            [-1.6005,  0.6789, -5.2245, -2.8581,  6.3892, -7.9775, -3.3411,  4.0589]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2399,  0.5931, -0.6803, -0.4475, -0.6467, -1.3613, -0.3157,  0.1444,
             -0.2653,  0.8097],
            [-0.2997, -1.3260, -0.0700, -0.9120, -3.7953, -1.4098, -1.4911,  0.1936,
             -0.2749,  2.8315],
            [-0.4144, -4.4926, -1.7181,  1.1337, -3.8972, -0.4044,  1.3159, -0.0932,
              0.2061,  4.7473],
            [ 2.3877,  3.2573, -3.6914, -1.6610,  5.1468, -1.9934,  2.7252,  2.4893,
              0.6470,  3.1413],
            [ 6.6375,  7.0983,  8.4550,  2.2478,  4.4929, -0.9287,  1.6171, -0.3614,
             -2.0350, -1.3285],
            [-7.1642,  0.6050,  9.7774,  2.7933,  3.8133, -3.2390,  1.5587,  1.8193,
             -5.6968, -4.7385],
            [-5.4175, -2.6797,  1.0821,  6.4427,  4.7029, -2.4827,  1.3887,  1.6431,
             -3.1940, -3.3695],
            [ 4.0185,  2.9246,  1.2998, 12.3503,  5.3680, -2.8287,  2.2743,  0.1004,
              0.6555, -0.9637],
            [-5.5593,  1.0171,  1.0779, -0.4830,  6.9591,  9.2080, -2.4372,  0.5515,
              3.0853, -0.4802],
            [-0.7736, -2.4976,  0.5596, -0.5404, -1.2076,  2.5181, -0.7239,  0.0364,
              1.5052,  0.2618]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.573 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
