.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.0642,  5.9257,  8.3998,  5.3963,  9.9307],
            [ 6.2928,  6.3002,  5.0666,  7.4883,  3.8216],
            [17.7943,  8.2994, 14.1343, 17.0024,  5.7586],
            [ 6.3637,  3.6325,  5.9636,  5.2804, 12.0973],
            [ 0.8815,  7.0030,  3.1312,  0.8089,  4.5152],
            [ 6.3637,  2.4205,  6.3043,  3.3524, 12.0973],
            [17.7943, 13.1737,  3.7322,  2.4227,  5.7586],
            [ 6.2928,  3.4975,  4.2187,  4.5260,  3.8216]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5433,  0.4574, -0.2710,  0.1312,  1.0280,  0.8546, -0.9159,  1.0045],
            [ 0.9448,  0.8101,  1.0315, -0.1874,  0.5140, -1.3609,  1.3622,  0.4407],
            [ 1.4137,  0.9422,  1.3516, -0.0577, -1.3773, -0.4153, -1.0221, -0.7067],
            [-1.6020, -0.5763, -0.3489, -2.1164, -0.9604,  0.5254, -1.7357, -0.6713],
            [ 0.6016, -0.9110, -0.8764, -1.0838,  2.6151, -0.9989, -0.4883,  0.3626],
            [ 1.2979,  0.4679, -0.5894,  0.8126,  1.2798, -0.7506,  1.4400,  0.5576],
            [-0.2939,  1.2766,  0.3120,  0.1620, -0.2765, -0.8694, -0.1992, -1.7979],
            [ 0.7536, -0.8217, -0.3021, -0.9845,  0.4291,  0.0318, -0.6394, -0.5248]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1392, -0.0270, -0.4798],
            [ 1.7538, -0.1160,  0.0118],
            [-0.9296,  0.0384,  0.9916]], requires_grad=True), Parameter containing:
    tensor([[1.1293]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7297,  3.8562,  1.1076,  0.9722,  2.8820, -0.8872,  2.5144,  3.9036],
            [ 2.3711,  0.2207, -1.1305,  1.0914, -0.2103,  2.6605,  0.1379, -0.2111],
            [-0.4354,  1.9368,  1.8707,  1.4480,  3.9203,  0.5523,  5.2272, -2.8057],
            [ 5.0403, -0.8619, -3.5144, -0.1923, -0.7156,  2.8546, -0.2844,  3.1128],
            [ 0.2897,  1.9932,  3.2293,  2.1047, -1.7230,  1.4693, -2.8989,  3.2307],
            [ 2.9894,  0.9430,  1.0189, -1.1401,  5.7164,  0.9998,  2.2112, -1.7511],
            [ 1.1978,  0.1866,  3.1539,  0.5056,  0.8401,  0.1495,  4.3292,  2.0951],
            [-3.4592, -2.8841, -1.8814,  3.5776, -0.2628,  1.3669, -2.8717,  3.1755]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3570,  0.1905, -0.8561, -1.0833, -2.7049, -0.0949, -1.2115, -0.4502,
             -0.1077, -0.2665],
            [ 0.1420, -0.1278,  0.8932,  1.7616,  3.6922, -3.3100,  0.4453,  1.3074,
             -0.0202,  0.5813],
            [ 0.2829,  0.6003, -1.3152, -0.9812, -1.4689,  5.4902,  3.2950, -3.6746,
              0.9413,  0.1467],
            [-2.0062,  0.7231,  0.5677,  1.2211, -0.4791, -3.3867, -0.8142,  4.1671,
              0.3284, -1.2555],
            [ 2.7687, -2.6784,  1.9126, -0.0398,  1.7345,  3.6995, -0.5322,  0.2853,
             -1.0329,  1.1156],
            [-2.0243,  2.9476, -3.2793, -2.9302,  0.5021, -1.4614, -0.2630, -2.1069,
             -1.1913, -0.6934],
            [ 1.4683, -4.4635,  3.5149, -0.5888, -1.8444, -1.5940,  0.6645,  2.2522,
             -0.6971, -0.9720],
            [-1.1566,  4.0071, -1.4307, -1.4597,  3.4800,  1.3209, -0.5449,  0.2939,
              0.1307,  1.9211],
            [ 0.1185, -0.5397,  0.4475,  3.5060, -2.3443, -2.5077,  0.7220, -1.6358,
              0.0958,  0.7332],
            [ 0.2517, -0.9478, -1.1288,  0.4145,  2.6238,  2.2054, -2.2216, -1.3814,
              0.4207, -0.3393]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.988 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
