.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.1572,  4.1503, 11.0792,  9.8293,  2.0465],
            [ 5.4789,  5.3859,  9.0645,  2.3787, 11.6196],
            [ 2.0632,  6.0009,  8.5719,  3.6889, 10.0482],
            [ 8.4282,  6.2925, 10.7675,  7.1870,  5.0129],
            [ 9.2834,  9.6210,  2.7465,  3.2933,  3.3689],
            [ 8.4282,  4.8967, 14.5785, 11.1192,  5.0129],
            [ 2.0632,  5.4348,  6.2886,  2.2361, 10.0482],
            [ 5.4789, 10.4806,  7.4380,  5.7278, 11.6196]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0956,  1.0786,  0.1785,  0.4905,  0.9112, -0.7181,  0.4989,  1.3019],
            [ 0.9188, -0.0156, -2.5524, -0.2432,  0.1915,  0.5320, -0.2838,  0.4024],
            [ 0.3150,  1.0638, -0.1415,  1.1211,  0.8271,  0.4308,  0.7670, -0.4240],
            [ 0.0521, -0.1146,  0.2448, -0.4126, -0.1331, -2.5609,  0.3010,  0.4876],
            [ 1.4565, -0.1765,  0.1721, -0.0268,  1.2631, -0.7832, -0.5453, -0.5925],
            [ 0.0198, -0.2773, -0.1084,  0.1427,  0.5867, -1.7629,  0.0155,  1.1283],
            [-1.9411,  0.2684, -1.2194,  0.4692,  0.2943,  1.0331, -0.6758,  0.4275],
            [ 1.2892,  0.8204, -2.0583, -0.8000,  0.1627,  2.6921,  0.6529, -1.3806]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7757,  0.0739, -1.3270],
            [ 0.2402, -0.3380,  0.4018],
            [-0.4043,  0.0988,  0.2823]], requires_grad=True), Parameter containing:
    tensor([[-0.3863]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.1569, -0.9648,  2.1438,  0.8242, -0.1525, -0.2829,  1.3164, -0.0055],
            [-1.7823,  0.8120,  1.1926,  0.6052,  0.5281,  2.1695, -1.9417,  0.3402],
            [-0.2746, -0.2074, -1.3440,  0.9167,  2.9920, -1.2317,  3.1676, -1.0807],
            [-0.6128,  1.1836, -0.0321, -2.0886, -2.3437, -1.1924, -1.4016,  0.1516],
            [-0.1727, -1.0257,  0.2894, -2.1589,  1.0130,  0.1718, -0.7099, -2.2860],
            [ 0.4437, -1.5476,  0.9724,  0.1567, -1.1090, -1.0117, -2.9945,  0.4833],
            [-1.9362,  0.9203, -1.5585,  0.9765, -1.7110, -0.4077,  1.4772,  2.3286],
            [ 0.6951, -0.5201, -2.9769, -1.4510, -1.8834, -0.2222,  2.1160, -0.1084]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1775e+00, -1.2227e-01, -1.3939e+00, -7.1506e-01,  2.1801e+00,
              9.6109e-01,  2.5801e+00,  2.4981e+00,  1.3462e+00, -1.3011e-02],
            [ 2.8273e-01, -9.3775e-01,  4.2620e-01, -4.8693e-01,  7.0818e-01,
              8.1001e-02,  2.4360e+00, -8.4613e-01,  7.9560e-01, -1.0058e+00],
            [-1.0585e+00,  5.0559e-01, -7.1632e-01,  5.9462e-01, -1.5533e+00,
              3.6647e-01, -1.5953e+00, -7.8068e-01,  1.4516e-01,  1.1206e+00],
            [ 4.7397e-02,  9.3037e-01, -6.2559e-01,  3.6774e+00,  1.9028e-01,
              2.1678e+00,  3.0914e+00,  4.5796e-01,  1.4987e+00, -6.7922e-02],
            [ 4.6422e-01,  2.3104e-02,  1.2409e+00, -1.3914e+00, -2.1543e+00,
             -6.0743e-02, -3.3553e+00,  2.7113e+00, -2.8045e+00,  1.5024e+00],
            [-7.6811e-02,  8.1490e-01, -1.6384e+00,  2.5406e-01, -4.2653e-01,
             -8.0629e-01,  6.4211e-01, -1.7428e+00, -1.1686e+00,  1.2160e+00],
            [ 9.8766e-01,  1.1101e+00,  1.6094e+00,  3.8207e-01,  1.6846e+00,
              1.0932e+00, -2.6396e+00,  2.1710e+00, -4.9281e-01, -5.8236e-01],
            [ 1.8934e-01, -1.2585e+00,  4.8906e-01, -3.0438e+00,  3.1857e-01,
             -3.7489e+00, -1.0324e+00, -9.0776e-02,  1.4388e+00, -6.0146e-01],
            [ 2.5680e-01,  9.0290e-01, -7.3112e-01,  7.7147e-01, -1.4408e+00,
              1.0551e+00,  1.2933e-01, -2.9177e-03,  1.1630e-01, -1.6419e-02],
            [ 1.6295e-01, -6.2921e-01,  4.4300e-01, -5.3376e-01, -7.0086e-01,
              7.6690e-01,  6.1207e-01, -1.0923e-01, -1.1891e-01,  3.1797e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.198 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
