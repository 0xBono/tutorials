.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.4435, 13.3658,  3.5523, 12.8969,  2.4309],
            [ 2.5276,  7.3223,  4.7229,  9.3241,  9.5805],
            [ 2.9381,  3.1341,  4.1121, 12.3950, 16.1226],
            [ 6.6883,  3.9416,  2.1613, 10.4854,  8.2734],
            [11.4821,  3.5378, 11.3172,  3.7261, 17.3613],
            [ 6.6883, 10.5266,  4.7734, 10.2151,  8.2734],
            [ 2.9381,  6.7127, 15.8970, 11.2575, 16.1226],
            [ 2.5276, 17.8678, 14.8455, 11.7047,  9.5805]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.8158,  1.2643,  0.3329, -0.3817, -1.0775,  0.3387,  0.7327, -1.2659],
            [ 0.2017, -0.4805,  0.4310, -0.3282, -0.5852, -1.3963, -0.3464, -0.9536],
            [ 0.1007,  1.9738, -0.5714,  0.9246,  0.3938,  0.8447, -2.0908, -0.0969],
            [ 1.9308, -0.7496,  1.6488, -0.4084, -0.3846, -1.3039, -0.8391, -1.5586],
            [-0.9142,  1.3333,  0.1613,  0.3486,  0.3051,  0.9224,  0.4824, -1.3257],
            [-0.3911, -1.3216,  0.5720, -0.3991, -1.7506,  1.2360,  0.2260,  2.9636],
            [ 0.6695, -0.0332, -1.0020,  0.9406, -1.8968, -0.4388, -0.6298,  2.3589],
            [ 2.1731, -0.4394, -2.6300,  1.5094, -0.7148, -2.0364,  1.2098, -1.0474]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0404, -0.3461, -1.8026],
            [-1.0526, -0.9790, -1.0447],
            [-0.0795,  0.3279,  0.5785]], requires_grad=True), Parameter containing:
    tensor([[-0.1572]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.4009e+00,  3.1875e+00,  2.1070e+00, -1.6566e+00, -8.0113e-01,
             -2.4895e+00,  1.1746e+00, -4.0108e-02],
            [ 2.2141e+00,  1.5104e+00,  5.0100e+00,  1.4273e-03,  2.7458e+00,
              1.6860e+00,  1.6626e+00, -1.1552e+00],
            [ 1.7468e+00,  1.6632e+00,  2.2959e-01,  3.6381e+00,  4.6234e+00,
              1.3270e+00, -3.3608e+00, -2.5340e+00],
            [ 1.6202e-01, -9.5710e-01, -1.2881e+00, -1.7701e+00,  8.0097e-01,
              1.2149e+00, -2.1938e+00,  6.3246e-01],
            [-1.7214e+00, -1.5021e+00,  1.2538e+00, -1.8864e+00, -5.8707e-01,
             -2.1594e+00, -1.0957e+00,  2.8229e-01],
            [ 5.7949e-01,  1.0298e+00,  1.6161e+00, -1.3374e+00, -3.0410e+00,
             -2.6639e+00,  3.9301e-01,  8.4540e-02],
            [-3.8502e+00, -6.7328e+00, -3.7164e+00,  3.5474e+00,  1.9700e+00,
              2.1105e+00, -4.1948e+00, -3.0537e+00],
            [-6.5719e+00, -1.1853e+00,  4.6877e+00,  5.4145e+00, -1.3957e+00,
             -2.8567e+00, -4.4549e-01, -1.8278e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0353, -0.2850, -1.7989, -0.1308,  2.9173, -1.2256,  1.3289, -0.1610,
             -0.5333,  2.1865],
            [-0.9005, -1.4135, -0.9839, -2.2509,  3.4472, -1.7248,  0.5333, -2.5226,
              6.1778, -0.2648],
            [-0.6214, -1.7916,  1.6097, -0.3489,  1.1717, -4.3908, -1.1836, -1.5041,
             -1.8375,  0.6246],
            [ 0.9441,  1.1954, -0.1107,  1.6374,  1.1696, -2.7777, -1.5133, -2.0094,
             -3.0007,  7.0683],
            [-1.9135, -2.2893, -0.7062,  0.1086, -0.7464,  1.5120,  0.9096,  3.9481,
              4.5450,  3.4277],
            [ 0.0263,  1.0292, -1.3480, -2.7002, -0.8859,  0.6533, -0.6887,  0.4350,
              1.3132, -2.0072],
            [-0.6512, -1.4943, -0.4289,  1.8213,  3.6456, -0.5202, -1.0868, -3.3582,
              0.6034, -0.9161],
            [ 0.2546,  0.8195,  0.1438, -1.9816,  1.1762, -3.8809,  0.4033,  0.4343,
             -1.3192, -0.5036],
            [-0.9056, -3.4280, -2.8464, -3.9246, -0.8560, -0.4221,  0.8099,  0.0695,
             -1.6106, -0.4420],
            [-0.0699,  0.0971,  1.3503,  1.0671,  0.0847,  0.7086, -0.5243, -0.1774,
              0.6321,  0.2509]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.628 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
