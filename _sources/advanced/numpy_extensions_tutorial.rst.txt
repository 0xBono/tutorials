.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.4864,  5.1376, 10.0533, 10.4977,  8.1943],
            [ 6.0942,  8.2980,  7.7041,  7.8359,  4.4032],
            [ 4.2783,  3.7446,  7.8439,  4.6561,  4.8767],
            [ 7.7920,  1.7094,  7.1752,  1.3626,  3.2746],
            [ 4.2442,  5.4462,  1.1871,  3.6606,  2.0134],
            [ 7.7920,  1.8349,  1.6332, 12.2671,  3.2746],
            [ 4.2783,  9.7018,  1.8728,  6.0978,  4.8767],
            [ 6.0942,  7.8007,  6.3281,  0.9644,  4.4032]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1219,  0.0947,  0.6577,  0.1437,  0.1572, -1.0641, -0.2576, -0.1198],
            [-0.5466, -1.8837,  0.4436,  0.4731, -0.8335, -0.1890,  0.2812, -1.6703],
            [ 0.0996,  0.7350, -0.7402,  0.4764,  0.8613,  0.1569,  1.3210, -0.4701],
            [ 0.1942, -0.1561,  0.5365, -0.3753,  0.8667, -0.1213, -0.0206,  0.9726],
            [ 1.3414,  0.3157,  0.2216, -0.6581, -0.9142, -1.6235,  0.4745, -0.1374],
            [-0.2566,  0.7801, -0.3561,  0.5129, -0.3584, -0.9246,  1.3051,  0.2233],
            [-0.5201,  0.2116,  0.1209, -0.0396, -2.0133, -0.0050,  2.0599, -0.1288],
            [-0.1683,  0.0509, -0.5000, -0.2469, -1.5690,  0.1646,  0.8441, -0.8382]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6155, -0.1202,  0.8897],
            [ 0.5776, -0.7120, -0.1358],
            [-0.8885,  0.0417, -0.7805]], requires_grad=True), Parameter containing:
    tensor([[-0.3632]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.5992, -2.9545, -2.2860, -2.8757,  2.1001, -1.4863, -1.6234, -0.1402],
            [-2.5626, -2.7780, -2.6214, -0.5107, -3.0439,  0.2631, -1.5610,  0.7257],
            [-0.6483, -0.4394, -1.5815, -0.3623, -1.3327, -3.0313,  1.9099, -2.4468],
            [ 0.0485,  1.2318, -1.8514, -0.9207,  0.4974, -0.7344, -2.5816,  0.0367],
            [-3.5475, -2.7970,  1.1323, -2.9621,  0.9571, -0.4670, -2.5793,  0.2958],
            [ 2.0800, -2.1537, -0.5419,  0.8161, -2.6540, -1.3860, -0.0439,  1.1474],
            [-1.5238,  2.5910, -3.1549, -2.1222, -0.0699,  0.5323,  1.0001,  0.4182],
            [ 0.9348, -1.8232,  1.3132, -0.7973,  2.1265, -2.1739, -3.3779, -0.5705]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.3834e-01, -3.5179e-01,  1.0970e+00, -4.2776e-02, -7.6356e-01,
              1.8181e+00,  1.0253e+00, -7.7446e-01, -1.8165e+00, -4.1866e-01],
            [ 1.4974e+00, -2.3469e-02, -2.6061e+00,  6.9604e-01, -5.5239e-01,
              1.7465e-01, -1.4622e+00,  2.3487e+00,  1.1971e+00, -4.2875e-01],
            [-1.2052e+00,  9.9459e-01, -2.2105e-02, -3.2802e-01,  8.4398e-01,
              1.7356e+00,  5.6063e-01,  1.0647e+00,  1.7872e+00,  6.1910e-01],
            [ 1.7468e+00,  7.2142e-01,  6.2173e-01, -2.5431e+00,  6.4467e-01,
              2.4165e+00,  7.4445e-01, -1.1562e+00, -2.0911e+00,  4.0561e-01],
            [-3.9651e-01,  3.1712e-01,  2.0386e+00, -1.8778e+00,  1.2245e-01,
             -6.6310e-04,  3.0529e+00,  8.1388e-01, -1.0531e+00, -9.4512e-03],
            [ 1.2459e+00, -1.8150e+00, -6.1000e-01,  1.0245e+00,  7.7302e-01,
             -2.6684e-02, -9.8859e-02,  2.7269e+00,  2.1737e+00, -6.8788e-01],
            [-6.0878e-02,  2.6624e+00, -3.0891e+00, -2.6475e+00, -1.1555e+00,
             -2.1397e-01,  2.7958e+00, -3.2514e+00,  1.3185e+00,  7.7373e-01],
            [-7.0923e-01, -4.6751e-01,  7.8812e-01, -3.0527e+00, -2.9936e-01,
             -1.7857e+00,  9.1585e-01,  3.2795e+00, -1.3813e+00, -9.4563e-01],
            [ 1.3138e+00,  1.1029e-01,  7.8805e-01,  2.0144e+00, -1.4017e+00,
              2.5421e+00, -1.0925e+00, -1.2260e-01,  1.4125e+00, -4.8685e-01],
            [-7.3705e-02,  9.0782e-01,  5.7088e-01,  5.3872e-01,  8.2335e-01,
             -7.7994e-01,  5.6061e-01,  8.8591e-01,  2.3530e-01,  1.2346e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.075 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
