.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.4551,  5.1778,  4.2470,  4.3916,  0.8621],
            [ 6.6876, 13.1485,  6.4380,  5.2301,  4.6784],
            [12.9175,  6.4696,  4.6819,  8.4270,  6.1806],
            [ 9.6511,  3.7445,  7.4234,  6.3981,  8.1428],
            [ 4.8610,  5.9370, 12.4624,  3.4243, 13.5734],
            [ 9.6511,  8.5515,  1.8433, 10.0636,  8.1428],
            [12.9175, 12.6605, 16.4517,  7.3029,  6.1806],
            [ 6.6876,  3.3828,  3.8443,  3.8912,  4.6784]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2092,  1.6444,  0.3476,  0.2893,  1.0416, -0.7807, -0.6710, -1.9756],
            [-0.5420,  0.6049,  0.2112, -0.2687, -1.3160,  0.1480, -2.0442, -0.3129],
            [ 0.6140, -0.5740,  1.2065,  0.1100,  0.4168,  0.2912, -0.5216,  0.7556],
            [-0.3158,  0.3376, -0.7508,  0.9855, -0.1366,  0.0348,  0.3488,  1.9039],
            [ 2.6991,  1.4150,  0.5634, -0.0911,  0.7266,  1.2074,  1.1368, -0.6570],
            [-0.2172,  0.1947,  0.9834,  0.0469, -0.8517, -0.0039,  1.0158, -0.8160],
            [-1.9928, -0.4417, -0.7741, -0.5535,  1.4982,  1.5180,  0.5065, -0.5060],
            [ 2.2447, -0.3360,  0.2637,  2.4468, -0.0153, -0.1118, -0.0883,  1.1538]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1846,  0.9317, -1.1895],
            [ 1.8103, -0.2018,  0.4517],
            [-0.0637, -0.2831, -0.5500]], requires_grad=True), Parameter containing:
    tensor([[0.6021]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.6803, -3.4305,  0.4970, -5.7558, -0.7500, -2.4581, -0.0892, -0.3586],
            [-1.1365,  1.9533,  2.4879,  4.0715,  3.4340,  0.6596,  2.9872,  2.2333],
            [-3.3150, -3.0706, -4.6888,  2.4736, -0.5655, -0.3985,  2.0852, -4.9250],
            [ 0.8342,  3.4618,  1.3545,  4.0418,  0.1589,  5.6191, -4.2913,  2.3293],
            [ 4.1563,  3.2708,  3.4336,  3.1593,  2.1215, -0.7783, -4.0197, -3.6222],
            [ 2.3140,  3.5389, -0.1076, -3.6827,  1.8664,  0.5158, -3.9566,  1.7478],
            [ 1.6702,  0.2139, -2.3447, -3.4833,  2.3126,  2.0466, -1.2329, -1.1773],
            [ 4.7055,  0.3104,  0.4314, -2.4640,  3.3326,  1.7246,  3.2023, -1.7688]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1259, -0.7903,  0.1921,  2.0324, -0.0323, -1.7438,  0.3080,  1.2769,
             -2.9909,  1.9105],
            [-1.3101, -1.5342,  2.8644, -1.1215,  0.9429, -0.2632,  0.7936, -3.0329,
              1.9928, -0.0786],
            [-0.3281,  4.2794, -5.2148,  2.1630, -1.7809, -3.3138, -2.7839, -0.4858,
             -2.0688,  1.8798],
            [ 4.2205,  1.0527, -1.8504, -0.1769,  0.7105, -1.8950,  1.1847, -1.0308,
              3.2170, -0.9550],
            [ 5.2088, -2.4778,  3.5498,  1.7093, -5.3290,  0.0093, -2.0339,  2.2686,
             -1.5262,  0.9392],
            [-3.0427, -0.0431, -0.4826, -1.1380,  0.9476,  0.6988,  1.0349,  1.6668,
              0.7093, -1.1933],
            [ 0.7370, -1.6640, -1.2406, -0.8243,  0.4059, -2.2202,  3.2261,  0.2322,
             -2.3976,  2.3534],
            [ 1.7436, -2.4624,  4.7150, -1.8197,  0.2025,  2.5941,  0.2265, -3.1213,
              0.2539, -1.5615],
            [-2.4475,  2.9319, -4.8179, -0.0177, -1.1130, -0.0137,  0.4444,  0.4624,
              0.1941,  1.0930],
            [ 0.0836,  0.2686,  0.3855, -0.3018,  1.2592,  0.3746, -0.1140, -0.2094,
             -0.1427, -0.1957]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.516 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
