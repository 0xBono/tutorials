.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.3244, 10.3613, 11.0412,  1.8020, 14.0227],
            [13.5361,  9.7792,  8.0029,  8.9474, 20.2364],
            [ 5.6237,  2.9840,  5.2956, 15.3924,  5.4266],
            [ 9.3509, 13.2636,  8.4816,  8.8589, 11.7020],
            [ 0.5016,  8.8959,  3.2437,  3.6298,  2.7474],
            [ 9.3509,  0.2926,  5.5459,  7.9216, 11.7020],
            [ 5.6237,  4.3154,  8.4241,  4.3722,  5.4266],
            [13.5361,  8.4427,  4.5651,  6.0959, 20.2364]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.7577e+00, -4.0159e-01,  1.5229e+00,  8.1381e-01, -1.0991e+00,
              1.2521e+00,  1.5887e-01, -9.2317e-01],
            [-6.2678e-01,  2.2787e-01,  1.2779e+00, -1.7173e+00, -1.2874e+00,
             -5.0808e-01, -1.4343e-01,  1.0076e+00],
            [-8.4882e-01, -1.7835e-01, -9.3114e-01, -8.6877e-01, -1.0671e+00,
             -1.3199e+00,  6.8971e-01, -9.1354e-02],
            [-1.7751e+00,  2.8813e+00, -5.2747e-02,  9.8771e-01, -3.8953e-01,
              6.4950e-01, -3.6738e-01, -6.7474e-01],
            [-1.2033e+00,  1.3000e+00, -7.6656e-01, -1.1995e-01, -1.1873e+00,
              8.4441e-01, -2.5956e-01, -4.0970e-04],
            [-1.5686e+00, -1.0130e-01,  8.0734e-01,  2.5352e+00, -6.2875e-01,
              7.5614e-01, -1.3832e+00, -2.4374e-01],
            [-5.6888e-03,  3.3851e+00,  5.3373e-01,  7.0370e-01,  4.9699e-01,
              6.5658e-01, -5.2736e-01,  5.9697e-01],
            [ 1.2721e+00, -6.8212e-01,  6.4541e-01,  3.6305e-01,  2.0300e+00,
             -7.4305e-02,  5.7716e-01, -1.3822e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.4338e-01, -6.7776e-01,  9.2275e-01],
            [ 2.5433e+00, -6.8585e-05, -3.7926e-01],
            [ 1.1800e+00, -6.0582e-02,  5.8190e-01]], requires_grad=True), Parameter containing:
    tensor([[-0.3865]], requires_grad=True)]
    Output from the convolution:  tensor([[ -1.7920,   0.9062,  -6.2066,   0.4256,  -5.7329,  -3.0260,  -2.2354,
              -4.2547],
            [ -2.5859,   0.3469,  -1.1600,  -2.6128,  -2.4240,  -4.6076,  -5.5414,
              -3.7044],
            [ -3.9807,  -1.1870,   3.6390,  -7.2893,  -3.5558,  -4.2186,   0.7836,
              -0.7594],
            [  2.9282,   0.4716,  -3.7263,  -2.6474,   1.7543,  -3.7513,  -2.2590,
               0.9817],
            [ -3.4410,   1.0435,  -5.5323,  -5.7558,   4.5932,   1.3435,   2.7527,
              -1.1226],
            [ -3.9159,  -5.4403,  -3.7643,   4.1195,   4.0280,   1.8834,   3.4051,
               0.7711],
            [  0.9153, -10.5191,  -1.9849,   0.9055,   2.8765,   4.2534,   3.2755,
               1.3109],
            [  2.9773,  -4.2325,   1.5763,  -5.0014,   0.1388,  -1.6559,  -1.5482,
               2.2492]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.3356e-01, -4.8978e-01,  1.1936e-01,  1.4871e+00, -1.3666e+00,
              7.8563e-01, -1.3936e+00,  4.9057e-01,  1.2271e+00, -8.2246e-01],
            [ 2.3612e+00,  1.8277e+00, -3.7031e+00, -9.3399e-01, -9.8017e-01,
              2.8741e+00,  2.5813e+00, -3.5185e+00, -6.6981e-01,  8.5651e-01],
            [ 1.7876e-01,  3.6353e-01, -3.0235e-01, -7.0310e-01, -6.1467e-01,
             -1.2283e+00, -1.0381e+00,  2.3196e+00,  4.1086e-01, -8.3852e-01],
            [-2.1797e+00,  1.3857e+00,  1.8521e+00, -4.1985e+00, -1.2765e+00,
             -1.2496e+00,  1.6306e+00, -1.9008e+00,  1.1577e-01, -3.9551e-01],
            [-5.6339e+00, -3.4590e+00,  7.3988e-01, -4.2061e+00,  2.4603e+00,
             -3.4327e+00, -1.5270e+00, -2.2877e+00,  1.0677e+00, -7.0291e-01],
            [ 8.1855e-01,  9.9679e-01, -2.8436e+00, -2.8740e+00,  2.5960e+00,
             -7.7324e+00,  3.8025e+00, -5.0184e+00,  9.4073e-01, -2.2737e+00],
            [ 2.4059e+00,  4.8389e+00,  8.0657e-01, -9.5351e-01,  6.8453e+00,
             -1.3719e+00, -9.8386e-01, -9.4146e+00,  2.5522e+00, -5.8801e-01],
            [ 2.8920e-01,  4.7022e+00, -3.6266e-01,  1.5427e+00,  3.4762e+00,
             -3.0938e+00,  5.8558e+00, -6.0268e+00, -1.5781e-01,  6.4459e-01],
            [-7.2284e-01,  1.3226e+00, -9.1841e-01,  9.7464e-01, -9.6765e-01,
              1.6164e-01,  6.8412e+00,  2.9444e+00,  3.0968e-01, -1.2389e+00],
            [-3.1959e-01,  1.0157e-02, -4.3808e-01, -2.8664e-01, -4.2458e-01,
              3.3024e-03,  2.0870e+00,  2.0693e+00,  9.9716e-01,  1.0445e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.547 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
