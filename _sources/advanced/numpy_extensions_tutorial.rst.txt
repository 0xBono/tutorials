.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.9385,  8.4593, 10.5602,  3.7470,  2.6740],
            [ 8.1887, 11.2436,  9.2112,  5.2571, 11.8238],
            [11.9523, 12.8567,  3.4761, 10.4779,  5.7556],
            [10.5208,  8.4759,  5.9720,  4.8342,  7.0451],
            [14.1063, 12.6227,  4.2081,  4.0315,  9.8902],
            [10.5208,  1.9490, 10.9005,  3.0573,  7.0451],
            [11.9523,  5.0873,  3.9429,  9.1686,  5.7556],
            [ 8.1887,  2.1978,  6.0136,  3.2960, 11.8238]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1446,  0.8213, -0.9196, -1.8291, -1.1016, -0.5783,  1.0763,  0.0259],
            [-0.2158, -1.5386,  0.8458, -0.4777,  0.3344, -0.4739,  1.5270,  0.2317],
            [-0.2075, -1.3761, -0.6013, -1.1301, -1.0819,  1.7119,  1.1364,  0.0904],
            [-2.2856, -0.7659,  0.7748, -1.6627, -0.5595,  0.1230,  0.6696, -2.2373],
            [-1.2440,  0.2373, -1.5316,  0.0604, -1.2836, -1.0982, -1.2354, -0.2024],
            [ 0.9341,  0.7757,  1.3178,  0.5728, -0.8134,  2.3381, -0.4589,  0.9546],
            [ 0.0744, -1.4760, -1.0870, -1.2154, -0.3563,  0.7891, -0.0578,  0.2122],
            [ 0.4853,  0.9595,  0.8386, -0.0156,  0.6756, -1.1836, -0.6369, -0.4493]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1893,  0.8077, -1.0078],
            [-0.1977, -0.2572, -0.1878],
            [ 1.2671, -1.8196, -1.5761]], requires_grad=True), Parameter containing:
    tensor([[-0.0817]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.3864, -4.0660, -2.6464, -0.9158,  0.0266, -4.4868, -0.5971, -3.0634],
            [ 2.8369,  2.2910, -2.0672, -8.9410,  1.9173,  2.1651,  7.8508, -2.0342],
            [ 1.4296,  4.1470,  1.4283, -3.8677,  4.6879, -1.4993,  1.6217, -3.9393],
            [ 1.4618, -0.8850,  5.1698,  2.6774,  5.1689,  2.7939, -3.2111,  0.1122],
            [-4.0835, -2.7779,  2.7039,  4.3110, -0.3680,  8.0764,  3.6888,  1.7736],
            [-0.2365,  0.7055, -2.4332, 11.6359,  5.1993, -3.1666, -0.7390,  5.9351],
            [ 1.3854, -4.4320, -5.5703,  8.5322,  7.8391, -0.1826,  1.1368,  1.9428],
            [ 1.9323, -2.4145,  9.0157,  2.1304,  3.6045,  1.7291,  0.9629, -1.3999]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1825,  2.5232, -0.9533, -0.3466,  1.1894, -0.6000, -0.0452,  0.2559,
             -0.1220,  0.4752],
            [-0.0076, -0.6850,  1.8340, -2.0854,  0.2831, -0.8327, -0.1622, -3.1800,
              2.5750, -2.0705],
            [ 2.0323, -3.8319, -0.1469,  6.7519, -1.4097, -1.6501, -2.9245, -0.9218,
              0.1773, -0.3949],
            [-0.6848,  1.7341, -3.1149,  4.3950, -0.5947, -4.9921, -1.8365,  1.5175,
             -3.6557, -3.4503],
            [-0.7107,  2.5223, -0.6550,  1.1486,  3.7499, -0.9751,  1.0492, -3.3320,
             -3.2639, -1.9802],
            [-0.3298,  0.2368, -0.3795, -4.0315, -0.3396,  6.1080, -5.6296, -1.9617,
             -2.2192, -0.0293],
            [ 1.1909, -2.7576,  5.9563,  1.1609, -6.5598,  3.4319,  3.6514, -2.7144,
             -2.0405, -1.2298],
            [ 1.4204, -2.9151,  1.8028,  0.9974, -1.7758, -5.2340, -1.2809, -0.4298,
             -3.2815,  0.3274],
            [-1.6357,  1.8184,  1.9454,  0.7942,  3.3256, -0.3828, -6.2489, -1.2197,
              1.2075,  0.1761],
            [-0.0970,  1.6043, -3.1452, -0.8886,  3.5651, -0.4521, -0.2762, -2.3748,
             -1.1086,  0.4183]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.164 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
