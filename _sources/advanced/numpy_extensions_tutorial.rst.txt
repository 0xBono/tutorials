.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.2794, 13.0983,  7.2552,  4.6088,  6.5904],
            [ 5.5736,  5.4766,  6.3114,  6.5397,  4.5777],
            [ 7.8426, 11.4313,  5.7983,  5.5196,  4.0033],
            [ 6.6879,  6.2268,  5.6891,  2.1172,  6.1900],
            [ 1.8322,  6.5442,  1.6058,  6.5684, 11.1003],
            [ 6.6879,  5.0478,  8.8558,  7.2248,  6.1900],
            [ 7.8426, 12.6207,  8.1008,  8.7926,  4.0033],
            [ 5.5736,  4.8915,  4.1203,  0.9972,  4.5777]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4989,  0.3277,  0.6754,  1.2967,  1.6288,  0.9621, -1.3756, -0.9966],
            [-0.5390,  0.0166,  0.9555,  0.2172,  1.7207, -0.2898, -0.0799,  0.3653],
            [ 1.6160, -1.3352, -0.1764, -0.1188,  0.6490,  1.0980, -0.2868,  0.7862],
            [ 0.7039, -0.4578, -1.4798, -0.4299,  1.6025,  0.9346,  1.1295,  0.5420],
            [-1.5759,  0.1793,  1.7736, -0.0118,  0.2042, -0.7352,  0.4012,  0.8952],
            [ 0.2745, -0.3899,  1.1600,  0.8827,  2.2613,  0.2191,  1.4087, -0.2340],
            [ 0.0417, -0.0155, -0.9682,  0.7100,  0.2565,  1.1087, -0.3803,  0.0883],
            [ 0.2527, -1.0249, -1.0881, -0.3805, -0.1208, -0.2672,  0.2888, -0.0982]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0507,  0.2243,  1.3695],
            [ 1.1887,  0.5437,  0.6456],
            [-0.9921,  0.7861,  0.0803]], requires_grad=True), Parameter containing:
    tensor([[-0.7291]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.9123, -2.2790, -2.6164, -4.8523, -1.4274,  1.1598, -1.0777, -1.5477],
            [-0.1504, -0.3894,  2.1479, -0.5671, -0.6566, -0.3947, -0.6656,  1.6007],
            [ 3.6624,  2.2726, -1.6420,  0.9196,  2.5081, -1.4465, -1.5203, -4.5356],
            [-2.7724,  0.6036, -1.8187, -1.3740,  2.9590, -1.1626,  0.0610, -2.2528],
            [-0.1061, -2.4260,  1.0017,  0.6990,  0.4455, -1.5435, -2.5521, -3.4093],
            [ 1.0904, -1.7821, -5.8145,  2.7972, -3.3680,  1.4725, -3.4758,  0.5380],
            [-3.3271, -0.3481,  0.2345,  1.0606, -1.6158, -1.7519,  2.7412,  0.0131],
            [ 2.9067, -1.3724,  0.5333, -3.4799, -0.2265,  0.1700,  0.1190,  3.9728]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 9.1170e-02, -3.6881e-01, -2.7029e+00, -6.0614e-01,  2.3852e+00,
              1.2160e+00,  1.2819e+00, -2.1353e-01,  5.0304e-01, -3.7241e-01],
            [-2.1465e+00, -1.8488e+00,  1.0278e+00,  3.6230e+00,  2.3461e+00,
             -4.0586e-02,  1.3470e+00,  2.0145e+00, -6.0043e-01, -7.4901e-01],
            [ 1.9895e+00,  1.2601e+00, -2.3744e+00,  4.8120e-01,  2.6671e-01,
              3.0904e+00,  4.3038e-01,  6.7464e-01, -1.3512e+00, -3.3743e-01],
            [-8.5621e-01, -2.1711e+00,  3.0542e+00,  2.9704e-01,  8.8190e-01,
              5.4274e-01,  2.0707e+00, -2.2434e+00, -4.6391e-01,  1.3613e+00],
            [ 1.7626e+00,  4.2434e-01, -1.0231e-03,  7.2412e-01,  8.6672e-01,
             -8.1726e-01, -1.5038e-02,  1.2497e+00,  9.7204e-02, -5.3615e-01],
            [-4.6201e-01,  1.0776e+00,  2.8936e+00, -2.3263e+00, -5.5998e-01,
              2.0250e+00,  9.6384e-01, -2.1144e+00,  1.1962e+00,  9.1573e-01],
            [ 2.1535e+00,  3.0966e+00,  2.8502e+00, -2.7427e+00,  9.9464e-01,
             -5.0422e-01,  2.0777e+00,  2.3178e+00,  1.0098e-01,  9.1275e-02],
            [-8.1113e-01,  1.0253e+00,  2.4100e+00, -1.0307e+00, -1.5913e+00,
              3.9416e+00, -3.8941e-01, -2.9516e-02,  1.9991e-01, -5.7139e-01],
            [ 7.4038e-01,  2.2414e+00, -3.7203e-01,  1.5049e-01,  1.5808e+00,
              1.6383e+00,  2.6416e-01,  3.1552e-01, -6.2862e-01, -2.2664e-01],
            [-1.7453e+00,  2.4688e+00, -7.5453e-01, -1.4916e+00,  1.0204e+00,
             -5.0119e-01,  8.4210e-01,  1.4680e-01, -2.6231e-01, -2.4572e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.258 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
