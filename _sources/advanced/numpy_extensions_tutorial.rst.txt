.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.9037,  4.2380,  8.7349,  2.0885,  3.7980],
            [ 8.8056,  2.2403,  5.1627,  4.5667,  5.5378],
            [11.4503,  8.6442,  4.9282,  7.0083,  8.9818],
            [ 2.3397,  7.0693,  7.3127,  3.7298,  3.3562],
            [ 9.4525, 18.5447,  5.1407,  6.7182,  7.0653],
            [ 2.3397,  3.7967,  0.5652,  4.4394,  3.3562],
            [11.4503,  2.1934,  7.7959,  4.5405,  8.9818],
            [ 8.8056,  8.9331,  8.6595,  4.9288,  5.5378]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.6213, -0.4733,  0.0927,  1.4818, -0.1597,  0.0454, -0.9576,  1.1715],
            [-0.0417, -0.3581,  0.3316,  0.0532, -0.1424, -0.9241,  0.6090,  2.3328],
            [ 1.5054,  0.5350,  0.9079,  1.0622,  0.2810,  1.3412,  0.2553,  0.0107],
            [ 0.3774, -0.3260, -0.3104, -0.8291,  0.8728, -0.3850, -0.3872, -0.1962],
            [-1.7114,  1.1563,  1.1110,  1.1191, -0.3933, -0.3209, -0.4747, -1.1198],
            [ 0.9594, -0.1066, -0.2835, -0.4623, -0.7540, -0.4162,  0.6163,  0.8969],
            [-0.6798, -1.0799,  0.3385,  1.8368,  0.9979,  0.0914,  0.6313, -1.3026],
            [-0.9621, -1.3705, -0.9414, -1.0356, -0.4003, -0.1208, -0.6139,  0.5436]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8373,  0.2039,  1.3090],
            [-0.3284,  0.3802,  1.4187],
            [-0.9173,  0.0779, -1.1343]], requires_grad=True), Parameter containing:
    tensor([[-0.2617]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.5990,  1.2741,  3.7817, -1.4949,  0.2897,  1.3290, -5.4596, -3.2663],
            [ 3.8459,  3.3449,  6.9625,  0.7044, -0.2770, -2.3969, -2.5509, -5.4845],
            [-0.9933, -3.8446,  0.9816,  2.3082,  0.6130, -0.6617, -0.7818, -3.3883],
            [-3.7043, -4.4844,  0.2618, -0.7490,  2.6359,  1.7016,  4.4694, -3.2692],
            [-1.3789,  0.0737, -0.6239,  1.3154,  4.1747,  2.1667, -0.0622,  4.6519],
            [ 0.1968, -2.6907, -0.5221,  0.0441, -3.1677, -0.0496,  0.8454,  4.1756],
            [-5.3647, -3.2670, -3.3052, -2.7243, -7.3060, -2.3884, -2.4687,  2.4141],
            [-0.0101,  1.6315,  0.2519,  1.8500,  3.5005,  2.3529,  0.8297,  3.3270]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.2093e-01, -4.4944e-01, -9.7146e-01, -1.1138e+00, -2.1271e+00,
              4.3754e-01, -1.6010e+00,  1.7659e+00, -1.4185e+00,  1.3867e+00],
            [ 5.6919e-01, -4.4652e-01,  1.1098e+00, -2.8297e+00, -5.2506e-01,
             -2.0198e+00,  9.4245e-01, -1.7917e+00, -2.4238e+00,  1.3123e+00],
            [-1.6954e+00,  1.1258e+00,  6.0490e-01,  1.1316e+00,  2.7119e+00,
              1.2359e+00,  4.0349e+00, -4.6469e+00,  1.7840e+00, -1.4523e+00],
            [-1.1928e+00,  4.9108e-01, -4.1505e+00,  9.0360e-01,  2.1561e+00,
              1.9539e+00, -8.1084e-01,  3.1635e+00,  2.4183e+00, -6.4236e-01],
            [ 5.6214e-01, -6.4343e-01, -3.4776e+00,  1.4604e+00, -1.9797e+00,
             -4.8561e+00, -1.2996e-01,  3.0091e+00, -2.4416e+00, -2.7792e-01],
            [ 1.9747e+00, -2.4523e+00, -4.5891e-01,  1.4897e+00, -1.4813e+00,
              1.3867e+00, -8.0980e-02, -2.7584e+00, -1.8462e+00,  1.1473e+00],
            [ 1.4263e+00,  9.0975e-01,  2.4218e+00, -2.3429e-03,  7.0693e-01,
              2.3030e+00,  2.1221e+00, -3.3781e+00, -7.1404e-01, -1.6176e+00],
            [ 6.9645e-01,  6.5464e-01,  1.8948e+00,  3.4593e+00, -2.6380e+00,
              3.3217e+00, -3.3583e+00, -2.7014e+00, -2.8311e+00, -2.4239e+00],
            [-5.9488e-01, -7.8941e-01,  2.4046e+00, -4.0364e+00,  1.4988e+00,
              1.7240e+00, -1.3877e+00, -3.2153e-01, -1.7928e+00, -4.1717e-01],
            [-1.2251e+00,  4.4334e-01, -1.4238e+00, -1.1741e+00,  1.3417e+00,
             -1.0148e+00,  2.5756e+00,  2.0548e+00,  1.5984e+00,  1.1032e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.606 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
