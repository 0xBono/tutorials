.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.3226,  5.5191,  7.0892,  6.2466,  8.0378],
            [11.1677,  5.2917,  7.2590, 11.2103,  7.0807],
            [ 8.2819,  9.1713, 10.2754,  4.7394,  6.8134],
            [ 8.5837,  4.8335,  8.6853,  4.5501,  6.7857],
            [15.7732,  7.9853, 10.6702,  7.4300,  0.4972],
            [ 8.5837,  3.8694,  8.1815, 13.9997,  6.7857],
            [ 8.2819,  4.8280, 14.7638,  5.4307,  6.8134],
            [11.1677,  6.0154,  6.1068, 12.7745,  7.0807]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8972, -0.4790, -0.3195,  0.6771,  1.9545,  0.6418, -0.7365, -0.7347],
            [-0.0374,  1.3623,  0.2011, -0.3615,  0.6546,  1.6135, -0.0459,  1.0609],
            [ 0.5736, -0.3695,  1.7398,  0.5823, -0.0760,  0.5049, -0.1210,  0.8770],
            [-0.1039, -0.9659,  0.6462,  0.0898, -1.3942, -0.9077,  0.3955, -1.3566],
            [-0.7130,  1.0174, -0.0439,  1.4040,  2.7494, -1.1684,  1.7514, -0.6628],
            [ 1.7385,  0.4586, -1.8095, -1.1542,  0.9201,  0.0667, -1.1945, -3.0650],
            [-0.6159,  0.7621, -0.8535,  1.0882, -0.5479, -1.3284,  0.7705, -0.1734],
            [-0.1942, -1.1946, -0.9698, -1.5763, -0.1352,  0.3120,  0.0998,  0.1214]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.9280, -0.1688,  0.3070],
            [-0.3200, -0.2499,  1.1028],
            [-1.6729,  0.3518, -1.4622]], requires_grad=True), Parameter containing:
    tensor([[-0.1235]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.2732, -1.7703,  0.2319, -0.3940, -5.0138,  5.2111,  1.1415,  1.0077],
            [-5.3966,  0.5042, -1.4109, -2.9301,  1.3284, -2.2287, -1.0425,  1.7306],
            [ 1.1225,  0.6343, -1.8893, -4.1601,  3.3961, -0.2550,  0.4490, -0.6809],
            [-1.3241,  2.2326, -1.0933,  2.6770,  0.6055, -0.3882,  0.6456,  0.3742],
            [ 1.5700,  0.1880,  3.1224, -1.2833, -1.9802,  0.0740,  0.5885,  2.5095],
            [-0.7909,  0.4441, -3.9050,  4.4444,  1.2748,  0.4490,  1.9031,  2.5587],
            [ 1.3766, -0.0957,  1.0367,  5.2606, -4.6290,  0.6012, -1.7046,  0.8174],
            [ 0.4141, -3.6661,  3.4474, -1.4813,  1.5479,  3.7209,  2.0827,  1.2515]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 8.9762e-01,  1.4261e-01, -1.8230e+00,  7.2184e-01, -4.8361e-01,
             -7.1526e-01,  1.4825e-01, -3.3045e-01,  4.4140e-03,  1.1603e-01],
            [-1.4047e-01, -3.1083e-01, -1.9654e+00, -2.7630e-01,  2.4290e+00,
             -1.5016e+00,  8.1866e-01,  2.3371e-01,  2.4925e-01,  3.5668e-01],
            [ 1.6924e+00, -1.3603e+00, -1.0251e+00,  3.6401e+00, -4.3722e+00,
              9.9811e-01, -2.1864e+00,  1.9558e-01, -1.6719e-01, -8.7882e-01],
            [-1.3217e+00, -1.6531e+00,  2.4241e-02,  1.5830e+00, -4.0076e-01,
             -3.9521e+00,  3.3350e-01,  2.9534e+00, -1.0272e+00, -4.5698e-01],
            [ 1.2034e+00, -2.6660e+00,  1.5237e+00,  8.4181e-01, -2.7595e+00,
             -1.9495e+00,  2.2367e+00,  1.6626e+00,  2.6002e+00, -1.0918e+00],
            [-1.8500e+00, -2.3982e+00,  3.4617e-01,  2.3399e+00,  2.5296e+00,
             -3.8037e-02, -1.3792e+00,  5.7496e-01, -1.4374e+00,  3.4257e-01],
            [ 2.8583e+00, -1.6429e+00,  3.2796e+00, -2.5011e+00, -2.9096e-02,
             -2.8034e+00, -3.1964e+00,  2.3002e+00,  7.3352e-01,  1.7207e+00],
            [-1.4311e+00, -8.0048e-01, -3.9278e+00,  1.8332e+00, -2.5529e-01,
              4.3743e-01,  5.5134e-01, -1.2985e+00,  1.6450e+00,  1.9303e-05],
            [ 2.6633e+00,  1.2649e+00,  3.5932e+00,  1.0700e+00,  2.3037e+00,
             -3.6748e+00, -3.6573e+00,  1.8679e-01, -1.8896e+00,  1.0022e+00],
            [ 1.8477e-01, -6.0608e-02, -3.2031e-01,  4.1292e+00, -7.6875e-01,
              3.2545e+00, -5.9734e-01, -1.0793e+00, -6.9926e-01, -1.0077e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.579 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
