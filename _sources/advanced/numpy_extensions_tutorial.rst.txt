.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.9718,  9.0188,  3.9180, 13.0988,  7.2914],
            [11.0432,  5.2716,  9.3933,  7.9393,  5.8633],
            [11.9972,  9.6332,  3.1304, 11.4292,  5.0527],
            [ 9.4672,  2.0181,  9.3068,  3.8802,  2.4188],
            [12.9943,  2.8805,  2.5790, 11.5712,  4.3928],
            [ 9.4672,  7.8174,  2.7976,  4.3128,  2.4188],
            [11.9972,  9.5415,  8.0241, 10.7513,  5.0527],
            [11.0432,  6.1007, 14.7911, 11.0493,  5.8633]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.1275,  2.4006,  0.1914, -1.5151,  0.3655, -0.7540,  0.4859, -0.8986],
            [-0.4029,  0.1080, -1.0943,  0.4735, -0.2119, -1.3229,  0.3541, -0.2405],
            [-0.0535, -0.4562,  0.0236,  1.1692, -0.4748,  1.7835, -0.3108,  1.1143],
            [-0.2984, -0.4136, -0.2308,  2.3763,  0.9663,  0.1919, -0.9986, -0.7985],
            [-0.5269, -0.2250, -0.0700,  1.7035,  1.0434, -0.0171,  1.3243,  0.3962],
            [-0.4467, -0.3461, -2.0431, -1.2382, -1.9787, -1.4510, -0.1475, -1.4521],
            [-0.0141,  0.1240, -0.2045, -0.4856,  0.3527,  0.4509, -1.9202, -0.8640],
            [-0.9049,  2.0758, -0.4970,  0.0931,  0.7540, -0.6129,  0.9642, -2.2096]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4710, -0.3905,  0.8870],
            [-0.0921,  1.6143, -0.6898],
            [-0.4177,  0.0308, -0.5958]], requires_grad=True), Parameter containing:
    tensor([[-1.7490]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.9810, -0.8377, -1.1143, -2.4013, -2.5569, -2.2896, -2.5432, -5.1978],
            [-2.4153,  2.4976, -2.8918, -4.2363,  1.8739, -4.8453, -1.5389, -2.2735],
            [ 0.0261, -2.7433, -6.0296, -1.7466,  5.5415, -6.2999, -0.1867,  0.0744],
            [ 2.2699, -3.5460, -2.6339, -0.8074, -1.0547, -3.2316,  2.2810, -2.4992],
            [ 1.3022, -2.9169,  0.2483, -0.0480, -1.2563, -5.2497, -2.9850, -2.3558],
            [-0.1373, -7.6943, -2.3422, -3.2244, -2.3561, -3.8453, -0.0834,  2.1038],
            [-0.8600, -4.5413, -2.7430,  0.9926, -1.8363,  0.6061, -3.1867, -3.8002],
            [-2.1325, -5.8661, -0.2615,  0.0785, -4.7633, -1.2304, -4.3167, -0.3191]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.8999e-01, -8.5114e-03, -5.8421e-01,  7.5473e-01,  1.5353e+00,
              2.1813e-01,  2.4030e+00,  1.1551e+00, -1.4616e+00, -4.6391e-01],
            [-1.8322e+00, -3.0073e+00,  2.0115e-01,  4.4492e+00, -7.1839e-01,
             -2.2005e+00,  1.1010e+00, -1.2022e-01,  1.0024e-01, -7.5396e-01],
            [-1.4437e+00,  8.5800e-01,  2.2192e+00, -7.4401e-01, -1.3168e+00,
              1.0097e+00,  2.4070e+00, -1.5337e+00, -1.1608e+00,  1.7042e+00],
            [-2.4690e+00, -6.9590e-01, -2.6570e+00, -9.4448e-01,  2.4146e+00,
             -3.5850e-01,  1.5925e+00, -2.1733e+00,  1.4852e+00,  9.8511e-01],
            [-1.2249e+00,  3.7936e+00, -8.9390e-01,  2.6997e+00,  8.5937e-01,
             -1.9758e+00,  2.1043e+00, -7.3734e-01,  6.9638e-01, -6.4968e-01],
            [-8.3197e-01, -4.3644e-01, -5.1574e+00,  3.7610e+00, -1.9154e+00,
             -1.6181e+00,  2.7726e+00, -1.0181e+00,  4.2636e-03, -7.3413e-01],
            [ 5.8232e-01,  1.0522e+00,  5.8773e-01,  3.4797e+00, -1.2614e+00,
             -1.3804e+00,  3.0398e+00,  2.8041e-01,  1.6371e+00, -1.7544e+00],
            [ 2.5485e+00, -2.4389e+00, -1.4254e+00, -2.6780e+00, -4.5469e+00,
              1.6958e+00,  2.4470e+00, -4.0586e-01, -9.8197e-01,  6.5494e-01],
            [ 3.9086e-01, -2.9558e+00,  3.8598e+00, -1.1640e+00,  3.9908e+00,
              1.0465e+00, -2.3650e-01,  1.2265e+00, -1.3367e+00,  1.7682e+00],
            [ 7.2976e-01, -5.9835e-01,  1.2170e+00, -1.6966e+00, -2.7344e-01,
             -1.3054e+00, -9.3438e-01,  3.1430e-01, -2.7751e-01,  5.2561e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.565 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
