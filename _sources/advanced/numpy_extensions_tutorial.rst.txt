.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.3003,  7.0725,  6.0125,  2.4605,  5.0866],
            [ 7.3404,  3.4997,  2.5144,  4.9199,  7.9129],
            [ 3.6669,  8.2852, 10.6287,  3.4779,  5.0574],
            [11.7115, 11.8827, 12.5200,  3.5921, 15.8749],
            [ 9.3716,  3.4115,  6.4727,  3.5389,  2.5594],
            [11.7115, 13.1870, 10.3664,  7.3723, 15.8749],
            [ 3.6669,  8.6383,  6.9035,  2.3268,  5.0574],
            [ 7.3404,  5.7150,  5.6610,  9.9515,  7.9129]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.3207, -0.5730,  0.8792,  2.9427,  0.8694, -1.0797, -0.5482,  1.0527],
            [-0.0806, -1.6433,  0.5175, -2.2291, -0.5493,  0.7811,  0.8552, -1.9160],
            [ 0.1801, -0.6720, -0.8961,  0.7845, -0.0663,  0.1646,  1.1326,  0.4814],
            [-0.1437,  0.0599, -1.2256,  1.8683, -0.7551, -0.4512,  0.1160,  1.0189],
            [ 0.8453, -0.4668, -0.7402, -0.4134, -0.0775,  0.3007,  0.8363, -0.3264],
            [-0.8814,  1.9276,  1.0555,  1.5721, -0.2862,  0.3897, -0.6159,  0.5163],
            [-0.4008,  0.3173,  0.1760, -1.0953,  0.3886,  0.7959,  0.3782,  0.6863],
            [-0.0324, -1.3132, -1.3888, -1.7178, -0.9762,  0.3623,  0.0614,  0.2679]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4419, -0.5540, -1.1094],
            [ 1.4259, -0.2089, -0.5299],
            [-0.3048,  0.3717, -0.8577]], requires_grad=True), Parameter containing:
    tensor([[1.7216]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.3726,  3.8497,  0.0489,  2.7034,  4.3090, -4.5896,  5.1868,  5.7725],
            [ 2.7834, -1.4336,  4.0046,  5.2124,  0.4188, -3.4717,  2.2731,  4.1708],
            [ 3.7208,  0.2900,  1.8470,  3.2027, -1.3527, -5.2820,  3.1580,  7.3452],
            [ 5.2757,  0.9335,  1.7174,  2.9866, -0.3069, -4.8305,  1.3062, 10.1166],
            [ 2.2698,  2.5199,  4.0218,  3.2571,  2.0081, -2.3357,  1.3028,  3.7257],
            [ 3.4238,  3.3028,  1.5744,  2.5283,  2.4804,  4.5412,  0.6029,  3.7358],
            [ 1.9637,  6.4767,  3.7878, -2.9176, -0.5101,  1.7516,  2.2902, -1.1345],
            [ 0.7136,  5.2906,  5.0631, -0.0832, -3.4026,  4.5195,  0.3357,  1.1901]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.4133e+00, -1.1111e-01, -7.9858e-01, -1.1929e+00,  2.0303e+00,
              3.6324e+00, -1.7655e+00,  1.2659e+00,  5.8910e-01, -1.3585e+00],
            [-2.7729e+00,  5.7107e-01, -1.0102e+00, -1.2195e+00,  1.0744e+00,
              2.5455e+00, -1.4897e+00, -1.1519e+00,  1.5307e-01,  4.5345e-01],
            [-1.3773e+00,  3.3668e+00,  2.7172e+00, -1.3283e+00, -4.4657e-01,
             -9.4495e-01,  6.5871e-01, -1.1801e+00,  2.4154e+00, -7.1334e-01],
            [ 3.1744e+00,  1.7911e+00,  4.0219e-01, -1.0172e+00, -2.1169e+00,
             -5.5073e+00,  1.3495e+00,  3.3708e+00, -1.4338e+00,  2.1593e-01],
            [ 4.6639e+00,  6.1713e-01, -3.5639e+00, -1.5378e+00, -1.9837e+00,
             -3.2542e+00, -2.4363e-01,  5.7801e+00,  1.3773e+00, -1.9546e+00],
            [-3.5157e-01,  2.9292e-01, -8.6044e-01, -2.5918e+00,  3.1410e+00,
             -6.2085e-01, -2.8721e+00,  4.4234e+00, -2.7173e-02, -9.8426e-01],
            [ 3.6682e-01, -4.3476e+00,  1.4474e+00, -2.3442e+00,  3.6759e+00,
              4.0417e-01, -1.1194e+00, -2.9638e-03,  7.7282e-01, -1.9716e+00],
            [ 4.6450e+00, -1.0559e+00, -5.4039e+00,  1.8656e+00,  4.9582e-01,
              4.8707e+00, -9.7854e-01, -2.7198e+00,  1.0216e+00,  2.2793e+00],
            [ 2.2775e+00,  2.0683e+00, -5.7116e+00,  4.9362e-01, -1.4162e+00,
              1.9451e+00, -9.9239e-01, -4.0778e+00,  5.4661e-01,  5.5488e-01],
            [-5.6605e-01,  3.3670e-01, -5.5005e-01, -1.6339e+00,  1.9589e+00,
             -3.8844e-01,  1.4278e+00, -9.4652e-02, -5.8407e-01,  1.9740e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.547 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
