.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.0726,  2.9807,  7.2029, 17.4610,  8.2272],
            [ 6.6240, 12.5707,  7.3037,  7.0193,  4.0016],
            [ 7.4991,  7.5017,  5.1077,  8.1149,  7.8666],
            [ 6.4877, 12.2169,  7.9460,  8.3585,  3.2666],
            [ 8.8176, 13.6268,  7.1630, 10.5055,  0.8765],
            [ 6.4877,  4.1658,  3.9973,  2.4413,  3.2666],
            [ 7.4991,  8.4824,  5.8032,  3.0407,  7.8666],
            [ 6.6240,  3.1737,  4.0392,  8.3757,  4.0016]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9273,  0.0937,  0.6174, -1.4687,  1.3499, -1.5606, -0.6649,  0.7334],
            [-2.2528, -0.4267,  1.1395,  0.0276,  0.4560, -0.5527, -0.2094,  0.3424],
            [ 2.7839,  1.8803,  0.0418, -1.3226, -1.2555, -0.5575, -0.7662,  1.4562],
            [-0.0959, -1.4906, -0.3260, -1.8104, -0.1956,  0.6235, -1.3381,  0.1039],
            [ 0.6529, -0.1555,  0.3468, -0.1063,  0.4643, -0.0189, -0.1392, -0.6191],
            [-0.4783, -0.3927,  0.2079, -1.6944,  0.9686,  1.7863, -0.5532,  0.4976],
            [ 0.9467,  0.5044, -0.4651,  0.9836,  1.2450, -0.1661, -0.2068,  0.6722],
            [ 0.3312, -0.5532,  1.5832, -1.0029,  1.3770,  0.2793, -0.5606, -0.2356]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0809, -0.2385,  1.3860],
            [ 1.7574, -1.8949, -0.2136],
            [-0.5424,  0.7051, -0.0113]], requires_grad=True), Parameter containing:
    tensor([[-0.2594]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.1816,  4.1586, -6.3661,  7.0908,  0.9669,  0.2542,  4.6951, -0.9950],
            [-2.9779,  0.0285,  0.9049, -2.6307, -0.3344, -1.7808,  0.2059, -1.9189],
            [ 2.7189, -1.2563,  3.7169, -1.3030, -1.1959,  0.5081, -2.7701,  3.0486],
            [-3.9282,  2.8523, -3.7616,  3.3143, -0.0241, -0.1626,  0.4654,  0.7571],
            [-0.1709, -1.8889, -1.9300, -2.6441, -3.1873,  4.1499, -2.0737, -0.9957],
            [-1.6939, -0.5137,  0.0136,  3.1074, -2.9904,  1.2160,  3.1289, -6.4712],
            [ 2.4868, -1.0378, -3.2820,  1.0213,  2.8929, -8.0012,  1.8961,  0.0748],
            [ 1.4895, -0.5889,  1.0792, -3.5859, -1.1887,  2.8077, -2.0057,  6.2397]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.2113e-02, -8.9243e-02,  4.8668e-01,  7.7546e-01, -1.6371e+00,
             -3.6070e+00,  6.3961e-02, -2.3886e-01,  3.1661e+00, -4.8709e+00],
            [ 1.0144e+00, -4.0287e-01, -2.3806e+00,  3.1434e-01,  6.1548e+00,
              2.4206e+00,  2.3319e+00, -1.0119e+01,  4.8335e+00,  1.3475e+00],
            [ 1.7116e+00,  7.4214e-01, -3.0182e+00, -1.5881e+00, -4.8643e+00,
             -3.0291e-02,  1.3455e+00,  6.0208e+00, -2.8064e+00,  6.7563e-01],
            [-4.3311e+00,  1.7389e+00,  1.1450e+00,  5.9080e+00,  7.7138e-01,
             -4.0521e+00,  5.3165e-01, -1.1895e+00, -2.7105e+00, -1.2881e+00],
            [-6.9280e-01,  4.5868e+00, -8.2013e+00,  1.6101e+00,  3.3769e+00,
              7.5081e-01, -2.9164e+00, -4.9406e-02,  3.3141e+00, -3.8406e-01],
            [-3.5968e+00,  7.1617e+00, -1.5862e+00,  1.2088e+00, -5.1272e+00,
              1.6396e+00,  2.9860e+00, -6.8519e-02, -6.1138e-01,  3.9575e-01],
            [ 3.7906e-02,  1.8168e+00, -4.5061e+00,  3.0562e+00,  8.7964e-01,
              2.4666e+00, -4.5974e+00,  1.5846e+00, -1.3447e+00, -4.2040e-01],
            [-1.2215e+00,  2.1160e+00,  2.6886e+00, -1.5387e+00, -3.5121e-01,
              2.5567e-01, -1.9340e+00,  1.2848e+00,  1.7925e+00,  1.2879e+00],
            [ 3.3928e+00, -3.5312e+00, -2.2095e+00,  3.4636e+00, -4.5209e+00,
              4.5775e+00,  4.4930e-01, -5.3478e-01, -2.0562e+00, -1.8680e-01],
            [-8.8499e-01,  8.7998e-01,  7.6415e-01, -1.0241e+00,  1.4768e+00,
             -1.6263e+00,  1.7370e-01,  1.2107e-01,  6.1683e-01, -1.0059e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.657 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
