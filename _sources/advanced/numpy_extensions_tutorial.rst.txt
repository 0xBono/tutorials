.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.2104,  9.3530,  6.6128,  5.5722,  1.6432],
            [ 1.9862,  8.6828,  8.7545,  8.6479, 10.0650],
            [ 5.5290, 11.4354,  5.5903, 12.3646,  7.7814],
            [10.1142,  4.2894, 13.6156, 13.1588, 11.7570],
            [ 5.5596,  5.4083,  6.1227,  4.9081,  1.2631],
            [10.1142,  2.1059,  4.2392,  2.7412, 11.7570],
            [ 5.5290,  5.1194,  5.1393,  2.3394,  7.7814],
            [ 1.9862, 11.4296,  8.3331,  4.3932, 10.0650]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2736, -0.9939, -1.6073, -0.6139, -0.4766, -2.3318,  0.5256,  0.7730],
            [ 0.2511, -1.1298, -0.3430,  0.5605,  0.3616, -0.2661, -0.5218,  1.3316],
            [-1.4184,  0.1759, -2.5298,  0.6587, -0.5524, -0.1689, -0.7224,  0.5875],
            [ 0.2075, -1.0210,  0.0660,  0.1307,  0.1489, -0.5749,  0.6816,  0.4785],
            [-0.3062,  1.0092, -0.4331, -2.6145, -0.6466, -0.9094,  1.8261, -0.3270],
            [ 0.5750, -0.0187, -1.3516, -0.0171, -0.3660, -1.3739, -0.2326, -0.8885],
            [ 0.7360, -0.7373,  2.5883,  0.2281, -0.5419, -0.2141, -0.3836, -0.1910],
            [-0.2329,  1.7053,  1.1402, -1.1937, -0.3541, -0.4108, -2.0975,  0.4301]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3417,  0.3475,  1.6914],
            [ 0.2945,  1.0676, -0.4767],
            [-0.1536, -0.4901,  2.2290]], requires_grad=True), Parameter containing:
    tensor([[2.7822]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.1517, -0.4797,  3.4743,  4.2452, -3.5083,  2.0142,  3.4729,  0.3959],
            [ 3.7931,  8.3334,  3.8911,  2.1177,  7.3314,  3.9140,  2.0953,  9.2160],
            [ 3.8180, -3.1487, 10.2523,  4.4302,  2.2868,  6.5124,  2.4973, -0.1213],
            [ 0.5319,  7.6597,  3.5992,  2.3579,  7.9566,  4.0355,  3.0389,  6.0162],
            [ 0.4933,  0.4312,  3.3163,  5.7351, -2.1541,  7.5668,  3.0146,  5.0103],
            [ 5.7254,  0.1805,  5.7321,  0.8300,  6.4436,  2.1537,  1.1670,  4.7409],
            [-0.7478,  2.2978,  2.1026, -0.1388,  0.3670,  4.1203,  0.8956,  6.2206],
            [ 6.0120,  1.9749,  3.8922,  6.9470,  4.9141,  5.4470,  0.6349,  7.9344]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ -0.6048,  -0.7172,  -3.5922,  -1.4024,  -2.6746,  -1.7896,   1.3077,
              -0.4135,   1.4800,  -3.8862],
            [  0.1482,  -1.7529,   3.4353,  -2.7448,   3.2124,   4.8553,   1.8932,
              -0.9107,  -2.1562,   1.6629],
            [ -0.1509,   1.3034, -10.9404,   1.2337,  -2.3429,  -4.1313,  -3.3434,
               1.7991,   4.0170,  -5.0954],
            [ -1.5056,  -4.6033,   2.9293,  -4.7708,  -0.0820,   5.3924,   4.0590,
              -6.0787,   0.8726,   2.0241],
            [ -0.3067,   0.0453,  -7.7384,  -0.6393,   5.4741,  -0.2580,  -2.7217,
               3.1601,   1.2498,  -1.2140],
            [ -0.1418,  -0.8552,   0.4028,   0.7974,  -1.4220,   4.8357,   0.6832,
              -5.9849,  -3.8194,   0.6654],
            [  0.2508,   0.6319,  -4.2563,   0.9053,   2.8691,   1.0160,   2.2164,
               0.0697,  -2.0407,   0.1785],
            [ -0.4505,  -0.4326,  -0.5294,   0.3947,   6.7043,   1.9285,  -2.0107,
              -2.1097,   0.4721,  -1.2399],
            [ -0.2998,  -0.8815,   1.6044,   1.6821,  -0.9049,  -1.0729,   3.0945,
               0.9056,  -4.2320,   1.3388],
            [  0.1661,   0.4379,  -2.9943,   0.1993,   3.7222,   3.7786,  -3.6977,
               1.5533,  -0.0346,   1.2338]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.131 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
