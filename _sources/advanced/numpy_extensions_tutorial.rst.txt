.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.6674,  5.7165, 15.0286, 10.0652, 11.5344],
            [ 6.5715, 13.4272, 10.1236, 10.7381,  3.8243],
            [ 5.2537,  2.2954,  8.3858,  6.4723,  9.9365],
            [15.3618,  3.0416,  6.7586,  6.1500,  7.5562],
            [ 2.0548,  5.8350, 15.8084,  9.1401,  0.7158],
            [15.3618,  8.5616,  2.3846,  3.8571,  7.5562],
            [ 5.2537, 10.2967,  5.8083,  8.2249,  9.9365],
            [ 6.5715,  2.8475,  1.8502, 14.8388,  3.8243]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7307,  0.6141, -0.9900, -0.2918, -1.6442, -0.4581, -0.4838,  1.4300],
            [ 0.5419, -1.7634,  0.6412,  0.5919, -1.4051,  0.2887, -1.6050,  0.6478],
            [ 0.6190,  0.4286,  0.0687,  0.3086, -0.7640,  0.5367,  0.9194,  0.6890],
            [-2.6917, -1.4826, -0.8835,  0.4277,  0.1103, -1.9830,  0.0914,  1.1027],
            [-1.7826, -0.1655, -1.7129, -0.1946,  0.4921, -0.1263,  1.4456,  0.8249],
            [-2.1475,  1.0164,  0.6699,  1.2882, -0.1456, -0.6487,  0.8381,  1.4573],
            [-1.4153,  0.7593,  0.3768, -0.4682,  1.0282,  0.3254,  0.6886, -2.6881],
            [-0.2443, -0.5121,  1.2784,  0.8006,  1.5994, -0.1956,  0.1364,  1.8733]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2430,  1.3230, -0.0190],
            [ 0.8686, -1.4349, -2.0792],
            [ 0.2142, -0.8857,  1.0784]], requires_grad=True), Parameter containing:
    tensor([[0.2141]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.7043,  4.2273, -2.8969, -2.7040, -2.5170,  2.5929, -1.6501, -3.1118],
            [-0.8646, -2.1047, -0.3743,  2.4385,  0.4938, -3.2971, -4.7712,  5.3892],
            [ 5.7050, -1.9680, -1.4926,  0.0466,  0.6833, -1.5546,  6.3222,  6.3148],
            [-5.2295,  2.3970,  0.4111, -1.6013, -2.5723,  6.0677,  1.0859, -2.2014],
            [-3.5980, -3.3452, -2.4373, -1.5134,  8.2824, -1.4202, -3.8076, -1.4746],
            [ 3.6250,  0.9521,  0.3975, -0.1534, -5.5453, -4.5043,  4.9628, -1.0326],
            [-3.1449, -0.0432, -0.5472, -1.6945,  1.2595,  4.0187, -3.4093,  8.5016],
            [ 0.4696,  2.0844,  0.9048,  2.6738,  3.7210, -1.3338,  1.9203, -4.7517]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1773,  1.0838, -0.5774,  0.1196, -0.5428, -0.8864,  1.6464,  0.4462,
             -1.2565,  0.0182],
            [-1.5486,  2.2427, -2.0361,  3.7715,  1.1276,  1.1615, -1.8741, -0.9789,
              1.4725,  2.0064],
            [ 0.0279, -2.3087,  1.2359, -1.8846, -0.2010,  3.1553,  0.4060,  1.6674,
              1.9511,  0.6289],
            [ 0.9569, -2.7173, -0.8998, -1.7338,  4.8340, -4.6824, -0.8748,  3.6543,
              2.3529, -0.6630],
            [ 2.3214, -1.7033,  1.2375, -2.3440, -2.5575, -2.1545,  4.1066, -1.2709,
             -4.3126, -1.7921],
            [ 0.9764, -0.9702,  2.8118,  6.2918, -3.6956,  6.4870,  4.3496, -1.0695,
             -4.3133, -0.3918],
            [-5.3735,  8.0753,  3.7203, -1.5132, -1.0718,  3.1769, -6.8662, -2.9399,
             -0.4574,  2.6460],
            [ 4.1738, -6.8037, -6.4911,  0.0775,  6.4061, -0.8136,  1.4081,  0.9201,
              0.0821,  0.7379],
            [-0.9690,  1.3701,  5.1014, -2.7574, -2.5857, -2.8963, -0.3748, -4.7034,
              0.4390,  1.2792],
            [-0.3824,  1.9028, -3.1415,  1.3728, -0.2939,  1.0177,  0.0139, -0.6877,
              2.2745, -1.1312]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.591 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
