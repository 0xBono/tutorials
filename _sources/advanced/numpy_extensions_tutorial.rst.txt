.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.5359,  6.3946,  2.6069,  2.4630,  1.5094],
            [ 4.5293,  5.0356, 12.0291,  5.6727, 11.3138],
            [ 9.6399,  5.6447, 12.9863,  5.3781,  5.7531],
            [ 8.0727,  7.1074,  5.9885,  6.6972, 11.9157],
            [ 4.4050,  4.5471,  7.9832, 10.5022, 14.5909],
            [ 8.0727,  9.5980,  6.1108,  6.7003, 11.9157],
            [ 9.6399,  1.6510,  8.1031,  8.6124,  5.7531],
            [ 4.5293,  3.4365,  5.8526,  2.3125, 11.3138]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.5820,  0.0935, -0.3687, -0.5994,  1.1709, -1.1610, -0.4905,  0.6254],
            [ 1.8501, -0.9905,  0.4030,  1.0086,  0.2352,  0.3926, -0.0484,  0.0210],
            [-2.3813, -0.3157, -1.2699, -0.5333, -0.4055, -0.1292,  0.1312, -1.2177],
            [-0.7003,  0.1404,  2.3823, -1.2615,  0.0326, -1.2021, -0.0852, -1.2875],
            [-1.1681, -0.2798, -1.3066,  2.1539, -0.0749,  0.4063, -1.2608,  1.1218],
            [-1.2939, -0.2281,  1.2564, -0.6511, -0.9760,  0.8284, -0.4697,  0.1711],
            [-0.6324,  1.5754, -0.9163, -0.2226, -0.0374, -0.3892, -0.0820, -0.5888],
            [-0.1677,  0.2161, -0.6063, -0.3049,  0.4978,  0.3064, -0.3224, -1.7119]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7488,  1.6886, -0.7058],
            [-1.2259,  0.6722, -0.5306],
            [ 0.4671, -1.4601,  0.4455]], requires_grad=True), Parameter containing:
    tensor([[-3.1197]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.0371, -1.4224, -0.3559, -4.1597, -0.4145, -6.9707,  2.4047, -2.2710],
            [-5.2418,  0.8678, -3.3551,  0.0629, -5.7655, -3.6445, -3.5752, -2.1568],
            [-3.7537, -4.3901, -2.1575, -2.5285, -5.7370, -0.1036, -6.6599, -3.9929],
            [-0.3310, -5.8673, -1.6295, -0.4098, -6.6311,  1.1503, -4.5230, -6.6159],
            [-1.2731, -2.0603, -6.1552,  2.9064, -2.2442, -5.2186,  0.7765, -3.3659],
            [-4.4990, -4.2656, -0.8050, -4.5942,  1.7384, -6.0615, -1.9610,  1.0794],
            [-6.1036, -0.5343, -4.0292, -4.5188, -2.0559, -2.4666, -4.5150,  1.8211],
            [-2.5653, -1.2624, -0.8822, -7.4661,  1.7281, -6.1466, -0.1666, -4.3983]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.6606,  1.8595, -0.9213, -0.9964,  1.4807, -0.6631, -1.5035,  1.3440,
             -1.1883,  0.5171],
            [-0.6327,  0.1279,  0.7220, -0.2725,  0.6968,  0.1492,  3.2216, -1.9313,
              1.1439,  0.0750],
            [ 0.6724, -1.0551,  0.7405,  2.7361, -2.4061, -1.7775,  5.9198, -5.0378,
              2.7672, -0.5942],
            [-1.1510,  0.3408,  0.1257,  2.1502,  0.2299, -1.0311,  0.2756,  0.7389,
             -0.8005,  0.4375],
            [ 0.8885, -3.4808, -0.5378,  0.5329, -2.7975,  2.3169, -1.9279,  4.4544,
             -2.5758,  0.7936],
            [ 2.1864, -1.2799,  1.6599, -0.2934, -1.4156,  5.4565, -4.9931,  2.7957,
              3.3405, -1.7841],
            [ 0.2113,  2.0670,  1.9811, -0.2530,  0.7673,  0.1733,  0.7297, -5.3643,
              3.4072, -2.0900],
            [-1.7151,  4.0207, -5.0523,  4.5852,  0.9765, -2.7185,  0.3640,  0.8198,
             -4.3756,  1.2382],
            [ 0.7622,  0.4347, -0.3130,  0.3075,  1.8835,  1.1486, -2.6626,  1.3253,
             -0.7192,  0.1795],
            [-0.1000, -0.5633,  2.6538, -0.7364, -0.5110,  0.0092,  1.5688, -1.4110,
              0.4589, -0.0526]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.655 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
