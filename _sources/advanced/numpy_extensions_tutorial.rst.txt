.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.0484,  8.1480,  8.5883,  5.5140,  3.0633],
            [ 2.8790,  4.2943,  7.3135,  6.9232,  4.3369],
            [ 5.4529, 11.0740,  4.2964,  3.3555,  6.0141],
            [ 8.6858, 10.9248,  2.9083, 11.1566,  4.7791],
            [ 3.1376,  4.0262,  6.0939,  3.2813,  5.1850],
            [ 8.6858,  8.5061,  5.5431, 12.5406,  4.7791],
            [ 5.4529, 10.5829,  5.7365,  3.9366,  6.0141],
            [ 2.8790, 12.4387,  9.0729,  6.8521,  4.3369]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1445, -0.0654, -0.6799, -1.0007, -1.7728,  1.8744,  0.2614, -0.6392],
            [-0.5690, -0.3737, -1.4359, -2.1794, -0.4867,  0.2354,  0.2232,  1.0147],
            [ 0.4149,  0.2531, -0.4940,  0.5176, -0.7090,  0.7548,  2.3258,  0.1637],
            [-0.0062,  0.1696, -0.7686,  0.5657, -1.2222, -1.3703,  1.0417,  0.1381],
            [-1.1057,  0.0309,  0.5598, -0.0113,  0.3503,  0.1304, -0.4083, -0.5155],
            [ 1.2413,  0.0817, -0.2489,  0.9409, -2.0708, -0.6338,  1.2217,  0.4859],
            [-0.3208, -0.7380,  0.8751, -1.0084,  0.1511, -0.7141,  0.7103,  0.2095],
            [-0.9691,  0.3939,  0.4705,  0.8267,  1.1229,  1.2094, -1.4026, -1.2393]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7946,  0.3869,  1.5102],
            [ 0.2281,  0.2376, -3.0202],
            [ 0.8879,  0.2279, -1.6230]], requires_grad=True), Parameter containing:
    tensor([[-1.7336]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.4226, -0.8214, -2.6439, -4.4498, -4.1032,  2.6545,  5.0932, -6.8351],
            [-5.2395,  0.1261,  0.2876, -7.4081, -2.5783, -0.2479, -5.8712, -4.0440],
            [ 3.2951,  0.1329, -8.0389, -6.8519,  7.9636,  0.7274,  1.0829, -2.4554],
            [ 0.9503, -0.1993, -1.0507, -3.5827, -0.8942,  2.0137,  1.1925, -6.9228],
            [-1.9362, -7.0980,  3.6881,  5.0359, -3.5832, -4.5874, -6.1441,  3.1503],
            [ 0.7262, -6.9818,  0.2337, -4.9950,  3.8009, -0.6998,  2.0117,  0.0856],
            [-6.3268, -3.4743, -1.5620, -5.4441, -5.0749, -4.5483, -9.3971, -9.2990],
            [ 2.6015, -0.2622, -4.1345, -4.8916,  1.5967,  0.3870, -2.1148,  0.4411]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1516, -1.0751, -1.8152,  2.4970,  2.7653,  1.4291,  2.8891,  0.7841,
             -1.6359, -2.3022],
            [-1.1633,  0.5670,  4.0424, -2.5269, -8.4929, -1.6878, -3.2500,  0.4990,
              0.1309,  3.3753],
            [-0.5470,  1.7460,  1.1042, -2.4056, -3.6351,  0.9345, -6.8487, -2.2403,
              6.6432,  5.3713],
            [ 2.2559, -1.5690, -6.6163,  1.3505,  7.5708,  2.6730, -2.3591,  0.6371,
             -5.2999,  1.2412],
            [ 0.3704,  0.9672,  0.4610, -7.1133,  2.1188, -4.5767,  2.6797, -1.2955,
             -2.2270, -2.9697],
            [ 0.1807,  2.8914, -0.5964, -5.2344, -3.6531,  2.0369, -0.0802,  2.2439,
              0.3441,  3.8492],
            [-0.8514, -0.0844,  5.2065,  5.3228, -3.2619, -2.1944,  3.2454, -3.1001,
             -7.5669, -3.3969],
            [-1.4788, -0.4191, -0.6142,  5.5229, -0.9445, -3.8501, -0.6865,  6.5119,
             -0.0740, -4.6914],
            [ 1.0036, -0.5367, -4.2589,  4.1899,  0.9647,  7.4084, -3.5480,  0.7031,
              6.4428, -4.1933],
            [ 0.6123, -1.1238, -1.6147,  0.1404, -0.1741,  4.7118, -1.1452, -0.8967,
              2.3911, -1.4189]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.219 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
