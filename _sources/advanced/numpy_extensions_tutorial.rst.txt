.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.1738,  4.7530,  3.0291,  8.6226,  4.0964],
            [ 4.1680,  7.5467,  4.2970,  8.0178, 14.3332],
            [ 6.4405,  8.1887, 11.4487,  7.3156,  4.5137],
            [ 4.9785,  4.6454, 10.1224,  3.2724,  4.6564],
            [ 3.6916,  0.6720,  9.5776,  5.2182,  3.5124],
            [ 4.9785,  8.2215,  3.0422, 14.0016,  4.6564],
            [ 6.4405, 12.8375, 12.8876,  2.1765,  4.5137],
            [ 4.1680,  3.6690,  7.3081,  4.0470, 14.3332]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9327, -3.2411, -0.1564, -1.3634, -0.1059,  0.2332, -0.4575,  0.9584],
            [ 0.0338, -0.5625, -0.6837, -1.5250,  0.5138,  0.4690, -0.2328, -0.2760],
            [-1.0185,  0.8306,  2.1471, -0.6743, -0.0743, -0.4200,  0.2357,  0.0088],
            [-1.0123,  1.1624,  0.3639,  1.1875, -1.0969,  2.0614, -0.0473, -1.5760],
            [-0.3912, -0.0421, -2.0970,  0.8309,  0.2063, -0.5855, -0.2971,  2.0394],
            [ 0.0910, -0.1314,  0.5744, -1.0555, -1.4550,  0.6864, -0.6225,  0.5186],
            [-1.0735,  0.0225,  0.3245,  0.0954, -0.5235,  0.1255, -0.2634, -1.1385],
            [ 0.9809, -0.3723, -0.2250, -0.3659,  0.2422,  0.1905,  0.0528,  0.8707]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8707, -0.7200, -0.2788],
            [-1.1500, -0.1861, -0.1457],
            [ 0.4919,  0.0888,  2.2671]], requires_grad=True), Parameter containing:
    tensor([[0.0089]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.4538,  2.8291, -1.2772, -1.0382,  3.9222,  0.1045,  2.3044,  4.0592],
            [ 5.8266,  3.9197,  5.4289, -2.0161,  2.1143,  0.9921, -5.5131,  2.7222],
            [-2.1939, -1.0289, -3.2999, -2.8771, -0.4244,  1.8100,  0.7827,  2.5817],
            [ 0.1164, -1.7680, -0.2800,  1.7681, -0.7228, -1.9547,  1.7376, -2.1514],
            [ 1.5339,  3.2165, -1.0906, -0.9820, -2.6723,  0.3946, -0.1797,  0.4374],
            [ 5.4851, -3.6239,  2.0437,  1.5371,  1.2961, -1.2629,  1.6746, -2.5250],
            [-1.7506,  2.9259, -5.1469,  0.5485, -4.6766,  3.0808, -2.6143,  5.6503],
            [-5.0197,  2.5655,  0.9452, -4.3078,  1.6320,  7.1737, -0.5852, -3.1512]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1613e+00, -2.1062e-01, -1.4225e-01,  1.0328e+00, -6.1687e-01,
              4.3320e-02,  2.5761e+00, -2.6324e-01, -3.0092e-01, -5.7235e-03],
            [ 2.5777e+00,  3.7567e-01,  1.8072e+00,  2.0915e+00,  1.9940e+00,
              3.5159e+00, -1.4127e+00,  1.1534e-01,  8.8008e-03,  7.6346e-03],
            [-1.3330e+00, -1.1002e+00, -2.7612e+00, -4.8117e+00, -2.4031e+00,
             -2.4221e+00, -2.6731e+00, -5.2781e+00,  2.1606e+00,  1.3027e-01],
            [ 1.3108e+00, -1.2359e+00,  1.7981e+00, -1.0975e-01, -4.8985e+00,
              1.0948e+00, -3.5712e+00,  1.3109e+00, -1.2550e+00, -1.8369e-02],
            [-1.4138e+00, -1.7641e+00,  6.6834e-01, -2.5512e+00,  3.9362e+00,
             -1.0920e+00,  8.9211e-01,  2.8044e+00,  3.4117e+00, -7.6747e-01],
            [ 1.0008e+00,  1.4620e+00,  6.1362e+00,  1.2759e+00,  1.8737e+00,
             -8.0302e-01, -2.6760e+00,  1.1184e+00, -4.6033e-01, -5.6729e-01],
            [ 7.9594e-01, -1.6049e+00, -1.7265e+00, -2.5608e+00, -4.8772e+00,
              5.9400e-01, -3.3103e+00,  2.3348e+00, -1.7977e+00,  9.2340e-01],
            [-1.2148e+00,  1.7258e-01, -2.5385e-01, -1.2433e+00,  5.1896e+00,
             -4.1851e+00,  3.6832e-01, -1.6716e+00,  1.5231e+00,  2.2308e+00],
            [ 4.6020e-01, -1.2403e+00,  3.4352e+00,  3.3249e+00,  5.4078e-01,
              4.5464e+00, -2.7356e+00,  5.5181e+00, -1.2836e+00,  1.0499e+00],
            [ 1.2220e-01,  8.0394e-01,  7.6650e-01,  3.3966e+00,  5.3099e-01,
             -1.1587e+00,  8.8933e-01, -1.1839e+00, -1.8028e+00, -8.1057e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.046 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
