.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.9352,  4.4988,  3.4603,  7.6387, 14.3014],
            [ 6.1191,  5.6630,  9.2381,  8.0374, 12.5577],
            [ 9.2569,  0.6575,  1.2132,  7.4051,  7.4299],
            [10.9315,  5.7199, 10.3240,  4.7498,  7.0169],
            [12.4788,  1.6047,  5.6096,  9.2736,  6.9071],
            [10.9315,  3.8243,  3.9355, 14.3306,  7.0169],
            [ 9.2569, 10.8639,  4.6307, 11.5642,  7.4299],
            [ 6.1191, 10.1997, 13.1082,  5.3581, 12.5577]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2571, -0.2032,  1.0570,  0.1443, -0.7500,  0.0537,  0.3881,  1.0327],
            [ 0.4686,  0.5837, -1.2098,  0.0418,  0.1660, -1.5866,  0.0309,  0.5738],
            [-1.0800, -0.4438,  2.1738,  0.7159,  1.5237, -2.0198,  0.4861,  1.0493],
            [-0.1641, -2.1415,  0.7023, -0.5689,  0.0838, -0.0822, -0.9784, -1.3291],
            [-0.3488,  0.7024, -0.6816,  0.4697,  2.6906, -0.8290,  1.9966,  0.4520],
            [ 0.1568, -0.3279,  0.2750, -1.8049,  0.9226, -1.0720, -0.2603, -0.4404],
            [ 0.8772,  0.6397, -0.6238, -2.4194, -0.4764, -0.9717, -0.3018, -1.7891],
            [-0.0196,  0.4326,  0.0960,  0.7991, -1.2166,  0.8969, -1.5580, -0.1766]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.2894,  0.3461,  1.8672],
            [ 0.8351, -2.6340,  0.7146],
            [-1.2724,  0.8525,  0.7115]], requires_grad=True), Parameter containing:
    tensor([[1.7234]], requires_grad=True)]
    Output from the convolution:  tensor([[  0.9878,   0.7161,   2.7639,  -2.5986,   1.0493,  -1.4990,   0.1774,
               2.2373],
            [  6.4446,   5.3595,   6.5355,   1.8211,  10.4347,  -3.7145,   8.7701,
               4.4609],
            [  7.1991,   0.7612,   4.1524,   3.5890,   3.3575,   2.2873,   3.2675,
              -0.9305],
            [  2.7693,  -7.0650,   9.7936,  -0.4130,   5.7824,  -2.0548,   4.8598,
              -0.9226],
            [ -2.9598,  10.4050,   3.2640,  -2.7892,   5.5835,  -2.6699,   4.4788,
               2.1448],
            [-12.7696,   3.4145,  -2.5308,   8.6042,   4.4187,   1.0370,   2.7005,
               2.7758],
            [ -0.0604,   3.1413,   0.2151,  -3.1200,  -4.1277,   5.6272,  -0.7809,
               0.9203],
            [  7.9618,  -4.3287,  -2.3030,   3.6509,   4.8006,  12.3479,  -1.8666,
              11.0905]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  1.1407,   1.8663,  -1.4766,  -0.2348,  -1.3993,  -2.5512,   4.2370,
               2.4178,   3.5209,   2.6486],
            [  0.7067,  -3.1005,  -0.3621,  -2.0506,   0.7706,  -5.3686,   1.4459,
              -2.8766,  -3.1736,   1.8275],
            [  0.2553,  -3.7625,   9.2933,  -8.2289,   4.4665,   0.9514,  -3.4110,
               4.2056,   0.8046,   3.5855],
            [  2.2903,  -2.1334,   4.8370,  -2.2632,   7.0700,  -1.6916,   4.6412,
               2.8462,   1.4478,   2.7806],
            [ -1.3105,  -1.5647,   0.2658,   1.2675,  -1.1790,  -2.4189,   2.4359,
              -8.8071,  -1.9517,   0.9812],
            [ -0.8166,   0.3647,  -2.4607,  -0.1844,  -1.5804,   5.9516,  -3.1879,
               0.8686,   2.4007,  -2.4213],
            [ -0.4254,  -2.2442,   5.8208,  -1.0304,  -4.5004,   4.2076,   0.9508,
              -2.2642,   4.9797,  -3.6389],
            [  1.2805,   2.6160,   1.5933, -12.3086,   4.1642,  -0.1532,  -6.2261,
              -4.2218,   1.2204,  -4.8673],
            [  1.8494,  -5.3432,   3.6290,  -2.6619,   6.5580,  -3.5742,  -2.0556,
               4.3065,   3.3072,  -2.0023],
            [ -1.3664,   2.4959,  -1.6469,   2.3620,  -0.2509,  -1.7260,   0.6411,
               1.3652,  -1.8331,  -1.0974]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.875 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
