.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.4408,  6.8010,  6.5909,  6.9752,  2.3530],
            [ 6.8368,  8.1965,  6.2292,  2.7155,  8.0912],
            [ 4.0142,  9.9275,  4.9557,  0.7288,  6.0327],
            [ 4.9982,  9.6974,  6.6052,  2.7079,  3.7438],
            [ 5.7381,  4.2598,  3.7050, 13.4243,  4.4515],
            [ 4.9982,  4.1850,  2.7768,  4.1089,  3.7438],
            [ 4.0142,  2.6679,  8.9309,  8.4920,  6.0327],
            [ 6.8368,  3.2910, 16.7055,  4.9071,  8.0912]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.6607e-01,  2.1533e-01, -6.7412e-01,  2.1168e-02, -1.4047e+00,
             -6.1830e-01,  2.7979e-01, -6.4508e-01],
            [-1.4141e-01,  4.2734e-01,  1.1056e+00,  1.2339e-03, -1.5359e+00,
              5.2644e-01,  4.2510e-01, -4.7324e-01],
            [ 4.4307e-01,  7.8320e-02, -8.2760e-01,  6.3412e-01,  2.7106e-01,
             -1.1195e+00,  5.8537e-01, -8.8499e-01],
            [ 2.0111e+00,  3.6013e-01,  4.0587e-01,  4.9353e-01,  9.8903e-01,
             -1.2126e-01, -1.5086e+00,  1.1909e+00],
            [ 1.9217e+00,  6.0909e-01, -1.6262e+00, -6.7538e-01, -1.4544e-01,
             -8.7175e-02,  9.5789e-01,  2.0191e-01],
            [ 5.0162e-01,  7.9103e-02, -9.9541e-01, -1.1998e+00,  1.1268e+00,
              1.7028e+00,  8.6344e-01, -1.0284e+00],
            [-5.9598e-01,  1.6696e+00,  2.6904e-01,  2.4414e-01,  3.4699e-01,
             -3.9208e-01,  4.8338e-01,  1.4978e-01],
            [-8.6734e-01,  1.8462e-01,  8.4925e-02,  4.6022e-02, -1.2131e+00,
              1.5398e+00, -1.5826e-01,  7.6659e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0567, -0.5235,  1.8159],
            [ 0.5997,  0.9693, -0.6710],
            [ 1.4749,  0.4382,  0.0552]], requires_grad=True), Parameter containing:
    tensor([[-0.2692]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.0330, -1.7630, -0.7442,  2.9802,  1.8925, -1.5303,  3.9172, -2.8338],
            [ 2.4517, -4.1387,  0.2722,  3.1468, -5.4716,  2.6271, -2.4735,  0.4872],
            [-0.0705, -0.6729,  4.3475, -3.1445,  2.3375, -0.9779,  1.8787,  1.0075],
            [-7.8511, -1.7932, -0.0604,  5.3242, -4.9602, -2.3195,  8.0158,  3.0254],
            [ 2.0571, -2.4499,  2.6448,  1.4537,  1.2418,  1.9020,  3.0035, -4.6374],
            [ 2.2308,  5.6821, -3.8828, -2.0232,  4.1081,  6.4910, -3.8041,  0.6917],
            [ 4.1117,  4.6534,  0.3816, -2.6105,  4.3134, -4.2276, -5.7909, -3.2500],
            [-2.6894, -5.8756,  4.5486,  7.5377, -4.6787, -5.0903, -2.2975, -1.9024]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.7554, -1.6387,  1.5987, -0.4239,  0.7897,  2.8942,  2.1537, -0.2387,
             -1.2931, -1.5798],
            [ 1.5489,  3.7371, -1.4857, -0.9503,  1.8056, -3.6219,  0.0472, -0.7145,
              2.6235, -0.8896],
            [ 3.1610,  1.5893,  1.1761,  4.8544,  0.1071, -0.9591, -0.7808, -1.0659,
             -6.4543,  1.7681],
            [-1.8432, -3.4841,  2.0194, -2.6432, -0.2401,  0.5275,  2.7723, -2.1037,
              1.6988, -0.7691],
            [-0.1077,  1.4757, -4.1500, -6.2350,  1.1251, -0.4682, -3.2744,  0.3712,
             -2.3186,  1.2997],
            [ 0.5648, -1.5548,  0.0903, -0.2877, -2.6669,  6.0710, -1.1417, -3.5392,
              2.3393, -0.8014],
            [-0.1484, -2.3402, -2.5746,  0.0846,  0.5541, -6.7907,  0.2739,  3.6367,
              0.5838,  1.9953],
            [ 0.0464,  0.4963, -2.6120, -0.5762, -0.2796,  1.6045,  0.1268, -1.0062,
              2.0817, -0.0526],
            [-3.1100, -4.2252, -1.7347, -0.4326,  3.6152,  4.1197,  2.5904,  3.1518,
              0.1292, -0.1785],
            [-2.2350, -3.7568, -2.0131, -0.6990,  0.1596,  0.0459,  1.5243,  0.9653,
              0.2097,  0.0193]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.064 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
