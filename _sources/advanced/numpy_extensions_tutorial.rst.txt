.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.5527, 13.2326,  3.2393,  2.3828,  9.9687],
            [ 7.1467,  6.4783,  6.4102, 11.2549, 15.2826],
            [10.8119,  9.5266,  6.2100,  8.9722,  3.9330],
            [ 8.6330,  6.0739,  6.3700,  5.9075,  3.2089],
            [17.6436,  9.3975,  7.0609, 13.8475,  5.8346],
            [ 8.6330,  9.5975, 11.3888, 13.6092,  3.2089],
            [10.8119,  9.9926,  6.2624,  4.2125,  3.9330],
            [ 7.1467,  5.1277, 18.1767,  2.1494, 15.2826]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7905, -1.3600, -0.7192, -1.8604,  0.3737,  1.3112,  0.2635, -2.2113],
            [-0.3525,  1.9534, -0.4450, -0.8884, -0.0803,  0.1953,  3.2402,  0.0477],
            [ 1.6760,  0.2426,  1.5633,  1.2125, -1.3409,  0.4418, -1.1591,  0.3323],
            [-0.6516,  0.3576, -0.2032, -0.6440, -1.7326,  0.7181, -0.1485,  1.3294],
            [-1.3516, -1.5062, -1.0903,  0.5756,  0.2951, -1.0736, -2.8773,  1.2947],
            [ 0.3614,  0.5997, -0.3348,  0.8857, -0.1604,  0.5265,  0.0631,  1.7096],
            [ 0.1143, -0.0785, -1.2844, -1.1418, -1.6585, -0.5736,  0.0723,  0.1290],
            [ 0.7654,  1.8671, -1.0578, -1.6805,  0.7890, -0.9492, -0.4805,  1.4455]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9915,  1.1193, -0.9259],
            [ 0.0955,  1.0044,  1.9190],
            [ 0.6909, -0.3180, -0.4343]], requires_grad=True), Parameter containing:
    tensor([[-0.0547]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.1245,  2.9690,  0.2668,  6.6421,  0.6124, -5.2139, -2.3188, -0.4890],
            [-0.1737,  1.2469,  0.6023, -3.9841,  4.3545, -0.1708, -0.7406, -3.0056],
            [ 3.5094,  0.7857,  1.0169,  5.8313, -1.1638,  0.8947, -2.2417, -0.8055],
            [-5.9869,  0.4534,  2.5728,  1.7136, -1.0247, -2.7795, -1.2517,  3.6306],
            [ 1.6201, -3.4748, -0.1331,  0.1036, -0.9612, -0.5627,  0.7118, -4.0305],
            [-1.7881, -1.3769,  1.9175,  2.0687,  2.0261, -0.2694,  3.4995,  1.6656],
            [ 0.1184, -0.8124,  0.1330,  0.5666,  1.2623, -2.4248, -1.2931,  3.4793],
            [-0.0824, -0.9776, -1.5679,  3.5364, -3.5985, -0.9561, -0.4189, -5.6206]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-5.7689e-01, -2.1559e-01,  1.8351e+00,  1.5495e+00,  1.0265e+00,
              1.7785e-03, -2.2131e+00, -2.6793e+00,  1.7348e+00,  1.1575e-01],
            [ 8.2064e-02, -1.8742e+00, -1.8491e+00,  2.6628e+00,  1.8361e-01,
              2.2407e+00,  2.8854e-01, -3.5234e+00, -5.0136e+00,  1.2989e+00],
            [-1.0322e+00,  1.5852e+00,  2.1751e+00, -3.5392e+00, -7.6536e-01,
             -3.8599e+00, -1.4928e+00, -2.8949e+00, -5.6866e+00, -1.4371e+00],
            [ 1.4119e+00, -1.4731e+00, -1.8456e+00,  6.0539e+00,  2.2321e+00,
              5.1000e-01, -5.4557e-01, -1.3338e+00,  4.0835e+00, -3.6541e+00],
            [-1.1955e+00,  2.1559e+00,  1.8586e+00, -4.5657e+00, -1.2926e+00,
              1.3748e+00,  4.1711e+00,  1.8682e+00, -2.1727e+00,  1.9871e+00],
            [ 4.3923e-01, -3.2305e+00, -2.7379e+00,  1.4922e+00, -2.1209e-01,
             -1.0927e-01, -5.2991e+00, -1.3266e+00,  2.4920e+00,  4.0940e-01],
            [-1.2653e+00,  1.2104e+00,  5.3512e-01, -4.6725e+00, -3.2272e+00,
             -7.7429e-01,  3.3279e+00,  3.2392e+00,  7.3360e-01,  3.0127e-01],
            [-5.3319e-01, -1.6838e+00, -6.7973e-01,  2.5960e+00, -2.6126e+00,
              1.3592e+00, -6.8539e-01, -1.0435e+00, -1.3103e+00,  4.2636e-01],
            [-4.4166e-01,  1.1978e+00, -2.0822e+00, -2.4386e+00, -1.5566e+00,
             -2.9096e+00, -6.9560e-02,  2.0524e+00,  1.2595e+00, -2.7917e-01],
            [-1.1878e-01, -5.6927e-01,  3.4523e-01, -5.1914e-01,  1.6128e-01,
              1.0404e+00,  4.6994e-01, -4.7771e-01, -2.5952e-01,  3.5521e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.136 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
