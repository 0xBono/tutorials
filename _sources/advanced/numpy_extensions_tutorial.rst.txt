.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.9855, 12.0013,  8.1574,  5.4580,  3.9292],
            [ 3.8724,  4.9927,  2.3363,  7.1729,  3.9438],
            [ 5.1143,  7.4323, 10.6276,  5.6066, 11.5593],
            [10.4018,  4.2120,  7.4993,  6.5293, 12.0063],
            [ 7.3935,  6.2922,  6.3769,  3.8772,  4.5232],
            [10.4018,  5.1510,  2.4657, 15.8031, 12.0063],
            [ 5.1143,  3.9587,  2.9559,  9.6254, 11.5593],
            [ 3.8724, 11.0625,  4.4442,  9.4816,  3.9438]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 8.3599e-01, -5.5058e-01, -4.2480e-01,  1.6716e+00, -4.8602e-01,
             -1.0900e-01,  3.1756e-01,  1.5292e-01],
            [-1.5877e+00, -9.9955e-01, -3.7902e-02, -1.0180e+00,  5.5807e-01,
             -4.3371e-01, -5.4212e-02,  1.8527e+00],
            [-3.9368e-01, -2.3394e+00, -7.9167e-01, -1.3810e+00, -1.5006e+00,
              1.8011e+00, -1.4234e+00,  7.1259e-01],
            [ 1.0057e+00, -3.7516e-01, -1.6914e+00,  1.2832e-01,  1.0095e-01,
              8.8805e-01, -2.4116e-01,  1.2390e+00],
            [ 1.0312e+00, -1.3549e+00,  3.1438e-01, -1.1185e+00, -1.9859e-01,
             -2.7886e+00,  5.9877e-01,  2.1240e-01],
            [ 1.6840e-02, -2.1225e-01, -9.7335e-01,  4.6276e-02, -1.4117e-01,
              1.5001e+00,  8.0946e-01,  7.6330e-01],
            [-1.2924e+00,  6.7807e-01, -5.9604e-01, -7.0701e-02,  2.7700e-01,
             -7.9346e-01, -4.6402e-01,  7.8415e-01],
            [-2.7963e-01,  5.6619e-02, -2.2041e-01, -7.6886e-01,  6.3856e-01,
              1.9781e-04, -6.6375e-01, -1.2020e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2667,  2.1475,  0.7837],
            [-0.3624,  0.7348, -0.3726],
            [ 0.2255,  0.1190,  1.9214]], requires_grad=True), Parameter containing:
    tensor([[0.8879]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.6402, -0.7061,  5.1976, -3.0260, -1.6795, -0.5574, -1.0883, -2.7533],
            [-0.7438,  2.9692, -0.2374,  9.1643, -0.4224,  0.0465,  5.7466,  3.0670],
            [ 3.3881, -1.6812,  2.6041, -0.2238, -0.3332,  0.3431,  2.1400,  2.2865],
            [-2.5527, -2.7514,  0.7071, -0.9680,  5.3607,  0.9753,  2.3565,  6.4022],
            [-0.3324,  1.4256, -3.2885,  7.2018,  0.2753,  5.3318, -3.5294,  0.8400],
            [-0.8480, -7.1369,  3.7128, -2.3476,  0.2401,  0.5966, -2.7458, -1.7677],
            [-1.3972, -4.6580, -0.6124,  3.6923,  7.0687,  6.3355, -0.7725, -2.1403],
            [-2.4428, -4.8200, -2.4586,  0.6026,  2.4464,  2.8156, -2.2152,  0.0707]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1235, -1.1190,  0.8469, -0.7387, -5.1892,  0.1438,  0.6347, -3.1009,
             -0.5496,  0.1871],
            [ 0.1510, -1.0202,  5.8572,  3.3256, -0.2791, -1.7443,  0.1649, -0.3670,
              2.0318,  0.3579],
            [-0.5576,  2.7193,  1.6752, -1.6650, -1.5926, -5.7885,  5.0793,  2.0986,
             -4.8686, -0.8893],
            [-0.8099,  3.8467,  0.0199,  1.6962, -1.4681,  1.1540,  1.4248,  2.5095,
             -4.4428,  0.3971],
            [ 0.2290,  0.1792, -3.6542, -2.0540, -2.5074, -1.1352,  1.8917,  2.8196,
             -2.4721, -2.9418],
            [ 0.4412, -0.2067,  5.6569,  5.1918, -0.0776, -1.4840, -0.1616,  1.7412,
             -3.2136, -3.6135],
            [ 0.2970, -6.0552,  2.0756, -2.1306,  3.3794,  1.1865, -4.7498,  7.9419,
             -1.7264, -2.0501],
            [ 0.3308,  1.4198,  3.3478,  9.2804,  3.3191,  3.8378,  1.2952,  4.7669,
              4.0496, -0.8990],
            [-0.8754,  1.0592, -3.9840,  4.9543,  0.7747,  3.0423,  0.5201, -0.6779,
              4.9907, -2.1356],
            [ 0.2901,  0.1934,  2.8595,  0.4861,  3.4874,  0.0467,  4.0061,  2.8723,
              4.4172,  2.6272]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.056 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
