.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.2226, 10.5656,  8.4026,  3.8175,  1.2746],
            [17.9070,  3.1014,  1.7301,  2.1838,  3.0167],
            [ 3.4250,  4.3326,  1.7631,  8.4240, 10.0675],
            [ 4.8901, 12.4899,  5.5440,  0.1227,  6.8645],
            [ 3.1694,  8.5030,  6.5268,  5.6066,  4.3663],
            [ 4.8901,  6.4064,  7.0116,  5.0729,  6.8645],
            [ 3.4250,  4.2950,  5.9002,  4.5113, 10.0675],
            [17.9070,  9.7301,  9.3458,  3.2853,  3.0167]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7505,  0.4328,  0.0199,  1.0750, -1.2297,  0.6553,  1.0002,  2.0403],
            [ 0.9030, -0.9063, -1.2215, -0.2403,  0.7202, -0.8758, -1.4880,  0.7485],
            [ 0.5168,  0.0251, -0.4324, -1.3345, -0.7588, -1.4627, -0.3485, -0.0077],
            [ 0.6531,  0.4462, -0.8563, -0.8051, -0.4218, -2.2021, -1.5444, -0.5537],
            [-0.8216, -0.5045, -0.3479, -0.0489, -0.1130, -0.2860, -0.9814, -0.9571],
            [ 0.5516,  0.6162,  0.6757, -0.9869, -1.2721,  0.1607, -1.5576,  1.3459],
            [ 0.6108, -0.7784, -0.3881, -0.7635,  1.1980,  0.4302,  1.0849, -0.3016],
            [-0.4116,  0.9463,  0.4801,  0.6485,  0.7190, -0.1391,  0.0623,  0.6092]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4186,  0.7174,  0.1691],
            [ 0.2820,  0.9319,  1.4853],
            [ 0.5676, -1.0243, -1.5038]], requires_grad=True), Parameter containing:
    tensor([[-0.7014]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.3804, -1.2533, -7.1644, -0.3387,  2.6322,  0.7061,  3.9722,  2.5442],
            [-0.8498, -0.8510, -4.2580, -4.8686, -1.7051,  0.6055, -2.5813, -7.9503],
            [ 1.2252,  5.2314,  1.1652,  2.1265,  2.1703, -4.1789, -1.7363,  0.7462],
            [-1.7039, -5.7688,  0.5806, -0.2006,  0.2682, -2.2627, -1.6741,  0.8386],
            [ 3.7513,  2.5713, -2.8806, -1.3656, -4.0361,  0.5894,  4.1854, -0.3303],
            [-1.1989, -2.2922,  0.8868, -1.4105,  2.6022, -0.8961, -4.0796, -2.9276],
            [-4.3440, -2.7314,  3.3508,  2.4460, -4.3887, -6.5448, -0.1839, -0.3010],
            [ 2.3390,  1.2775, -0.1013, -0.7729, -3.2330, -0.1535,  0.9007,  3.6530]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2897, -1.7001,  0.9074, -0.9289,  1.0111, -0.2400,  0.0829,  1.7885,
             -0.9313, -0.2170],
            [ 1.5701, -1.4560,  0.7113, -1.3129,  1.6279, -0.1644,  0.2696, -1.1846,
             -0.7223, -1.7751],
            [ 1.1265, -0.7690, -1.7514, -0.0183,  0.1797,  4.4525,  2.8028,  0.6146,
              2.0784,  3.0775],
            [-0.9016,  0.2099,  0.3565, -0.1567, -4.7072, -2.6355,  0.9769, -5.2395,
             -0.6042, -0.8936],
            [-0.4180, -2.1127,  3.0331,  2.8123,  0.5581,  1.0977, -0.1441,  2.7228,
              2.2448,  2.9233],
            [-0.5200, -1.3547,  5.2936,  1.4065,  0.6279, -5.9511, -4.9598, -2.9241,
             -1.1400, -2.9380],
            [ 1.4908,  1.3508, -3.1383, -3.2173,  2.2094,  3.1741,  3.5543, -0.1514,
              0.4001,  0.8093],
            [-0.8841, -1.1957, -3.7098,  0.4331,  4.5807,  0.3197, -6.5079, -4.2719,
              0.9999,  2.1180],
            [-0.4431,  1.8162,  4.0700,  0.1958, -3.0654,  2.3990,  4.3261,  4.1931,
              2.1427, -0.9447],
            [ 0.3076, -0.0944, -1.5918, -0.7883, -0.8164, -2.2307,  0.2098,  0.6766,
             -2.0925, -1.5149]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.385 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
