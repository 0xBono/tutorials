.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.0164,  2.6669,  3.8994,  0.8383,  1.0996],
            [ 1.5347, 15.7408,  9.3080,  8.4543,  0.5070],
            [ 6.7967,  4.1599,  8.6241,  6.0431,  3.8198],
            [11.1449,  4.4989, 12.2537,  8.7102,  5.0587],
            [ 9.1675,  6.3499,  2.8415,  2.7310,  3.6937],
            [11.1449,  2.6098,  9.6147,  5.7624,  5.0587],
            [ 6.7967,  4.4739,  9.1620,  3.2438,  3.8198],
            [ 1.5347, 12.9598,  4.9392,  4.2819,  0.5070]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.0497,  0.5741, -0.5060,  0.4495,  0.2303,  0.3402,  0.4147,  1.7315],
            [ 0.9450,  0.4128,  0.2864, -1.4078, -2.2553,  0.3133,  0.8550, -0.1855],
            [ 0.2974, -0.2990,  0.4691, -0.5492, -0.6716, -0.5423, -0.9694,  0.7917],
            [ 1.5048, -0.2847, -0.4738,  0.4565,  1.1637,  0.1337,  0.1522,  1.4133],
            [-1.0958, -0.5636, -0.1778,  0.2056,  0.7307,  1.2972,  0.0397, -1.9446],
            [ 0.3308,  0.2820,  0.1417,  0.1539,  2.0225,  1.6102, -1.1917,  0.5112],
            [-0.7828, -0.5761, -0.7704,  1.3405,  0.4969, -1.4697,  0.3088, -0.4251],
            [-0.0283,  0.1833,  0.8379,  0.5015, -0.3264, -1.1052,  1.5297,  0.1092]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4104,  0.9847,  0.4725],
            [-2.2299, -1.5447, -0.1033],
            [ 0.5350, -0.7189, -1.1521]], requires_grad=True), Parameter containing:
    tensor([[0.8414]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.8663,  6.0228,  2.6600,  2.1698,  1.4779,  3.3152,  0.0099,  0.1798],
            [ 1.6943,  3.9474,  1.3320, -4.5623, -1.8178,  1.7729,  2.6181, -3.8128],
            [-2.2153, -1.0891,  4.3370, -4.7836, -4.7803, -6.4301,  0.8826,  9.1706],
            [ 5.1163,  0.8196,  1.1657,  6.3884,  0.5314, -4.3758, -0.7413,  0.5028],
            [ 0.1086, -0.2304, -2.5477,  3.0389,  3.5363, -0.9767,  2.8746,  1.1803],
            [-1.6518,  1.2541,  0.4212,  0.7467,  2.7979,  0.5172,  0.3143,  0.7223],
            [-2.5925, -2.6316, -2.7890, -3.1185, -2.8625, -0.6314, -5.7182, -7.2938],
            [-0.4466,  4.6637,  0.6249,  2.9076,  4.7916,  4.5990,  4.9629,  0.4257]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0694,  2.5919,  1.0024,  0.8385, -0.9725, -0.1935, -0.3739, -0.3658,
             -0.9867, -0.3789],
            [-6.9368, -1.5559,  0.9020,  2.9540,  1.3275,  1.9956,  1.0731,  2.1321,
              2.7603,  0.6715],
            [-4.4191, -9.3540, -4.7122, -1.7877,  0.8602,  3.0300,  1.8179, -3.0687,
             -1.2488,  0.7898],
            [ 3.0008, -2.7946, -3.3489, -4.0368, -5.9076, -4.3563, -0.0270,  2.5888,
             -2.1824, -1.8397],
            [-0.8856, -1.3033, -1.7736,  0.2948,  0.6646, -3.2693, -2.0608,  1.9128,
              1.8017, -0.1445],
            [ 2.4279, -0.2896,  3.7539,  2.9792,  1.9303,  0.8008, -4.7952, -0.7639,
              1.6854,  1.2003],
            [ 5.5855,  1.7947, -4.1950,  1.3375,  2.2056,  6.4654,  4.2396, -3.6744,
              0.9866,  1.4655],
            [-3.8080,  0.4208,  6.1560, -2.0809, -4.3823, -1.0000,  1.7648, -3.3755,
             -3.4932, -0.2486],
            [ 0.0268,  0.1718, -3.5789, -1.4696, -0.4579, -1.6978,  1.3219,  1.1051,
             -1.9959, -2.2666],
            [ 0.1210, -0.3887,  0.4294,  0.3349, -0.8531, -1.7311, -1.2362,  1.9002,
              0.8671, -0.8122]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.236 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
