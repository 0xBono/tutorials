.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.7946,  6.9334,  7.6517,  9.4971,  1.3048],
            [ 4.0566,  7.3614,  1.4237,  6.3188,  7.2599],
            [ 3.1721,  7.6736,  3.6769,  6.0753,  9.8340],
            [ 8.5626, 15.0671, 12.7790,  8.5948,  5.5268],
            [ 1.4112, 14.7592,  4.4640,  3.2365,  6.6775],
            [ 8.5626,  3.3227,  8.2586,  5.6950,  5.5268],
            [ 3.1721, 12.0173,  2.9584,  5.8170,  9.8340],
            [ 4.0566,  1.2351, 15.7890,  5.8060,  7.2599]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.3232,  1.1657, -0.8591, -0.2802, -0.2362, -0.6267, -0.0276,  0.1701],
            [-0.0454, -0.4492,  0.4466,  0.7282,  2.5032,  0.1054, -1.9317, -1.2894],
            [ 1.8409,  0.9164, -0.2156, -0.1682, -0.1484, -0.9169,  0.0821,  1.1569],
            [-0.6200,  1.1797, -1.2561, -1.6775, -0.2220,  0.5207,  0.9588, -1.3694],
            [ 0.4593,  0.7213,  0.1019,  0.1455, -0.3099, -1.3251, -1.0684, -0.2518],
            [ 0.0839, -0.4767,  0.0633,  0.8575,  0.6450,  0.7157,  2.2396, -2.1585],
            [-0.7498,  0.0672, -0.5710,  1.5078, -0.9710,  0.1231, -0.5501, -0.3136],
            [-0.2244,  0.8270, -0.2277,  1.4052,  0.6054, -1.4400, -0.8739,  1.9795]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4015,  1.2270,  0.4420],
            [ 0.0528, -0.3445,  0.3266],
            [ 0.1351,  0.5606, -0.4301]], requires_grad=True), Parameter containing:
    tensor([[2.3368]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.4587,  4.0787, -0.4893,  3.5989,  2.5129,  2.6079,  0.8514,  3.5358],
            [ 0.1788, -1.5476,  1.1765,  1.6435,  1.1504, -0.3589, -0.5257, -0.0577],
            [ 2.8102,  4.0222,  0.2345, -2.1514,  3.0521,  5.5349,  4.1084,  0.9471],
            [ 2.3945,  0.5492,  1.7092,  2.8511,  4.1631,  3.1007,  1.3028,  1.1218],
            [ 9.1784,  7.8783,  6.0158,  2.0508,  5.7402,  2.7897,  1.9909,  3.1149],
            [ 3.1994,  5.0496,  6.7707,  2.9930,  0.2509,  0.3509,  0.3098,  0.4308],
            [ 1.5239,  5.4003,  4.3064,  3.3202,  4.2914,  2.4395,  2.0751,  2.9450],
            [ 2.4309,  5.6674,  4.1356,  4.1962, -1.3147, -0.2770, -1.5521,  2.4246]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.6043, -2.2619, -2.1875,  0.3333,  0.7270,  4.9936,  2.6682, -1.2599,
             -1.7719, -0.4722],
            [ 2.0048,  3.9777,  1.0790, -1.6720, -1.6071, -0.0113, -2.6967, -0.7922,
             -1.3281, -0.7099],
            [-2.0754, -4.7640, -1.6767,  3.3328,  1.3191,  1.1188,  2.4389, -1.9449,
             -0.2265,  0.2177],
            [-1.2564,  1.7530, -0.2850, -4.8363, -0.4816, -0.1503, -2.8368, -3.0147,
             -1.9397, -0.0939],
            [ 0.0225, -1.4954, -2.7137,  1.2816, -1.9168, -4.7437,  0.5452, -1.8797,
             -0.8451, -0.8963],
            [ 0.9539, -0.7910,  3.0796,  1.5672,  1.1222,  2.4328,  0.5910,  1.0722,
              1.4325,  0.2256],
            [-1.3736, -2.5894, -4.1844, -4.1167, -1.6683, -2.0207,  0.8979,  0.5965,
             -1.0608,  0.4578],
            [-0.5296, -0.3170,  1.5804,  6.2288,  1.7770,  1.7864, -0.7232, -1.6792,
             -1.4461, -0.6750],
            [-0.1607, -0.5492, -0.1607, -1.6109,  0.8455,  0.0521,  0.3615,  0.6366,
             -0.4743, -0.1063],
            [-0.0558, -0.2739,  0.2824,  1.4770, -0.1139, -0.3778,  0.1067, -0.9154,
             -0.0636,  0.3706]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.478 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
