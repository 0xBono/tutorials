.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.4198, 11.1382,  8.6920,  4.4089,  4.5026],
            [ 1.6675,  3.5335,  6.9037, 11.4681,  6.9382],
            [ 2.6644, 10.2302,  8.2548,  8.4640,  0.3027],
            [ 3.1826, 12.5873,  7.1491,  4.0506,  4.4414],
            [ 9.1437,  8.5003,  5.8858,  7.9598,  7.4480],
            [ 3.1826,  6.6042,  1.9216,  5.9165,  4.4414],
            [ 2.6644,  5.0186, 18.1455,  4.8091,  0.3027],
            [ 1.6675,  3.3951,  6.2022,  0.7324,  6.9382]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3744, -1.1408, -0.5987,  0.0581,  0.3256, -0.4244, -0.3292, -0.4811],
            [ 0.6153,  0.3320,  1.6024, -0.3665, -0.9688, -0.5849, -0.2395, -0.3150],
            [-0.3059, -0.5918, -0.3315,  0.0756, -1.6728,  0.5061,  0.2839,  0.2673],
            [ 0.2170, -1.2030,  1.4169,  1.5042,  0.7880, -0.1765, -1.2632,  0.2197],
            [ 0.9679,  0.2337, -0.8411,  0.1267, -0.4316, -1.5578, -2.5827,  0.7489],
            [-0.5734,  1.4208, -0.0997, -2.3597,  0.8146, -0.1742,  0.1769,  0.2477],
            [ 1.3023, -0.2966, -1.0399, -0.1898, -0.6120, -0.1456,  0.3640, -0.8430],
            [ 0.8625, -0.5721,  0.9383,  1.4773, -0.5402, -2.6367, -0.5783,  0.3802]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.2448, -0.6786, -0.4324],
            [-0.5941,  0.4276, -1.1157],
            [-0.1171,  1.4289, -0.6909]], requires_grad=True), Parameter containing:
    tensor([[1.4176]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.9268,  0.7141,  6.6421, -2.3355,  0.6248,  3.1972,  0.1441,  3.3282],
            [ 0.4764, -0.8357,  3.6284,  0.9747, -1.9574,  3.5067,  4.8177,  1.0789],
            [ 0.0485, -2.3235,  1.0680,  2.0355,  0.0337, -1.1147,  6.6914,  2.8258],
            [ 4.2833,  4.1262,  0.5280,  2.6701,  0.7930, -3.0069,  4.5338,  1.8156],
            [ 3.8375,  1.0428, -0.3300,  0.6240,  4.4000, -0.7236,  3.0774,  0.6700],
            [-0.9029,  4.1224,  3.4813,  0.9306,  1.0855,  0.1091, -1.8715,  1.7984],
            [-1.5449,  6.0979, -1.1101, -0.6905, -0.6618,  3.5222,  0.8285,  3.0431],
            [-0.4017,  1.3721,  0.7302, -0.5052,  3.6658,  0.3607,  1.3088,  2.1644]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1192, -0.9620,  3.3268, -1.3901, -0.6731, -0.5700, -0.1440,  1.2187,
             -0.3708, -0.3061],
            [-0.6401,  0.4160, -3.3998,  2.3021, -2.2401,  2.6462, -0.6868,  0.0421,
              0.0651, -1.0738],
            [ 1.0641,  0.9858, -1.6379,  3.2049, -0.1041,  0.2717,  1.1326, -1.0483,
              0.6867, -1.5313],
            [ 1.0797, -3.2934,  1.2882, -3.2919,  0.0400,  0.2472,  3.2454, -0.6989,
              0.8380, -1.2215],
            [-2.6894,  4.0102, -1.4747,  1.1429,  0.6101,  0.6059, -1.6480, -3.5101,
              3.0465,  1.0042],
            [ 0.0338,  1.4378, -0.1500, -0.8745, -0.8373, -1.5776,  0.0397,  1.2165,
             -1.4552,  3.5215],
            [ 0.6441, -3.0689,  2.4170, -2.8712,  2.4866,  2.1835,  0.6433,  0.6167,
             -4.0166,  1.5323],
            [ 2.7169, -3.1701,  0.5610, -0.5944,  0.1017,  2.4256,  2.1877, -0.7100,
              1.4487, -1.0769],
            [-1.2939,  1.5166, -3.0624,  1.5970, -3.5369,  3.9233, -2.2264, -0.7777,
              0.1394, -0.7550],
            [-0.2531,  3.1796, -2.5925,  0.7856, -2.5793,  1.9605, -0.9505,  2.3399,
             -0.5848, -0.2252]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.076 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
