.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.6733,  7.9564,  9.8477,  5.9817,  8.1085],
            [ 2.7554,  7.4410,  7.5229,  9.8273,  5.7636],
            [ 9.0891,  3.7432,  3.3156,  7.1279,  3.7618],
            [ 4.4789,  1.6776,  3.4968,  4.1897,  4.1747],
            [11.8291,  8.2653,  9.0043,  6.4284,  1.2600],
            [ 4.4789,  2.1101,  8.3364,  3.3591,  4.1747],
            [ 9.0891,  6.6597, 11.8410,  8.6639,  3.7618],
            [ 2.7554,  8.9753,  1.0960, 14.4820,  5.7636]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2295,  1.5053, -0.7920,  0.9250, -0.2541,  1.2038, -0.3742, -1.0447],
            [-0.1276,  0.6879,  0.4203,  1.6456, -0.1853,  0.1410,  0.9885,  1.3332],
            [-0.8498, -0.2982, -0.8143, -1.2797,  0.7658, -0.0308, -0.6599,  0.4387],
            [ 0.9111,  0.2269,  0.5209, -0.3453, -0.0435,  1.4320, -0.7770,  0.8157],
            [ 0.7463,  0.2854, -0.2452, -0.0076,  1.6332,  0.8410, -1.1482, -0.5273],
            [ 0.7287,  0.7891,  0.7359, -0.4243, -0.3344, -0.0891,  0.0086,  1.3524],
            [ 1.2303,  0.0434, -0.8453,  0.4968, -0.8793, -1.3783, -0.2439, -0.2496],
            [ 3.0494, -0.4999, -0.7114,  1.2572, -1.5561, -0.7520, -0.8446, -0.1027]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4261, -0.1220, -0.6129],
            [-2.1272,  0.3195, -1.0244],
            [ 0.1995,  0.2322,  1.1445]], requires_grad=True), Parameter containing:
    tensor([[1.5352]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.5140e+00, -2.4909e+00,  2.3780e+00,  1.6522e+00,  5.4733e-01,
              1.5370e+00,  2.4872e+00, -8.3557e-01],
            [ 9.5987e-01,  4.8949e+00,  2.4345e+00,  6.9774e+00,  1.6008e+00,
              3.2358e+00,  2.8064e+00,  3.9874e+00],
            [-9.2038e-01,  2.1983e+00,  1.4909e+00, -3.7851e+00, -3.4473e+00,
              8.7084e-01,  1.2444e+00,  3.8934e+00],
            [-1.6016e-01,  5.8741e-01,  4.9184e-01,  2.4608e+00, -4.0614e-01,
              3.8160e+00,  1.6119e+00, -1.4060e+00],
            [ 3.3825e+00, -8.1506e-01, -1.7246e-01,  3.4315e+00,  4.6836e+00,
              1.1125e+00, -1.1728e+00,  1.2072e+00],
            [-2.5601e+00,  1.1845e+00,  3.4763e+00,  1.4436e+00,  2.7535e+00,
             -6.6347e-03,  2.8995e+00,  1.3391e+00],
            [ 2.3471e+00,  6.3815e-01,  4.3054e+00, -7.8620e-01, -2.7993e-01,
              4.2142e-01,  1.7938e+00, -7.1440e-02],
            [ 2.6757e+00,  3.4573e+00,  3.3011e+00, -1.0520e+00,  9.9470e-01,
              2.7569e+00, -2.5809e-01,  4.3118e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.2248, -1.3633,  0.8744,  1.7295, -1.8035,  0.3788, -0.5783, -0.0558,
              1.8839, -0.1000],
            [-1.2764,  6.9566, -5.3424,  2.8331,  0.9420, -2.3254,  7.5461, -2.5087,
              4.0626,  0.2567],
            [ 0.7139, -1.6549,  0.2416, -3.9952,  0.8420,  0.1209,  0.4105,  1.9747,
             -2.2158, -0.4014],
            [ 1.3271, -0.7742,  0.0819,  1.2269,  0.9761,  0.1331,  3.4530, -5.8751,
             -0.8076, -2.6620],
            [-3.1017, -1.5356, -3.6476, -3.5691, -0.9176, -2.5706, -3.2422,  1.7826,
             -2.2196,  2.7375],
            [ 0.6747, -0.6350,  1.3431,  7.0287,  1.1285,  5.4029, -0.7724,  1.0642,
              1.4063, -0.0758],
            [-0.8064,  0.6444, -0.7353,  0.1317, -3.2926, -3.8548, -2.8272,  1.6265,
             -0.9458,  1.7468],
            [ 1.8038,  1.9245,  2.0408, -0.5540,  2.2372, -0.0770,  1.7514,  1.9510,
              0.0095, -1.5040],
            [-2.1553, -1.1333, -3.9571, -3.4226, -2.4930,  2.7771, -1.3919,  0.3084,
              0.4058, -0.6418],
            [ 0.1903,  0.3245,  1.4023,  1.0013,  1.3992,  0.8725,  0.1236, -1.6798,
              0.0351,  0.4717]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.323 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
