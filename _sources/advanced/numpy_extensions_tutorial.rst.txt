.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.9449,  3.8621,  8.9420,  7.5285,  7.0300],
            [ 2.1120, 16.5152,  3.6847,  4.4960,  8.9371],
            [ 5.6765,  2.2735,  7.1324,  3.0036,  6.8829],
            [ 2.8226,  6.2163,  8.7948,  1.2385, 11.9329],
            [ 3.3850,  6.9106, 10.1126,  5.9704,  4.8826],
            [ 2.8226,  3.9529,  0.5136,  4.8023, 11.9329],
            [ 5.6765,  5.4877, 11.4864,  1.0562,  6.8829],
            [ 2.1120,  9.7051,  4.9651, 13.9091,  8.9371]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4660,  0.9013, -0.2065, -1.3327,  0.4207, -0.5647,  0.7542, -0.0377],
            [-0.0466, -0.2768, -1.5362,  0.5100,  0.9749, -0.7664, -0.5615, -0.4306],
            [-1.4310, -0.9951, -1.9927, -0.4869, -0.3445,  1.0875,  0.5549,  1.8078],
            [ 0.5190, -0.1537, -0.3698, -1.4561,  0.5240,  2.1139, -0.1311, -1.6133],
            [-0.1366, -0.8432,  1.1825, -0.3266, -0.2622,  0.0409,  0.3820, -1.1789],
            [-0.4580,  1.0096, -0.2374,  0.6824, -0.7468, -0.2581, -0.4357, -1.2766],
            [ 0.4887, -0.8312,  0.3655,  0.0726,  0.6367, -1.6362, -0.0501, -1.7375],
            [ 0.5347,  2.2233,  0.1809, -0.0569,  0.3664, -0.6994,  0.5702, -1.4782]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0510,  2.0579,  2.1289],
            [-0.7463, -0.2182,  1.1515],
            [-1.1083,  0.3291, -0.8564]], requires_grad=True), Parameter containing:
    tensor([[1.1816]], requires_grad=True)]
    Output from the convolution:  tensor([[  7.7926,   6.2977,   4.7189,  -2.2647,  -0.4824,   4.5889,   8.3247,
              -4.2348],
            [ -1.1157,   6.4283,   6.6978,   0.0350,  -6.6513,  -0.8059,  -3.7056,
              -1.2684],
            [  1.3838,   1.9132,   6.7145,   7.6571,   7.5552,   2.0501,   2.5403,
               6.8726],
            [ -1.0152,   7.1470,  -3.1472,   0.3999,   6.0017,   4.2908,   1.7411,
               5.3626],
            [  1.8597,  -5.2520,  -4.0305,  -4.1441,  -4.0174,  -3.4126,   4.2865,
               2.3875],
            [  0.2167,  -7.3583,  -8.3939, -10.5763,  -3.1493,  -2.0904,  -1.1916,
               4.8094],
            [  2.4938,   1.8517,   4.0407,  -3.6932,  -6.0962,   1.6876,   6.9962,
               4.9672],
            [  5.8929,   5.4132,   3.8049,   1.1691,  -1.5269,   1.7257,   5.8079,
               4.7359]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0253,  0.9867,  2.4346,  2.6168,  1.0955, -0.7095,  1.0398,  4.3145,
              2.8282,  0.1535],
            [-0.2587, -5.1138, -5.2912, -0.0240,  1.9809,  2.3887,  1.5435,  1.6103,
             -0.8700, -2.0687],
            [ 1.1596, -2.9241, -4.2433,  5.1140,  4.6728,  1.6571,  3.3560,  2.6052,
              0.2576,  0.8637],
            [ 3.4919, -0.1803,  2.0470,  2.4141, -1.6871, -2.3837, -0.6939, -1.6956,
             -2.9946,  1.1313],
            [ 1.3435, -3.2525, -0.0383, -1.3496, -9.0856, -3.9928,  0.4339, -4.8832,
             -0.8853, -3.1044],
            [-0.2176, -2.1946, -1.6985, -1.9601, -2.6713,  1.2582,  1.8735,  3.6461,
              1.7454, -1.3329],
            [ 0.5251, -0.5696,  1.8840, -2.2744, -2.0285,  4.9244, -5.1629,  0.6062,
             -0.6653, -0.4995],
            [ 0.6123,  6.0539,  4.1484,  0.8710,  0.5227, -4.4089,  2.9593,  0.3148,
             -4.4266, -2.8917],
            [-1.2263, -0.2801,  3.4929, -1.0214,  2.3630, -0.7702, -1.2140,  4.3064,
             -0.4215, -1.1356],
            [-2.6424,  1.6629, -3.6373,  2.3305, -0.8811, -0.7480,  1.4589,  0.0345,
              0.0355,  1.0955]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.095 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
