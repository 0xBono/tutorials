.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[16.9898,  3.7213, 11.0648, 11.4445,  1.0684],
            [ 4.7795,  6.3775,  5.8237, 10.6110,  2.6924],
            [ 5.2034, 13.4382,  6.7943,  9.2097,  7.2826],
            [ 5.9570, 10.0839, 11.4570,  3.6147, 10.3241],
            [ 4.2977,  4.5241,  6.3570,  0.9908,  8.1037],
            [ 5.9570,  8.1536,  5.7269,  7.0776, 10.3241],
            [ 5.2034,  8.3068,  1.8445,  8.7067,  7.2826],
            [ 4.7795, 21.1376,  7.3133, 10.2297,  2.6924]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.0428, -0.8387,  0.5190, -0.4518,  0.1120,  1.3459,  2.3286,  0.8398],
            [ 0.7142, -0.7388, -0.7376,  0.1964,  0.1216, -0.2871,  0.8322,  1.6824],
            [-1.2869,  1.0455,  1.8828,  0.2104, -0.5839, -0.1817, -0.9970,  0.8179],
            [-0.1713,  0.9800,  1.1927, -0.0821,  1.8262, -1.8877, -1.6072,  0.9234],
            [ 0.7405,  0.1111,  0.3604, -1.4710, -0.3047, -0.0621,  0.6610,  0.8009],
            [ 0.2030, -0.3347,  0.9913,  2.3717,  0.5944,  1.5998, -0.3589, -1.0681],
            [-0.5448, -1.6208,  0.7321,  0.7084,  0.5147, -0.0260, -0.2446,  0.1863],
            [-1.0747, -1.3131,  0.8557,  0.5717, -1.4168,  2.4334,  1.0639,  2.5676]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.0830,  0.5881,  1.3102],
            [ 1.0728,  0.9139,  0.9215],
            [ 0.7185, -0.6723,  1.6025]], requires_grad=True), Parameter containing:
    tensor([[-0.6414]], requires_grad=True)]
    Output from the convolution:  tensor([[  3.0682,  -5.8298,  -6.8189,  -3.0062,  -4.7715,   1.6667,  -4.5259,
              -2.4785],
            [ -2.0960,  -3.8561,  -7.1650,  -2.3048,  -3.8152,  -1.3018,  -1.7613,
              -3.5197],
            [ -2.6226,  -3.0086,  -3.6740,  -0.1653, -10.0729,   0.5263,  -2.7695,
              -0.9115],
            [ -1.4161,  -0.2302,  -0.6551,   0.5586,  -0.7150,  -3.2932,   1.5151,
              -1.2597],
            [ -0.7181,  -4.4540,  -2.4455,   1.6049,  -2.2399,   2.4525,   0.0170,
               0.5836],
            [ -3.7386,  -4.5126,  -0.8537,  -2.2085,   2.2489,  -2.2201,   2.7137,
              -4.8093],
            [ -5.3664,   1.2592,   0.1626,   0.5025,  -2.3081,   0.2143,  -0.3151,
               0.9731],
            [ -4.4188,   2.6291,  -4.0922,  -1.3134,  -7.2465,   3.6404,  -4.1078,
               3.4499]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.6383, -0.6495,  0.3823,  0.5998,  2.4948, -0.5690,  1.3915, -0.4816,
              0.2707, -1.6818],
            [-1.1548, -1.6574,  2.9550,  1.8068,  3.6563,  0.3948, -0.5174, -1.3121,
             -2.4588, -1.2693],
            [-1.4760,  1.4632,  1.2742,  1.7372,  8.5364, -0.2751,  1.8148, -1.9292,
              2.0049, -2.7041],
            [-2.7667, -1.2006,  0.8991, -0.2567,  4.2002,  1.2594,  1.9715,  1.8809,
             -0.9484,  0.2334],
            [-2.7395, -0.7357, -2.0649, -0.3939,  4.9420, -1.8956,  2.3596, -1.6854,
              1.1736,  0.3479],
            [-0.1001,  1.2900, -0.2090,  0.5253,  3.2222, -2.1714, -1.0726, -2.7158,
             -2.2869,  1.0592],
            [ 0.9069,  1.1047,  2.3475, -0.8395,  2.9949, -3.1691, -1.1416, -1.5243,
             -4.8826,  1.2586],
            [ 1.8499, -0.3166,  4.5322, -4.5052,  2.7432, -1.3752, -0.7822, -1.1239,
             -2.6121, -0.5016],
            [ 1.0922,  1.6007, -1.1636,  0.2926, -0.6218, -1.2444,  2.0903, -0.9161,
             -3.0372,  0.4117],
            [ 0.9309, -1.3067,  2.7356, -2.4063,  2.8034, -3.5377,  2.0272,  0.2800,
             -0.2778, -0.9205]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.232 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
