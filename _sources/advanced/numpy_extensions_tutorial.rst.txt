.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.8231, 11.3532,  7.0645, 16.3427,  7.6394],
            [ 1.7560,  7.9099,  3.5106,  2.8508,  6.9095],
            [ 9.8190,  7.7210,  2.9865,  5.8996,  6.2619],
            [ 4.4726, 13.6676,  7.9229, 16.0805,  1.8342],
            [ 6.5414,  3.8651,  8.9658,  2.9300,  4.9857],
            [ 4.4726,  9.9575,  0.8724,  2.3174,  1.8342],
            [ 9.8190,  1.8855,  8.0076,  4.7324,  6.2619],
            [ 1.7560,  4.9994,  7.4026,  3.0753,  6.9095]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.3502e+00, -6.9008e-02, -4.9458e-01, -3.3626e-01,  7.6178e-01,
             -5.7986e-01, -1.2761e+00, -9.2598e-01],
            [ 1.2166e+00, -1.4141e+00,  1.4578e-01,  5.7439e-01, -7.3897e-01,
              2.6575e+00,  1.2677e+00, -8.2028e-01],
            [ 2.3765e-01,  6.8879e-02, -2.1393e-03, -1.9919e+00, -1.0669e+00,
              5.8364e-01, -1.1785e+00, -4.2573e-01],
            [-1.1405e+00, -7.9995e-01, -1.4827e+00, -2.2682e-01, -1.5020e+00,
              6.8287e-01,  1.0833e+00,  9.2032e-01],
            [ 9.2577e-02, -2.0334e+00, -8.0463e-01, -4.4450e-01,  3.8471e-02,
              2.2977e+00, -4.5383e-01, -2.6825e-01],
            [ 6.2653e-01,  9.1200e-01,  4.7835e-02,  2.9108e-01,  1.7424e-01,
              1.0583e-01, -1.0777e+00,  3.2113e-01],
            [ 2.2873e-01, -9.4411e-01, -7.6652e-01,  6.9819e-01, -5.8325e-01,
              1.1304e+00, -5.8744e-01,  6.2496e-02],
            [-1.2525e+00, -1.2203e+00, -7.9603e-02, -5.6884e-01, -1.6339e-01,
              9.2249e-01, -8.5131e-01,  2.4856e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7036,  0.2957, -2.1223],
            [ 1.4032, -0.4374,  0.6159],
            [ 0.0437,  0.4620, -0.3769]], requires_grad=True), Parameter containing:
    tensor([[1.1773]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.1521,  3.2526,  7.2191,  4.3594,  0.8159,  0.4285,  1.6325, -1.5474],
            [-1.0987, -0.4217,  0.7686,  2.3026,  6.6372, -2.4827, -0.1394,  1.0186],
            [-0.7697, -1.3272,  3.0503,  5.4374,  0.7284,  0.3593,  0.4682,  2.2073],
            [-3.9400,  0.7920, -3.9156,  4.7999,  4.9178,  3.0448,  2.4821,  0.3087],
            [ 1.4737, -3.2623,  0.9144,  1.6718,  5.4687, -0.4140, -3.5233,  2.1326],
            [ 4.0791,  3.9336, -0.7196,  0.6871,  2.0428, -0.5548, -2.4705,  2.2062],
            [-0.3311,  1.1749, -2.4935,  7.4114,  4.8249,  0.9352,  0.1803, -1.2757],
            [ 2.7630,  1.0021,  0.1961, -1.2067,  6.2982, -1.7134,  0.0354, -0.0842]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5763, -0.4231,  1.7844,  0.9116,  0.8363, -0.7469, -2.8938,  0.9236,
             -1.3552,  0.0477],
            [-2.7864, -0.4823,  5.0353, -0.3641,  3.5410, -0.2730, -5.0482,  1.9485,
              1.9953, -0.5349],
            [-3.3210, -0.3549, -0.9332,  4.1406,  3.0210, -1.9749, -0.1854,  1.7226,
             -3.0064, -0.8774],
            [ 0.9003, -3.3217,  0.0359, -3.3619,  0.9251,  4.1039,  1.9074,  0.0101,
             -1.6415, -1.2247],
            [ 2.2177, -0.7817, -0.6467, -1.1781, -0.4758,  1.2996,  1.7940,  3.5690,
              3.4188, -1.1645],
            [ 0.0199,  1.1335,  1.3525, -4.4787, -3.4359, -2.3683, -1.5533,  3.5034,
             -0.2289, -1.9514],
            [-0.5628,  2.8556, -0.1820,  0.5961, -1.4810, -2.8817,  3.4272,  0.7052,
             -1.9097, -0.8152],
            [-0.0439, -0.6066,  2.2226,  5.9012, -4.6521, -1.0244, -4.8214,  2.5808,
              3.7391, -2.8877],
            [-0.3374, -1.9317,  3.2175, -0.0586,  3.5300, -1.8758,  0.6669,  2.3682,
             -1.4082,  0.6197],
            [-0.0106, -0.1782, -0.5244,  1.4480, -0.0118,  0.3767, -1.0315, -0.2304,
              1.0369, -0.5072]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.622 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
