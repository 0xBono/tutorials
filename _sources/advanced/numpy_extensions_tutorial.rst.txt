.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.4753,  4.2078,  5.3174,  7.2816,  0.5710],
            [ 2.9993,  5.1368,  8.7578,  2.2390,  7.8674],
            [12.6781,  8.9392, 14.3723,  6.7255,  7.0828],
            [ 9.6836, 10.7380,  8.7540,  1.2966,  4.1011],
            [ 0.7479,  7.9173, 10.6000,  6.3112,  5.7130],
            [ 9.6836,  2.5599,  7.7201, 10.5346,  4.1011],
            [12.6781,  4.8851,  3.1640, 11.8230,  7.0828],
            [ 2.9993,  6.1086,  6.3466, 14.9064,  7.8674]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8189, -0.2406, -0.1096,  0.2224,  1.0294,  0.0701, -0.9519,  0.7333],
            [ 0.2279, -1.1605, -0.4719, -0.9370,  0.1406, -1.3851,  0.5548,  1.0278],
            [-1.3571, -0.0511,  0.8468, -0.3199,  2.0347, -0.7499, -0.4099, -0.3159],
            [-1.4291,  1.0146,  2.0188,  0.4480, -2.1180, -0.6062, -0.0586,  0.5135],
            [-0.1532,  0.7330,  0.9037, -0.5241,  1.1398,  2.2768, -0.5878,  0.5111],
            [ 0.6530, -0.9442,  0.2989, -0.3280, -1.8394,  1.8442, -1.1221, -0.0205],
            [-0.6476, -1.2416, -0.9764,  0.9312, -0.0227, -1.4005,  1.2843, -0.3639],
            [-0.7451,  1.0612,  0.9650,  0.8297,  1.0541,  1.2352,  1.4820,  0.1601]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1198,  0.0629, -1.5661],
            [-0.2746,  0.7126,  1.0504],
            [ 1.1134, -0.3367, -0.6381]], requires_grad=True), Parameter containing:
    tensor([[-0.3245]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.9915, -0.2076, -1.6913, -3.8926,  1.6686,  1.5772, -2.4613, -0.2318],
            [ 1.5407, -2.1497,  2.5040,  3.2641,  1.4393, -1.1434, -1.4070, -3.5416],
            [ 0.8029, -1.5105,  0.8598, -1.4136,  2.9985, -0.7919, -1.3815,  4.4123],
            [-1.3815, -1.1908, -2.9331, -1.5856, -0.8034,  1.9855, -1.2400, -3.9357],
            [-0.5238, -3.4102, -3.1922,  0.6393,  2.5499, -0.2524,  1.2972,  1.9303],
            [-0.1370,  0.3947,  1.1017, -1.6275,  1.7496, -0.3518, -2.8084, -1.8968],
            [-1.3405, -2.1868, -0.6908, -1.6462, -3.2708,  0.9691,  2.6581, -0.3722],
            [ 1.7554,  1.8045, -1.7282,  1.7595,  6.1567, -0.3898, -0.6795,  3.1238]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0380,  0.0989, -0.6066, -0.9925,  2.0240, -1.6079,  0.0806,  0.4569,
              1.0196,  2.9709],
            [-0.1923,  0.1116,  2.7659, -1.8536, -2.8489, -0.6038, -0.1149,  0.7080,
             -3.9601, -2.1781],
            [ 0.3124, -0.3420,  1.3599,  1.8384,  1.8636,  0.6466, -2.8321, -0.6544,
              0.7317, -0.4899],
            [-0.2872, -0.5524, -0.9350,  2.8425, -0.7150, -0.1236,  0.6090, -0.9064,
              1.5014,  1.8895],
            [-2.6821,  2.1869,  0.9745, -2.4866,  0.9073, -1.8447,  3.8120, -0.4595,
             -0.0950, -2.7417],
            [ 0.2590, -0.9425,  1.4239, -3.6207,  1.4789,  2.2315,  0.2334,  0.5033,
             -2.6716, -0.4327],
            [ 0.6412, -0.7591, -1.9309,  3.6014,  1.3919, -1.8272, -3.6615,  0.8928,
              5.6940,  2.2057],
            [-0.8586,  3.4727,  1.2189, -6.6206, -2.1579,  2.7499,  4.6209, -0.0660,
             -5.9268, -3.9486],
            [ 1.1694, -0.7278, -1.7076,  3.9281,  2.0955, -1.7832, -3.3929,  0.0119,
              3.7434,  2.1025],
            [ 0.0926,  1.6464, -0.1112, -1.3504, -0.7751,  0.3685,  1.6539,  1.0914,
             -1.2181, -0.8690]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.214 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
