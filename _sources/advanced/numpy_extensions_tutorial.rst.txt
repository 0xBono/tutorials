.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.1332, 10.1580,  2.1982,  6.5168, 10.4613],
            [14.9038, 16.8963,  5.2466,  9.0200,  4.0744],
            [ 3.6237,  4.0787,  0.1916,  1.2067,  6.1446],
            [ 9.3647,  1.2059, 11.5298,  7.8338, 10.6873],
            [ 1.2847,  7.1517,  8.3583,  1.8051, 11.6904],
            [ 9.3647,  9.5576, 13.0246, 14.2020, 10.6873],
            [ 3.6237, 12.2164,  5.6497, 10.8573,  6.1446],
            [14.9038,  4.8767, 19.5422,  7.2443,  4.0744]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2339, -0.6005,  0.4876, -0.0596, -0.7768, -1.4345, -0.8573, -1.2217],
            [-0.1136,  0.7751, -1.7021,  0.3395, -0.0672, -0.2913, -0.9303, -0.2163],
            [-0.3828, -1.0811, -0.8209, -1.3853,  0.1966, -0.7174, -0.7692,  0.0216],
            [-2.3897,  1.2891, -1.3640, -1.4549, -0.0336,  1.2615,  2.1483, -0.5483],
            [ 0.0096,  1.5148,  0.5027,  0.3663, -0.0092,  1.0727, -0.3208,  2.1883],
            [-1.6698, -0.0866,  1.5714,  1.5877, -0.5584,  1.5605,  0.5186, -2.1955],
            [-0.7340, -0.7725, -0.3557,  2.5755,  0.6051, -0.5431,  2.5863, -0.9429],
            [-0.0174, -0.3943, -0.7763,  1.8750,  0.9616,  0.0996, -2.4700,  0.5826]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-2.0398,  1.8005,  0.7332],
            [ 0.0868, -0.4852, -0.6908],
            [-1.9519, -1.5780, -0.2956]], requires_grad=True), Parameter containing:
    tensor([[-0.8899]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.4953,  0.8980, -3.0948, -3.6101,  7.6477,  5.5732, -5.2494,  1.1570],
            [-5.3545, -8.1315, -2.9967,  3.7127, -4.7612, -0.9306, -1.1205, -2.6118],
            [-1.8114, -1.2624,  4.3986, -1.0094, -2.0158, -2.0637,  2.3989, -6.3908],
            [-1.9816, -3.2743, -1.9165, -1.1202, -2.3832,  0.4060,  4.7381, -1.0457],
            [ 1.9149, -6.7096, -8.0996,  1.5162,  3.6368, -0.2105,  2.6800,  2.1660],
            [-0.9128,  2.4231, -0.2907,  1.3178, -4.5009, -3.4194, -3.4787,  0.7234],
            [ 4.1857,  1.2692, -1.2372,  0.5216, -1.3085,  4.7302, -1.1713, -0.2769],
            [ 3.0650, -5.2782, -4.8417, -1.2479, -1.8975,  3.0699,  3.9494, -3.6472]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0580,  1.0997, -0.9490,  0.3681, -1.0845,  4.3125, -4.7824,  0.1509,
              3.1401,  0.7650],
            [ 2.1741, -0.4730, -0.9578, -0.5754, -4.3636,  2.5905, -3.0423,  1.7484,
             -1.9131, -1.0680],
            [-0.5474,  1.5890, -3.1255,  1.0338, -0.2878, -3.0154, -0.7600, -7.0533,
             -1.6698,  0.6103],
            [ 3.6783,  3.6785, -0.0125,  2.2929,  3.4449,  5.1507, -4.3546,  2.7888,
             -1.6981, -1.5238],
            [ 0.7646,  5.4350, -0.6327,  3.7986, -0.9231,  1.9617,  3.5615,  0.1017,
             -0.9619,  0.7418],
            [ 0.1619,  2.3064,  0.7599,  1.4912,  1.2887,  4.5174,  1.2342, -2.0014,
              6.8215,  2.2779],
            [ 1.0041,  1.3697,  2.1177,  3.3284, -1.2840,  1.6674, -7.1959,  1.3751,
              3.8299, -0.4714],
            [-3.2490, -1.7403, -1.5645, -0.8644, -1.1511,  0.5463,  1.8342, -3.8002,
             -6.0385, -1.7912],
            [ 0.7042, -0.5549, -0.5721,  2.5462,  3.3002,  4.0042, -3.3557, -7.4814,
             -3.6223, -0.5016],
            [-1.7839, -1.9943,  0.5091,  2.5323,  0.7878, -1.4506, -1.8481, -0.9236,
             -0.1908, -0.0121]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.601 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
