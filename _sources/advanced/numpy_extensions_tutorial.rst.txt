.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.2135,  7.2406, 11.8984,  2.7338,  2.4676],
            [ 5.5027,  6.9142, 12.6554, 11.8444,  2.5382],
            [ 3.3204,  8.7286, 12.5115, 13.3034,  9.3206],
            [ 1.1895,  9.7782,  4.0602, 16.6831,  2.4171],
            [23.7377,  7.9386,  4.4128,  1.6277,  7.2998],
            [ 1.1895,  6.1511,  7.9215,  8.9224,  2.4171],
            [ 3.3204,  3.6055,  7.6302, 15.8242,  9.3206],
            [ 5.5027,  3.4980,  6.3936,  3.3916,  2.5382]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.6156, -0.0357,  0.0211,  0.0457, -0.3298, -0.3204,  1.8352,  0.5884],
            [-2.3862, -0.5044, -0.9138, -1.0428,  1.8825, -1.4086,  0.0649,  0.3527],
            [-0.0663,  2.6158,  0.3519, -1.1511,  1.0592, -0.4452, -0.2131, -0.4693],
            [ 0.0062, -1.8793, -0.5164,  2.2008, -2.6101,  0.1881,  0.0172, -1.2774],
            [-0.1926, -0.9199,  1.8652, -0.2984, -0.8498, -1.0905,  0.8783,  0.8513],
            [-2.0304,  0.6137,  0.7061, -0.9095, -1.4733, -1.5772, -0.0244, -1.4732],
            [-0.4706,  0.5932,  1.4176,  0.0588, -0.9310,  1.3059, -0.1679, -0.3894],
            [-0.3255,  0.2907,  0.6543, -0.4543, -0.7774, -0.3257, -1.9695, -0.0734]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4192,  0.2974,  0.3843],
            [-0.6875, -0.2563,  0.1519],
            [ 1.4007,  1.9947,  1.1211]], requires_grad=True), Parameter containing:
    tensor([[-0.0093]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.0017,  0.2907, -1.7740, -1.2707,  0.9984, -0.2992, -2.9725, -2.5723],
            [ 5.6181,  1.0700, -2.5642, -2.8760, -3.7427,  2.1000,  5.6113,  0.9478],
            [ 0.1782, -2.9801, -6.2571, -2.6637,  1.3719,  1.5460, -6.5355, -5.1966],
            [ 3.5668,  0.7658,  1.5232,  1.5995, -0.2150, -0.7659,  0.7385,  1.8956],
            [-1.6088,  0.1185, -3.5025, -2.5316, -2.3765,  1.0065, -4.0087, -4.8194],
            [ 2.6384, -2.4576,  0.9723, -1.1240,  2.5196,  1.6733,  3.3156,  7.0935],
            [ 0.6717,  2.9450, -2.3731, -1.4158, -2.5789, -1.6633, -4.1370, -4.0166],
            [ 4.0814, -1.4808,  0.6093,  0.1513, -2.1142, -2.6680,  1.6085,  0.4805]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.0509,  1.3201,  1.6953, -0.0816, -1.6076, -1.3927, -0.8259, -3.1758,
             -0.6544, -0.7887],
            [-2.9487, -2.8426, -1.2710, -1.8307, -1.6427, -0.9231,  0.9600,  2.7875,
              1.2362,  0.0243],
            [ 0.7713,  1.4729,  1.2362,  0.1120,  1.1055, -2.8619, -1.8652, -5.1465,
             -4.0795, -2.3798],
            [-1.1823, -3.9799, -1.5766, -1.6058, -7.8893, -7.8724, -3.9150,  4.4060,
              3.3681,  1.3292],
            [ 0.0889, -4.9468, -4.5208, -6.1969,  0.0841,  3.3100,  6.3272,  2.8995,
              0.4320, -0.0362],
            [-3.8674,  1.0609, -0.8317, -0.7293, -7.0074, -6.8389, -7.8990, -2.2520,
              1.0608,  1.4054],
            [ 2.6901,  1.1027, -3.2262, -0.7795,  1.7488, -1.7283,  2.0621,  8.7581,
              4.6094,  2.2466],
            [-3.6562, -4.2096, -2.7712, -1.7864, -8.6690, -6.8290, -2.0217, -1.0271,
             -0.7805,  0.6943],
            [-0.4920, -0.8579, -3.4289, -6.1815, -3.9704, -1.0737, -2.2500,  1.0370,
              4.8787,  3.2103],
            [-0.5398, -1.0688, -2.4830, -1.8816,  0.6775,  2.1563,  1.6469,  2.1876,
              2.1975,  0.9674]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.576 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
