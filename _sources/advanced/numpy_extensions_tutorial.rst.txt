.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.6306,  7.2905,  8.6234, 16.5635,  6.4965],
            [ 4.7554, 15.5406,  2.6138,  3.1384,  4.7380],
            [ 7.2383,  5.0152,  4.7055,  7.9625,  7.5442],
            [ 0.7291,  5.0171,  0.5877,  6.7605,  6.4469],
            [ 7.0899, 11.7962,  8.0689,  1.6751,  6.2761],
            [ 0.7291,  9.7517, 11.3575,  1.3509,  6.4469],
            [ 7.2383, 17.4974,  0.9455, 10.7994,  7.5442],
            [ 4.7554,  8.2044,  2.0039,  5.8758,  4.7380]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.3863,  0.1380,  0.0465, -0.8047,  0.8719, -0.1875, -2.0047, -0.3942],
            [-0.6916, -0.3591, -0.6566, -1.3078, -0.0414,  1.2593, -0.4944,  1.0782],
            [ 1.9765,  1.0369,  1.6895,  0.0661, -2.3669, -0.5582, -2.5883,  0.4180],
            [ 0.6131,  0.0122,  0.5644,  0.1145,  1.1189,  0.7624, -2.0565,  0.2719],
            [-0.5206, -0.6575,  0.7998, -1.5257,  0.2229, -0.8751,  0.7269,  0.1630],
            [ 0.4307, -0.8410, -0.7907,  0.1759,  0.0978,  1.2271, -0.7785,  1.3799],
            [-0.0521,  0.4112,  0.5908,  0.1478,  0.4407,  1.6903, -0.6819, -1.1932],
            [-0.2301, -0.7219,  0.5141,  1.7266,  1.3985,  0.6883, -0.8261, -0.9086]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.2286, -0.0187,  1.6911],
            [-0.7139,  0.4911, -0.0782],
            [-1.3260, -1.0949,  0.0623]], requires_grad=True), Parameter containing:
    tensor([[0.0066]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.8375,  2.9961,  6.1595,  4.3640,  0.1634,  0.0538, -2.2027,  1.6879],
            [-1.5864, -0.8413,  2.3614,  2.3465,  1.0100, -1.9704,  1.7411,  0.3957],
            [-1.0037,  1.0638, -7.9399, -1.8027,  0.1727, -1.9127,  1.3176, -5.5361],
            [ 3.1422, -0.0166,  3.0966,  3.0581, -3.8977,  3.9009, -3.1594, -2.6301],
            [ 3.1129,  7.2594,  0.3599,  4.9752, -2.4062, -0.2452,  1.0231,  2.2647],
            [-3.6147, -2.1448,  1.5622, -2.8722,  3.4871,  1.6116, -1.2241,  2.1130],
            [-0.0593, -0.0352,  3.4650,  6.2330,  0.5462,  2.6763, -8.0966, -1.9114],
            [ 2.1997, -0.2295, -2.2278, -2.6880,  1.3526, -1.3266,  4.1251, -0.8604]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 8.0056e-02,  1.5177e-01, -3.0199e-01,  2.7499e+00, -1.8954e+00,
              3.0752e+00, -4.1822e+00, -9.4683e-01, -3.3105e+00, -5.3701e-01],
            [ 4.4440e-01,  1.7731e+00,  2.2276e+00,  8.8326e-01,  2.5371e+00,
              3.5772e-01,  6.1817e-01,  9.5330e-01,  9.8735e-01,  9.1949e-01],
            [-1.4758e-01, -1.8092e+00,  2.0054e+00, -2.1060e+00, -6.6190e-01,
              2.3662e+00,  6.5867e-01,  2.4578e+00,  1.6642e+00, -4.6498e-01],
            [-2.1995e+00, -1.5800e+00, -4.9235e+00, -1.8535e+00,  2.9239e+00,
             -1.8455e-01, -4.3880e+00,  3.4690e+00, -1.2188e+00,  1.0006e+00],
            [ 1.3182e+00, -6.2612e-01, -1.0592e+00,  1.1886e+00,  1.0276e+00,
              2.3245e+00,  1.8520e-01, -2.2749e+00,  1.2276e+00,  3.0979e-01],
            [-2.8961e-03,  1.8657e+00, -2.4520e+00, -1.4974e+00,  6.4632e+00,
             -4.9103e+00, -5.8831e-01, -5.3749e+00,  5.3903e-01, -1.2303e+00],
            [-1.0462e+00, -1.7442e+00, -4.6331e-01, -3.1687e+00, -3.2076e-01,
              4.1815e+00,  1.2076e+00, -7.4905e-01, -8.5112e-01, -3.2145e+00],
            [ 8.6986e-01, -9.9923e-01, -1.3936e+00, -3.4299e+00, -6.8492e-02,
              2.7521e+00,  6.8566e-01,  4.5922e+00, -1.8974e-01,  2.2330e+00],
            [ 1.8124e+00,  2.5002e+00, -1.5917e+00,  1.3604e+00, -1.7493e+00,
             -3.9697e+00,  2.4989e-02,  1.7978e+00,  2.7389e+00, -2.1946e-01],
            [ 1.2207e+00,  3.0086e+00, -6.3126e-01, -9.5537e-01,  2.1395e+00,
             -3.4376e-01, -1.0850e+00, -1.5596e+00, -1.3798e+00,  7.8360e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.107 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
