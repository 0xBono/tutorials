.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.9226,  6.3469,  4.8813,  8.1814,  3.2829],
            [ 7.1644,  6.0789,  3.7858,  6.2823,  2.3036],
            [ 2.1042,  5.3961,  1.2794, 13.0508,  7.8831],
            [11.0937,  6.8053,  4.2092,  2.3636,  4.6894],
            [11.4806,  9.2691,  2.2958,  4.5882, 15.1742],
            [11.0937, 12.0654,  7.2496,  4.1519,  4.6894],
            [ 2.1042,  5.0917,  4.5153, 12.4071,  7.8831],
            [ 7.1644,  4.8029,  7.4481,  1.6412,  2.3036]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6201,  1.2492,  0.1847,  0.1239,  0.0867,  0.1096,  1.1102,  0.8024],
            [-1.7598,  0.3906,  1.2448, -0.1645, -0.7275, -1.7156, -0.7443, -1.5144],
            [-0.3217,  0.1188,  0.1551, -0.9676, -0.8834,  0.8660,  0.2944,  2.7816],
            [-0.0698,  0.3642, -1.0339, -0.1114,  0.0208, -1.3441,  0.0184,  0.1927],
            [ 0.1153,  1.5583, -0.9675,  0.3124, -0.2498, -0.5960,  1.4346, -0.5523],
            [ 0.6704, -0.1076,  0.6561,  0.4233,  1.0294, -0.4443,  0.2737,  0.7467],
            [-0.1177,  0.6641,  0.8596,  0.5245, -0.4537,  0.8934, -2.1302,  1.0770],
            [-0.5317,  0.0276,  0.5124, -0.3272,  0.8176, -0.0871,  1.2068, -0.6912]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1078,  1.7433,  0.1402],
            [-0.6975, -0.3350, -2.5179],
            [ 1.1188,  0.6094, -1.2193]], requires_grad=True), Parameter containing:
    tensor([[-0.9305]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.4944, -9.0523,  7.8058, -0.2695, -0.3908, -5.1276, -0.6289,  0.2005],
            [-2.5592, -3.6776,  8.7640, -4.9065,  1.6711, -0.7941, -1.6376, -6.4828],
            [-3.5460, -6.8251,  1.2740, -4.8568, -2.0939, -0.5048,  2.8516,  1.6127],
            [-0.8389,  0.8572,  5.5819,  0.8709,  0.9198, -0.5814, -7.7031,  0.6965],
            [-4.3083, -2.6078, -0.4364, -6.9062,  1.8370,  3.2081, -1.9448, -3.4160],
            [-0.4069,  5.0124,  4.6093,  3.7483,  4.2497, -1.8529,  1.4960, -0.4159],
            [-2.5949, -0.7084, -6.9376, -0.6412, -3.7450, -2.9195,  1.1790,  0.6759],
            [ 1.7570,  3.2088, -4.2163,  4.6190, -7.7066, -2.6588, -3.5939, -2.8157]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.0331,  -0.6633,   2.0362,   0.0574,   0.9026,  -0.9819,   0.7566,
              -1.8294,  -2.1665,  -0.1612],
            [  0.1350,   0.3907,   3.0294,  -2.8057,   0.7873,  -1.3799,   3.7491,
               1.0707,   4.6065,   2.9961],
            [ -0.6823,  -2.7169,  -4.4419,  -5.7699,  -3.3403,  -1.7487,  -3.2090,
              -3.2475,   0.9805,  -0.2770],
            [  1.8392,   5.1379,   6.2193,   5.8883,   1.7657,   6.1421,   0.2540,
               2.9252,  -2.9227,  -3.0024],
            [ -2.3589,  -3.6709,  -0.0463,  -2.7086,  -5.3429,  -1.2274,   2.0140,
               2.0703,  -5.6487,  -2.9663],
            [  0.9499,  -0.4819,   3.7370,  -4.0570,   1.0885,  -1.8683,   1.2668,
              -1.6348,  -0.2526,   2.3135],
            [  0.2156,   0.4037,   0.2807, -10.8602,   2.1324,   4.2336,   4.9551,
              -3.8225,  -0.7991,   4.2420],
            [ -0.2521,   2.3400,  -0.7088,  -2.8431,   3.8345,   1.4063,   3.8736,
              -2.8620,  -5.0319,   1.6929],
            [ -0.0855,   0.6374,  -1.2286,   3.3848,   4.5006,   0.4599,   1.7461,
               2.0684,   4.5135,   5.0740],
            [ -0.0137,  -1.9477,  -2.1325,   1.3513,   0.9497,   0.2189,  -1.7009,
              -3.2853,   0.9446,   2.3031]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.068 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
