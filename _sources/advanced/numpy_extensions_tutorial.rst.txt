.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.4067, 14.6560,  3.1773,  3.1043,  2.0064],
            [16.0132,  3.3193, 16.3694,  2.3995,  0.7026],
            [ 9.2001,  5.4610,  3.0854,  9.5122,  5.8476],
            [ 8.4429,  1.3246,  0.4942,  7.5647,  5.1500],
            [17.5557,  5.7300,  8.8079,  7.4022, 14.4927],
            [ 8.4429,  7.9613,  8.8100, 10.7362,  5.1500],
            [ 9.2001,  8.1785,  4.2776, 10.4044,  5.8476],
            [16.0132,  6.6863,  9.2087,  5.9961,  0.7026]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8598,  1.6025,  1.5008, -0.8385,  0.5391,  0.0877,  0.6483,  1.5114],
            [ 0.2796, -1.0643,  0.8896,  0.5050,  0.1131, -0.5061,  0.2386,  2.2225],
            [ 0.7161, -0.8147, -0.8936,  0.1359, -1.4583, -0.6009,  0.9055,  0.6812],
            [-0.2481,  0.9399, -0.4684,  2.5398,  0.0076, -0.4349,  1.3573,  0.9413],
            [-0.6679, -1.7299,  0.3026, -2.7253, -0.5494, -0.2831, -0.5894,  0.0182],
            [ 0.5548,  1.6500, -1.8989, -1.2237, -0.3417,  0.3958,  1.1247,  0.4761],
            [ 1.1062,  1.1036,  0.2461, -1.0720, -0.5933, -0.3828,  0.2618, -0.6023],
            [ 1.6058,  1.3362, -0.2025,  1.6104,  1.5140,  1.2518, -0.6596,  1.4754]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1723,  1.7957,  2.0043],
            [-0.8428, -0.1476,  0.5602],
            [-0.3923,  0.0387, -0.9893]], requires_grad=True), Parameter containing:
    tensor([[0.4106]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.2467,  3.3294,  0.3970,  0.8514, -3.6042, -0.6457, -2.7544,  2.8306],
            [ 4.9403,  1.3956, -2.1755, -3.6464, -3.0401,  0.7207, -0.4921, -1.3045],
            [ 4.5779,  1.0020, -1.4349, -2.9949, -3.7788,  3.5184,  4.3676,  5.9169],
            [ 2.0316,  2.3605,  3.1133,  0.4036,  0.2895, -0.1255,  1.6876,  8.7165],
            [ 3.4716,  3.6423, -0.0741, -3.2824,  1.5137, -1.6375, -2.0298,  0.6276],
            [ 3.5562,  6.7928, -0.5449,  0.7413,  2.2964, -4.5685, -2.0895,  0.0676],
            [-0.3308, -1.0692,  1.4535,  2.1009,  2.6880, -4.0611, -1.1798,  1.0493],
            [ 0.4101, -2.4990, -2.2641,  2.4399, -1.2117,  1.1290,  1.8268, -3.3879]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2510,  2.6160,  2.8554,  0.6699,  1.1462,  2.5814,  0.9369, -2.4356,
             -1.3116, -0.1575],
            [-1.5049,  2.9720,  0.7943, -6.2931, -4.9746,  2.3488,  0.6089, -2.3237,
              3.4529,  1.8297],
            [-1.8272,  0.5586, -3.3743, -4.0392, -6.1318, -2.3995, -5.0911, -5.8469,
              1.6561,  1.6260],
            [-0.3801,  4.6522,  2.3225,  3.8744,  2.2447,  2.7968, -2.2507, -2.0358,
             -4.3551, -2.7162],
            [-1.2259,  3.2472,  5.6905,  2.7546, -3.8544,  0.3853,  1.6612, -0.3659,
             -7.8491, -6.5618],
            [-1.9262, -1.7789, -3.0527,  3.2906,  3.6119, -0.4382,  1.3587,  5.8982,
              3.3153,  0.3808],
            [-0.3077,  1.5128,  0.6231, -1.3682, -5.1208, -1.7153, -3.9514,  0.5480,
              6.1467,  4.9869],
            [-0.1163, -2.8950, -0.6458,  4.0387, -4.7229, -2.4883, -1.2269, -3.3708,
             -1.3884, -1.1610],
            [ 0.6801, -0.3838, -0.7103,  0.6484,  1.6335,  1.9883, -0.1462,  0.9906,
             -0.9633, -1.3668],
            [ 0.4331, -0.0710,  1.0014,  0.5400, -0.5131,  1.8426, -0.6489,  1.0243,
             -0.2026,  0.6383]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.013 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
