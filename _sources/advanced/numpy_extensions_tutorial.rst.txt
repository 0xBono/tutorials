.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.2688,  5.4542,  5.1704, 12.0709,  4.5727],
            [10.8013,  8.1040,  4.0769, 11.1717,  3.8485],
            [ 5.4252,  4.6845,  7.3751,  7.5105, 18.2236],
            [ 4.3326,  3.7818,  4.3540, 11.9114,  5.0250],
            [15.0900,  6.7157,  1.2906,  8.3062,  9.0955],
            [ 4.3326,  2.3314,  5.4653,  6.6693,  5.0250],
            [ 5.4252,  4.7282,  9.4247, 12.2263, 18.2236],
            [10.8013,  4.6413,  6.7877,  5.1833,  3.8485]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9266,  0.1927,  2.1451,  0.0592, -1.1245,  1.0463,  0.2710, -0.3600],
            [-0.3852,  1.4515,  0.0700,  0.5272,  0.0802,  0.0463,  0.9286,  0.1618],
            [-0.0703,  2.4317, -0.2200,  1.6231,  1.2524, -1.1184,  1.1548,  0.4231],
            [ 2.4988, -1.5074, -0.0894, -0.5833, -0.5798, -0.2385,  1.0527, -0.9812],
            [-0.3040,  0.8672, -0.4865,  0.7737,  0.3136,  0.8392,  0.0373, -0.5067],
            [-0.8297, -0.0615, -1.3673,  1.4935, -1.7015,  0.6498, -0.0191, -1.9886],
            [ 0.0149, -0.0788, -0.3797,  0.6462,  1.8428, -0.1160,  0.4388, -0.5023],
            [ 0.1072, -0.9230,  0.0084, -1.6335,  0.8918, -1.1213,  0.2959, -1.1641]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2211,  0.2342,  0.1519],
            [-0.7793,  1.9501, -0.2093],
            [-0.9909,  0.2871, -1.2096]], requires_grad=True), Parameter containing:
    tensor([[-0.3945]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.4793, -1.3424,  3.5762, -3.2050, -0.8470,  1.8355, -5.4914,  4.1737],
            [ 0.6994, -3.1859,  3.2220, -3.8162, -0.6109,  6.2022, -4.9370,  0.6213],
            [-2.8151, -3.6752, -0.1297, -0.4099,  1.2790, -2.1866, -0.3850,  0.5206],
            [ 3.5202, -4.1401,  2.0381,  0.7295,  2.0398, -3.6515, -2.7380, -0.1304],
            [-2.1265, -2.5910,  2.9613, -0.9265,  2.0113, -1.5987, -1.2343,  1.1410],
            [ 0.1150, -0.5377, -1.4096,  2.8239, -1.4677, -1.1205,  0.3738,  0.7126],
            [-1.5971, -0.0884, -2.2091, -0.1903, -0.9689,  0.1771,  1.6622, -0.9942],
            [ 0.0192,  0.3686, -5.2427, -0.3087,  2.1114, -0.3173,  3.2749,  2.6241]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-4.7597e-02,  1.4608e-01, -6.1771e-02, -6.6846e-01,  9.3765e-01,
              1.6742e-01,  1.0005e-01, -7.6087e-01,  4.0967e-03,  1.8440e-01],
            [-2.0147e-01,  7.4934e-01, -5.2075e-01, -2.5181e+00,  6.9587e+00,
             -3.3889e+00,  4.2622e-01, -4.5270e+00,  2.7553e+00, -2.5460e-01],
            [-3.8044e-01,  2.6215e-01,  1.3590e+00, -5.0251e+00,  6.6912e+00,
             -8.2878e+00,  2.7796e+00, -1.3195e+00,  2.3094e+00, -1.5493e+00],
            [-3.9749e-01, -1.1440e+00,  4.4458e+00, -1.2979e+00,  6.2014e+00,
             -2.6930e+00,  1.9993e+00, -4.7945e-01, -1.2144e+00, -7.2087e-02],
            [-1.1251e+00, -4.6775e-01, -4.6153e-01, -1.1454e+00, -7.1029e-01,
              3.0757e+00, -8.3952e-01,  2.1441e+00, -1.4908e+00,  1.0304e+00],
            [-2.2237e+00,  5.4054e+00, -3.4866e+00,  4.1909e+00, -2.5781e+00,
              3.6281e+00, -2.1155e-02,  5.7012e-01,  1.9247e+00,  1.5325e+00],
            [-1.4766e+00, -2.8107e+00, -4.5426e+00,  1.5524e+00, -1.9649e+00,
             -2.5848e-01, -1.0986e+00, -8.6580e-01,  3.6108e+00, -1.1745e+00],
            [ 2.2543e+00, -2.4802e+00,  3.8707e+00, -3.0436e+00,  2.3359e+00,
              6.8746e-01, -3.2726e+00, -3.8226e-01, -6.3389e-01, -1.1748e+00],
            [ 1.4466e+00, -3.6643e+00,  1.4291e+00, -2.8700e+00,  8.4030e-01,
             -4.3206e+00, -1.8449e+00, -1.8734e+00,  3.1518e+00, -3.6106e-01],
            [ 1.4177e+00, -1.0907e-01,  2.0837e+00,  1.1791e+00,  2.6602e+00,
              1.3768e+00,  3.6842e+00, -9.2577e-01,  1.7655e+00, -2.1447e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.270 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
