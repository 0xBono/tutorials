.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.7218,  0.9223,  4.2654,  2.6731,  4.5057],
            [ 4.6646,  5.3602,  5.4337,  6.9799,  8.5031],
            [ 4.2576,  2.6060,  2.8943,  7.7421,  6.8112],
            [ 5.5798,  6.1287, 13.5833,  6.2354, 11.3988],
            [ 5.4868,  7.8635,  5.7314, 14.5158,  8.1086],
            [ 5.5798, 11.0267,  3.5775,  5.1371, 11.3988],
            [ 4.2576,  4.1889,  2.4029, 14.0971,  6.8112],
            [ 4.6646,  9.1582,  7.5583,  6.4203,  8.5031]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3453,  1.7755, -0.6670,  0.2280, -0.3911, -1.5440,  0.8859, -0.9073],
            [-0.3788,  0.0377, -0.6687, -0.0351,  0.8300, -0.7319, -2.5257,  2.1298],
            [ 1.3461,  0.0305,  0.6204, -0.1566, -0.9097, -0.5304,  0.0074, -0.1591],
            [ 0.6616, -0.1817,  1.1567,  0.4169,  1.5531,  0.1336,  0.0276, -1.1165],
            [ 0.1224, -0.8565, -2.5931,  0.3923, -0.8247, -0.2899,  0.7468, -0.0326],
            [-1.5130,  0.1269,  0.5659,  0.6348, -0.2950, -0.2429,  0.3753, -0.3425],
            [ 0.5560, -1.1918,  0.2817, -0.4531, -0.9663,  0.9246, -0.0210, -1.1824],
            [-1.2576, -0.5944, -0.7849,  0.2643, -0.7177,  0.4661, -0.4913,  1.8798]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1981,  0.4038,  0.3936],
            [ 0.9341,  0.5103,  1.2480],
            [ 0.0692,  0.9791, -1.6053]], requires_grad=True), Parameter containing:
    tensor([[0.6906]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.2001, -0.6471, -1.1361, -1.1181,  2.7208,  1.1459,  6.1421,  2.1392],
            [-0.6829, -0.1879, -1.5054, -3.0786,  1.4475, -0.5538,  1.1710,  2.0385],
            [ 1.1971, -0.9527,  2.6156, -1.1653,  1.0013, -2.1668,  4.0173,  2.6925],
            [ 2.0588, -2.8032, -2.0393,  6.1634, -0.7663,  4.5223,  0.7569,  2.7450],
            [-0.4755, -0.8346,  1.7419, -0.6936,  4.3974,  3.3936, -0.3995,  1.2982],
            [-0.0382,  1.1942, -0.9288,  2.8367,  1.4003, -2.1584, -1.0661, -0.2653],
            [-1.4875,  0.7850, -1.0869,  1.0770, -0.3653,  0.1890, -4.9836, -7.2758],
            [ 4.2697,  1.5389,  3.3943, -1.0556,  2.9322,  4.4124,  3.1493, -1.1264]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.0945,  0.7218,  0.2829, -0.7613, -0.0439, -1.5562, -2.3089,  0.2992,
             -0.1619,  0.4626],
            [-0.0981, -1.8153,  0.2421, -2.6541, -0.2439, -1.6519, -0.4821, -1.8988,
             -1.5109,  1.0691],
            [-1.9296, -2.1375, -4.2582, -4.6451, -0.9878, -0.3413, -0.0735, -1.2118,
              3.8067, -3.6409],
            [ 0.2113,  1.6916, -0.3184,  4.9238, -2.0199,  4.7755,  0.5794, -2.4680,
             -3.1428, -0.5755],
            [-0.4148, -1.0375,  2.6787,  3.4591, -1.5884,  2.0112, -3.1661,  0.6104,
             -2.9538, -0.0315],
            [-1.7116, -0.8194, -1.8513, -8.7736, -2.4617, -3.5388, -3.6818, -2.1778,
             -5.3434,  3.0692],
            [ 1.9105,  1.7811,  0.8251,  1.6525,  0.2343, -4.1069,  6.9132, -1.2346,
              4.7944,  1.9383],
            [ 1.0870,  0.3258,  5.0531, -0.1500, -1.9704,  3.6129, -0.5655, -0.1118,
              3.3202, -2.1207],
            [-0.5372,  0.7827, -2.9181, -3.9135,  0.2415, -0.1006,  1.4312, -0.4169,
              0.1293, -0.6792],
            [-0.0509, -0.7980,  0.1061,  2.3227, -1.1158,  0.7537, -1.1595,  1.9641,
             -1.7293,  0.4563]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.300 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
