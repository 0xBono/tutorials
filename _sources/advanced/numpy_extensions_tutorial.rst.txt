.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.9428,  4.7833,  6.3616, 11.6138, 15.2500],
            [ 3.7287,  8.4563,  1.3748,  5.5208,  2.5719],
            [14.6904, 11.5696,  9.8849,  4.8962,  5.9517],
            [ 8.1288,  3.8381,  1.5778,  3.9846, 16.1807],
            [ 8.5615,  5.8526,  7.8675,  5.8073, 19.7042],
            [ 8.1288,  2.4922,  5.3818, 10.0896, 16.1807],
            [14.6904,  2.0314,  9.3769,  9.9193,  5.9517],
            [ 3.7287,  5.9282,  3.3504,  7.0719,  2.5719]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1553, -1.7342, -0.5684,  0.7428, -0.2994, -0.8261, -0.2866, -1.2100],
            [-1.1755,  0.3394, -1.1185,  0.8467, -1.7373,  1.3577, -1.2869, -0.5753],
            [ 0.3873,  1.7108,  0.5825,  0.8049,  0.2464,  0.8773,  0.6172, -0.5818],
            [-0.8673,  0.0980,  0.1362,  0.1867,  1.1675,  0.2087,  0.4334,  0.0683],
            [ 0.1493, -0.1558, -0.8389,  2.1153,  1.3372,  0.6721, -1.2877,  0.5486],
            [ 0.2126,  0.1308, -0.8477,  0.8323, -2.0547,  0.7925, -0.8745, -1.5824],
            [ 1.3142,  0.9698,  0.7612, -0.9922,  0.5209, -0.7166,  0.9492,  0.2877],
            [ 0.4876,  0.2825, -0.9418,  0.5964, -0.7942,  3.4054, -0.1320,  1.0961]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.7186,  0.5349,  1.2206],
            [-0.0794,  1.3071,  0.5120],
            [-1.8441, -0.1590,  1.7486]], requires_grad=True), Parameter containing:
    tensor([[-0.8675]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.5307, -2.6023,  3.6987,  0.0333, -2.3248,  0.4660, -1.0524, -2.6507],
            [-6.0123,  0.9619,  4.8958,  2.7741,  1.1973, -5.9659, -2.9403,  0.4884],
            [-2.9163, -5.0319, -2.9062,  3.9932, -0.4406, -4.3276, -1.1785, -4.6233],
            [-2.9352,  0.4919,  2.0085, -0.8112, -0.8192,  0.8855, -0.7166, -1.7880],
            [ 0.1169,  0.2339, -1.4827, -9.6769, -4.4897,  6.6672,  1.6434, -2.8805],
            [-5.2952,  1.7182, -1.2874, -4.6795, -6.1884,  2.5170,  1.5939, -0.9627],
            [-1.9850,  2.9655,  1.9877, -7.1936, -8.3422,  7.4122,  1.0050, -0.1690],
            [-2.5672,  2.8955,  1.5239, -9.7243, -5.1809,  7.5302,  2.0264, -3.9098]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.8949,  1.6954, -0.4515, -1.2579, -0.5163, -0.3505,  2.9018,  1.2262,
             -1.6025, -0.7528],
            [-0.3884,  2.9397, -2.7261,  0.2328,  0.6495, -1.1999,  2.9499, -0.1339,
             -2.0574, -0.4202],
            [-0.4521,  3.6318, -2.3589, -4.0743, -0.9123,  2.9688,  3.7835, -1.0386,
             -1.8603, -0.3250],
            [-0.3459, -2.1857,  0.4706,  4.3610,  0.6833, -5.3131, -3.4816,  1.5472,
              1.5463,  0.3247],
            [ 4.2782, -2.3055,  3.3273,  0.2457, -6.6115,  1.9379, -1.0240, -2.3332,
              1.9171,  1.2464],
            [ 1.6498, -6.6908,  1.8373,  7.9025, -3.7810, -4.4059, -3.8217, -0.6997,
              3.1305,  1.2012],
            [ 5.2142, -2.5327, -4.2333,  3.0335, -2.1496, -0.5299, -4.7425,  0.1035,
              3.8443, -0.6138],
            [ 1.1757,  2.2327, -3.7942, -3.0326,  1.4254, -1.6832, -1.0730,  1.0025,
             -0.2800,  0.7482],
            [ 1.2223,  2.6051, -1.9884, -3.1242,  3.0106,  2.1872, -3.0196,  2.0147,
              2.3826, -1.6470],
            [-0.4950,  1.6099, -0.0240, -3.4763,  0.5367,  0.5718, -1.3357,  1.3373,
              1.1108, -0.2874]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.581 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
