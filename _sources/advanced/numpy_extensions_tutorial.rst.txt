.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.3338, 10.3641,  4.3736,  8.7908,  3.6031],
            [ 5.8083, 10.5101,  3.3109,  9.8708,  2.9791],
            [ 9.0155, 13.1813, 12.3874,  7.5056,  5.3881],
            [ 2.8078,  9.0276,  1.9157,  2.8828,  3.4065],
            [ 6.2549, 10.0468, 10.5153,  7.1903, 12.8158],
            [ 2.8078,  8.2347,  4.1221,  3.2419,  3.4065],
            [ 9.0155,  1.5596,  7.0671,  7.9533,  5.3881],
            [ 5.8083,  9.1551,  2.1625,  2.7598,  2.9791]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2569,  1.4941, -1.0046, -0.7364, -0.7300, -0.1618,  0.0125, -0.8805],
            [-0.2540, -0.8111, -0.9333,  2.1959,  0.7236, -0.0543,  0.7018, -1.3814],
            [ 0.2529,  1.3798,  1.3999,  0.0591, -1.0059, -0.6989, -0.0988, -0.0718],
            [ 1.9764, -0.2262, -0.1668, -0.2045,  0.7674,  1.9395,  1.2545,  0.3917],
            [-0.7076,  0.3134, -1.6830, -0.2707,  0.3812,  1.9925,  1.2355, -0.3527],
            [-0.2206, -1.9169, -1.0136,  0.6821,  0.1251, -0.3896,  1.4278,  0.4683],
            [-1.4300,  0.2227,  0.6691, -0.2938,  0.6291,  0.2834,  0.0394,  0.5445],
            [ 0.4474,  0.0379,  0.0551, -0.9414,  1.1288, -0.1319,  1.7321, -0.1155]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3058,  0.6140, -0.0866],
            [-1.6159,  0.3674, -0.7936],
            [ 0.5412,  0.0808,  0.9646]], requires_grad=True), Parameter containing:
    tensor([[0.6925]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.0971e+00,  2.7780e-01, -1.9531e-01, -8.6566e-01, -1.0355e+00,
              2.5905e+00,  1.0076e+00,  1.0067e+00],
            [ 4.5913e+00,  2.5039e+00,  2.1134e+00,  4.6304e+00,  1.9465e+00,
              1.2996e+00,  3.1444e+00, -1.8575e+00],
            [-2.6579e+00,  1.1154e+00, -5.2705e+00, -1.1107e+00, -5.6622e+00,
              4.7875e-01, -4.1621e+00,  3.2138e+00],
            [-2.1896e+00,  4.7553e+00,  2.3510e+00,  1.3704e+00,  6.8932e+00,
              2.5670e+00,  2.2882e+00,  3.8589e+00],
            [-6.9038e-01, -8.1012e-01, -1.1839e-01, -1.3250e+00,  1.6167e+00,
              2.0658e+00, -3.2865e+00,  6.9416e-01],
            [ 2.1689e+00, -1.6391e-01,  2.4166e+00, -4.8231e-01, -8.1287e-01,
             -5.8130e-03, -5.1274e-01, -5.5657e+00],
            [ 3.0310e+00,  1.7362e+00, -4.5138e-01,  1.9207e+00,  4.3001e+00,
              9.4017e-01,  3.3027e+00,  4.3381e+00],
            [-2.8286e-01,  3.7437e+00, -2.6943e+00,  5.9424e-01, -1.2793e+00,
             -2.7398e-02, -2.6130e+00,  1.3783e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.5013e-02, -2.8489e-01, -1.7581e-01,  5.9951e-01,  1.3242e-01,
              6.8510e-01, -1.0820e-01,  5.4072e-02,  7.3164e-01, -9.7719e-02],
            [-6.6067e-02,  1.0388e+00, -1.2377e+00,  1.0408e+00, -2.3300e+00,
              8.0221e-01,  4.3016e-01, -1.1543e+00,  1.6452e+00, -1.0298e+00],
            [ 6.9224e-01, -2.3443e+00,  1.6479e+00, -1.2920e+00, -7.7308e-01,
              8.3338e-01, -5.0200e-01, -3.1587e+00, -5.3352e-01, -1.1004e-01],
            [ 1.5529e+00, -3.7366e-01, -3.5067e-03,  3.6448e+00, -1.2121e+00,
             -3.6432e+00,  4.5696e+00,  9.8795e-01,  2.7186e+00,  1.7086e+00],
            [-1.6312e+00,  1.7734e+00, -3.3423e+00,  2.0815e-01,  2.4825e+00,
              1.5023e+00, -1.3392e+00,  3.0391e+00, -1.8733e+00, -1.2036e+00],
            [-1.0681e+00,  7.9175e-02, -9.0956e-01, -2.4428e-01,  7.4997e-02,
             -2.0862e+00, -1.1621e+00, -4.4979e+00,  1.1590e+00, -4.5243e-01],
            [ 4.9938e-01,  7.0581e-01,  3.8654e+00, -3.8204e-01,  8.2358e-01,
             -1.5587e+00, -3.4834e-02,  1.8283e+00,  1.2348e+00,  2.1077e+00],
            [-2.1470e-01, -2.1154e+00, -2.2132e+00,  1.2294e+00, -4.2978e+00,
              3.1489e+00,  4.7818e-01, -1.0975e-01,  1.5446e+00, -1.2787e+00],
            [ 1.0088e+00, -6.9384e-01,  1.0229e+00,  1.7382e+00,  1.1837e+00,
              1.1970e+00,  4.2457e-01, -3.4372e-01, -4.4747e-01,  3.4396e-01],
            [-3.3423e-01,  3.1706e-01, -2.8623e-01,  2.5049e-01,  4.6563e-01,
             -1.2919e+00, -1.3670e-01, -6.8203e-01, -3.1280e-01,  4.7783e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.358 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
