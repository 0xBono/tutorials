.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.5597,  4.4368,  6.2622, 10.6066,  7.6330],
            [ 4.9469,  6.8589,  3.0718,  6.1546,  7.7552],
            [ 7.0539,  7.4610, 11.3890,  3.4455,  5.0802],
            [ 2.2019, 15.0101, 11.3158,  7.4561,  7.8568],
            [ 0.3087,  5.3038,  1.4628,  2.4000,  1.4705],
            [ 2.2019,  0.5784,  9.3097,  2.1631,  7.8568],
            [ 7.0539,  4.8607,  9.6360,  7.8027,  5.0802],
            [ 4.9469,  7.5676, 13.6884,  3.3401,  7.7552]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.0073, -0.1928,  0.3365,  1.6838,  0.3165, -1.7588,  0.3412,  0.9782],
            [ 1.6319,  0.3124, -0.5713, -2.4726, -0.2879,  0.0589,  0.4981, -0.6303],
            [-1.0333,  0.1506, -1.3657, -1.5416,  0.6864,  0.5063, -0.2995, -1.6763],
            [-0.0882, -0.0985,  1.1761,  0.2148, -0.7614, -1.9820,  0.3963, -0.5923],
            [-0.9235,  0.0588,  1.0746, -1.6030, -0.2904,  0.4858,  1.4184,  0.5457],
            [-0.4475, -0.4588,  0.5480,  0.7418,  0.1239, -0.5835, -0.1827, -0.4269],
            [-0.3697, -0.0939,  0.4893,  0.6228,  0.4578, -1.1242, -0.3532, -0.6447],
            [-2.2499,  0.9610, -0.4291,  0.7737,  0.9192, -0.7846, -0.2168,  0.4741]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3750,  0.4876,  0.0147],
            [-1.8136,  0.4213, -0.9462],
            [-1.6985, -0.6415, -0.7560]], requires_grad=True), Parameter containing:
    tensor([[-1.2132]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.2418, -0.4565, -1.3394, -1.8013, -0.1405,  0.4483,  1.2925, -1.0082],
            [-3.2179, -3.2781,  3.4479,  2.7531,  0.2566, -2.9831, -2.1365, -0.2522],
            [-0.2402,  1.1350,  1.0567,  1.2745, -0.2280, -3.2454, -0.6405, -0.4386],
            [ 1.7515,  0.3247, -1.9112, -0.5676, -3.4595, -1.8682, -0.0244,  1.5202],
            [-2.0573,  0.4291, -1.2315, -0.4531,  1.0518, -3.1439,  1.4171, -1.7425],
            [ 0.8288,  0.1383,  1.8964, -2.6758,  0.1024, -7.8275, -0.5881, -5.1101],
            [-1.0641, -0.6910, -3.6815, -3.7500, -3.5045, -8.0540, -2.5759, -3.7069],
            [-2.9828, -4.3610, -2.1701, -3.8407,  1.9163, -3.2689,  2.8251, -1.3314]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0566, -0.0148,  0.6624,  0.7069, -0.1729, -0.1189,  0.1847, -0.0628,
             -0.3174, -0.0098],
            [-0.2271, -0.6172, -1.8836,  1.2211, -0.4044,  0.9577,  0.9385,  2.8338,
              0.2681,  0.6532],
            [ 2.4995, -2.4215, -2.2189, -2.0988, -3.6048, -1.9431, -5.2044, -3.8824,
             -1.1143, -1.2123],
            [ 3.4918, -2.4231,  2.0906, -3.4570, -0.3656, -3.9152, -1.1404, -4.3604,
             -0.9573, -0.7824],
            [-0.9158, -1.3481,  2.1805, -4.8494,  6.0190, -3.0918,  6.4366,  0.7668,
              1.8814, -0.0491],
            [-1.1428, -1.3609,  1.6870, -3.7877,  1.3198, -5.3214,  0.4320, -1.3736,
             -0.4573, -0.2294],
            [-1.7931, -4.1375, -1.8655,  0.8140,  3.7547, -0.0189, -0.8459, -0.7050,
             -0.1218, -0.7302],
            [-0.6015, -0.4734, -3.8393,  1.2715,  1.5238,  1.2795, -2.3402, -3.7674,
             -1.9611, -1.8685],
            [ 0.3942,  1.6898, -1.6901, -2.5414, -3.0945, -1.5796, -5.1027, -1.4244,
             -2.5935, -0.5729],
            [-0.4218, -1.1368, -1.9148, -2.5055, -0.9747,  1.1650, -0.6014,  0.9138,
             -0.3675,  0.2850]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.183 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
