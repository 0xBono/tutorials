.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.7405,  8.7382,  4.7483,  5.4480, 15.1928],
            [ 5.6732,  7.3937, 10.0139,  9.8111,  5.8408],
            [ 3.4721, 11.9499,  5.1997, 12.2194,  5.7329],
            [ 7.7882, 13.8730,  8.0646,  1.2678, 12.7510],
            [ 1.7868,  6.5358,  8.2353, 12.6770,  4.4138],
            [ 7.7882,  1.9933,  4.8087,  6.6574, 12.7510],
            [ 3.4721,  8.9866,  8.8521,  9.0190,  5.7329],
            [ 5.6732,  5.8214,  8.7515,  9.8214,  5.8408]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1927,  2.7933,  0.0927, -1.4835,  0.4425,  1.0086, -1.5933,  0.7388],
            [ 0.3580, -1.7599, -1.8971, -0.4762,  0.8073,  0.5975,  1.4274, -0.7634],
            [-0.2401,  0.2057,  0.5975,  0.6064,  0.1068,  0.4651,  1.1111, -0.1253],
            [ 2.3230, -1.4462,  0.8620,  0.2611, -1.7787,  0.4512, -0.0304, -0.0763],
            [ 0.8063, -0.1775,  0.5049, -0.5720,  0.3663, -1.8123, -0.2915, -0.3339],
            [-0.6017,  0.3581,  0.0660, -1.0992, -0.5265, -0.7720,  0.8286,  1.1372],
            [-0.1259, -0.5127,  0.1088, -3.2323,  0.0450, -0.3553,  0.8325,  0.3538],
            [ 1.6234, -1.3798,  0.6405,  0.0249,  1.3944,  0.1254, -1.2264, -0.7158]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1862, -0.8464, -1.1350],
            [-0.2512,  1.4092, -1.6958],
            [ 0.9816, -0.9902, -0.2096]], requires_grad=True), Parameter containing:
    tensor([[-1.4373]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.1229, -6.7142, -0.8064, -2.1307,  1.9151, -4.2465, -4.7448,  1.4476],
            [ 3.5704, -1.8978, -7.2739,  3.1007, -3.7328, -1.1050, -2.3384,  3.0196],
            [-2.2094,  2.4477,  1.0487, -1.2866, -2.6433, -4.4157, -0.6396,  0.9493],
            [ 5.4163,  1.7142, -1.4619, -2.8553, -2.0847, -1.3156, -1.6907,  2.8200],
            [-0.4699, -0.4772,  2.5687,  0.0594, -4.7959, -0.9326, -0.5602,  1.4146],
            [-3.8471,  2.4455, -2.8984, -2.3492,  7.2950, -7.3171,  0.2885, -2.9894],
            [-4.5126, -0.3134,  1.7690,  2.4492, -1.9162,  0.1071, -4.1000,  1.6714],
            [-5.0336, -0.4568,  3.8964, -2.4019, -2.9645,  2.8291, -2.1247, -8.9645]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0988,  0.6667,  0.5461,  0.8792,  2.5124,  0.4676, -3.8637, -2.5612,
              0.3199,  0.3344],
            [ 1.6530, -1.2301,  0.2599, -1.4149, -0.2966,  0.4968, -0.1793, -1.8743,
             -1.6861, -0.9946],
            [-1.4571,  3.2402, -2.2302, -0.9660,  1.7361,  1.3520, -4.3466,  1.1232,
              2.9172, -2.9378],
            [-0.7585, -1.5283,  4.8714, -0.9559, -2.2845,  0.4195,  4.5607,  0.8727,
              2.3095, -2.4810],
            [ 1.1656, -2.9188, -0.4418,  4.3614, -2.9578,  2.1925,  1.3471,  0.6433,
              1.1503, -1.9859],
            [-0.7964,  1.4671, -2.7468,  2.6419, -1.7949, -0.4956,  2.7736, -0.5375,
             -2.7779, -0.9099],
            [-0.7964,  1.4462,  2.5573, -4.3202,  0.5058, -0.9045,  1.5655, -1.8173,
             -0.9376, -0.7590],
            [ 1.5080, -2.0240,  1.5282, -1.0328,  0.8579,  1.1021, -4.3752,  0.0922,
              0.2005, -0.2045],
            [-1.2001,  2.5295, -0.3996, -0.4459, -2.2270,  3.4277, -3.1727,  0.9634,
             -0.5181,  0.2509],
            [ 0.2917, -0.1573,  0.0611, -1.3285,  2.8023, -1.8319, -0.1014, -0.1829,
              0.1582,  0.0362]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.615 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
