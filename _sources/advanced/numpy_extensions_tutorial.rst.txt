.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.7152, 10.2944, 19.4281,  6.6400,  2.9788],
            [ 5.7669,  1.7109,  2.5370,  2.5699, 10.5004],
            [ 6.1571, 12.3469,  6.2010,  4.0984, 10.5004],
            [ 6.6470,  8.8473,  8.7344,  6.7621, 15.6340],
            [30.9206, 10.1872,  3.2467,  5.1893, 13.2394],
            [ 6.6470,  2.4634,  8.3029,  6.0226, 15.6340],
            [ 6.1571,  6.7031,  3.9021,  2.8942, 10.5004],
            [ 5.7669,  1.8159,  1.1632,  7.6804, 10.5004]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.1853,  0.6607, -2.7472,  0.4389, -0.2376,  1.4485, -1.2308, -0.6833],
            [ 1.5016,  1.5651,  0.4430, -0.1895,  1.9124, -0.1271,  0.2736, -1.2060],
            [-2.2759, -0.7718, -0.2267,  1.0475, -0.6863,  0.5209, -1.0897, -1.1845],
            [ 1.3849,  2.7489, -0.4422,  0.3703,  0.4669,  0.9135, -0.0676, -0.3832],
            [ 0.2901, -0.2357, -0.4243, -0.6523,  0.3668,  2.1254, -0.6906,  0.3153],
            [-0.2477,  0.7445,  0.9921,  0.8893,  0.7897,  1.4257,  0.2247, -0.3242],
            [ 0.8433, -0.4189,  0.3964, -0.0265,  0.6544, -0.0267, -0.3626, -3.0542],
            [ 2.1024,  0.6735,  1.2391, -0.2747,  1.0371,  1.3962,  1.8641,  0.1217]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.5830, -1.0033,  1.9073],
            [-0.1630, -0.7227,  0.1215],
            [ 0.1977,  0.8281, -0.4868]], requires_grad=True), Parameter containing:
    tensor([[0.2431]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.8637,  2.0425,  1.3960, -3.9396,  2.0309,  2.6385, -4.9377,  2.6828],
            [-0.4177, -0.3223,  0.4304,  2.5501, -5.7950,  0.4890,  1.6046, -0.2783],
            [-1.2760,  0.5168,  0.0802,  5.9677, -3.0680, -2.0543,  2.7515, -1.4006],
            [-2.5725,  1.5403, -1.0717, -6.2978,  5.7023,  0.5960, -1.6896, -2.4543],
            [-1.2782,  4.3845, -0.2024,  0.4752, -2.3072, -0.2191, -1.7577,  1.6431],
            [-1.3400, -1.3978,  0.6214,  1.2991, -0.6408,  1.2033, -1.6927, -0.3322],
            [ 3.6164, -1.1536, -0.8745, -0.8944, -1.8120,  1.4327,  0.1775, -1.7904],
            [ 4.6654, -1.4843, -2.2355,  1.6821, -0.4790,  2.9939, -1.3106,  0.4827]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1870e+00,  2.5296e+00, -5.0165e+00,  1.8716e+00, -3.9649e-01,
             -9.7425e-01, -4.3222e-01,  1.5353e+00, -2.4768e+00, -6.9768e-01],
            [ 2.4543e-02,  1.7938e+00, -1.9744e+00,  1.1404e+00, -9.5454e-01,
              4.2441e-01,  1.0881e+00,  2.6620e+00,  3.5865e-01,  1.8702e+00],
            [ 8.5557e-01, -3.2041e+00,  5.2927e+00,  2.1717e-01, -2.5762e+00,
              1.7970e+00, -1.2936e+00, -5.3431e-01, -7.4693e-01,  4.9881e+00],
            [-3.4847e-03, -2.3091e+00,  1.9501e+00, -3.9609e-01,  2.3900e+00,
             -3.7108e-01, -1.4835e+00, -1.7001e+00, -4.2127e+00, -3.8558e-01],
            [ 1.0796e+00,  3.1230e-01, -1.0004e-01,  2.3241e+00, -3.3023e-01,
              3.9458e+00,  2.6788e+00, -1.2951e+00,  2.9672e+00, -3.6582e+00],
            [ 1.5466e-01, -1.0280e+00,  1.8041e+00, -1.6757e+00,  8.7179e-02,
              2.4824e+00, -4.0423e-01,  1.0667e+00,  2.1427e+00,  4.2891e-01],
            [ 1.4130e-01,  1.4562e+00,  3.7076e-01, -1.8672e+00,  3.0613e+00,
             -2.0783e+00, -2.6911e-01, -1.4381e+00, -2.7161e+00,  2.7593e-02],
            [ 5.7344e-01, -5.1058e-01,  4.2084e-01,  2.6683e+00, -2.4138e+00,
             -3.0588e-01,  5.4400e+00, -2.3760e+00, -3.8935e-03, -6.0752e-01],
            [-1.5520e-01, -6.1111e-01,  8.6010e-01,  1.5022e+00, -1.1195e+00,
             -5.9661e-01, -1.8870e-01, -1.9229e-01,  3.1356e-01,  1.3378e-01],
            [ 1.6136e-01,  6.8021e-01, -5.8012e-01, -6.6700e-01,  1.4716e+00,
              1.5374e-01, -1.8147e+00,  5.1473e-01, -8.5695e-02,  1.0994e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.601 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
