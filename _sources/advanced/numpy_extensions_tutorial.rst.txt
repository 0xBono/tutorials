.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.4892,  5.8539,  8.1231,  2.7418,  6.6745],
            [ 2.2950,  5.5313,  8.9787, 11.3094, 10.0324],
            [ 5.1831,  6.5616,  6.2047, 12.0729,  4.9902],
            [ 3.7295,  9.5485, 10.1147,  7.4679,  3.5849],
            [12.2474,  4.6753,  4.5338,  6.9413, 14.8822],
            [ 3.7295,  9.8085,  7.2054,  4.4703,  3.5849],
            [ 5.1831,  4.3473,  6.1177, 12.0929,  4.9902],
            [ 2.2950,  4.2720,  7.2951,  1.4194, 10.0324]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5882,  0.0226,  1.0033, -0.3124,  1.8364,  0.6780, -0.2506, -1.8271],
            [-0.0307, -0.7781, -0.9087,  0.0304, -0.0210,  1.2965, -1.2286, -0.4993],
            [ 0.0648, -1.2192,  0.7254, -0.2095,  0.2608,  0.7032, -0.2436, -0.1374],
            [-0.3837,  0.7657, -2.0261,  0.3301, -0.1290, -0.6978, -0.9620, -0.4971],
            [-0.3352, -0.0693,  0.0936, -0.1873, -0.5334,  0.9904,  1.3586,  0.7004],
            [-1.7224,  1.2522, -0.2620, -1.2012, -0.1786,  0.6878, -1.8951,  0.1673],
            [-1.0928,  0.5551,  0.0417, -0.1356, -0.7840, -0.0553,  0.5083, -0.3591],
            [-0.1939,  0.1995, -1.6260,  0.2413, -1.8550, -0.5906,  3.0997, -0.2516]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0470, -1.8435, -0.6380],
            [-0.8015, -1.8364,  0.2109],
            [ 1.1448,  0.6007, -0.3795]], requires_grad=True), Parameter containing:
    tensor([[0.8470]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.1264, -0.5222, -1.0976,  3.6997,  0.7912, -0.3401,  0.7241, -0.0983],
            [ 3.4743, -0.2880,  2.2137,  0.8723,  0.2565,  3.1143,  3.7442,  0.5565],
            [ 0.6775,  1.7215,  4.1728,  3.1519, -0.1611,  1.4765,  0.6662,  2.7179],
            [ 5.3405, -1.9538,  2.6322, -1.6885, -3.7880,  1.3882,  2.8677,  2.3105],
            [ 2.9102, -3.2999, -0.5309,  2.6382, -1.3031, -4.7826, -0.7312,  1.7199],
            [ 3.1335,  1.7214, -3.4622,  3.3105,  0.5573, -2.7931, -1.9145,  0.6641],
            [-2.2860,  3.2050,  0.5791,  4.4075,  2.2947, -2.1494, -1.5131,  4.5791],
            [ 0.3692,  5.0858,  1.3994, -2.4043,  0.7455,  0.8010, -1.2243, -0.8366]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0186, -0.7222, -0.0186, -0.1177, -2.7285, -2.1377, -0.3081,  0.4025,
              0.9606,  0.2912],
            [-0.2797,  0.8941,  3.4805, -2.3114, -6.7263, -0.2019,  1.6137,  0.1767,
              0.7601, -0.0195],
            [ 1.1262,  4.5219,  2.7489, -2.5044, -0.9143, -0.3845,  1.0740,  0.4885,
              0.8773,  0.2916],
            [-0.1316, -0.4496, -1.5144,  4.0767,  1.8427, -0.6727,  2.6510,  0.2520,
              0.9308,  0.3517],
            [-1.1688, -1.0655, -1.2011,  2.3967,  5.1983,  4.4912, -0.3948,  0.8578,
             -0.7670, -0.7168],
            [ 0.5894,  3.3452, -2.4778, -6.4523,  3.1101,  9.1121,  3.9731, -2.6170,
             -4.8535, -0.2889],
            [ 0.2224,  4.9885,  0.5382, -0.7040,  0.4928, -0.5454, -2.9208, -0.7583,
             -1.9666, -0.4404],
            [-0.0219,  0.0321,  3.1748,  4.1775, -1.8280, -2.1136,  0.9674,  3.3391,
              1.7891,  0.3057],
            [-2.1020, -0.8275,  1.4031,  1.4373,  3.2316,  1.6045,  2.5337,  1.2797,
              2.1029, -0.3761],
            [ 0.7890, -0.5361, -1.5446, -1.4871, -0.1981, -0.5530, -1.1580, -1.0203,
             -0.4564,  0.3850]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.111 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
