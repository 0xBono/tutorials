.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[18.9149,  6.1822,  7.1838,  4.5632,  3.0547],
            [ 3.6351,  6.7087, 10.0711,  6.8642, 15.6470],
            [ 1.0926,  9.0604,  7.2623,  5.3633,  3.9379],
            [ 7.0982,  2.7869,  9.8840,  5.5191,  3.3201],
            [ 6.9130,  4.9946,  5.3617, 10.8926,  1.0753],
            [ 7.0982,  3.1742,  7.7911,  5.2633,  3.3201],
            [ 1.0926,  4.2158,  8.4490,  4.2504,  3.9379],
            [ 3.6351,  6.3255,  4.7065,  7.0327, 15.6470]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7812, -0.5570,  0.6085,  0.7365, -1.6392, -0.1499, -1.7839,  1.5464],
            [-1.0853,  1.4596, -0.6101, -0.8098, -0.4448,  0.5398, -0.9607,  0.1199],
            [-1.0694, -0.9648, -0.9753, -0.3570,  0.1752, -0.9203, -1.1051, -0.4421],
            [-1.6781,  0.3517,  0.1752, -0.3541,  1.9423,  0.8229, -0.3344, -1.2256],
            [-0.2392, -0.2580,  0.9941, -1.7795, -0.9510, -0.0093, -0.8981, -1.2178],
            [ 0.7297, -0.5772,  0.0831, -0.2784,  0.0502, -1.2529,  0.2225, -0.7267],
            [ 1.4142, -0.2727, -0.4083, -0.6132,  0.4367,  0.0505, -1.2676, -0.2163],
            [ 0.6796,  0.1595, -1.6429,  0.8238,  0.0931, -0.6161, -0.7147, -0.9420]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.8072,  1.7861, -0.5123],
            [-0.2736, -0.6385,  0.4956],
            [ 0.8706,  0.0452, -0.2981]], requires_grad=True), Parameter containing:
    tensor([[-1.4683]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.3973e+00, -8.1776e+00,  3.5039e+00, -3.8017e+00, -3.5386e+00,
              1.7453e+00, -3.3157e+00,  1.4145e+00],
            [-3.1842e+00,  1.9718e+00, -5.0388e+00,  2.7139e+00, -2.4087e+00,
             -1.9065e+00, -2.7821e+00, -2.8749e+00],
            [-1.9480e+00, -2.0093e+00, -1.5057e+00, -4.8734e+00,  9.3323e-02,
             -3.4388e+00,  4.6215e-01, -7.7771e-01],
            [-6.5614e+00,  2.4914e+00,  1.3202e+00, -2.1429e+00, -2.3911e+00,
              2.2943e+00, -5.1994e+00,  1.9058e+00],
            [-9.9529e-01, -6.8137e+00, -2.5973e+00,  1.9080e+00, -3.0703e+00,
             -3.4940e+00,  3.1210e-03, -9.3929e-01],
            [ 2.4838e-01,  7.5109e-01,  8.3760e-01, -2.8605e+00, -2.6869e+00,
             -1.9409e-01, -1.0138e+00, -2.7620e+00],
            [-3.0340e+00, -5.4096e+00,  3.4579e+00, -5.5304e+00,  3.0779e+00,
             -5.3099e+00,  1.8037e+00, -5.7028e-01],
            [ 8.2656e-01,  1.2308e+00, -7.5463e+00,  5.6725e-02, -2.6707e+00,
              2.4309e+00, -4.4451e+00, -2.5287e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-6.1983e-01,  1.6710e+00, -2.2651e+00,  3.4125e+00, -3.2365e+00,
              3.2765e+00, -1.2852e+00,  4.1183e-01,  7.0556e-03, -3.2628e-02],
            [-3.6388e-01, -3.3177e-01,  4.6818e-01, -7.3124e-01, -4.3587e-01,
              1.1023e+00,  1.9868e+00, -2.0829e+00,  7.2431e-01, -5.2543e-02],
            [ 5.7428e-01, -2.1612e+00,  5.3289e+00, -3.1021e+00,  1.2560e+00,
             -2.6484e+00,  3.8278e+00, -3.9135e+00,  1.7783e+00, -2.7954e-01],
            [-1.2761e+00,  4.2385e+00, -4.6607e+00,  3.0064e+00,  8.1956e-02,
             -5.9220e-01, -3.2743e-01,  1.0334e+00, -7.5462e-01,  1.4349e-01],
            [-1.2021e+00,  3.3740e+00,  8.8067e-01, -2.1743e+00, -9.1344e-04,
              4.2162e-01, -1.2825e+00, -1.4310e+00,  4.4872e+00, -1.2594e+00],
            [-8.2119e-02,  8.3173e-01, -1.0751e+00,  2.8382e+00, -3.5207e+00,
              3.0469e+00,  8.8165e-01, -1.5835e+00, -3.7677e+00,  1.9713e+00],
            [ 1.7273e+00, -4.6855e+00,  1.4505e+00, -4.7293e+00,  1.2433e+00,
             -1.6587e+00,  3.2985e+00,  2.3943e+00, -1.7150e-01, -1.2816e+00],
            [ 2.4890e+00,  8.8967e-01, -1.3576e+00,  3.6288e+00, -4.0314e-01,
              2.6471e+00, -8.6551e+00,  4.1261e+00,  1.0203e+00, -3.1897e-01],
            [-1.2846e+00,  6.1271e-01, -1.4038e+00, -1.3764e+00,  9.8148e-01,
              1.3273e+00,  4.5749e-01, -3.9056e+00,  7.2713e-01,  7.1388e-01],
            [-5.9948e-01, -7.1585e-01,  1.0673e+00,  1.1175e-01, -2.8030e-01,
             -2.0746e+00,  2.1173e+00,  1.8143e+00, -7.1696e-01, -3.3119e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.560 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
