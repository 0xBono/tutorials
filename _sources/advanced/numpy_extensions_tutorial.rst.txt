.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.0271,  1.8436, 13.1600, 15.2666,  7.4469],
            [10.1127,  3.7370,  6.0663,  8.2935,  6.1305],
            [ 6.6697,  7.6158,  5.5218,  2.2268, 13.8740],
            [14.7348,  3.7918,  8.4204,  8.5478,  7.9380],
            [13.1919,  5.8456,  3.2866,  8.9733, 11.2585],
            [14.7348, 10.4009,  7.7024, 11.2221,  7.9380],
            [ 6.6697,  2.2174,  6.9162,  4.5809, 13.8740],
            [10.1127, 10.7759,  6.9548,  5.5353,  6.1305]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2132,  1.5361, -1.7221,  0.4507, -0.7552,  0.4097,  0.6549,  2.3714],
            [-0.1526,  0.6498,  0.6720,  0.4363,  1.1650, -1.0678,  1.4274, -0.4939],
            [-0.5744,  1.8511, -1.0446,  0.3522, -0.3650, -0.6763,  1.5381,  0.3373],
            [-0.3093,  1.8275,  0.1831,  1.2802, -0.3042, -0.1110, -0.8186,  0.3686],
            [-1.2355,  0.0588,  0.9429, -0.7030, -1.6085,  1.2497,  0.3475, -1.1520],
            [-1.8036, -1.0138, -0.4694, -0.1341, -0.4469, -2.3754,  1.2751, -1.6738],
            [-0.3300,  0.3067,  2.5471,  0.8067,  0.4369,  0.8508,  0.3331,  0.6812],
            [-0.9535,  1.0313, -1.5966, -1.0062, -0.4456, -0.2376,  0.9894, -0.9743]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1027,  0.2070,  2.0081],
            [-0.4837,  1.3474,  1.3564],
            [ 1.3337,  0.9265,  2.0456]], requires_grad=True), Parameter containing:
    tensor([[-0.0424]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.3725, -2.3694,  0.0386, -0.3219, -4.3105,  1.3404, -2.2723,  3.5675],
            [-1.4744, -2.0449,  1.4293, -5.0326, -3.3791, -1.2408, -0.3686,  3.3160],
            [ 1.2481, -1.1698,  2.6878, -0.1003, -2.0510,  7.7837,  6.7605,  5.8470],
            [-1.0423, -0.0292, -0.1764, -4.0330, -4.2566,  5.6805, -0.6058,  6.8831],
            [ 3.6299,  2.1899,  0.8778,  0.9190, -0.5791, -1.3398,  5.0714,  1.1347],
            [ 6.3095,  4.9589, -1.0916, -1.4667, -8.1546, -0.3104,  0.4296,  0.2099],
            [ 2.1963,  7.5987, -3.5115,  1.5048, -8.9175,  1.2317, -4.2549, -5.0969],
            [ 1.1334, -1.1197, -1.0326, -4.3401, -1.4964, -5.7260,  1.4735,  0.2595]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.5285, -2.0920,  1.3568, -5.2081,  2.4749, -4.8034,  1.5308, -3.9573,
             -0.3960,  1.3430],
            [-0.1445, -0.1358, -2.2111, -3.8132,  0.2369,  2.1320, -0.8116, -3.2675,
             -0.9038,  1.4779],
            [ 0.9768, -2.2294, -2.5537, -9.5256, -0.3904, -6.4954,  1.6378, -8.2938,
              3.8106,  1.7036],
            [-0.3062, -1.1092,  0.4975, -4.1736,  2.6971,  1.6772, -8.1879,  2.4166,
             -1.1042, -0.8325],
            [ 0.2652, -3.4827, -3.2617, -3.4627,  0.9952, -4.5903,  2.5007,  0.6646,
              2.9095,  0.6038],
            [ 0.3931,  0.3981,  2.4926, -1.2918,  6.5776,  2.0013, -2.2583,  1.2055,
              0.0472, -0.1542],
            [-0.9350, -1.4346, -3.0523,  2.0872,  6.6657,  3.6682,  3.7813,  1.2552,
              6.8948, -1.0043],
            [-0.5884,  0.4224,  1.2954,  5.3633,  4.3014,  3.4487, -0.1805,  8.5656,
              3.5759,  0.0584],
            [ 0.2215, -1.6123,  0.4880,  3.1542,  1.2156,  1.0895,  6.4054,  2.6045,
              4.6648, -1.6263],
            [-1.7068,  0.3169, -2.2265,  2.4492, -0.0142,  4.2996,  3.4052,  6.0427,
              1.4947,  1.7598]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.611 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
