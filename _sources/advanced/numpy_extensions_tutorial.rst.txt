.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.8737, 10.3065,  9.8633,  5.2619,  5.5996],
            [ 4.6258,  5.8413,  6.0901,  9.5425,  5.3148],
            [ 6.7384,  3.8414,  5.5141, 18.9126,  2.4932],
            [ 6.0431,  2.6275,  1.8015,  3.1306, 10.3750],
            [ 2.9729,  2.4728,  3.8237, 10.0756,  7.5432],
            [ 6.0431,  7.4942,  5.2842,  5.5092, 10.3750],
            [ 6.7384, 14.1830, 10.4524,  6.8868,  2.4932],
            [ 4.6258,  7.5602,  2.2826,  0.8801,  5.3148]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6320,  0.3105,  0.8953,  0.2189, -0.0209, -1.2201, -1.3477,  0.1321],
            [-1.6651, -0.0597, -0.3435, -0.2085,  2.2525, -0.2964, -1.4598, -0.6670],
            [-0.4484,  0.6837, -1.9073,  0.4587, -0.0719,  0.8522, -0.2013, -0.9806],
            [-0.2494, -0.9607, -0.0594,  0.5673, -1.7556,  1.4342,  0.4781, -1.0892],
            [ 0.4422,  0.1626,  0.6296, -0.3782,  0.4638,  0.0839, -0.5809, -0.0589],
            [-0.9557,  0.2648,  0.8108, -1.0830,  0.2402,  0.8194, -2.8164, -0.6624],
            [ 0.7215,  0.4031, -0.1438, -0.0700,  1.6197, -0.4676,  0.0929, -1.5915],
            [ 1.3194,  0.3899,  0.4782,  0.0758, -1.4379,  1.2406, -0.5837,  1.0590]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4091, -1.4736,  0.3775],
            [ 0.8120,  1.1677, -0.3120],
            [-0.7231, -1.7138,  1.8288]], requires_grad=True), Parameter containing:
    tensor([[-0.5176]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.1673,  0.7292, -1.4274, -3.8602, -1.1279,  0.9102, -3.7647,  7.1605],
            [-0.2791,  2.5088,  0.2382, -1.5545, -1.1657, -4.6528, -4.2988, -1.2521],
            [ 0.7679,  3.4197,  0.6538, -1.0030, -2.4803,  3.8374,  2.9691,  0.6128],
            [-0.8806, -2.5345, -1.6939,  2.8267, -2.2908, -1.7211, -0.4149, -3.9308],
            [-0.0309,  0.0180,  1.5845, -3.5463,  1.8192,  7.3345,  0.4928,  2.5871],
            [-5.5050, -3.3062, -1.0741, -0.7935, -9.6285,  1.2989, -4.6834,  1.4743],
            [ 1.7455,  0.7750, -0.3238, -1.1011,  3.1159, -3.2130, -2.7778, -0.2041],
            [-1.6699,  1.6426, -0.8094,  0.8299,  2.6288,  3.3174, -4.8240,  0.8704]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.5786,  -2.1181,   0.4428,   1.0661,  -1.5258,   0.4397,   1.4743,
              -1.1049,  -0.5656,   0.2100],
            [  1.5873,  -1.1102,   3.5794,  -2.1465,   3.6067,  -1.1299,  -2.8963,
               0.7099,   0.7284,  -0.1435],
            [ -0.2522,  -3.9223,   4.5355,  -5.8446,  -3.0351,   4.1617,   5.2820,
              -2.3811,  -1.6376,   1.4161],
            [ -1.0535,  -1.6497,   5.7384,   0.5805,   3.5102,  -5.2491,  -7.9444,
               3.0556,   1.2807,   0.3500],
            [  0.3925,   1.1138,   0.4311, -10.2951,   9.1451,   2.9540,   3.4828,
              -0.8298,  -0.2598,   1.5033],
            [  1.2861,   0.2983,  -0.4582,  -2.1748,  -5.0094,  -1.8318,  -4.6117,
               1.9752,  -1.2220,   2.6500],
            [  0.4510,  -2.4964,   4.3118,   4.4754,   4.1104,  -1.5080,  -1.1344,
              -0.5134,  -2.3880,   0.3292],
            [ -0.9552,   0.4952,  -0.2569,   0.1440,   0.2773,  -2.4403,  -0.7272,
               5.0282,   0.8416,  -0.9699],
            [ -2.1026,  -2.4974,   3.9966,  -5.5083,   0.7624,   5.4250,   0.0589,
              -1.5432,  -1.7903,   3.1647],
            [  1.4171,   3.5110,  -3.4945,  -0.5308,   1.0500,  -3.6312,   0.0675,
              -1.3137,   1.7807,   0.6090]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.103 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
