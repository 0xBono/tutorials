.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.5077,  3.6310,  3.0010,  9.8228,  1.9395],
            [ 7.1754,  1.5501,  9.6413,  7.5428,  3.4587],
            [ 5.2705,  1.6097,  8.7592,  9.9311,  5.3766],
            [ 4.1351,  3.0282,  5.8152,  9.2686, 14.2641],
            [ 1.1776,  5.6373,  6.4240,  5.9394,  6.3260],
            [ 4.1351, 13.2360,  2.0388,  9.4212, 14.2641],
            [ 5.2705, 12.2775,  5.6632, 10.9386,  5.3766],
            [ 7.1754,  8.5994,  7.6955,  3.4508,  3.4587]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2674e-01,  7.0894e-02,  8.0184e-02,  1.4694e+00, -5.4282e-01,
              1.4801e+00, -3.9334e-01, -4.1410e-01],
            [ 2.2117e-01, -7.7049e-01,  8.8845e-02,  9.7687e-01, -3.5817e-01,
             -4.5384e-01,  2.2689e+00, -9.8051e-01],
            [-3.5567e-02,  1.5689e+00, -1.8222e+00, -8.8505e-01, -4.6762e-01,
              5.5936e-01,  9.9288e-01,  3.0098e-01],
            [ 2.9533e+00, -9.7899e-01,  3.5756e-01,  6.2971e-02, -7.2893e-01,
              2.4664e-01, -2.0406e+00, -8.2557e-01],
            [-3.0003e-01, -7.6454e-01, -6.0233e-01, -9.7370e-01,  1.3134e+00,
              2.3056e-01, -5.4933e-01, -8.3943e-01],
            [-3.6995e-02,  1.5482e+00, -7.8658e-01,  4.9305e-01, -1.2434e+00,
              1.3828e-01,  9.8713e-01,  1.6114e+00],
            [ 2.9989e-01,  1.2505e+00,  1.3021e+00,  1.0813e+00, -2.6432e-01,
             -4.8919e-01,  1.2860e-01, -2.4713e-01],
            [ 1.4095e-01,  1.2085e-01,  9.4382e-01,  9.4758e-04, -2.2937e-01,
             -1.7405e-01,  4.8031e-01, -1.9110e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1709, -0.0910, -1.0254],
            [-0.1710, -0.6727,  0.8980],
            [ 1.5241, -0.9335,  0.2181]], requires_grad=True), Parameter containing:
    tensor([[0.0943]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.2177, -1.1750, -3.1874, -2.2506, -2.0250,  6.1372, -3.5333,  2.2336],
            [-3.6221,  1.3488, -0.7867,  0.0288, -3.5399,  3.0937,  0.2183, -3.3583],
            [-0.1882, -0.6135,  4.4097, -3.1282,  0.5438, -2.1878, -0.5576, -0.7278],
            [ 3.0970, -8.5556,  1.6443, -0.8820, -2.9010, -2.3420, -0.1058, -0.6236],
            [ 6.2904, -2.1133, -3.1300,  0.4602, -1.5748, -0.9778,  3.9314,  1.8309],
            [ 0.7633,  2.9527,  1.2480,  1.8912, -0.9937,  0.1034, -1.1673,  1.2024],
            [ 0.4629, -2.2846,  1.3983, -3.4084, -1.5978,  1.1260,  0.8067, -0.6677],
            [ 4.1938,  1.0052,  3.6239, -0.1478,  1.4438, -2.5817,  1.1702, -2.8346]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.0231, -2.6169,  1.4627, -0.5730, -0.9887,  0.8121, -2.4568, -0.4802,
             -0.7247,  0.0666],
            [ 1.3410, -0.1482, -1.8065,  1.9975, -1.8902, -1.7178, -0.4540,  1.1986,
              0.5380,  0.1636],
            [-2.5631,  2.4871, -6.0582, -4.3792,  3.7191, -3.4491,  1.7456, -2.0875,
             -0.4185,  0.2321],
            [-3.4757,  0.2644, -0.8561,  1.4953,  2.0795, -2.3602,  1.1102, -2.1225,
              1.5957, -1.5990],
            [ 2.2443,  2.4620, -0.5104,  2.3859, -3.7076,  0.5518,  0.8541, -0.6081,
              0.8882,  1.5679],
            [ 0.1089, -0.5753, -0.6357, -1.1201,  2.5027, -1.0049,  0.9183,  3.9447,
             -1.7598,  1.3854],
            [-1.5579, -3.2089,  5.7998,  1.3560, -0.3528,  1.5634, -5.0082,  3.2642,
              1.7506,  0.1338],
            [ 3.2088, -4.1261, -0.8840,  1.9600, -1.4090,  2.6460, -0.1304,  0.4224,
              2.0783, -0.5721],
            [ 0.5291,  0.4741, -3.5082,  1.2942,  1.5239,  1.4523, -1.9144, -2.9930,
              3.0349, -1.5366],
            [-0.4738,  2.2946, -1.6016,  0.8322, -2.9568,  1.0724,  0.9929, -2.6721,
              1.3509, -0.2824]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.051 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
