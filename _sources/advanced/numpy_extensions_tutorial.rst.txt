.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.8250,  3.9815,  2.0437, 10.6345,  2.2222],
            [ 8.9408, 14.1348,  9.2357, 11.2109,  8.7909],
            [10.9473, 10.2990,  2.6096, 12.2522,  1.2985],
            [11.0494, 12.0464,  6.6095,  5.5917,  6.7693],
            [ 1.1508,  3.2271,  5.4390, 12.0077,  1.5480],
            [11.0494, 11.6721,  9.3981,  3.8329,  6.7693],
            [10.9473,  4.6198,  6.4045,  5.7397,  1.2985],
            [ 8.9408,  8.1553,  6.2811,  8.6273,  8.7909]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.6629, -0.9424, -0.7516, -1.4614,  0.8411, -0.4843, -0.9451, -1.0168],
            [ 0.6188, -0.6430,  0.5560, -0.3458, -0.5337,  1.9025,  0.3164, -1.3103],
            [ 0.9506, -0.5820, -0.1589, -1.4178,  0.4672, -0.7895, -1.3990,  1.0274],
            [ 0.2014, -2.3886,  0.1242, -1.5745,  0.9522,  1.9040,  0.2823,  0.3476],
            [-1.8035,  0.1497, -0.2619, -0.7309,  1.1119,  0.1186,  0.2526,  0.2052],
            [-0.9745, -0.1759, -0.3747,  1.7710,  0.1509, -1.9524,  0.4870,  0.1824],
            [-0.3104,  0.8321,  0.6011,  0.8614,  1.1407, -0.0112, -0.0480,  0.3807],
            [-0.4993,  0.4707,  0.4543, -0.7806, -2.4079, -1.6660, -2.6788,  0.5964]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5925,  2.2174, -0.8092],
            [ 0.2313, -1.4799,  1.3376],
            [-2.1231,  1.5022,  0.6655]], requires_grad=True), Parameter containing:
    tensor([[-0.1258]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.8811,  7.0266, -5.0714, -5.8208,  1.4730, -2.5972, -3.3119,  2.8405],
            [ 5.2533, -1.4670, -0.3950, -2.5018, -0.7436,  3.3413,  2.5328, -2.0446],
            [-7.4038,  4.0576,  2.1417,  3.1057, -1.8904, -0.3240, -3.2905,  2.4361],
            [ 2.2330, -4.3556, -0.1076,  3.4645,  1.3742, -3.7344,  3.8115,  0.4393],
            [-4.2525,  2.6770, -3.7307,  3.3874, -4.0499, -0.7797, -0.5230, -1.3134],
            [ 4.1409, -0.3071, -4.5580, -6.0525,  4.9809,  4.0437,  0.8562,  4.8142],
            [-3.9789,  5.8223, -2.2146,  1.1256, -1.0199,  0.5991, -0.8381, -4.6056],
            [-0.2810,  0.6639, -3.2385, -0.6723,  3.7718, -3.8465,  5.6280, -5.2877]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.9155,  3.1583, -0.3929,  0.9924, -2.6711, -0.6992, -0.6301,  0.6665,
             -0.1151,  0.0230],
            [-0.6110,  1.4902, -0.4264,  1.8545, -0.3812,  1.6653, -2.2357, -0.2086,
             -0.6621,  0.2499],
            [-3.6288,  2.1263,  0.6731,  1.8861,  8.1613, -3.7821,  0.3951,  0.5135,
             -3.0980,  0.6306],
            [-3.2175,  1.1277,  1.6482,  0.1006, -5.5294,  3.7939,  2.8589,  1.1135,
              0.9967, -1.8901],
            [-1.8022, -0.2000,  2.6109, -5.3880,  2.7039,  0.4217, -2.8882,  5.5833,
             -4.7367,  0.7455],
            [-0.9722,  5.7699, -2.8280, -0.9321, -0.2849, -2.9396, -0.2714,  3.4842,
              3.6231, -3.8461],
            [ 2.4567, -3.7406,  0.3536,  3.4737,  0.0287,  2.9716, -1.5464,  4.8993,
             -4.1996, -1.4756],
            [-0.6662, -3.4304,  1.1425, -0.9835,  0.9246, -0.5560,  1.8070, -4.6822,
              1.9656,  0.9809],
            [-2.5230,  2.4937, -3.0673,  2.7862,  2.0755, -0.2996, -4.6752,  2.1188,
              0.5998,  0.2430],
            [ 3.8689, -1.5089, -1.7132,  2.7085, -1.2822, -3.3071,  2.0545, -0.4546,
             -0.5409, -0.0395]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.223 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
