.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.9387, 14.5854,  2.9491,  2.5906, 14.7901],
            [ 8.4960,  9.7915,  9.1773,  4.3433,  9.3872],
            [ 6.9133,  9.5925,  4.2807,  7.9199,  5.5084],
            [12.3396,  6.8203,  7.3935,  7.7304,  4.6506],
            [ 0.8245, 11.1896,  5.8916,  5.6214,  8.9891],
            [12.3396, 11.6035,  5.7611,  8.2558,  4.6506],
            [ 6.9133,  8.2194,  3.1723,  2.7364,  5.5084],
            [ 8.4960, 10.7466,  4.1370,  2.0752,  9.3872]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4363, -0.3828, -0.3341, -1.4146, -0.7659,  1.7563, -0.5855,  0.0080],
            [-1.8735, -0.4984,  0.5012,  0.4464,  1.0553,  0.5540, -0.5941, -0.5440],
            [-1.3217,  0.1433, -1.1097,  1.5907,  0.6552,  0.4088, -0.2736,  0.0902],
            [ 0.0287,  0.8836, -0.4766,  0.0320, -1.5137,  0.3411, -2.3900, -0.5456],
            [ 0.4278,  0.3499, -1.3651,  1.0640, -0.5636, -0.8010, -0.2872,  1.4059],
            [-0.3713, -1.5321,  0.5060, -0.0640,  0.2672, -0.1334, -0.9100, -0.7928],
            [-0.5677, -0.0242, -0.6115,  1.5851, -0.0507, -0.3363, -0.5686, -0.4393],
            [-1.2896, -0.3773,  1.0431,  1.9024,  2.3159,  1.9173,  1.7225, -0.6675]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1358, -1.1932, -1.6537],
            [ 0.7793,  0.1952, -0.2163],
            [-1.5361,  0.2459, -0.8332]], requires_grad=True), Parameter containing:
    tensor([[0.4789]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.2453, -0.9071, -1.7574, -0.3737,  5.8267,  1.1662,  5.3579,  1.7602],
            [ 0.3854,  1.2547,  0.1766, -1.8521,  3.1603,  1.9064,  1.1283,  0.8198],
            [-1.9573,  2.2117, -2.9519,  5.5691, -1.4492,  5.1986, -3.1941,  4.5910],
            [ 1.6329,  0.6206,  0.7050,  0.3017,  3.5559,  3.7845,  3.5554,  3.8232],
            [-0.2645,  5.0008,  0.7507,  2.0432, -0.2612, -0.4909, -2.1443,  1.6846],
            [-2.9085, -3.0425,  2.7994,  2.9548,  4.6832,  0.6060,  5.0694,  2.5819],
            [-1.8161,  0.1100, -1.5623, -3.6262, -1.7619, -2.1370, -4.8438,  0.1957],
            [-0.2790, -1.4142,  4.0400, -1.0100, -5.0638,  2.0820, -0.0173,  1.3443]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0238,  0.1842,  0.5921, -0.7007,  1.6586,  2.8283, -0.7658,  3.0215,
              1.5542, -2.1466],
            [-0.3686,  1.7649,  4.1838, -0.9475, -0.0591,  1.0879, -2.9553,  1.0435,
              1.6664, -1.3803],
            [-1.1099, -0.5041,  2.7259,  8.4741, -0.3511,  1.0244,  0.6438, -1.0842,
              2.3803, -0.7273],
            [ 2.3961, -1.7621,  0.7178,  5.8774, -0.4968, -6.1788, -3.2082, -3.9294,
             -2.4703, -3.3253],
            [ 0.7574,  2.5954,  1.4058,  3.0249,  3.1168,  3.1912, -0.8640,  2.6423,
              0.2683, -4.0348],
            [-0.9132,  2.5328, -4.2954, -3.3141, -1.1898,  0.0255, -1.8005,  0.2068,
              0.8485, -3.6939],
            [ 1.5728, -1.5716, -4.6493,  0.4502,  6.9018, -3.0606,  5.1815, -0.9435,
              2.6364, -3.3683],
            [ 1.3216, -2.5581, -1.1151, -4.3421,  3.2019, -2.3555, -1.8985, -1.0158,
              1.5191, -1.9699],
            [-3.7151, -0.2818,  2.2670, -0.8621,  2.7229,  3.7670, -0.3943,  0.3881,
              0.8617, -0.7100],
            [-0.5862, -0.6027, -0.6402, -0.3769, -2.3923, -0.7389, -0.1668, -1.5713,
              0.5952, -0.4707]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.177 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
