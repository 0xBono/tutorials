.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.1329,  9.6463,  1.2681,  7.8914,  0.1229],
            [ 0.6336,  6.2025,  2.9333,  8.0439,  7.4213],
            [17.0157,  3.1615,  3.8546,  3.0081,  2.0996],
            [ 9.4017,  2.1694,  5.1854,  9.0542,  4.8756],
            [ 3.7769,  5.2257,  5.1294,  4.1021, 15.2100],
            [ 9.4017,  4.4826, 10.2791, 15.1413,  4.8756],
            [17.0157,  0.8288,  6.7559, 16.7521,  2.0996],
            [ 0.6336,  4.8699,  8.4577,  0.4042,  7.4213]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.2557,  1.9196, -0.8897, -1.0080,  1.0378, -0.4103,  0.6157,  0.6247],
            [ 0.0393, -2.3516,  0.5338, -0.5205,  0.8288,  0.2419, -1.4729,  0.6750],
            [ 0.0117,  0.7482, -0.6940,  0.8558, -1.1691,  1.3966,  0.7333, -0.4654],
            [-0.1090,  1.4568,  0.6961,  1.7531,  1.3958,  0.4119,  1.0146,  0.2963],
            [-0.7565, -0.5265,  0.9607, -0.5045,  0.1773,  0.8749, -1.2688,  0.4460],
            [-1.4755, -1.5575,  1.0265, -0.0387, -0.4556, -0.3970, -0.1295, -0.7731],
            [ 0.8615,  0.0071,  1.3374,  1.9786,  0.7733,  0.6986, -0.5807,  0.9253],
            [ 1.0841, -0.6427,  0.7067, -0.5611,  1.9500,  0.3377, -0.0224, -0.2634]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.8250, -0.6317, -0.2170],
            [ 0.8524,  1.7062,  0.0085],
            [ 0.2628,  2.0571, -1.3791]], requires_grad=True), Parameter containing:
    tensor([[-1.0788]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.7593, -3.4797,  4.9271, -2.9593, -0.7508, -3.0630, -0.3095, -6.4449],
            [-5.3353, -8.0313,  5.1744, -2.6446,  1.0454,  0.6244, -2.0849, -7.1895],
            [-2.2292, -6.2335, -2.1681, -5.1266, -1.9665, -0.3337,  0.1609, -3.0075],
            [ 3.0149, -0.8875,  1.1166,  2.2620, -0.2187,  4.2952,  2.2311, -0.7631],
            [ 2.0025, -0.3807,  0.4068, -2.8061,  0.5772,  1.8929, -2.1260, -9.8220],
            [-4.6505, -4.4665, -1.9183, -3.6606,  3.2686,  2.8971, -3.5922, -5.4197],
            [-4.7140, -2.3904,  2.4192, -2.8697,  4.1221,  3.0889,  1.8185, -2.4428],
            [-3.5503, -6.7610, -1.1185, -4.6058,  2.3107, -1.3799, -2.5995, -3.1425]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1418,  0.1255,  0.9246, -0.2104, -0.0419,  0.0245, -0.2097, -1.2272,
             -0.8394, -0.2641],
            [-0.4480, -1.0416, -1.2136, -1.1214,  0.3876, -1.2965, -0.2015,  1.3747,
              2.0686,  0.0578],
            [ 0.1755,  3.4363,  0.5404, -2.6974,  4.8094, -2.7818,  1.2866,  2.4937,
              2.1308, -1.6052],
            [ 1.4757,  2.3865, -0.7339,  0.0471,  5.5515, -0.3089, -1.6356, -1.1733,
             -1.9403,  0.4212],
            [ 0.9250, -0.9609, -7.6858, -0.8477,  1.6678,  0.3921,  8.3529, -0.6897,
              0.2315,  0.4858],
            [-1.6905, -3.9474,  1.1020, -1.8314,  5.4886,  1.4761, -1.1506, -2.4224,
             -3.0447,  0.8844],
            [-1.7298, -6.1566,  1.4192,  0.8019,  5.7040, -3.4322, -0.0750, -1.2537,
              2.0370,  0.0971],
            [-0.4002,  0.1164, -4.6174, -3.0482,  3.0553, -9.3061, -1.4114,  1.3640,
              0.1052,  1.3048],
            [ 1.7672,  5.7944,  0.1659, -0.7705, -1.2362,  1.7945, -0.5520, -2.7690,
             -3.9322,  0.0648],
            [ 0.4443,  3.5733, -1.2345,  2.1775, -2.6186,  0.1904,  4.6565, -4.4920,
             -5.5113,  4.0878]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.597 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
