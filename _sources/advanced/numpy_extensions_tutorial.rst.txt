.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.7210,  6.8877,  3.9671,  1.5720,  2.8809],
            [ 9.4326,  6.6434,  4.9126,  3.0416,  3.1404],
            [ 2.2896, 17.0372,  9.2488,  7.4852,  6.1815],
            [ 9.8626,  2.8088,  4.5668, 14.2843, 12.2995],
            [ 7.0892,  2.9272,  5.7485,  7.7094,  7.3643],
            [ 9.8626,  5.4830,  4.5977,  4.0394, 12.2995],
            [ 2.2896, 10.0890,  8.7225,  3.9828,  6.1815],
            [ 9.4326,  5.0022,  4.6904, 12.5660,  3.1404]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9554, -0.0981, -1.1315,  0.5431, -0.8704, -0.4057, -0.1011, -0.9025],
            [-2.2399,  0.0776, -0.2237,  0.1242, -0.0395,  0.2375,  0.1685,  1.5134],
            [-0.0815, -0.8023, -0.4901, -0.0577,  1.0807, -0.6948,  1.0473, -1.5024],
            [ 0.0775,  1.0181,  0.5466,  0.0887,  0.5810,  0.1665, -1.2421,  1.0578],
            [ 1.4420,  1.2054,  0.0809, -0.0132, -0.2778,  0.0536,  0.1546,  1.6334],
            [-0.1431, -2.3434,  0.7299, -1.1085, -1.6195,  1.4597,  1.2036, -0.6727],
            [-0.9215, -1.2181, -0.0974,  0.2645,  0.0734,  1.0860,  1.5999,  1.1301],
            [-0.1656,  1.5342, -1.0637, -0.7346, -0.9692, -1.2387, -0.3648, -0.8212]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4577,  0.5447, -0.3156],
            [-0.7536, -1.2499,  0.0022],
            [-0.2142, -0.6169, -0.1948]], requires_grad=True), Parameter containing:
    tensor([[-0.2425]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9464,  0.1107,  1.0514,  2.0984, -1.0340,  0.2313,  1.0132, -0.5892],
            [-0.2547,  1.3460,  2.5650,  1.0237,  2.1810, -1.9591, -2.8755, -2.1777],
            [-1.4789, -0.7882,  1.5069,  0.9433, -3.3996, -1.9364, -2.5776,  0.3542],
            [-1.3197,  0.0171,  0.0183,  0.6677,  0.2720, -1.8215, -0.7895, -1.6027],
            [-1.4120, -1.5244, -2.1198, -2.4519, -1.6031,  2.4764,  4.1520,  2.6795],
            [-3.2600, -2.3926, -1.6545, -0.1297,  0.4993,  1.2100,  2.6192,  1.9747],
            [ 1.5276,  3.0810,  0.6969, -0.9538,  0.2520,  1.3498,  1.8206,  1.1001],
            [-0.4589, -0.9823, -0.3726, -2.2034, -3.3978, -0.0246, -0.3525,  0.3908]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4475, -0.7551,  0.0468,  0.5727,  0.4136, -0.3561, -0.5455, -1.0169,
              0.1318,  0.1745],
            [ 0.4668,  0.3643,  0.1446, -0.3546, -2.6037,  0.2883,  0.9781,  1.8180,
              0.7296,  0.0570],
            [ 1.6305,  4.1763,  2.0920,  0.5525,  1.6213,  0.4144,  0.9400,  1.7452,
              1.1974, -0.0612],
            [-0.9458, -1.1496,  0.4927, -0.5977,  0.8924,  1.1773,  1.0969,  0.3661,
             -0.3033, -0.0992],
            [-1.1316, -2.2563, -1.2321, -1.9159,  0.3763,  0.4208, -0.3382,  0.3505,
             -0.8276, -0.2559],
            [-0.0815, -2.5415, -4.1170, -1.4158, -0.6852,  2.0542,  0.7833, -2.2153,
             -1.1011,  0.0813],
            [-1.8039, -1.8642,  1.6925, -1.2184, -0.3677,  4.1014,  1.9880, -0.2140,
             -0.9267,  0.3082],
            [ 1.4052,  2.3371,  0.5799,  0.7523, -0.0495, -3.0121, -4.1447, -0.6041,
              1.4086,  0.4610],
            [ 0.0446, -0.1254, -0.0504,  2.6032,  2.5432,  0.8481,  0.0288,  0.1045,
              1.9656,  0.2468],
            [-0.1024, -0.4713, -0.3989,  0.6816,  1.0599,  0.8969,  1.0060,  0.6169,
              0.7399,  0.2237]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.599 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
