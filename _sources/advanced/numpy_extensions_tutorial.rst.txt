.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.0166,  4.2403,  2.7341,  6.2547, 14.4597],
            [13.3217,  9.4352,  1.8611, 18.9636,  7.0100],
            [16.8717,  5.4829,  5.2020,  6.2440,  6.0646],
            [ 7.4760, 11.4421,  8.6428,  7.0357, 10.7955],
            [ 1.9186,  6.2096,  3.7312, 10.6367,  6.9601],
            [ 7.4760,  5.8017,  6.7093,  7.9265, 10.7955],
            [16.8717,  8.0179,  4.9986,  6.9575,  6.0646],
            [13.3217,  9.5959,  9.6316,  1.1481,  7.0100]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1479, -0.8686, -1.5231,  1.6456, -0.9253,  0.7543,  0.3434, -0.2075],
            [ 0.5969, -0.0725, -0.1698,  1.5457, -0.6699,  0.1864,  2.2890,  0.6519],
            [ 0.5396, -0.1484, -0.3061, -0.4614,  0.6163,  3.1560, -0.7152,  3.3877],
            [ 0.6813,  0.5627, -0.3960,  0.3763,  1.1180, -0.2002, -0.1315,  0.0935],
            [-0.9410,  0.7649,  0.1855, -1.1849, -1.7987, -0.2389, -0.4622,  0.3373],
            [-1.8659, -0.7105, -0.9715, -0.5147,  0.7826, -1.1814, -0.1566, -1.1632],
            [ 0.1090,  2.1167,  1.1066,  0.2636,  0.4029, -0.5024,  1.3491,  0.0245],
            [ 0.2349,  2.5460,  0.0291,  1.7838, -0.8927, -0.0914,  0.1716,  0.5871]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.9304, -0.4770,  0.0474],
            [-0.5385, -0.3670, -2.0241],
            [-1.2235,  1.7827,  0.5288]], requires_grad=True), Parameter containing:
    tensor([[-0.2041]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.3543, -2.6258, -0.4084,  1.8248,  3.2463, -2.5649, -5.3148, -1.7581],
            [-8.8221,  5.1055, -7.9081,  1.5704, -2.6497,  4.5194, -1.9496,  8.6003],
            [-5.3264,  2.4569,  0.6941,  2.7107,  1.1666,  0.9703, -2.8408, -3.2015],
            [ 8.1541,  1.5198,  4.3824,  1.4822,  4.1205, -6.0000, -3.1033,  1.0573],
            [-4.0141, -2.2744,  0.7330, -1.5795, -4.6680,  0.2426, -1.1835,  0.3783],
            [ 2.1559,  2.2196, -0.5961,  2.0102, -3.1601,  5.9783,  1.3819,  1.9263],
            [-0.5230,  0.0563, -3.2222, -1.4582,  4.9845, -1.0986, -2.1939,  0.9209],
            [-4.5946,  1.1671,  4.5070, -6.0506, -0.4549, -2.1571, -3.2223, -3.3904]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.1685, -2.5764,  1.6047,  2.0499,  0.8872,  0.1185,  3.4419,  0.1295,
             -0.1576,  0.0242],
            [ 0.3161,  1.6891,  3.9155,  3.1750, -0.1438, -3.1284, -2.2720, -0.1575,
             -4.1797, -1.0026],
            [ 0.7738, -2.3803, -4.2826, -2.6465,  0.9778, -0.9507, -1.5989,  2.1147,
              1.2764, -1.0771],
            [ 0.6136, -3.8503,  0.7589,  1.9223,  3.9117,  2.1449,  5.3625, -3.2223,
              0.6658, -0.0431],
            [ 3.5617, -3.5046,  2.3519,  5.7848,  1.7203, -1.2565, -8.5024,  0.6494,
             -3.9485,  3.1541],
            [-0.3759,  3.6533, -5.0892,  1.9723, -8.7272,  1.9412, -2.5466,  7.8393,
              0.8817, -0.4628],
            [-2.6230,  3.5259, -5.6887, -0.6314,  3.2518,  3.3805,  6.3125, -6.2708,
             -0.8525,  0.8008],
            [-4.9248,  0.2128,  0.4840,  2.8540,  3.1024, -4.7838, -2.7367,  0.9575,
             -4.8283,  2.9679],
            [ 1.9456,  1.5018,  5.4886, -0.7889,  0.7888,  0.6747, -1.5683,  7.0441,
             -3.6064, -1.7112],
            [ 3.1650, -3.6629, -1.5043, -2.9763,  0.5942,  1.0606, -2.2823,  0.7585,
              1.2535,  0.2286]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.331 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
