.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.2707,  2.2062,  9.2737, 17.0668, 16.2185],
            [ 1.0934,  6.6958,  1.9019,  3.6160, 11.2866],
            [ 8.0105,  6.9603,  6.9750,  6.1666,  3.7444],
            [14.8695,  2.7239,  7.6592,  4.3375,  4.5747],
            [ 4.4001,  0.9173,  8.3654,  3.6091,  5.3233],
            [14.8695,  7.3050,  5.8629,  5.6392,  4.5747],
            [ 8.0105,  2.3698,  8.1637,  1.4487,  3.7444],
            [ 1.0934,  5.2768,  6.0019,  9.5402, 11.2866]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3449, -0.8701, -0.4223,  2.1067, -0.5743, -1.2414, -0.0440, -0.6587],
            [ 1.9059,  0.0788, -0.4039,  0.5354,  0.2758,  1.3396,  0.3366, -1.3237],
            [ 1.6483,  0.4275, -0.8934,  0.3392, -0.1793,  0.4256,  0.3846,  0.7639],
            [-0.3459, -0.7877, -2.2499,  0.2052, -0.7556, -1.6244, -0.2984,  0.0434],
            [ 0.2727,  0.2929, -0.9984,  1.3118, -0.3272,  2.5115, -0.2802,  1.5140],
            [ 0.5907,  1.2592, -0.2891,  0.3735, -0.0109,  1.2442, -1.1947, -0.5284],
            [-0.1968, -0.2759,  0.0824,  0.6795, -0.8862,  0.1888, -0.8987,  0.2879],
            [ 0.9944,  0.4667, -0.5194,  1.0006, -0.9518,  1.0038,  0.4098, -0.3447]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.0736,  0.0931, -1.3418],
            [ 2.3352, -2.4634, -0.4664],
            [-1.2854,  1.0299,  0.7853]], requires_grad=True), Parameter containing:
    tensor([[-1.4760]], requires_grad=True)]
    Output from the convolution:  tensor([[  4.0005,  -5.6016,  -3.0594,   2.8730,  -2.3969,  -5.6523,  -1.0732,
              -4.4800],
            [  0.5498, -12.1015,   4.3029,  -2.8309,  -1.2375,  -5.4871,   5.5531,
               2.6524],
            [ -9.2358,   0.4697,   3.2551,  -3.9324,  -1.5520,  -1.9953,  -3.0102,
               5.5905],
            [ -7.5805,   0.2304,  -2.8956,  -1.4776,  -5.3538,   6.8745,  -2.5635,
              -1.0196],
            [  1.7124,  -7.8440,  -0.1676,  -5.4323,   5.8160,  -4.7496,   1.7205,
              -0.6905],
            [  2.4559,   0.6326,  -5.1981,  -0.4205,  -9.1535,  -0.4916,   2.0830,
              -3.7518],
            [ -5.4118,  -0.1087,   2.0311,  -5.0473,  -1.3364,  -2.9650,  -6.4966,
              -3.9673],
            [-11.9804,  -2.7248,  -0.9977,   5.1091,  -1.1220,  -7.3847,   0.1818,
               0.7968]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.3973, -0.4186, -2.0172, -0.6913, -0.7270,  0.9226, -0.5534,  1.7781,
              2.1004, -1.3296],
            [ 3.3539, -2.5319, -0.5909, -4.7242,  0.9119,  0.1353,  0.7899,  9.2764,
             -3.1945, -2.1660],
            [-0.6477,  6.3095, -6.4827,  0.0290, -0.5331, -2.0716,  8.3442, -4.9048,
             -5.0619,  2.8114],
            [-0.1452, -2.0799, -2.2378,  8.9866, -3.9115,  0.5437,  1.3388, -8.3306,
              5.4181,  2.2497],
            [-2.1560, -3.5518,  9.5372,  1.7959, -7.1284,  3.6788,  2.1435, -3.2266,
             -2.0332,  0.5926],
            [-0.4478,  1.6393, -2.3107, -0.4280,  0.5069,  4.4289, -2.0126, -5.0116,
              2.5094,  0.6101],
            [ 3.5858, -3.5366, -3.4042,  1.0728, -1.1647,  2.7167,  3.5859,  0.0827,
             -1.4242, -0.9155],
            [ 5.5836, -5.8693, -5.1210,  4.3301, -2.5817, -0.9820,  0.7237,  3.6501,
              1.3114, -0.2712],
            [ 0.4931, -7.1307,  8.4887,  3.0576, -6.0520, -1.9033,  3.7644,  1.9017,
             -0.6550, -0.2295],
            [-1.6616,  4.6347, -1.6695, -3.2826,  3.3468,  1.0313, -2.9223, -1.6459,
              0.1362,  0.1665]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.230 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
