.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.3819,  5.1310,  6.8244,  5.5356,  4.7607],
            [ 5.1730, 15.4922,  5.7983,  4.9835,  7.6621],
            [ 7.2168, 11.1413, 12.6645, 11.2100,  7.8866],
            [ 6.4121, 13.0905,  6.2932,  7.3265,  5.2625],
            [10.1079,  5.7070,  2.7321,  5.1344,  5.2099],
            [ 6.4121, 10.3489,  9.0492,  0.9902,  5.2625],
            [ 7.2168,  4.9392,  6.1757,  1.9661,  7.8866],
            [ 5.1730,  4.7640,  9.8725,  4.0611,  7.6621]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.4063,  0.4680, -0.1095, -0.0916,  1.9646, -0.6007, -2.3405,  1.2261],
            [ 0.1444,  1.7870, -0.4111, -0.7396,  0.1335, -2.0462, -0.7062, -0.7326],
            [-0.2381,  0.9842, -0.0216, -0.5834, -1.0257,  0.1867,  1.1236,  0.4501],
            [ 0.7635,  0.3620, -0.4228, -1.0050, -0.6740, -1.5706, -0.4637, -0.2093],
            [-0.7238, -1.3650,  0.0297,  0.1105,  1.2929,  1.4260,  1.0966,  0.3798],
            [ 0.3442, -1.3262,  0.9237,  1.1925,  2.2216, -0.4883,  0.7483, -0.5050],
            [ 0.4044,  1.3655,  0.1934, -0.0823, -0.9147, -1.0059,  0.1817, -0.3242],
            [-0.2527,  0.0499, -1.0921,  0.2745, -0.4058,  1.1581, -0.9806, -1.3164]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.5287,  0.2549, -0.6130],
            [ 1.1163,  0.8457,  1.5272],
            [ 0.5335,  1.7814, -0.7829]], requires_grad=True), Parameter containing:
    tensor([[0.1478]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2721e+00,  5.8958e-01, -3.0260e+00, -9.4525e-02,  2.8021e+00,
             -1.1708e+00, -7.7460e+00, -2.8442e+00],
            [-4.3804e+00, -4.4186e+00, -5.3934e-01,  1.1308e+00,  2.2749e-02,
             -3.1931e+00, -4.5477e+00,  2.7345e+00],
            [-7.6881e+00, -2.4051e+00,  2.8220e+00,  5.3037e+00,  1.8539e+00,
             -1.9047e+00,  5.5423e+00,  3.3828e+00],
            [-5.0563e-01, -1.6664e-03,  5.3552e+00,  6.5020e-01, -5.8434e-01,
              2.3267e+00,  2.0036e+00, -1.1119e+00],
            [ 4.7557e+00,  5.9940e+00,  1.1443e+00,  1.5899e+00, -2.6758e+00,
             -7.6954e-01, -4.0524e+00, -2.7976e+00],
            [-2.7523e+00, -7.9717e+00,  4.0070e-01, -1.2475e+00,  4.2233e+00,
              3.5531e+00,  1.3704e+00, -6.5871e-01],
            [-1.3547e+00,  2.0081e+00,  3.4824e+00,  5.5796e+00,  3.7729e+00,
              1.9209e+00, -3.3913e+00,  9.6531e-01],
            [-2.0699e+00, -3.3718e+00,  5.1362e+00, -5.2411e+00,  7.4656e-01,
             -1.2066e+00, -3.1092e+00,  8.7225e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.0180e+00,  1.4093e+00,  7.5140e-01,  1.8338e+00, -1.2490e+00,
              3.3123e+00, -5.8920e-01,  5.5000e-01,  2.1194e-01, -1.7039e-01],
            [-2.6499e+00, -9.9875e-01, -6.5942e+00, -3.8159e+00, -3.2442e+00,
             -3.0984e+00, -9.3720e-01, -1.9971e+00, -1.5877e-01,  6.5735e-01],
            [ 1.8655e+00, -1.7891e+00,  2.1159e+00,  2.5255e+00,  4.8646e+00,
              4.8611e+00, -3.3336e+00,  6.5292e-01, -2.2427e-01, -1.0684e+00],
            [ 1.0229e+00,  2.0069e+00,  1.0978e+00,  5.4982e+00,  2.7304e+00,
              1.7868e+00, -2.6915e-01,  1.2056e+00,  1.1159e+00,  1.1572e+00],
            [ 1.1558e+00,  3.3154e-01, -9.6920e-02,  1.3313e+00, -3.2714e+00,
             -2.0573e+00, -2.2967e-01, -6.3085e-01,  7.2707e-01, -9.2896e-01],
            [-1.8213e-01, -5.3382e+00, -1.6870e+00, -2.7487e+00,  1.4951e+00,
             -1.8974e+00, -6.4014e+00, -1.1930e+00, -4.0100e+00,  9.2629e-02],
            [-3.1871e+00, -5.7105e+00, -2.3200e+00,  3.8978e+00, -9.6167e-01,
              4.3284e+00, -3.9079e-01,  1.9130e+00,  5.3974e+00,  1.0237e+00],
            [ 1.1296e+00, -2.5746e-02,  8.7372e+00, -3.1760e+00,  2.8281e+00,
             -5.9675e+00,  1.5667e+00,  2.4508e+00,  2.0565e-01, -6.2768e-01],
            [-2.2312e-01,  2.5116e+00,  1.3014e-01, -4.0262e-03, -4.5116e+00,
              3.4691e+00, -3.5841e+00,  3.7262e+00, -3.4255e-01, -1.8143e-01],
            [-3.0335e-01, -6.8785e-01,  5.0012e-01, -2.8021e+00,  4.6870e+00,
             -3.1828e+00,  2.0718e+00,  1.4633e-01, -6.1642e-01,  1.3592e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.339 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
