.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.8682,  4.6501,  6.8156,  9.5467,  4.2813],
            [ 6.2945, 10.5545,  7.7535,  8.8662,  3.9351],
            [13.1392, 14.1902,  7.1272,  9.4851,  9.5365],
            [14.8622,  4.6966,  5.7586,  6.5800, 10.2905],
            [ 9.4537,  6.8688,  0.9979,  2.9877,  9.5289],
            [14.8622,  2.0492,  3.1265, 14.6116, 10.2905],
            [13.1392, 12.3426, 14.7451,  2.7750,  9.5365],
            [ 6.2945,  3.0200,  7.1537, 13.6165,  3.9351]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2992,  2.2521, -0.2495, -1.6359, -0.7726, -1.0784, -1.7294,  0.3771],
            [ 0.4506,  0.9668,  0.9531, -0.0225,  1.4400,  1.2420,  0.4096,  0.4487],
            [ 1.3874, -1.2701, -1.3844,  1.3255,  0.3971, -0.8121,  1.2587, -1.1432],
            [ 1.7396,  0.0971,  0.3460,  0.9580, -0.6134,  0.0929,  0.4320,  1.0885],
            [ 0.7658,  0.5395, -0.7754, -1.0539, -2.7645,  0.7670,  0.2051, -0.6709],
            [-0.5878, -0.7923, -0.6970,  0.6134,  0.7207, -1.8519,  2.2838, -2.6135],
            [ 0.4887,  0.2555,  0.6527,  1.9251,  1.6036,  0.9164, -0.0907,  1.2220],
            [ 1.2990,  1.0489,  0.0581,  0.5000,  1.5047,  0.2890, -0.9559, -0.1871]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2585,  0.0379, -0.3371],
            [-0.0864, -0.3593, -0.6810],
            [-0.1525, -0.1194,  1.5671]], requires_grad=True), Parameter containing:
    tensor([[0.3854]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.6635, -2.0217,  1.4466, -0.2329, -4.1036,  4.6274, -2.0152,  1.2545],
            [ 3.6098, -0.1052,  0.1826,  2.7786,  2.4908,  0.2031, -0.7970,  1.9417],
            [-1.1342,  2.9842, -0.1690, -1.4514,  5.3537, -3.7255,  0.1085,  4.2201],
            [-0.1815,  3.4577,  0.6653, -0.6245, -0.7643,  3.1105,  2.9958, -2.5304],
            [ 1.6203, -0.6117, -0.9220,  1.3663, -1.4004, -0.3602, -4.0012, -1.6056],
            [-1.6112,  0.3541, -0.2017,  2.2454, -0.1744,  0.4239,  1.7278,  0.8404],
            [ 2.4279, -0.5039,  1.2541,  0.1349,  2.5175,  3.8633, -1.8621,  3.1490],
            [-0.7448,  1.1405,  0.6945, -1.8195,  1.8045, -2.8654,  0.6130,  1.0721]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0438, -0.1584, -0.0171,  0.1061,  0.2497,  0.3854, -0.4107, -0.1046,
              0.2881, -0.3202],
            [ 0.3816, -0.0761, -0.3316,  1.3532,  0.8941, -0.8085, -1.6955, -0.5968,
              0.6324, -0.5311],
            [ 0.0632, -0.2264, -0.6210, -0.6181, -1.2805, -2.2837, -0.2084,  1.6119,
              0.1816,  2.1953],
            [-0.2342, -0.1291,  1.6531, -2.0086, -1.2064,  3.2427,  1.8202,  1.4167,
             -0.4013,  0.3401],
            [-0.3224,  0.1181,  0.8310, -0.5210,  1.5971, -3.8999,  0.4629,  2.2775,
             -1.0246, -2.3721],
            [ 0.1272,  0.2697, -0.2649, -0.3230, -0.5322,  3.3258,  4.1855, -2.1263,
             -2.0799,  0.6803],
            [-0.3208, -0.4678, -1.2919,  2.4405,  1.4266, -0.7813,  0.5237, -3.0297,
             -1.2213,  1.0448],
            [ 0.1451,  0.4231,  1.5328,  1.9185, -1.5051,  1.5141, -4.1266,  0.3115,
              1.9991, -1.1866],
            [ 0.2331,  0.2282, -2.3598,  0.0393,  0.2557, -2.2908, -0.6906,  0.9596,
              3.2537, -0.8875],
            [-0.0287,  0.0217,  0.5524, -0.3853, -2.5684,  0.8579,  2.3129,  0.9416,
             -3.1756, -0.2948]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.516 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
