.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.7706, 10.4167, 13.2749,  3.1997,  7.2013],
            [ 8.3869,  6.3133,  8.5522, 13.3920, 14.0404],
            [18.4584, 11.3601,  7.9394, 11.8384,  6.0512],
            [ 6.2470,  6.3767,  2.9100,  2.5942, 11.6508],
            [10.5849,  8.4159,  7.6841,  5.9061,  5.5828],
            [ 6.2470,  2.9214,  5.5158,  8.2208, 11.6508],
            [18.4584, 10.0152,  2.7973,  0.5214,  6.0512],
            [ 8.3869,  5.4052,  2.5107, 15.4516, 14.0404]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9812,  1.1345, -0.1617, -1.8142, -0.8797,  0.5640,  0.0626,  0.2604],
            [-0.6759, -1.0901,  0.5340, -2.0602,  0.1861,  1.4617, -1.2126,  1.6834],
            [-0.8448,  0.9130,  0.8723, -0.2811,  0.1697,  1.3548, -1.2611, -0.4011],
            [ 1.6045,  3.2873, -0.7349,  0.2105,  1.3679,  1.3039,  0.5637,  1.6404],
            [ 2.0104, -0.1935, -0.8971, -0.4099, -1.0245, -1.0760,  0.3721, -1.3932],
            [ 0.7616, -0.7267, -1.2559, -1.2353, -0.4577, -1.2820,  0.6722, -0.9114],
            [-1.8782,  0.5489, -0.1459, -0.3511,  0.1554,  0.1173,  1.1702, -1.0811],
            [ 1.1329, -0.9638,  0.5398, -0.9942,  1.8042,  0.2131,  1.9550, -0.1436]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4709, -0.3851,  0.4793],
            [ 2.5926,  0.1939, -0.6821],
            [ 2.0489, -0.9074,  0.9778]], requires_grad=True), Parameter containing:
    tensor([[0.1369]], requires_grad=True)]
    Output from the convolution:  tensor([[ -3.1454,   7.8434,   2.1233,  -1.2550,   2.6112,  -5.9181,   1.7267,
               0.7705],
            [ -1.3723,   3.4850,   0.7077,   2.9580,  -5.9251,   3.5416,   2.5096,
               1.3464],
            [ -4.9213,   1.1144,   4.3943,  -0.5539,  -2.6878,  -0.9892,  -2.8533,
              -5.7313],
            [  2.8178,   1.0235,   1.8494,   2.1408,   1.2308,  -1.7698,  -1.5260,
              -0.8380],
            [  1.0470,  10.2488,  -3.1554,  -0.7772,   3.4294,  -3.1163,   3.5717,
              -1.7147],
            [ -0.7404,   0.2408,  -9.0158,  -1.6421,   4.1082,  -1.0438,   1.6732,
             -11.2138],
            [  5.0510,  -5.6913,  -1.3522,   0.6325,  -4.1042,  -3.0574,   1.5062,
              -1.5735],
            [  7.6537,  -6.9709,  -0.3059,   2.0467,  -0.1983,  -1.9315,  -1.4266,
              -1.6516]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.3904e-01, -8.7653e-02, -1.5101e-02, -7.6971e-01,  5.7590e-01,
              1.3763e+00,  1.4995e-01, -2.2823e-01, -1.1496e-01, -1.5259e-01],
            [ 1.5336e+00,  6.9958e-01,  1.8829e+00,  2.0264e+00, -2.7837e+00,
             -5.1702e+00,  6.9975e-02,  3.9336e-01,  1.1567e-01, -1.9247e-03],
            [-2.3398e-01, -6.1984e+00,  3.4469e+00, -3.3904e+00,  9.9546e-01,
              1.1159e+00, -4.5016e+00, -1.6857e+00,  4.6823e-01, -5.2515e-01],
            [-5.4660e-01, -6.8157e+00,  4.1698e+00, -6.7576e+00,  5.3387e-01,
              6.3457e-01,  1.2774e-01, -4.9385e+00, -1.1892e+00,  1.1206e+00],
            [ 7.7217e-01, -7.9549e-01,  7.1396e+00, -5.2940e-01, -5.0504e+00,
             -9.9081e-01, -5.0202e+00,  4.6755e+00,  1.4346e+00, -2.4065e+00],
            [-1.3606e+00, -1.4327e+00,  2.7381e+00, -1.0089e+00, -8.3530e+00,
              1.8097e+00, -9.0816e-02,  6.8700e-01, -1.4108e+00,  1.7373e+00],
            [-2.8651e+00, -1.3950e+00, -1.0235e+00, -1.4614e+00, -4.4143e+00,
              1.5728e-01, -1.5312e+00, -5.3953e-01, -9.3208e-01,  8.4162e-01],
            [ 2.8638e+00, -8.8273e-01, -5.0169e+00,  3.4226e+00,  1.9126e+00,
              4.2964e+00,  3.6391e+00, -1.4373e-01,  1.7170e+00, -1.1167e+00],
            [ 4.0129e+00, -2.1360e+00, -2.4417e+00,  6.6317e+00,  2.3265e-01,
             -1.4340e+00,  7.6687e+00,  9.0836e+00, -2.2730e+00,  1.0985e+00],
            [ 8.2423e-01, -2.4873e-01, -1.3895e+00,  4.6603e+00, -3.6507e+00,
             -5.7495e-02,  5.2889e+00, -8.0834e-01,  1.1939e+00,  1.1658e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.012 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
