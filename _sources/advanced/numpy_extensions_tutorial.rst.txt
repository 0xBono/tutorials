.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.9666,  5.9852,  8.4224,  2.3899, 12.8235],
            [ 6.5737,  1.2118,  6.2768, 15.4721,  2.7272],
            [ 4.4896,  7.1263,  3.8177,  7.9415,  5.6654],
            [10.7908,  4.9067,  6.2168,  6.1550,  1.4941],
            [ 2.3600,  5.8735,  4.1594,  2.7764,  0.4689],
            [10.7908,  6.4028,  5.9054,  3.0180,  1.4941],
            [ 4.4896,  2.8262,  3.7422,  9.7174,  5.6654],
            [ 6.5737, 10.2951,  3.1544,  9.6868,  2.7272]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 6.7339e-01, -1.1739e+00, -7.2891e-01, -5.4257e-01,  5.2832e-02,
              9.0761e-01, -1.4314e+00, -5.5434e-01],
            [-2.1579e-01,  1.1765e-01, -2.2615e-01,  8.3454e-01,  9.8154e-01,
             -2.3241e-01,  5.6919e-01,  1.0782e+00],
            [-8.9964e-01,  1.4103e-01, -9.1859e-01, -7.9393e-01,  4.7118e-01,
              8.3168e-03, -1.5048e+00,  4.8781e-01],
            [-3.7998e-01,  1.9578e-01, -5.6553e-01, -1.4859e+00, -8.8826e-01,
             -2.3130e-01, -1.9906e+00,  1.0343e+00],
            [-4.0686e-01,  9.6485e-01,  9.4890e-01,  1.7113e-01, -6.3578e-01,
             -1.5663e-01, -6.6454e-01, -9.4116e-04],
            [ 6.0352e-01, -2.0922e-01, -1.3018e+00,  2.6464e-01, -3.7184e-01,
             -1.7652e-01,  2.0687e-01, -6.3465e-01],
            [-2.8289e-01,  1.6245e+00,  1.6124e-01,  1.7740e+00, -9.3827e-02,
             -4.8228e-01,  8.9468e-02, -1.3675e+00],
            [ 1.4368e+00,  3.8151e-01, -1.6641e-01,  1.3594e+00, -6.3814e-01,
              9.8038e-01, -1.2782e+00, -8.5481e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.5274, -0.5567, -0.2406],
            [-1.3613,  1.4278, -3.2390],
            [-0.8661,  0.5619, -0.7499]], requires_grad=True), Parameter containing:
    tensor([[0.6926]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.2749, -0.5788,  1.0518, -0.3460,  1.8382, -4.1580,  1.7588,  2.4933],
            [ 6.0066, -5.7880,  6.3352, -9.1990,  7.4000, -5.8127, -0.3764, -3.5212],
            [ 5.5530, -3.6214,  0.6203, -0.1497, -0.0930,  2.2461, -7.6701,  1.2009],
            [ 1.2016,  2.8431, -3.8859,  1.0186, -2.5317,  8.1080, -5.8697,  7.8476],
            [-3.7550,  3.5835, -1.8171,  0.0514, -6.6077,  8.7216,  2.2716, -0.0270],
            [ 0.0806, -2.8621,  1.5214, -4.2894, -5.9647,  2.0122,  2.7136,  4.4100],
            [-2.1404, -2.4872, -0.4035, -2.7178,  1.4417, -4.8844,  7.7670, -0.4766],
            [ 7.7458, -8.9113,  0.0907,  0.0954,  5.6675, -2.9281,  4.7767,  3.8493]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0982, -0.2929, -0.0382, -0.3614,  0.5908,  1.6218,  0.4149, -0.3335,
             -0.4351, -0.1086],
            [ 0.0265, -0.0674,  1.4802,  4.7393,  1.9065,  4.4503,  4.1737,  0.1498,
             -2.3060, -1.8222],
            [ 0.1521,  2.5980,  1.8105,  7.3673,  5.6635, -0.9286,  7.2564, -3.4476,
              6.1311, -5.4067],
            [ 2.9744,  0.6580,  0.6697,  6.1130,  0.9294, -0.1133, -1.1496, -1.7354,
              5.1242, -3.6039],
            [-1.7292,  1.8858, -5.6200,  1.9735, -3.7635,  1.3844, -1.9194, -2.7403,
              3.0765,  6.0599],
            [-2.2340,  4.9654, -5.3587,  7.7334,  0.9358,  2.0910, -4.5122,  9.5352,
             -4.5920,  4.4844],
            [ 1.4857,  0.1490,  2.5076,  0.7610,  2.2489,  2.3411, -3.8858,  0.2825,
             -3.1623,  1.2596],
            [-1.1151,  3.3019, -5.1071,  3.3322,  1.7340, -1.6575,  3.9327, -3.3247,
              1.2106, -5.1700],
            [-0.8391,  0.5319,  2.8895, -2.9919,  7.7292,  2.4483,  2.8107,  0.4321,
              3.2842, -7.5950],
            [ 0.1262, -0.6389,  2.2460, -0.8068,  2.1312,  1.2442,  0.0185, -0.5423,
              0.9973, -1.4951]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.529 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
