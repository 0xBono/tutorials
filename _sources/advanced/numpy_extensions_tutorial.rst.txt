.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.2671,  7.9594,  7.4017,  7.1922,  8.6385],
            [ 4.5247,  2.9549,  6.7548,  4.2596, 10.7537],
            [ 9.8776,  4.6382, 11.2441, 10.4898,  6.3730],
            [ 4.9817, 13.5736, 15.1962,  5.8841,  4.0991],
            [ 2.8403,  3.2087,  7.8198,  3.4201,  1.7047],
            [ 4.9817, 12.7053,  3.9595,  1.6738,  4.0991],
            [ 9.8776,  3.2939,  7.2973,  7.2343,  6.3730],
            [ 4.5247,  4.0836,  8.7682,  6.9009, 10.7537]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0331,  0.7979,  0.0817, -0.1409,  0.2806,  2.4185, -0.7771, -0.7409],
            [ 0.0965, -1.2725,  0.4380, -1.0758, -1.9994,  0.3530, -0.0088,  0.1825],
            [ 0.9398, -0.8884, -0.5980, -1.2155, -0.1988,  0.4569, -0.9834, -0.7680],
            [ 0.5574, -1.3613, -0.7784,  1.3409,  1.3708, -1.6058,  0.5284,  0.5955],
            [ 1.9899, -0.1718,  0.3588, -1.0799, -1.8604, -0.9742, -0.2783, -0.0734],
            [ 0.0856, -1.3025, -0.6663, -1.4579,  0.6463,  0.0456, -1.1574, -1.3060],
            [ 0.6461, -0.7955, -0.5802,  0.1362,  0.8969, -2.1617, -0.2217, -0.2416],
            [ 0.3308,  1.2106, -0.4699, -0.2237, -1.5579, -0.9920,  0.0409,  0.8592]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.8682,  1.1685,  1.0735],
            [ 0.8795, -1.2258, -2.0846],
            [ 0.0824,  0.8092,  1.9640]], requires_grad=True), Parameter containing:
    tensor([[-0.3883]], requires_grad=True)]
    Output from the convolution:  tensor([[-9.2525, -0.2588,  7.7917, -1.8933, -1.2148,  2.8728,  1.9197, -0.7374],
            [ 0.1291,  2.2656, -4.0835, -3.7469, -3.8139, -0.9493,  2.0540, -0.9921],
            [ 1.2631, -2.7840,  3.0451,  7.5365,  5.5512, -1.4248, -7.4024,  0.6057],
            [ 1.8930,  2.5926, -2.9186, -7.5829,  4.3352,  2.6997,  6.0669,  1.8587],
            [-0.0589,  0.4088,  4.1259,  5.3331, -7.6227, -6.3050, -3.2129, -3.4413],
            [-5.3052,  0.1759, -3.3765, -3.1135,  6.0517,  2.9018, -0.4889,  1.1938],
            [ 4.5955, -6.6159,  3.2674,  4.9906, -2.5147, -4.7104, -5.7584, -5.8979],
            [-1.8743,  2.2148, -1.9911, -7.0532, -3.4750, -0.6017,  0.5065,  5.4908]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ -1.2299,  -2.3430,   0.5291,   3.5598,   3.7303,   0.4351,  -3.7957,
              -2.8593,   1.5644,   1.0818],
            [ -0.7408,  -1.0828,  -0.3169,  -0.8838,  -4.1416,   0.1602,   0.4019,
               5.0720,   0.0465,  -2.1714],
            [  1.3222,  -1.5016,   2.6318,   0.4881,   2.8264,   1.1782,   0.1879,
              -8.6324,  -2.3801,   3.6090],
            [  0.2318,   1.1812,  -0.8581,   5.0305,   3.8635,  -4.4062,  -4.3840,
               7.9422,   5.1872,  -4.1236],
            [ -0.3833,  -1.2610,   5.5498,  -1.3991,  -8.6269,   0.3688,   5.0510,
              -1.6567,  -3.1758,   4.5284],
            [ -1.1841,   2.1320,  -4.1091,   2.8285,   6.8675,  -1.0423, -11.4091,
              -3.3225,   3.3976,  -1.1741],
            [ -0.9567,   0.2440,  -0.3603,  -2.7684,  -2.8340,   5.5779,   8.1734,
              -0.2196,  -3.6583,  -0.2089],
            [  1.8992,  -1.4588,   1.2388,   2.0078,  -4.4827,  -8.2925,  -3.7102,
               2.7374,   4.8376,  -1.0595],
            [ -0.4598,   1.4290,   1.9941,   0.2989,   6.1622,   6.4007,   1.3376,
              -2.2560,  -2.0422,   1.2482],
            [ -0.0494,  -0.4815,  -1.2097,  -0.6974,  -2.7300,  -2.8594,  -1.1649,
              -1.0970,   0.0712,   0.1395]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.109 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
