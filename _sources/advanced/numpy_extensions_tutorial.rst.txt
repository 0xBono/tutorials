.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.6540,  7.5569,  5.8805,  8.1986, 14.7664],
            [13.5574,  6.2302,  0.7799,  3.7644,  0.2066],
            [10.5735,  6.5751,  6.6726,  8.9956,  8.5431],
            [ 5.4193,  3.4135,  9.0322,  7.2260,  4.8674],
            [ 1.0032,  4.1894,  8.3224, 12.6756,  0.0983],
            [ 5.4193,  4.7818,  7.7261,  1.2611,  4.8674],
            [10.5735, 11.1998, 14.5271,  4.2714,  8.5431],
            [13.5574,  8.0707,  4.3161,  9.1140,  0.2066]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6418,  0.8625,  0.2016,  1.3510,  1.2473, -0.6324,  0.3589,  2.5178],
            [ 1.2975,  1.8851, -1.5859,  0.7954, -0.5067, -0.2423, -0.2736,  1.1975],
            [-0.5714,  0.6965, -0.2469, -0.7079,  0.0264, -0.3558,  0.4792,  0.6139],
            [ 0.5966,  0.9275, -0.5443,  0.7643,  1.3884,  0.7284,  0.4185, -1.3209],
            [-1.9251, -1.6570, -0.8655,  0.6583,  0.1814,  0.2303,  0.2277,  2.4240],
            [ 0.0371,  0.1915, -1.5911, -0.6815, -0.8435, -0.0550, -0.5467,  0.3767],
            [-0.1303,  0.2744, -1.4541, -0.6408, -0.7965, -0.0420, -0.1290, -1.0133],
            [ 0.3958, -0.8788,  0.0601,  1.4779, -1.5452,  0.7874,  0.9411, -0.8228]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1214, -0.3594, -0.4479],
            [ 0.6668,  1.0975, -1.1777],
            [ 2.4959,  0.3718, -0.3273]], requires_grad=True), Parameter containing:
    tensor([[-0.1916]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.4528,  4.1724,  0.7844, -3.9803, -2.0031,  2.9567,  0.3488, -4.3684],
            [ 1.5999,  1.9748,  5.6467, -4.5359, -6.1213,  0.9248,  0.6247,  1.9023],
            [ 6.7280,  4.2027,  1.2575,  4.8742, -2.7552, -2.4079,  4.8467,  3.5308],
            [ 7.3214, -2.0393,  1.4447,  3.9279,  1.1853, -0.4419, -1.6541, -2.5900],
            [-2.3636, -2.3715, -1.4565,  2.9082, -4.3101, -1.8452, -0.8316, -3.3306],
            [ 0.3820, -0.2743, -0.0569, -3.6263, -3.5121, -1.2469, -1.9471, -5.7891],
            [ 6.0545, -4.4061, -3.6094, -0.6538, -1.6605, -0.5073, -0.5918, -1.0745],
            [-3.9063, -3.8932,  0.1694,  1.3354, -1.9269, -0.4611,  0.1494,  1.4712]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1288, -0.3459, -0.4801, -0.1330, -0.4830, -0.5666, -0.8706,  0.1884,
              0.0233, -0.7044],
            [ 0.7153,  1.0940, -0.5258,  1.6964,  0.3270,  3.3902, -2.7977, -0.8604,
              3.2441, -1.8169],
            [ 2.5637, -1.1150,  0.0831, -0.9611,  5.1390, -0.0564, -2.4752,  2.5594,
              1.0821, -0.3826],
            [ 0.3751, -0.4906, -1.3334,  0.1396, -3.2236,  0.5119,  0.9370, -3.1794,
              0.8868,  0.0831],
            [-0.7299, -2.6647,  2.9178,  4.5816, -0.3845,  4.7165, -0.9157, -3.9461,
              2.1124,  0.1309],
            [-6.7879, -5.9393,  3.2864,  1.7953,  0.2769,  5.2331, -0.7776, -4.1962,
              1.4166,  0.5714],
            [-0.0377,  2.1980,  1.9047,  1.2930, -1.3785,  4.9508, -3.4233, -1.5409,
              0.2378,  0.7087],
            [ 4.2141,  3.9989,  4.8954, -2.5708, -1.8062,  2.3601,  0.5413,  0.1936,
             -2.4012,  1.1974],
            [-0.2373,  2.1450, -2.0104, -9.1447, -4.4616,  2.9183,  1.3844, -1.5077,
             -0.9070, -0.0556],
            [ 2.3418,  1.6808,  0.3750, -5.9167, -0.1908,  0.5489,  1.3197,  1.1761,
             -0.0558, -0.1201]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.601 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
