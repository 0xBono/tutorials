.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.0197, 10.0279, 11.5407,  5.9608,  2.7545],
            [ 6.4492,  5.7146, 12.0208,  2.8674,  4.6393],
            [ 4.1506,  6.4885, 11.6078, 11.7639, 11.2813],
            [13.0290,  5.6123,  5.3157,  1.4433,  8.6779],
            [ 0.0844,  7.3851,  8.0902,  3.4604, 13.7717],
            [13.0290,  3.5272,  3.8757, 11.0665,  8.6779],
            [ 4.1506, 11.9862,  8.8588,  2.0378, 11.2813],
            [ 6.4492,  7.4530,  4.2484,  3.6663,  4.6393]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6683,  0.5473,  2.6096,  1.2523, -0.0144, -2.0332,  1.9650, -0.4831],
            [-0.0856, -0.2654,  0.9219, -0.7395, -0.4718,  0.4479, -0.1853, -0.7803],
            [-1.9319, -0.2031, -0.9274,  0.1048,  0.0428,  2.7266, -0.9256, -1.1744],
            [-0.2359,  0.0632,  1.9832, -0.8688,  1.0571, -0.3499,  0.2412,  0.9983],
            [-0.7013, -0.2518,  0.7458,  0.9773, -1.0688, -0.2268, -0.1057,  0.1061],
            [ 0.8478,  0.0801,  0.6785,  1.3033,  1.4534, -0.1529,  0.3343, -0.1580],
            [-0.5977, -0.1492,  1.0776,  0.3701, -0.3099,  1.4372, -0.4181,  1.2803],
            [ 0.2061, -0.4542,  0.3809,  0.1045, -0.7746, -2.3046, -0.7358,  0.4285]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.9512, -0.4932, -1.1850],
            [-2.9753, -0.7425, -0.9091],
            [-1.7719, -0.5531, -1.3976]], requires_grad=True), Parameter containing:
    tensor([[0.9723]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.1373, -2.0901, -2.8980, -0.2303, -3.3288, -1.7670, -6.5679,  2.0801],
            [-6.1503, -6.2985, -5.1909, -4.6901, -9.1648, -3.4182, -1.9369,  2.9657],
            [-1.2003, -9.5091, -3.0368, -4.9068, -1.5869,  1.0687, -3.0192,  6.1924],
            [ 4.5184, -7.9546, -0.9190, -8.0071,  0.3946,  3.1316, -0.3659,  7.5235],
            [ 4.9877, -4.8048,  1.7698,  1.3322, -0.5117,  5.5409, -0.0356,  7.7765],
            [ 4.3384,  6.2011,  2.0096,  6.6881, -0.0881,  5.4578,  1.5901,  1.4351],
            [ 1.2002,  8.1532,  1.8604,  3.9864,  0.2517,  2.7088,  6.1481,  0.0715],
            [-2.2278,  3.0663,  8.0910,  5.2938,  2.7009, -0.8016,  9.8358,  0.9085]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4674, -4.2735, -6.1160, -3.2449, -0.8971, -0.1119,  1.5176, -2.0683,
             -0.0626, -1.0217],
            [-0.6138, -7.3317, -8.0045, -2.4523,  1.1925,  2.1700, -0.9306, -3.3026,
             -2.2618, -1.5540],
            [ 0.8764, -4.3385, -3.0561,  1.9975, -2.3635,  6.8007, -3.0757, -0.7554,
             -1.3239, -0.2524],
            [-0.4625,  4.5483,  2.0030, 10.9679,  0.4429,  5.0844, -5.2387,  0.5839,
             -3.4140, -1.0597],
            [ 0.1321,  8.8804,  5.4498,  9.1261,  2.3451,  6.2278, -2.2204,  1.3014,
             -0.1630,  1.0722],
            [ 3.7320,  6.8778,  5.4125,  7.1393,  2.3122,  8.1666,  4.2449,  4.2382,
              0.3150,  0.4555],
            [ 3.7303,  2.1432,  4.1029,  4.1331,  1.1531,  4.9767,  6.8905,  8.7886,
              4.6715,  1.7444],
            [-3.7205, -0.5534, -0.7183,  2.1612,  0.6230, -0.8480,  3.5533,  7.5519,
              3.4103,  4.3324],
            [-6.1684, -1.1352, -1.9366,  0.5519,  0.1166, -2.6638,  0.2600,  4.1352,
              2.7454,  1.6923],
            [-2.8820, -0.5957, -1.7166,  0.4101,  0.5625, -0.5194, -0.5350,  2.6163,
              0.6201,  2.5591]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.931 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
