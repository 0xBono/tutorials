.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.1183,  5.4041,  7.1945, 21.2521,  0.2316],
            [ 2.4691, 13.9458, 13.1549,  4.0253,  6.0219],
            [ 3.4898,  6.4531,  5.8997,  2.0828,  5.8446],
            [ 8.5505, 12.2966,  5.7036, 10.7548,  9.7629],
            [12.3661,  6.1095,  6.4679,  1.8605,  1.3105],
            [ 8.5505,  4.9242,  8.2653, 12.0283,  9.7629],
            [ 3.4898, 11.7195,  8.1680,  0.2032,  5.8446],
            [ 2.4691,  7.5794,  3.4477,  2.0565,  6.0219]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2542, -1.5181,  0.5777,  2.0151, -0.7746, -0.5290,  1.7434, -1.7660],
            [-0.1975, -0.6109,  0.4105,  1.4751,  0.1887,  1.6389, -0.1451,  0.1851],
            [ 0.1388, -0.3721, -0.2743, -1.2087, -1.9268,  1.7851,  1.6037, -1.1381],
            [ 1.6524,  0.8357,  2.1729,  1.3118, -0.9656, -0.1875,  1.1426, -1.4346],
            [ 1.0084,  0.0022, -0.0316, -1.6560, -1.7733, -0.1381, -0.9821,  0.2902],
            [ 0.9999, -1.2370, -1.0211,  0.2684, -0.8029,  1.0391,  1.5816,  0.0793],
            [ 1.2014,  0.6617, -0.8608, -0.1246, -0.6545,  1.2476, -0.5334,  0.1171],
            [ 0.0511, -0.7895, -0.1711,  0.2580, -0.1686,  0.8033, -0.9922,  0.8713]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0231, -0.4334,  1.3242],
            [-0.7766,  0.8916,  1.2171],
            [ 2.4051, -0.7727, -0.8942]], requires_grad=True), Parameter containing:
    tensor([[0.1384]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7720e+00,  3.5796e+00, -2.4328e+00, -4.2751e-01, -4.8209e-01,
             -7.4664e-01,  8.3271e+00,  1.0145e+00],
            [ 2.4510e+00, -3.1644e+00, -7.1875e-02, -6.5188e-01,  1.1310e+00,
             -9.3237e-01, -1.5092e+00, -2.2760e-02],
            [-5.0687e-01, -3.3808e+00, -1.6675e+00, -2.1124e-01,  1.2196e+00,
             -1.5400e+00, -2.3383e+00, -2.8230e-01],
            [-4.2329e+00,  4.1042e+00, -2.7935e-01, -1.3601e+00,  3.1414e-01,
             -3.6407e-01,  9.5029e-01,  1.4466e+00],
            [ 8.2769e+00, -5.6093e+00, -4.0510e+00,  3.2097e+00, -7.5618e-01,
             -2.9969e+00, -1.3812e+00,  9.8148e-01],
            [-2.3819e+00, -2.5454e+00,  2.7736e+00, -5.5156e+00,  5.1459e+00,
              2.4758e+00, -4.3485e+00,  3.8953e-03],
            [-1.2514e+00,  4.5128e+00,  1.3202e+00, -2.2836e+00,  1.1788e+00,
              5.4417e-01,  4.2914e+00,  2.3351e+00],
            [ 8.3004e+00, -3.0078e+00,  6.5275e-01,  3.5071e+00, -3.3990e+00,
              6.8468e+00,  1.0677e+00,  2.6906e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0658,  1.2856,  1.4163, -1.0499, -3.2690, -0.8217,  5.9853,  0.6008,
             -3.2645, -0.3704],
            [ 1.7638,  1.3119, -2.1467, -0.8173, -4.5797,  1.7524,  6.3644, -2.4060,
             -5.4324,  0.0763],
            [ 1.8214, -5.6472, -1.5580,  2.2623,  3.4210, -1.6012, -6.1019, -0.3196,
              3.0609, -1.4354],
            [-5.4200,  0.8271,  1.1370, -0.9988,  1.9386,  2.0911, -5.2334,  5.6979,
             -1.8643, -3.3581],
            [-2.4291,  2.0024, -0.4855, -0.4288,  3.3125, -3.4479,  5.6809, -3.8599,
             -3.9382,  1.3821],
            [ 3.5420,  1.8395,  0.0266, -0.2650, -3.4157,  3.7186, -4.1816,  0.6063,
              2.7579,  0.9018],
            [ 1.7083, -1.7387, -2.2079,  4.2931,  1.6097, -3.0134, -1.4873,  3.8973,
             -0.9270, -2.2337],
            [-3.0654, -2.4947,  6.3219,  3.3559, -3.3996, -0.1782,  1.6559, -1.0744,
              0.4298, -1.0667],
            [ 0.8796,  5.7665, -4.2838, -3.4894, -1.6045,  4.3750,  3.1094, -4.6086,
             -2.0360, -0.4380],
            [ 1.5196, -3.0864,  1.1671, -1.7047,  5.1711, -4.5240, -2.9253,  0.4034,
              1.4805,  0.6754]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.605 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
