.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.1296, 11.0001, 10.1192,  9.4778,  5.9962],
            [ 3.7052,  4.3841, 16.6858, 15.6945,  1.1206],
            [ 1.8114,  6.7169, 10.6067, 12.8535, 12.2641],
            [ 2.7230,  4.7458,  3.5690,  6.1641,  8.4797],
            [ 3.1273, 11.4055, 10.5103,  4.4902, 22.3966],
            [ 2.7230,  9.4976,  8.2768, 10.7618,  8.4797],
            [ 1.8114, 11.7169,  9.7968,  5.5617, 12.2641],
            [ 3.7052,  7.6681,  4.9764,  5.7946,  1.1206]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7414, -0.8568,  0.0361, -0.3735,  0.0444,  1.4662,  0.5460, -1.3039],
            [-0.7167, -2.1049,  2.4303, -1.2969,  1.6596,  0.3863, -1.9356, -0.1693],
            [-2.2408, -0.0176, -1.4367,  0.3550, -0.2398,  0.9572,  0.1313,  1.6244],
            [-0.4590, -0.7210, -0.0485, -1.1295,  0.2462, -1.9007,  1.3107,  0.4663],
            [-0.0888,  0.6593, -0.4239, -1.9251, -1.1546,  0.8051,  0.1574, -0.2684],
            [-0.0187, -0.0361, -0.8135, -1.7274,  3.0198,  1.4573, -0.1307, -2.2295],
            [ 0.2604,  0.2001, -0.5843, -0.9827, -0.8440,  1.3293, -0.2547,  1.1809],
            [ 2.0870, -1.0543, -0.9344,  0.8523,  0.2423, -0.0807, -1.6548, -0.6243]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0874, -0.4989, -0.7355],
            [-0.3154, -0.8058, -1.3114],
            [ 0.4246,  1.3866, -0.8381]], requires_grad=True), Parameter containing:
    tensor([[0.8041]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.0642,  1.6170,  2.9576,  2.9740,  2.7080,  1.9160, -1.7011,  0.0335],
            [-2.6183,  3.3487, -0.6749, -1.6637,  1.8775,  3.6933, -3.2502, -3.8574],
            [-2.2644, -1.0066, -2.0006,  3.0587, -0.1094, -0.4205,  1.5744,  0.4823],
            [-2.6598,  0.8357,  2.1631,  0.2352,  0.2323, -1.3807, -0.5314, -4.8267],
            [ 3.8137, -1.2684,  0.6590,  0.2720, -0.9131, -2.1742, -1.5276,  0.6521],
            [ 2.6703, -1.5548,  1.0759,  0.8508, -0.1752,  0.8554,  1.9227,  0.4288],
            [ 3.6021,  5.4226,  3.0880,  3.1479,  2.0565, -0.2310, -1.4531, -0.9198],
            [-5.7225, -0.0409,  0.8471,  0.1527, -2.2299, -1.0067, -0.1725, -2.5289]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0120, -0.0069, -0.2519, -0.1163,  1.1472,  1.0795,  1.0985,  1.2746,
              1.1871,  0.7704],
            [ 0.0874,  0.0622, -0.0680, -0.6073,  1.9459,  2.5896,  1.8181,  1.3279,
              3.6762,  2.9971],
            [ 0.1563,  0.8875,  2.1561, -2.3078, -0.8486,  0.0092, -0.9494, -2.4350,
              2.0749,  3.4925],
            [-0.0823, -0.1781,  1.8920,  1.5698,  0.2548,  1.7361,  4.2141, -5.0718,
             -2.2185,  1.5484],
            [-0.7294, -3.2681, -3.6152,  1.7975,  2.8335,  2.3924,  0.3383, -2.1812,
              0.8341, -0.2646],
            [-0.3895, -0.2582, -2.9521, -1.8202, -2.1256,  1.8696,  2.2208, -0.4253,
              0.2276,  0.2266],
            [ 0.9899,  1.8352, -5.5402, -1.2398,  0.8984,  1.8875, -2.8238,  0.8954,
              2.3050,  1.0433],
            [-0.7156, -1.0306,  1.1362, -1.2437, -1.7295,  1.9572, -2.4254, -1.1812,
              0.2979,  0.9712],
            [ 1.0031,  2.9503, -1.5613, -0.4502,  4.3141,  3.5028,  3.4434,  0.9432,
             -0.2009, -0.2341],
            [-0.2721, -0.7272,  0.9848, -1.2552, -2.3461, -0.0949, -1.5400,  0.0706,
              1.4980, -0.4650]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.149 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
