.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.1080, 17.3673,  3.8363,  7.6721, 13.0746],
            [10.2393, 12.0734,  5.4248, 14.1549,  4.8057],
            [13.8229, 17.7981,  6.6092,  1.7038, 10.3594],
            [ 4.9022,  9.8362,  7.9931,  6.9882,  4.1822],
            [ 6.7630,  9.3819,  7.3671,  1.6200,  9.2936],
            [ 4.9022, 10.3552, 11.4856,  6.6799,  4.1822],
            [13.8229,  6.6231,  3.6311,  3.7004, 10.3594],
            [10.2393,  7.4100,  4.7918,  4.3659,  4.8057]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.3500,  0.1358, -0.2076,  2.0299,  1.8987,  1.6583,  0.4039,  0.9081],
            [-1.1555,  0.4720,  0.9747, -0.4425,  1.7760,  0.3369, -1.0723, -2.5485],
            [-1.3006, -0.9071, -1.5613,  1.2502,  0.1079, -0.1826,  1.8741, -0.2223],
            [-0.1312,  0.9477,  0.3000,  0.6324,  0.1922,  0.7408,  0.0654, -1.2704],
            [-0.5447, -0.3667, -1.2193,  1.8693,  0.3318,  1.9718, -0.7881, -0.6515],
            [ 0.0848, -1.2488, -1.1555,  1.6206, -0.4002, -1.2030, -0.8826, -1.7462],
            [ 1.1139,  0.2296, -0.8161, -1.4730, -2.0734, -0.8877, -1.5475,  0.1437],
            [-1.9645, -0.0951, -0.7786, -0.2679, -0.3255,  1.2951,  0.0598,  0.2544]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3191, -1.8080, -1.4681],
            [ 0.9429,  0.2341,  0.5754],
            [ 1.9973,  1.0779, -0.8726]], requires_grad=True), Parameter containing:
    tensor([[-0.6668]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.7998, -3.9006, -2.7653,  2.2923,  3.3188, -0.0145,  0.5864,  2.0995],
            [ 3.6215,  1.3765,  1.9750, -2.9996, -3.5061,  0.3815, -2.1143, -0.2089],
            [ 0.7652, -0.8829, -0.0294, -3.1487, -6.8239, -1.6332, -0.0834,  1.2137],
            [-0.2501, -2.1794, -2.9689, -3.0933, -2.4555,  2.5931,  0.8866, -0.8447],
            [-1.5347, -3.9225,  3.6205,  5.2434, -1.6548, -3.9921, -0.7060, -6.4322],
            [ 1.8763,  5.1359,  3.2080,  1.4868, -0.5001,  1.4553, -1.2914, -2.2604],
            [-0.4351, -6.5928, -7.1374,  2.5987,  1.8236, -2.5151, -2.1610, -1.3571],
            [-1.8048, -0.5418,  1.1505, -1.1823, -3.5666,  1.0561,  1.2696,  0.3343]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5385, -3.1546, -2.9335,  0.1662, -0.0375, -0.5083,  0.6690, -0.5896,
             -1.1297,  0.0703],
            [ 1.4821,  0.2582,  1.0983,  0.7657, -1.7935, -1.7606,  2.3356,  1.7874,
              2.1404,  1.3298],
            [ 4.7166,  7.2263, -0.5231, -2.2639, -0.4625, -6.4172, -3.8305, -2.3961,
             -1.3684, -0.8136],
            [-2.9232, -3.0115, -5.3614,  5.5300,  1.9753, -2.9205, -2.4969, -2.4699,
             -1.7498,  1.0380],
            [-4.9070,  0.6004,  5.2988,  1.5081,  1.8838,  3.8203,  1.7808,  0.7027,
             -0.5512, -0.5843],
            [ 4.3190,  2.8377, -1.7140, -0.1910,  4.5521,  1.5195,  2.6366, -4.6838,
             -1.4776,  2.0277],
            [ 0.7725, -1.9155, -0.5915, -1.8166, -1.0455, -3.0699, -1.6537,  1.9325,
              5.0895,  0.9605],
            [-0.9956,  1.7238,  6.7096,  1.3448, -3.6795,  1.7340,  6.3557,  0.5604,
             -5.2119, -0.1416],
            [-1.5585, -0.2836,  2.7940,  1.6822, -0.2460,  2.3477, -1.2022, -5.5591,
             -0.1162,  1.3125],
            [-2.0675, -3.5875,  0.3843,  3.4710,  0.1604, -3.2180, -0.6316,  1.7095,
              0.2480, -0.2907]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.541 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
