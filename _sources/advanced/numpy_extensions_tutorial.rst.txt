.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[16.1987, 10.6806,  8.9985,  5.9738,  8.7195],
            [10.5071,  2.5809,  7.0451,  4.3225,  3.7057],
            [ 2.6489,  6.1140,  1.7122,  6.9076, 11.2969],
            [ 9.7253,  6.4603, 12.1169,  7.2482,  3.9838],
            [ 2.4453,  6.3145,  8.6151,  6.8957,  1.3717],
            [ 9.7253,  8.3869, 12.0573,  9.7296,  3.9838],
            [ 2.6489,  4.0776,  2.5594,  7.0197, 11.2969],
            [10.5071,  9.4482,  6.0330,  6.3024,  3.7057]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.6129e-01,  1.4819e+00,  1.1857e-01, -1.4509e-01,  4.1055e-01,
             -9.5074e-01, -8.3446e-01, -8.4374e-02],
            [-3.3672e-01, -3.7899e-01,  7.4324e-01, -1.8133e+00, -9.4506e-01,
             -8.1692e-01, -9.5819e-01, -1.6441e+00],
            [ 1.5713e+00, -2.4318e+00, -2.1204e+00,  6.9162e-01,  1.0804e+00,
             -2.8990e-01, -6.6196e-01, -1.0235e+00],
            [-4.4673e-01,  5.7554e-01, -5.9337e-01, -9.8611e-01, -9.2465e-01,
             -3.4632e-01, -5.6302e-02, -1.1078e+00],
            [-3.3704e-01,  1.0162e+00, -1.2282e+00, -8.1063e-02, -4.0861e-01,
             -1.4062e+00, -8.9942e-01, -3.5985e-01],
            [ 1.7498e+00,  1.5540e-01, -4.8568e-01,  4.5732e-01, -1.2939e+00,
              2.2792e-01,  9.3297e-01, -1.6136e-01],
            [-1.6456e-01,  9.4911e-01,  1.8038e+00, -1.5986e+00,  2.4313e-01,
             -8.0500e-01, -4.5001e-01, -2.1465e+00],
            [ 8.0948e-01,  5.0550e-01,  4.4502e-01,  2.2900e-01, -2.4344e-01,
              1.0769e-01,  2.1842e-03, -2.7868e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1558, -1.8501, -0.5986],
            [ 0.0497, -0.6387, -1.5941],
            [-1.4753, -1.0124,  0.3112]], requires_grad=True), Parameter containing:
    tensor([[0.6387]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.1396,  5.9244,  0.8471,  1.5463,  1.7663,  0.0908,  3.5532,  1.4968],
            [ 3.8265,  5.1297,  4.5779, -0.6208, -1.4942,  2.0575,  0.8171,  0.1844],
            [ 3.0149, -2.3965, -2.6912,  2.0138,  2.1406, -3.5957,  0.6843,  2.7287],
            [ 2.6215,  0.6061, -2.8117,  0.0628, -0.2120, -1.3612, -2.9807,  1.9839],
            [ 0.2724, -3.2273,  0.0102,  2.1250,  2.2631,  1.7967,  0.0764,  2.8307],
            [-0.9205, -4.3609, -2.2211,  7.6448,  4.2711,  0.5700,  5.6873,  2.2571],
            [ 3.2994,  1.4301,  1.5685,  1.5600,  6.9403,  9.8421,  3.1742,  2.4606],
            [ 2.2291,  3.6286,  5.5332,  7.5673,  5.7338,  6.2721,  7.9090,  2.1095]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.8980, -0.8818, -1.0916, -2.3376, -1.7508, -1.4110,  0.1096,  0.7222,
             -0.4177, -0.2826],
            [ 2.3713,  5.3396,  3.4843, -2.2520, -4.6508,  2.6958,  1.9075, -0.7787,
             -1.3554, -1.4713],
            [-0.6905,  1.7368,  4.7730,  3.9996, -2.4448, -4.2280,  5.1782,  2.0448,
             -0.7293, -1.3800],
            [ 1.9721,  4.9836,  2.8379, -5.8283, -0.5626,  2.3372, -3.2827, -3.7077,
             -0.9246,  1.9878],
            [ 1.1246,  2.3216,  2.9882,  1.1354, -5.5045, -5.0079, -4.9983, -6.1996,
             -3.1609,  1.1814],
            [-1.6539,  0.3716,  0.4722, -3.7714, -4.4857, -0.4407, -4.8308, -4.5022,
             -2.2736, -0.9426],
            [-0.0283,  1.9090,  0.6247,  1.3052,  2.8784,  1.7307, -4.6842, -5.3750,
             -2.4416, -0.9780],
            [-2.0003, -4.2982, -5.5805, -0.8792,  5.7381,  3.0215, -1.1006, -5.3408,
             -6.0118, -2.5868],
            [-0.5986, -1.4838,  0.4327,  3.0946,  2.4006,  0.0286, -0.8020, -4.7896,
             -2.7304, -2.6201],
            [-1.9546, -2.6638, -0.2369, -0.7581,  1.0085, -0.5499, -2.6125, -2.7916,
             -1.6984,  0.5718]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.034 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
