.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.9690,  7.3382,  5.5923,  5.2055,  7.9173],
            [11.7001,  2.6089,  5.5008,  5.9643,  6.4867],
            [ 9.6049, 10.7009,  8.4119,  7.8937,  3.1389],
            [10.9248, 12.7299, 14.6776, 11.8204,  5.9060],
            [ 2.8970,  3.8313,  7.9017,  4.6248,  7.6269],
            [10.9248,  8.8740,  6.0629,  7.7617,  5.9060],
            [ 9.6049,  6.4138,  2.3103, 12.2961,  3.1389],
            [11.7001,  2.5407,  3.9933, 11.7465,  6.4867]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.9637,  2.5964,  0.3248,  0.8916,  1.5862,  0.1096,  1.9093, -0.0125],
            [ 0.0512,  1.4833,  0.2451, -1.5726,  1.2377, -0.0553, -0.5573, -0.4670],
            [-1.2975, -1.6984,  0.8988,  0.4976, -0.9154, -0.6100, -2.5958, -0.0949],
            [ 0.1549,  0.8548, -0.3711, -0.7547,  0.5975,  0.2183,  0.2754, -0.9841],
            [ 1.0631, -0.9061, -0.5242, -1.0705, -0.8926, -0.2117, -0.2596,  0.7845],
            [-1.5533, -0.7627,  0.2476, -0.1271,  0.3600, -0.2921, -0.9676, -1.8284],
            [ 2.3450, -0.0077,  0.5771,  0.2176,  0.1982, -0.2633, -1.1490, -1.0628],
            [-0.0447, -0.9265,  1.1397, -0.8253, -0.0549, -0.2305,  0.9095,  0.1675]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4537, -1.6646,  0.1497],
            [-1.3334,  0.7407, -1.2877],
            [-1.6378, -2.5076,  1.7651]], requires_grad=True), Parameter containing:
    tensor([[-1.2470]], requires_grad=True)]
    Output from the convolution:  tensor([[  2.1275,   1.7868,  -6.8611,   8.0797,   2.9489,   2.1599,  -7.1193,
              -4.2725],
            [  0.2332,   2.0556,   2.0772,  -9.3033,   3.8057,  -1.7060,   5.5639,
              -4.2679],
            [  1.2213,  -0.9026,   0.4194,   3.1164,  -2.8315,  -2.3278,  -6.0510,
               7.0204],
            [ -6.6881,   2.6666,  -6.3057,  -0.7611,  -4.4636,  -1.9844,   3.2345,
               0.6900],
            [  4.9627,  -4.6489,  -1.2464,  -5.9939,   0.8580,  -9.7410,  -3.0928,
               5.2923],
            [ -6.1550,  -1.2191,  -1.8990,  -1.9718,  -6.7322,  -3.2135,  -4.7602,
               4.2987],
            [ -2.6127,  -6.7701,  -7.0619,  -4.6212,  -5.6276,  -7.0021,  -0.0235,
               3.9650],
            [ -5.2765,  -6.2755,  -6.6154, -14.6576,  -5.2214,   1.1668,   1.9173,
               1.8404]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4236, -1.1504,  1.3061, -1.5612, -0.7347, -0.7860, -5.7420, -0.1818,
              0.9322, -0.0765],
            [-1.3528,  1.0611, -4.3152,  0.1702, -2.2818, -4.2918, -0.3848, -2.9190,
             -0.8239,  0.6361],
            [-1.9890, -2.1162,  4.2823, -7.9970,  3.7447, -7.4020, -7.4574,  4.1783,
              1.4874, -0.6647],
            [-1.3066, -2.5223, -2.5847,  1.4585,  0.0678,  3.4436, -2.0149,  1.5826,
             -0.1960, -0.5395],
            [-1.9424,  1.1760, -1.7441,  3.1615,  3.6078,  6.0101,  3.2047, -2.3737,
             -1.4342, -0.4412],
            [-1.5324, -3.5797,  5.2992,  1.5731,  4.2698,  4.0200,  0.3165, -0.7861,
             -4.2199,  0.7854],
            [ 0.5870, -1.7885, -1.4091,  3.8238,  1.1443,  5.3565,  1.3971, -9.8223,
              0.8297,  0.6416],
            [-0.1597,  0.3371, -0.5032,  2.6521, -1.1822, -2.6838,  1.0596, -3.7370,
              2.4391,  0.5585],
            [-2.1185,  3.5791, -0.2909, -6.0338, -0.0671,  4.7051, -4.1339,  2.1507,
             -0.2737,  1.3270],
            [-2.5562, -2.8939,  6.3503,  2.8636, -2.4407, -2.1444,  2.1930, -0.8484,
              4.7494, -2.4189]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.542 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
