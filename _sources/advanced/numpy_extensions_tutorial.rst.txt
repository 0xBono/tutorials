.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.6899,  1.4925, 10.5598,  6.8576,  8.4230],
            [ 6.6001, 10.4730, 12.0923, 10.4360,  2.4420],
            [ 1.7153,  4.2782, 15.8936,  3.0823, 14.1816],
            [ 8.5440,  5.5990,  0.9703,  6.2781,  9.0250],
            [ 6.5054,  7.4915,  4.2712,  8.6740,  3.3219],
            [ 8.5440,  0.9247, 12.1375, 13.8141,  9.0250],
            [ 1.7153, 11.6795,  7.0009,  5.9825, 14.1816],
            [ 6.6001,  9.5386,  7.1076,  7.1635,  2.4420]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8112,  0.2092, -0.2352, -2.1603, -0.0290, -0.0332, -0.0808, -0.4306],
            [-0.4608,  0.1178, -1.8259,  1.1091, -0.7375,  0.0568, -0.9554, -0.8609],
            [ 0.3075, -1.2795, -1.2132,  2.1803,  0.0371, -0.2447,  0.1296,  1.8643],
            [-0.1929, -1.5086,  1.5774, -0.7898,  0.6342, -0.7784, -1.2956, -0.6467],
            [-0.6920,  0.5320,  1.7143,  1.1535, -1.1081,  0.9754,  0.3703, -0.7124],
            [-1.0037,  0.6167, -0.7868,  1.7859,  0.7715, -0.3754,  0.5083,  0.0823],
            [-1.8016, -0.5791, -0.1670,  0.3956, -1.4583,  0.2547,  0.9330,  1.2650],
            [-0.0974,  1.5347, -0.3923,  0.5349, -1.5466, -2.6958,  1.7295,  0.2941]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0863,  1.0213,  0.6490],
            [ 2.0360, -1.9344,  0.7706],
            [ 1.3253, -0.8827,  0.2849]], requires_grad=True), Parameter containing:
    tensor([[-0.4937]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.8655, -0.5783, -4.5255,  2.0978, -1.7542, -3.5208,  2.4735, -5.5954],
            [ 4.1085, -3.8767, -2.6968,  1.5163, -3.3576,  2.1402,  1.8572,  1.2135],
            [ 2.5744,  0.7359, -6.9821,  4.0567, -9.0861,  4.9329, -2.5466,  1.7828],
            [-2.4483, -0.5757,  1.2596,  4.2779, -0.4452,  3.3422,  0.5697, -1.6338],
            [ 1.1827, -1.6822,  2.5442, -3.5714,  0.3610, -3.6740,  2.6326, -4.4637],
            [ 4.2351, -1.3997, -1.4426, -4.8053,  1.6865, -0.4422, -2.9959,  1.2376],
            [-0.9028,  0.9046, -3.0610,  0.2591,  3.0633, -1.2062, -5.1481, -3.3310],
            [-3.5179,  1.5922, -3.1269,  5.1368, -3.8528, -1.7986, -0.1370, -0.7630]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0470, -0.5478, -0.2025,  0.6782,  0.4536, -1.1202, -0.2384,  0.7185,
              1.1666,  0.6265],
            [-1.1067,  1.4135,  2.1363,  0.1108, -1.4023,  4.4761, -0.0742,  4.9269,
             -0.2396,  0.7096],
            [-0.5991,  4.5231, -1.7077,  3.9069, -6.5657,  5.5495,  1.6265, -3.3324,
              0.1760, -0.2644],
            [ 1.7001,  2.9846, -3.2953, -1.1988,  6.4030, -3.8753,  4.3510, -4.9059,
              0.6592, -1.3547],
            [ 2.9355, -3.5986,  0.7989, -1.4088,  2.8507, -6.3062,  3.8637, -2.2803,
              2.1153, -2.0245],
            [-0.2015,  0.3020,  1.2682,  0.1860,  7.0326, -3.5729,  3.8413, -9.2823,
              4.3776, -0.8802],
            [-0.9628,  5.6229, -0.1598,  4.3925,  1.0079,  1.4141, -0.7641,  2.1916,
             -0.5895,  0.8081],
            [ 2.0792,  0.8858,  0.0921,  4.0032, -2.0055, -0.0328, -1.0952,  5.8897,
             -1.2765,  1.7765],
            [-2.4344,  6.8352, -1.8230, -2.6696,  5.9966, -2.5276,  1.2879,  3.0464,
             -2.8617,  1.2733],
            [-2.5632,  3.1906, -0.8539, -2.1473,  2.8683, -0.7834,  0.7896,  1.2995,
             -0.9833,  0.3779]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.196 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
