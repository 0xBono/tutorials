.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.5263, 15.1697,  7.5231,  8.0663,  8.3724],
            [ 8.5558,  2.4371,  2.7682,  5.1200,  8.5696],
            [ 5.8489,  2.3126, 12.9925,  5.1282,  5.4145],
            [ 6.3811, 12.1318,  5.0278,  8.1165,  8.8630],
            [ 4.9040,  8.6890,  7.8466, 11.6782,  6.6410],
            [ 6.3811,  6.7331,  3.5759,  3.3475,  8.8630],
            [ 5.8489,  5.2322,  5.4497,  9.1605,  5.4145],
            [ 8.5558,  6.6749, 11.6128,  0.9231,  8.5696]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4138, -1.0456,  0.2679, -1.8197, -0.4219, -0.5235, -0.8077, -0.0313],
            [-1.2314, -0.9442, -0.2249,  0.4507,  0.1366,  0.4980,  0.9128,  3.0526],
            [ 0.5663, -1.9480, -0.2123,  0.8999,  0.8360, -0.0071,  0.1140,  0.3505],
            [-0.5101,  1.1328, -1.0918, -1.3204,  0.4009, -0.6327,  1.5603,  1.4495],
            [ 0.8306, -0.4120, -0.9117,  0.0362,  1.2512,  1.6363, -0.6816,  0.1905],
            [ 0.4324, -0.9067,  0.8965, -0.4830,  1.2149, -1.2905,  0.1463,  1.0318],
            [ 0.3661, -0.4417,  0.7449,  0.0114, -0.0598, -0.7162,  1.1907, -1.0274],
            [-1.6289, -1.2197, -0.7088, -0.8237,  0.1615,  1.1092,  1.3240, -0.1790]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1070,  1.1013,  0.3467],
            [ 0.6746, -1.8549, -1.2454],
            [-0.4220,  1.3586,  3.0727]], requires_grad=True), Parameter containing:
    tensor([[0.4400]], requires_grad=True)]
    Output from the convolution:  tensor([[-8.2289, -3.4638, -3.0447, -2.7358, -0.2935, -0.8378,  4.1667,  2.3434],
            [ 3.3196,  0.7705, -4.3731,  2.1578,  1.0707,  6.6693,  8.0923,  3.8338],
            [-4.2201,  3.2441,  3.9357,  3.0929,  1.7778,  1.5544, -7.0360, -5.0070],
            [-3.6046,  1.5103, -1.8023, -0.8806, -7.2378, -7.1591,  1.3285,  7.0713],
            [-2.2806, -2.4380, -2.1256, -0.6260,  6.5890, 14.3463,  4.0036, -3.8320],
            [ 1.2881,  1.1528,  1.6635, -2.6735, -4.4588, -6.2876, -4.0925,  4.0884],
            [ 1.2258,  3.4058,  2.5379,  2.6582,  7.2769,  5.4635,  6.3790,  1.7428],
            [-4.8218, -4.4661, -1.9428,  1.4454, -1.8926, -0.0854,  0.6974, -1.1894]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.4753e-01,  1.6202e+00, -4.0112e-01, -2.2285e+00,  9.0021e-01,
             -7.5930e-01, -3.6144e-01,  1.8466e+00, -1.7311e-03, -1.7285e-01],
            [ 8.6037e-01, -2.6502e+00,  8.1852e-01,  6.1777e+00,  1.0952e+00,
             -1.9309e-01,  2.2600e+00, -4.7654e+00, -2.8296e-01,  9.9095e-01],
            [-2.7926e-01,  3.5361e+00,  5.7402e-01, -7.1759e+00, -8.6231e+00,
              1.2211e+00, -4.1040e+00,  6.3654e+00,  4.9385e+00, -2.5778e+00],
            [ 7.5736e-01, -3.8514e+00,  3.4151e-01,  1.2603e+00,  4.3596e+00,
              6.6060e+00, -2.0174e+00, -4.1557e+00, -7.0822e+00,  1.7603e+00],
            [-1.6623e+00,  3.7130e+00,  8.6785e+00,  5.2831e+00,  5.1381e+00,
             -5.1511e+00, -1.7123e+00,  5.2990e+00,  8.8030e+00,  4.3143e+00],
            [ 6.6469e-01,  4.5819e-01, -7.7558e+00, -7.5725e+00, -6.6757e+00,
             -4.1184e+00, -1.9648e+00, -6.6005e+00, -7.5733e+00, -4.6667e+00],
            [ 1.0777e+00, -2.8485e+00, -2.8804e-02,  2.7494e+00, -1.0459e+00,
              6.0176e-01,  6.4991e+00,  5.5114e+00,  2.8143e+00,  5.9059e-01],
            [-6.3354e-01,  4.0340e+00,  5.3984e+00, -5.9223e+00,  4.1715e+00,
              6.7803e+00, -5.5157e+00, -9.8455e+00, -3.1823e+00, -1.7490e+00],
            [ 1.1383e+00, -3.4600e+00, -8.8499e-01,  6.8600e+00,  1.2710e+00,
             -9.4419e+00, -8.2074e-01,  7.7982e+00,  7.7826e+00,  2.1789e-01],
            [-8.5355e-01,  2.9811e+00,  5.7902e+00, -3.6164e+00,  1.6277e-01,
              6.8843e+00,  2.3015e+00,  3.5936e+00,  3.7778e-01, -4.8550e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.383 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
