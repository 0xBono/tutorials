.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.3597, 10.8143,  3.9749,  6.0782,  6.0641],
            [ 8.5780,  9.6235,  7.5483,  8.1323,  2.3194],
            [ 3.4024,  8.7028,  8.2956,  3.1968, 12.0347],
            [ 8.6923,  7.6938, 11.1350,  5.6961,  8.3666],
            [ 5.2262,  6.7726,  7.3133,  5.1969,  7.5095],
            [ 8.6923,  8.2310, 10.0099, 10.2758,  8.3666],
            [ 3.4024,  2.6410,  7.0949,  6.7881, 12.0347],
            [ 8.5780,  7.2854,  2.4213,  5.8694,  2.3194]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 6.3199e-02, -7.3916e-01, -1.2433e-01,  3.3598e-01,  1.4322e+00,
             -1.5920e+00, -5.5309e-02, -7.3732e-01],
            [-9.1536e-02,  2.6908e+00,  9.6729e-01, -3.7112e-01, -1.3565e-04,
             -1.3327e+00,  1.7209e+00, -9.1390e-02],
            [-1.1555e+00,  5.7074e-02,  3.8134e-01,  3.4756e-02, -4.9699e-01,
             -6.1626e-02,  1.2990e-01, -3.2674e-01],
            [-1.3174e-01, -3.0426e-01,  7.9503e-01,  1.5916e+00,  6.0637e-01,
              9.1796e-01,  3.7813e-01,  1.0202e-01],
            [ 7.0244e-01,  2.1089e+00,  1.9727e-01,  3.7654e-01,  1.3461e+00,
             -4.4607e-02, -5.7756e-01, -1.5265e+00],
            [ 6.6531e-01, -1.7822e+00,  1.7627e+00, -1.3669e-01,  4.3645e-01,
             -1.6537e+00, -9.0669e-01,  7.4805e-01],
            [-4.4969e-01,  8.4333e-01, -6.0165e-01,  3.7923e-01, -1.5470e+00,
              2.9363e-01, -7.2359e-02,  4.9321e-01],
            [ 5.7499e-01,  3.2608e-01,  2.1087e-01, -1.2271e+00, -1.3401e+00,
             -1.3611e+00, -1.0802e-01,  6.3675e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2391,  0.3049,  0.1693],
            [-1.1177,  0.6744, -0.7893],
            [ 1.2046, -0.9091, -0.0355]], requires_grad=True), Parameter containing:
    tensor([[-0.7181]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.4626e-01, -3.8495e+00,  8.2692e-01, -7.1467e-01, -3.0799e+00,
              3.5530e+00, -2.0167e+00,  1.2167e+00],
            [-2.7437e-01,  4.0195e+00, -4.5098e+00, -2.3391e+00,  2.3553e+00,
             -9.4508e-01,  1.8998e+00, -3.9907e+00],
            [ 3.5358e+00,  8.4458e-01,  1.0229e+00, -2.7770e+00, -1.8170e+00,
              1.3523e+00, -6.6158e+00,  5.8805e-01],
            [ 3.1241e+00, -6.3519e+00,  2.6116e+00,  1.8735e+00, -2.1836e+00,
             -2.1126e+00, -2.7060e+00,  2.0559e+00],
            [-2.8990e+00, -6.4691e-01, -1.1919e+00,  8.2276e-01, -1.6634e+00,
             -1.5005e+00,  9.5779e-01, -5.3099e+00],
            [-9.2465e-01,  1.7121e+00, -1.7211e+00, -1.5047e+00,  3.2138e+00,
             -1.1526e+00, -1.5809e+00, -2.2915e-01],
            [ 3.3831e+00, -6.3483e-01,  2.9723e+00, -2.6242e+00,  2.7481e+00,
             -2.4325e+00, -5.3492e-01, -4.5870e-01],
            [ 8.3666e-01,  2.1217e+00, -6.5708e-01, -1.5016e-01, -2.3926e-02,
             -2.9226e+00,  5.4246e-03,  1.0781e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.9204, -0.2735, -0.7797, -1.0876, -1.5397,  1.8337,  1.0878,  0.7440,
             -0.4367, -0.1596],
            [-2.5161,  0.3927, -1.3284, -0.0945, -0.2572,  2.1790,  0.9975,  1.4589,
             -0.5500,  0.5961],
            [-0.4541,  1.2399, -1.2675,  2.0219,  0.7695, -1.3151,  0.1764,  1.1841,
              2.0692,  0.6637],
            [ 1.7721, -1.2660,  0.3985, -0.5621, -3.9900,  0.7039, -2.8418,  3.8045,
             -1.1436,  0.1330],
            [-2.0389, -1.8169, -0.0682, -1.7936,  0.3003, -0.4815,  0.4670, -2.3565,
              0.4591,  1.0566],
            [ 1.3858, -0.4861, -3.3214,  0.1088, -0.0670, -0.7161, -4.7042,  0.0189,
              0.8159, -0.8625],
            [ 6.2446, -2.0873,  3.8675, -1.6292, -1.1953, -0.3690, -1.8731,  3.9311,
             -2.7310,  0.2130],
            [-1.5210,  2.3303, -0.2021,  4.7176, -3.1100, -0.2369, -1.5562, -1.4912,
             -0.8150,  1.3048],
            [-1.7574,  1.7801, -1.4478,  4.0047, -1.4413,  1.2039,  0.1475, -4.3690,
              1.3586, -1.2690],
            [ 0.1063, -0.7827,  1.3480, -3.9891,  3.3222,  0.1323,  0.8271,  0.9880,
             -1.5523, -0.0590]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.109 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
