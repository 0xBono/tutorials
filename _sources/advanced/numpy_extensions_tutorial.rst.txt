.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.0119, 10.4295, 14.1715,  2.4614,  3.6378],
            [ 6.4758,  5.0254,  3.2498,  5.8593,  6.7919],
            [ 3.0785, 12.9412,  6.7639,  3.5128,  7.4283],
            [ 2.1325,  5.4667,  4.1493,  3.6021,  2.9837],
            [18.1465,  4.7778, 13.1528,  6.0979,  2.1990],
            [ 2.1325,  8.8599,  1.7735, 10.8274,  2.9837],
            [ 3.0785,  4.5035, 14.8100,  4.1682,  7.4283],
            [ 6.4758, 18.9718,  8.5557,  7.9763,  6.7919]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8505, -0.0330, -1.0330, -0.1482,  1.5196, -1.0122,  0.3189,  0.0797],
            [-0.5125, -0.4532,  1.1722,  2.3712,  0.5451, -0.0422,  0.1526,  0.0456],
            [-0.1275, -1.6152, -2.0874,  0.2769,  1.3514, -0.7372, -0.6475,  1.5728],
            [ 1.6865, -0.0096,  0.1316, -1.0320, -0.3333,  0.9904,  0.8026,  1.2682],
            [ 1.1500, -1.5284, -1.9737, -1.8881, -0.0723,  0.6896,  0.7801,  0.4973],
            [ 0.8716,  0.0231, -0.6246,  0.0969,  0.0954, -0.6874,  0.2001,  0.8878],
            [ 0.8777, -0.2281, -0.8324, -0.1151, -0.5253, -1.0988, -3.2474,  0.6079],
            [-0.3828,  1.8044, -1.3694, -0.1681, -0.4607,  0.9960,  0.6000, -0.5982]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1800, -0.0528,  0.3219],
            [-0.4867, -0.1048,  0.2704],
            [-0.9379, -0.6714, -0.7811]], requires_grad=True), Parameter containing:
    tensor([[0.5801]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.0228,  0.4579,  2.5874, -1.0489,  2.2955,  2.6784,  4.9400,  1.3026],
            [ 0.4490,  1.4961,  1.6713, -0.1922,  0.1631,  0.6770,  2.9284,  2.3383],
            [ 0.5603,  1.0958,  0.8562, -0.5163, -0.6915,  0.7340, -0.9302,  0.0436],
            [-1.1247,  0.7050,  1.7475,  1.6544,  2.4558,  3.0943,  0.8851,  2.7595],
            [ 0.9722,  3.2729,  2.1180,  0.9471, -0.6987, -3.0388, -0.3870,  1.3010],
            [ 0.2647,  1.8926, -0.8851,  1.1268, -0.2790, -0.9622,  0.8632, -0.1797],
            [-0.0166,  1.0194,  0.6241,  2.1591,  0.9477,  3.2152,  3.6278,  3.2597],
            [-1.2599, -1.7468,  0.5068,  0.6165,  0.7581,  0.1961, -1.2994, -1.6109]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1435, -0.2105,  0.5729, -0.2883,  0.5060,  0.1417,  0.1157,  0.0131,
              0.0189,  0.0467],
            [-0.4217,  0.2272, -0.4544, -0.8175,  0.4270,  0.2484,  0.6165, -0.0083,
              0.0298,  0.0655],
            [-0.8700,  0.6077, -1.3131, -1.5513, -1.9269, -0.8448,  0.4868, -0.5488,
             -0.9925,  0.0279],
            [ 0.7723,  1.3771,  0.2247, -1.1781, -2.6664, -0.8097,  0.0213, -0.6486,
             -1.5516,  0.3690],
            [ 0.9389,  2.7890,  0.1925, -1.7817, -3.5854,  0.0653,  3.0698,  2.3738,
              1.1991, -0.0578],
            [ 0.1228,  1.6623,  0.0687,  0.1830, -1.7527,  0.4287,  2.1164,  1.1846,
              0.6276, -0.4785],
            [ 0.8448,  1.0124,  1.3909, -0.0686, -1.0103, -0.4503, -0.8203, -0.6925,
             -0.2931,  0.8765],
            [ 0.2157,  0.9321,  2.9551,  1.2729,  2.0578,  1.0674,  2.4426, -0.9711,
              0.1472, -1.0240],
            [-0.1592, -0.3459,  1.0658,  1.1805,  0.3327, -0.5132, -0.6183, -0.7995,
             -1.2588, -1.5197],
            [ 0.1960, -0.4551, -0.4708, -0.8780, -1.8008, -2.0235, -2.1219,  0.5807,
              0.7725,  1.2324]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.530 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
