.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.7142,  6.4111,  5.2901,  5.4524,  0.4472],
            [ 8.6579,  9.4833, 10.5725,  3.0189,  9.0607],
            [10.2384, 10.2773,  2.5660, 16.5864,  8.1036],
            [11.5074,  3.5059, 20.1015,  4.2136,  2.0195],
            [ 9.1845,  3.5731, 10.5709, 14.0338,  2.9021],
            [11.5074,  5.0428, 10.5988,  7.1257,  2.0195],
            [10.2384,  7.5215, 16.4437,  2.0780,  8.1036],
            [ 8.6579, 12.7745,  4.5498,  6.7129,  9.0607]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2865, -0.1883,  2.0045, -1.5531,  0.2735,  1.6068,  0.4245,  1.0938],
            [-0.1081,  2.0861,  0.6248,  0.5595, -0.7877,  0.2803, -0.5762,  0.3411],
            [-0.5747,  1.4539,  0.6258,  0.1695, -0.7955, -1.9354, -1.5330,  1.0592],
            [ 2.2188,  1.6390, -0.6092, -1.5217, -1.2523,  1.6292, -1.2425, -3.2856],
            [-0.4619, -0.3606,  1.5850,  0.1662,  1.1652,  0.0415,  0.6712,  1.7177],
            [-2.1736, -0.7871, -0.7264, -0.4849, -0.7486, -1.3459,  0.7042, -0.3113],
            [ 0.7066,  0.3024, -0.7188,  0.6551,  2.0439, -1.1673, -1.0677, -0.6742],
            [ 0.3095, -0.9078,  0.6286,  0.2236, -0.0297,  0.6195,  1.7873,  0.5123]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1547, -3.1132,  0.1683],
            [-0.2264,  1.0768,  0.4724],
            [-0.5986, -2.6718,  1.1008]], requires_grad=True), Parameter containing:
    tensor([[-0.9879]], requires_grad=True)]
    Output from the convolution:  tensor([[ -7.8582,   2.0741,  -6.4298,  -2.0286,   4.0560,  -4.3565,   4.9314,
              -0.4607],
            [  2.6982,   1.0149,   2.5470,  -6.5984,  -6.6561,   0.7138, -11.1378,
              -2.1208],
            [ -1.6170,  -0.3331,  -3.5130,  -1.4622,   2.3655,  -4.4943,  -2.5075,
               2.6450],
            [  1.8825,   3.6015,  -0.6848,  -7.0339,  -2.2149,   5.7560,  -5.8510,
               0.7022],
            [  6.3719,  -8.5356,   4.4062,   0.1374,   0.3095,  -6.2501,  -1.8415,
               6.8507],
            [  2.4034,  10.8725, -10.3748,   2.5342,  -0.4770,   3.2986,   2.5747,
               1.5732],
            [ -0.9604,  -3.3420,   7.3774,  -4.1217,  -7.8040,  -2.4659,  -3.5854,
               3.8579],
            [  3.6071,   1.6279, -12.1314,   5.9494,  -3.1027,   7.2032,   1.7372,
              -3.3953]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-7.4646e-02, -1.5682e+00, -1.2103e+00,  6.0200e-01, -3.8607e+00,
              1.8972e+00, -3.1662e+00,  5.4360e+00,  2.4205e-01, -2.8358e-02],
            [ 1.8427e-01,  6.4550e+00,  2.8454e+00, -2.4491e+00,  9.7876e-01,
              3.1161e+00, -2.6013e+00,  1.4866e+00,  7.1319e-01, -1.7805e-01],
            [ 5.6361e-02, -5.0822e+00, -1.8464e+00,  1.7701e+00, -5.0221e+00,
              1.6192e+00, -1.6001e+00,  8.3916e+00, -2.7256e+00, -4.5251e-01],
            [ 6.6176e-01, -8.7266e-01,  7.2727e-01, -5.1745e-02,  4.6780e+00,
             -1.1309e-01, -2.5849e+00,  2.7638e+00, -5.6080e+00, -2.9727e-01],
            [-7.4609e-01,  3.0300e+00,  4.2240e+00,  5.0946e+00,  2.1338e+00,
              2.7558e-01, -4.8852e+00, -1.2275e+00, -1.0214e+00,  1.0727e+00],
            [-9.0699e-01,  6.7065e-02,  8.5656e+00,  3.5349e+00, -5.0747e-02,
             -6.2042e+00, -1.4572e-01, -9.4256e-01, -8.6855e-01,  2.2457e+00],
            [ 9.3036e-01,  2.3623e+00, -2.8283e+00,  5.0047e+00,  4.3641e+00,
             -1.0267e+00, -2.7290e+00,  2.0140e+00, -6.1177e-02,  1.8898e-01],
            [ 1.2899e+00,  3.9639e+00,  4.5522e+00,  2.2902e+00,  4.2986e+00,
             -3.3753e+00, -2.0877e+00, -5.7594e+00,  7.0784e+00, -1.5400e+00],
            [ 3.0939e-01,  2.2719e+00, -1.8631e+00,  1.2577e+00, -1.5865e-01,
              1.6499e+00, -1.5116e+00,  3.7317e+00, -6.0252e-03, -1.1996e+00],
            [-3.3137e-01, -1.3321e+00,  1.6796e+00,  2.3624e+00,  2.8909e+00,
             -4.2457e-01,  1.9248e-01, -4.7256e+00,  5.7830e+00, -1.5475e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.508 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
