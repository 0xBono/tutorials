.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[14.7927,  3.3552,  5.9428,  5.2984,  6.6641],
            [ 7.7341,  3.1355,  4.6611, 12.4199, 11.7242],
            [ 5.9813,  2.3645,  7.0439, 13.1487, 11.8796],
            [ 4.8754,  8.2596,  2.7538,  4.3881, 15.9002],
            [ 1.3869, 10.9130,  4.7817,  6.5014,  1.1104],
            [ 4.8754,  2.4067, 10.5316,  5.5540, 15.9002],
            [ 5.9813,  9.6671, 11.0639,  7.9784, 11.8796],
            [ 7.7341,  4.3056, 11.3854,  3.8426, 11.7242]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8031,  0.0603, -1.0406, -0.7117, -0.8891,  0.2340, -1.1930,  0.0132],
            [-0.4783,  0.4159, -0.3988, -0.2796, -0.1319, -0.5732,  0.1818, -0.7114],
            [ 0.8088, -1.7230,  1.9796, -0.8038, -0.5244,  0.2212,  0.1898, -1.2977],
            [-1.1378, -1.8523,  0.0434,  2.2322, -0.2894,  0.4046, -0.0393,  1.8611],
            [ 0.0248,  1.0355,  0.4852, -1.2041, -0.1232,  0.0213, -1.5294,  1.8639],
            [-2.4079,  0.4892, -0.8591, -0.7229, -0.3629,  0.1720, -1.2878,  0.6268],
            [ 0.5274,  0.1328, -0.6243,  1.8493, -0.8303, -1.4861, -1.8915, -0.8616],
            [ 1.3283, -1.5162, -0.7785, -0.1534,  1.2047, -0.7499,  0.1185, -1.0507]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.7589, -1.0097, -1.1614],
            [ 0.9475,  0.5617, -0.8409],
            [-0.4879, -0.4175,  0.0119]], requires_grad=True), Parameter containing:
    tensor([[-0.9161]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.3781,  0.7806, -1.5955,  0.5098, -3.0302, -5.0030,  0.6296, -3.5908],
            [ 0.2998, -0.4792, -0.3758, -5.0568, -1.5843,  4.8876,  0.0245, -5.5673],
            [-1.2309,  0.9430,  1.3466, -1.6411, -8.0689,  3.8178,  1.4415, -4.7572],
            [-4.1146,  0.8496,  2.0023, -0.6610, -0.4982, -0.7072,  0.0677, -3.1567],
            [-0.8215,  3.1349, -4.9785, -4.9020,  1.2076,  2.5901, -3.8106, -3.1907],
            [-3.6719, -0.8930, -1.5423, -6.1717, -1.1037,  3.1952,  1.2983,  2.8639],
            [-0.6196,  0.5408, -3.9961, -0.0709, -4.5043,  0.4432, -3.0938,  1.3539],
            [-6.0925,  3.7863, -2.1167, -3.1157, -0.1546, -2.0205,  2.2171, -2.5128]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 5.6845e-01,  1.6937e+00, -3.0258e+00, -7.7144e-02,  1.8675e-01,
              7.8618e-01,  1.5452e+00, -2.5195e+00, -3.9922e-01,  7.4597e-01],
            [ 3.9692e+00,  1.5781e+00, -2.4336e+00, -6.7006e+00, -4.2695e+00,
              3.5398e+00,  5.0234e+00,  1.5908e+00, -1.1831e+00,  1.7391e-02],
            [-2.4316e+00,  6.0656e+00,  3.7482e+00, -5.9487e+00, -5.9374e+00,
              1.4128e-01,  2.0984e+00,  4.2211e+00, -1.0612e+00, -2.4782e+00],
            [-3.1186e+00,  4.4580e-01,  3.6497e-01, -5.1233e+00,  4.4050e+00,
              3.9778e+00, -3.5317e+00,  6.3788e-01,  3.5144e+00, -2.4558e-01],
            [ 5.2449e-01,  4.0674e+00, -2.2799e+00, -3.6493e+00,  1.1841e+00,
              4.7062e+00, -2.0543e+00, -2.9509e+00, -1.2277e+00, -1.8230e-02],
            [-1.2549e+00, -3.9649e+00,  2.9448e+00,  5.4412e+00,  1.8630e+00,
             -6.0391e+00,  1.6560e+00,  4.5885e+00, -6.5356e-01, -1.8927e+00],
            [ 1.3072e-01, -1.9491e+00, -5.6993e+00,  3.5012e+00,  4.7789e+00,
              2.7705e+00, -2.4900e+00, -5.7431e+00,  1.6286e+00,  2.1352e+00],
            [ 9.7135e-01, -2.4743e-01,  3.7837e+00, -7.9822e-01, -5.3828e+00,
              3.0095e+00,  5.2732e+00, -6.7028e+00, -4.8830e+00,  1.7634e+00],
            [ 2.0467e-01, -1.3621e+00,  1.6743e+00,  4.9145e+00, -8.1174e-01,
             -1.5240e+00,  1.4264e+00,  1.3209e+00, -1.5026e-01, -3.2809e-01],
            [-1.5559e-01,  4.4727e-01, -4.8540e-01, -1.6683e+00, -4.0438e-01,
             -2.8218e-01, -1.2899e+00, -8.7060e-01, -1.2737e-01,  4.2176e-03]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.919 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
