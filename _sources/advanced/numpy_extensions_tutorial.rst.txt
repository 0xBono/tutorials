.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.4774, 14.3701,  4.8553,  4.1354,  2.2087],
            [16.0289, 12.5532,  8.1213,  1.8952,  3.2406],
            [ 5.2342,  9.3472,  4.3311, 13.0384, 12.6661],
            [ 9.8439,  8.5673, 14.6634,  7.8776,  3.5337],
            [ 1.8593, 10.6655,  8.3660, 12.5380,  8.5945],
            [ 9.8439,  1.6420,  4.4552,  2.0004,  3.5337],
            [ 5.2342,  4.8536,  4.2857, 11.5517, 12.6661],
            [16.0289,  7.4245,  5.9146,  0.1175,  3.2406]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-4.1986e-01, -5.6143e-02, -1.0467e+00,  1.2550e-01, -1.1029e-01,
              1.1057e+00,  3.6095e-01, -5.6741e-01],
            [-1.9455e-01, -5.9710e-01, -1.0262e+00, -7.2418e-01,  3.1038e-02,
              2.5681e+00,  1.5104e-03, -9.2183e-01],
            [ 1.0290e+00, -1.3665e+00,  8.6933e-01,  5.1411e-01,  1.2590e+00,
              8.9189e-01,  1.0978e+00, -1.7281e-01],
            [-8.0055e-01,  1.6248e+00, -1.7612e+00, -5.8447e-01,  2.5649e-01,
              9.5838e-01,  1.6572e+00,  4.0089e-01],
            [-5.2223e-01, -1.1722e+00, -1.1653e+00,  9.0104e-01,  1.6566e+00,
              2.0466e+00, -9.6633e-01,  1.2901e-01],
            [-9.9371e-01, -1.0213e+00,  4.8013e-01,  1.1253e+00, -1.4701e+00,
             -4.7698e-01,  8.9232e-01,  9.1186e-02],
            [-2.7178e-01, -2.5087e+00, -1.9947e-02, -9.7791e-01, -5.9857e-01,
             -2.8939e-01, -1.6395e+00, -2.2834e+00],
            [-5.6270e-01,  1.8159e+00, -2.6316e-01, -5.9862e-01,  1.2131e-01,
             -2.2331e+00, -2.2312e-01,  1.1927e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.9213,  1.0783, -1.0834],
            [ 0.0139,  0.0328,  0.8027],
            [ 1.4063,  0.7505, -0.9959]], requires_grad=True), Parameter containing:
    tensor([[0.0809]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.8877,  0.0785, -6.6840,  0.3179, -3.5929,  2.1847,  0.1919,  0.1109],
            [-0.0829, -1.4175, -4.4781,  0.6457,  3.8309, -1.8070,  3.1047, -3.4224],
            [ 1.1214, -0.2612,  3.2027,  0.1015, -1.3542, -2.4690, -0.2892, -0.0695],
            [ 1.9947,  4.0938, -2.5940,  3.8106,  0.7225, -0.9077,  1.7750,  1.5013],
            [-3.8713,  0.9319,  4.0884, -0.7027,  2.9889,  3.6516,  0.9539,  1.0148],
            [ 6.5422, -3.4623, -1.8248,  3.1433, -0.0346, -1.3123, -5.7054,  1.4368],
            [-1.8357, -0.5924, -2.4983, -1.4067,  0.7764, -2.9606, -1.2211,  3.9564],
            [ 1.6019, -2.1234,  2.7967,  0.8051,  3.5725, -5.6042,  8.0400, -3.8371]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.8338e+00,  1.2030e+00,  1.0863e+00, -7.6308e-01,  1.2239e+00,
             -2.2731e+00, -3.8808e-01,  3.5642e-01, -1.5145e+00,  3.8552e-01],
            [ 7.4173e-01, -1.1054e+00, -1.9295e-01,  8.3562e-01, -4.7231e+00,
             -8.0518e-01, -9.1017e-01, -7.2685e-01,  1.1659e+00, -8.8671e-01],
            [ 1.9330e+00, -8.3748e-01, -3.4571e+00, -3.6440e+00,  1.6034e+00,
              1.4499e+00,  3.4334e+00, -2.6434e+00,  1.6878e-01, -5.6376e-01],
            [-1.4523e+00, -1.3014e+00,  1.8961e+00,  3.0282e+00, -5.3881e-01,
              6.3130e+00, -2.7908e+00,  3.6568e+00, -1.3819e+00,  1.3358e+00],
            [ 2.9568e+00, -1.9646e+00,  7.9813e+00, -5.4260e+00,  4.1632e+00,
             -4.8522e+00,  3.0019e+00, -4.2705e+00,  4.5461e+00, -3.6243e+00],
            [ 1.8409e+00,  1.3534e+00,  5.8854e-01, -1.8583e+00, -1.4311e+00,
              1.0572e+00, -1.0458e+00,  1.7233e-01, -1.9454e+00,  9.1639e-01],
            [ 3.7648e-01,  1.5148e+00, -6.8473e-01,  3.0683e+00,  4.2900e+00,
             -3.8652e+00, -1.6664e+00, -4.3480e-01,  2.0899e+00, -1.0085e+00],
            [-1.1823e+00,  1.1954e+00, -1.1116e-01, -6.1546e-01, -2.2068e+00,
             -4.2188e+00,  2.2522e+00, -2.7212e+00,  3.5723e+00, -2.7482e+00],
            [-1.8068e+00, -2.7854e+00,  6.2845e-01,  9.8908e-04, -2.3393e+00,
              2.0286e+00,  4.9200e+00,  1.6086e+00, -1.3940e+00,  1.1349e+00],
            [ 2.1793e-01, -1.0975e+00, -1.9013e+00,  4.4356e-01,  3.0590e+00,
              4.1131e+00, -7.2412e-01, -1.4673e-01,  1.8841e+00, -1.7394e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.513 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
