.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[17.7526,  7.9386, 11.0952,  7.0801, 13.0688],
            [ 2.4370,  1.2519,  9.5594,  2.6463, 16.3556],
            [ 6.7674, 10.4074, 16.9633,  4.5632,  3.0428],
            [ 2.4678,  7.9781, 10.7101,  4.8136,  5.0798],
            [ 5.3923,  1.1239, 15.7180,  4.9893,  4.3265],
            [ 2.4678, 10.8008,  4.8799,  4.7505,  5.0798],
            [ 6.7674, 10.3156,  8.7520,  4.5265,  3.0428],
            [ 2.4370,  4.1216,  4.0585, 12.7341, 16.3556]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5302,  0.7100,  0.6634,  0.6028, -0.4145,  0.8108,  0.8778, -0.0467],
            [ 1.0204, -0.3165, -0.1382,  0.1696,  0.7231, -0.6208,  1.4790, -1.0891],
            [-0.7487,  0.7033,  0.5123, -1.1192,  3.1478, -0.2578,  0.9120, -1.0175],
            [ 2.0226,  0.1217, -1.5386, -0.1570,  4.6879,  0.3443, -0.3345, -0.7630],
            [ 0.8904, -0.4604,  0.5019, -0.6649, -0.4860, -1.2909,  0.8906,  1.6430],
            [-0.4452,  0.4570,  0.1286, -0.1854,  0.4612,  1.3076, -0.3534, -0.1406],
            [-1.1584, -0.6617, -0.1572,  1.2876,  0.7673,  0.9123, -0.3926, -0.2462],
            [ 2.2262,  0.5415, -0.4824,  0.9034,  1.0021, -0.1508, -0.3238,  1.0155]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3879,  0.3946,  0.0539],
            [ 0.3137, -0.9069, -0.6227],
            [-1.5657, -1.8203,  0.1599]], requires_grad=True), Parameter containing:
    tensor([[0.0532]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.0805, -2.3099,  0.6395, -1.6458, -2.8844,  1.0611, -1.8560, -4.9469],
            [ 0.1753,  2.6213, -3.2221, -2.3346,  1.5207, -1.9356,  0.4232,  0.4577],
            [ 0.9738, -2.5272, -1.6977,  5.6929,  2.3472,  4.1706, -0.9134, -4.2790],
            [-1.0768,  1.0656,  0.5235,  1.2317,  0.8215, -3.0260, -3.2060, -2.6108],
            [ 0.7178, -2.8620, -3.3162, -2.3407, -1.2365,  4.3515,  2.7887,  1.4235],
            [-1.4995, -3.0529, -5.7087, -4.3422,  3.9741,  4.7818,  0.7531, -0.6244],
            [-0.0063, -2.6329, -4.1472, -4.1989, -1.6736, -1.9496, -2.5232, -0.1661],
            [-1.2475,  0.6020,  2.6684, -0.4270, -0.8668,  1.7895,  2.9688,  3.6065]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4318,  0.0169,  0.3199,  0.0146,  0.6159, -1.0117,  0.8037,  0.3178,
             -0.4406, -0.0568],
            [ 0.1648, -0.5368, -2.4663,  0.5126, -0.6701,  0.0372, -0.8429, -1.0150,
              1.2706,  0.6604],
            [-1.6640, -4.0070, -2.0445, -4.3397, -1.6751,  2.2228, -2.2302,  3.2407,
              1.5706, -0.2664],
            [-1.0940, -1.3444, -3.7345, -2.4822,  5.4102, -0.1740, -3.6269, -0.7275,
             -0.8627,  0.4344],
            [-0.0761, -0.6463, -0.9974, -0.7798, -2.7828, -4.4426, -1.9679, -2.3512,
              3.8086,  1.1465],
            [-1.7267, -4.0109, -1.7880,  1.9984,  2.7908,  0.9193,  0.4537,  4.4756,
              4.0236, -1.0991],
            [-0.5361, -0.8162, -0.1569,  1.6172, -2.0612,  0.1090,  5.9003,  0.8458,
             -4.9749, -1.0080],
            [-0.8604, -1.7528, -0.4569, -1.8012, -2.1755, -0.1263,  0.2769, -3.7149,
             -3.7838,  0.1461],
            [-0.5685, -1.5202, -1.2092, -2.0957, -3.4170, -1.3231,  0.6226,  0.6532,
              0.7448,  0.6556],
            [-1.1079, -2.0472, -3.5072, -4.9372,  0.7463,  2.3812, -0.5073,  2.4876,
              1.7527, -0.1604]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.594 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
