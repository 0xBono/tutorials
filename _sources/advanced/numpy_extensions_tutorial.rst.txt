.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.9202, 13.7452,  1.8818,  3.4871,  4.0951],
            [10.2750,  4.7656,  5.7232, 13.5639, 12.0320],
            [ 5.4800,  6.7375, 13.7484,  7.3317,  3.0414],
            [10.6350, 16.1578,  7.1103,  8.5370,  9.1493],
            [ 5.4117,  8.5725,  5.1790,  8.7992, 14.8751],
            [10.6350,  7.1407,  5.8070,  6.1745,  9.1493],
            [ 5.4800,  2.9654,  9.2019, 10.3870,  3.0414],
            [10.2750,  6.8725,  3.7563, 17.2968, 12.0320]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3777, -0.4736,  0.1862, -0.4015,  0.5034, -1.1762, -0.5249,  0.2422],
            [ 0.3712,  0.9587,  0.1531, -2.1628, -1.1273, -0.8068,  0.9177, -1.5916],
            [ 0.7455, -1.9339, -1.8170,  0.9921, -0.4364, -0.6801,  0.6347, -1.4867],
            [ 1.7869, -0.3090,  1.1978,  1.3528, -1.2017, -1.4536, -0.9028, -1.4291],
            [-1.0413,  2.3553, -1.7535,  0.8450, -1.4866, -1.5704,  0.5400,  0.2348],
            [-0.4188,  0.3956,  2.3240, -0.4867,  0.2037, -0.0045, -0.3394, -0.3743],
            [ 1.0030,  2.0182,  0.9117, -0.2964, -0.6373,  0.7148, -1.2773,  1.9345],
            [-0.5571, -1.8994, -0.2382, -0.1075,  0.8450, -0.5821, -2.3544, -0.3250]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0764, -0.9277,  0.0893],
            [-0.6193, -0.4915, -0.6113],
            [ 1.5707, -0.6895, -3.0131]], requires_grad=True), Parameter containing:
    tensor([[0.4552]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.2113,  1.7102, -2.1512,  0.2835,  2.9271,  7.6333,  7.7967, -0.7668],
            [ 8.1171,  3.0308, -7.2674, -1.8049,  2.0996,  2.6144,  4.4555,  6.2777],
            [-1.0509,  3.2331, -4.3637, -3.8077, -2.5113, -0.7963, 10.0536,  4.3996],
            [-1.1303,  1.9073,  1.4950, -4.4565, -4.7821, -1.1092,  3.2560,  6.9721],
            [-0.2451,  0.1157,  1.8879,  2.8906, -2.4384, -3.5919, -3.6056,  3.0919],
            [ 0.6777, -1.8698,  0.7109,  0.8738, -6.7618, -0.5587,  2.6351,  1.1821],
            [-3.1895, -4.3313,  3.4198,  3.4405, -0.4864, -3.2095,  1.3283,  5.0866],
            [-4.3209, -2.5080,  1.8542,  5.3532, -1.2355, -5.3876,  0.5062, -1.2777]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0941,  1.1008, -0.6105,  0.2594, -0.1900,  1.0418, -0.7580,  2.0630,
             -2.1556,  0.1876],
            [ 0.6517, -1.0723,  0.9810, -1.4392,  0.8527, -0.4665,  2.5804, -1.0512,
              0.4982, -1.2933],
            [-2.9925, -0.5165,  3.0346, -0.7375, -1.8414,  1.0151,  0.1602,  2.4534,
              4.8845, -6.2199],
            [ 1.0325, -2.2020, -3.5107,  1.2489, -2.5880, -0.9432, -0.3469,  2.2603,
             -0.5159, -0.0933],
            [ 2.7023, -5.5182, -7.7690,  3.2982,  3.3352,  0.1831, -0.9173,  2.1297,
             -0.3133, -1.3076],
            [ 0.1723,  1.1221, -1.8756, -3.6353, -1.5054, -0.3482,  1.1533, -0.4836,
             -0.7543,  1.9807],
            [ 2.0698, -0.2378, -5.6497, -0.5559,  0.7978, -3.2353,  2.7638,  3.0691,
             -4.2520,  1.2537],
            [-1.2969, -0.9951,  0.5942, -2.7482, -1.7121,  0.0560, -3.1579, -2.6550,
              1.8492,  1.9699],
            [ 0.9774,  2.4373, -2.5907, -7.7939, -2.9611,  2.5611, -2.4655, -5.0437,
              0.1662, -1.9909],
            [-0.2597, -0.2100,  3.0400,  2.9390, -6.6506, -5.9921,  0.8387, -0.4502,
              0.3275,  0.1625]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.167 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
