.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.2232,  5.4603,  8.6651, 12.0330,  6.1054],
            [ 9.4588,  9.9837,  7.7270,  6.2266,  5.4580],
            [ 8.3150,  6.1309,  8.7570,  2.4537,  9.6901],
            [17.0598,  6.7165,  0.9959, 14.8131,  6.9752],
            [ 9.0133,  9.6847,  1.4224, 10.8136,  6.2377],
            [17.0598, 10.4109,  3.0447,  5.1919,  6.9752],
            [ 8.3150,  6.9327,  9.7922,  3.8575,  9.6901],
            [ 9.4588,  5.7936,  6.2276, 11.9903,  5.4580]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1915, -0.7696,  0.9033,  0.2730,  0.2102,  0.4633,  0.0887, -0.2707],
            [-0.4416,  0.0054, -0.7250, -1.3272, -0.1575,  1.8255,  1.1250, -0.5785],
            [ 0.4041,  0.7862,  1.8704,  0.2706,  1.1790, -0.8463,  0.6879, -1.4421],
            [ 0.8450, -0.7752, -0.0057, -0.4837, -1.5466,  0.5485, -1.0804,  1.1770],
            [ 0.1736,  1.3955, -0.3856, -0.2068, -0.2047, -0.1334, -1.1657,  0.2688],
            [ 1.5292, -0.5819, -1.3194,  0.3319, -0.1560,  1.6931,  0.3173, -2.4260],
            [-0.3910, -1.9411, -2.0651, -1.8308, -0.5856, -0.1409, -0.2512, -1.7706],
            [ 1.3009,  0.4815, -0.5973,  2.0446, -0.0759,  0.1408,  2.6526, -0.3452]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7211, -1.2428,  1.5378],
            [-1.3675,  1.4577, -1.1079],
            [-0.0925,  1.4259,  1.3089]], requires_grad=True), Parameter containing:
    tensor([[-2.9397]], requires_grad=True)]
    Output from the convolution:  tensor([[ -0.2274,  -3.6877,  -2.1032,  -0.3768,  -1.3649,   1.0771,  -7.6330,
               0.5167],
            [ -3.5996,  -6.6502,   3.5398,  -8.3171,  -1.1114,  -7.9790,  -3.4768,
               1.9554],
            [ -8.0767,  -3.4700,  -8.2595,   4.1409, -10.4063,  -8.0984,  -2.7593,
              -8.1189],
            [ -6.1685,   2.1603,  -1.9245,  -6.7649,   0.4351,  -0.4871,   1.5362,
              -3.4460],
            [  1.3713,  -4.4773,   0.2331,  -5.0555,  -1.5816,  -2.9777,  -2.4261,
               0.0694],
            [ -4.3430,   2.3154,  -8.6435,   4.6056,  -3.9844,  -1.5261,  -0.2372,
              -5.2664],
            [ -4.5519,  -4.1790,   0.9697,  -2.4021,  -0.1685,  -6.6204,  -2.5834,
              -1.6057],
            [  3.7875,  -6.6068,  -3.0556,  -0.2265,  -6.0305,   3.6064,  -3.8070,
              -2.9536]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4532,  1.0316, -2.5300,  3.7072, -5.1118,  3.5557, -1.6376,  0.2124,
             -0.2090, -1.0558],
            [ 0.7846, -1.2714,  3.1403, -5.7326,  4.3570, -1.3303, -2.4791,  0.4147,
             -2.6180,  3.0321],
            [ 0.3178, -0.9191,  0.1290, -0.7722,  5.0266, -3.6012,  5.2933, -5.7966,
              1.5072, -1.2274],
            [-0.1420, -1.9752,  1.9008, -0.7210, -4.9334, -2.1920, -6.4777, -0.5177,
              0.1299,  3.4327],
            [-0.9661,  4.5334, -4.6914,  2.7430,  0.2457,  1.0161, -5.3279, -0.2990,
              3.0894, -2.5765],
            [ 0.6618, -0.6992, -1.4258, -3.1950,  1.1827,  4.5379,  3.8637, -6.3060,
              4.9346,  4.1165],
            [ 1.4762, -2.7398,  1.1670, -2.9703,  2.5261, -0.9905, -3.9014, -3.7640,
             -5.0273, -1.2662],
            [ 0.3975, -1.7569, -3.5015,  0.3068,  0.3116, -1.0900, -7.6545,  2.6004,
              1.7763, -0.8770],
            [ 0.5323, -0.6057,  0.1014,  1.8809, -1.9693,  1.0352, -3.2180, -2.4164,
              1.9561,  1.3092],
            [ 0.0335, -0.4847, -0.8875, -1.4948, -3.2149, -0.8893,  1.2330, -1.0098,
             -1.9135, -0.6984]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.543 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
