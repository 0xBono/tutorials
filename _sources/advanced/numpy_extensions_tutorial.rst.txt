.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.2635,  4.3946,  1.1271,  7.7636,  7.0323],
            [ 0.7003,  4.6870,  2.7070,  9.9819,  5.9517],
            [ 9.9401,  5.9398,  2.8133,  5.8761,  1.4231],
            [ 6.4585,  7.4623,  8.9011,  4.1718, 15.2496],
            [ 7.5001,  2.0082,  2.6568,  2.8400,  8.3419],
            [ 6.4585, 10.6605,  6.3337,  0.4768, 15.2496],
            [ 9.9401,  8.3536,  1.3352,  7.6032,  1.4231],
            [ 0.7003,  4.3003,  6.0869,  5.9127,  5.9517]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7352, -0.5695,  1.1284,  0.2212,  0.3249, -0.4362,  0.4095, -1.1419],
            [ 0.1251, -1.0541,  0.6636, -1.4623, -0.6627, -0.1532, -0.3910, -0.3851],
            [-0.1515, -1.1112, -0.3970, -0.7733, -0.0814,  1.8915, -0.8519,  0.0982],
            [ 1.0465, -0.8190,  1.8084,  0.0279,  0.7405, -0.4252,  0.9982,  0.6270],
            [-2.0556, -0.1311, -0.8293,  1.2323, -0.0604,  0.2938, -0.2775, -0.3013],
            [-0.3543, -0.6542, -0.0086, -0.9919,  0.9709,  0.0333,  0.0318,  0.7301],
            [-0.2783,  0.1904,  0.4981, -0.8244, -0.5298, -1.7413, -0.3515,  0.9893],
            [ 0.1192,  0.6148, -0.4044,  0.7844,  1.0605,  1.2391, -0.5911, -0.6460]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1994,  0.9831,  0.5130],
            [ 1.4826, -1.0365, -0.4379],
            [-0.9784,  0.6136,  1.2982]], requires_grad=True), Parameter containing:
    tensor([[0.0496]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.3370, -2.2931, -1.6225,  3.6820, -2.9928,  1.0838, -1.3171,  1.4275],
            [ 0.1209, -3.4759,  1.3252, -0.4693,  0.4410,  0.5864, -1.0059, -3.0854],
            [-4.7091, -0.2169, -0.3142, -0.6283, -2.9571, -2.3693,  0.7932,  2.2950],
            [ 4.1133,  4.6134, -1.7937, -2.7037,  0.6402, -0.2680, -0.9419, -0.6047],
            [ 5.2595, -8.2616,  0.9476,  3.4971, -1.8889, -1.8867, -4.6117, -0.4144],
            [-3.3635,  2.4237, -0.6724, -2.5306,  1.1071,  0.3944,  1.3694,  1.1527],
            [ 0.7141, -1.8017, -0.1875,  1.7781,  2.5511, -1.8293, -0.8378, -0.0629],
            [ 1.3112, -0.4919,  1.3428,  0.6347, -2.9704, -1.2833,  1.0252, -2.4016]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.3001e-01,  9.1220e-01, -1.0522e+00, -3.2750e-01,  6.2016e-02,
             -2.8951e+00, -2.4510e+00, -1.6137e-01,  9.4858e-01,  3.6925e-01],
            [ 8.2808e-01, -1.8872e+00,  1.1067e+00, -4.2593e-01, -2.1276e+00,
              1.2986e+00,  3.6358e+00,  2.3615e+00, -1.2513e+00, -6.3325e-01],
            [ 3.0396e-01,  4.2533e-01,  1.7756e+00,  8.4838e-01,  1.0044e+00,
              2.3483e+00, -4.9565e+00, -5.0702e+00,  1.5104e-01,  8.0299e-01],
            [-8.9941e-02,  1.8008e+00,  3.0068e-03, -2.0826e+00,  2.8508e+00,
             -3.8161e+00, -1.5348e+00,  3.1988e+00,  1.1812e+00, -7.0171e-01],
            [ 1.3858e-01, -1.3927e+00, -1.4650e+00, -4.2893e-01,  1.5498e+00,
              5.7902e+00,  2.3102e+00, -1.2105e+00, -1.7858e+00, -1.2299e+00],
            [-7.9762e-01, -1.2261e+00,  4.0114e-01,  4.1417e+00, -3.7340e-01,
             -4.2356e+00,  1.3319e-01, -1.3104e-01,  1.8697e+00,  4.2770e-01],
            [-6.3214e-01,  1.5008e+00,  1.8428e-01, -3.0518e+00, -3.1255e+00,
              6.6977e+00,  1.8462e+00,  3.5259e+00, -3.7335e-01, -1.4015e+00],
            [ 1.1517e+00, -2.0336e+00, -1.1864e+00, -1.9932e+00,  2.7172e+00,
             -1.8248e+00, -4.4529e-01, -1.0998e+00,  6.5639e-01,  1.8214e+00],
            [-2.8489e+00,  6.5688e-01,  1.6333e+00,  9.9837e-01,  5.1051e-01,
             -5.0845e-01, -1.8592e+00,  2.4596e+00,  1.5126e+00,  3.3810e-01],
            [ 1.8352e+00, -3.1870e-01, -3.7208e+00, -4.6369e-01,  1.1351e+00,
             -6.1149e-01,  7.2130e-01, -7.6001e-01, -7.8421e-01,  7.4689e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.659 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
