.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.5376,  2.8888,  7.5193,  1.4926,  6.3390],
            [ 8.0987,  6.9340,  2.5907,  4.3847,  7.3139],
            [ 7.8924,  6.5216,  3.5552, 11.9743,  2.3339],
            [ 2.9632,  6.6434, 12.4014,  8.4480, 10.7074],
            [ 0.7730,  2.7549,  5.9320,  2.5192,  7.5924],
            [ 2.9632,  5.3369,  7.7395,  3.2335, 10.7074],
            [ 7.8924,  4.2084, 10.4669,  3.1156,  2.3339],
            [ 8.0987,  6.1223, 10.4034,  9.5967,  7.3139]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9954,  0.2838, -0.3268, -1.3964, -0.4532,  0.0834, -0.0643,  0.6206],
            [-0.2388,  0.2615, -1.5254,  1.1986,  0.3614,  0.4556, -1.7129, -0.6440],
            [ 1.7450, -0.5603,  0.4777, -0.9021, -0.1431,  0.9210, -0.7460, -0.5579],
            [-0.8068,  1.9664,  0.6689,  0.5763,  0.3587,  0.9473,  0.3787, -0.2958],
            [ 0.0044, -0.8770, -0.0383,  1.5273,  0.5856, -1.2473,  0.8651, -0.8550],
            [ 0.3570, -1.7452, -0.7635,  0.6816, -0.4954, -0.7279, -0.2479, -0.5757],
            [-0.1477,  1.0940, -0.7232, -0.2239, -0.3191,  0.1595, -1.2349, -0.2108],
            [ 0.4717, -0.2323, -0.8202, -0.2535,  0.2056, -1.4469, -1.1153,  1.8757]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0396,  2.1449,  0.0538],
            [-0.0774,  0.1742, -1.2548],
            [-0.2349, -0.2900,  1.6753]], requires_grad=True), Parameter containing:
    tensor([[0.3571]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.4340, -0.7236,  3.4353, -5.3731, -1.5674, -3.2913, -0.0339,  2.1348],
            [ 1.5707,  0.2446,  2.7322, -3.8793,  4.6538,  1.6299,  1.1468, -2.7134],
            [ 3.7081, -6.1279,  7.5693,  1.5638, -1.7181, -5.2739, -1.4372,  1.2320],
            [-2.9551,  0.8530,  2.0736,  1.4426, -2.3652,  5.7891, -0.0147, -4.9709],
            [-0.6758, -0.9921, -3.2635,  1.3035,  0.6435,  1.0042, -1.6678,  0.0593],
            [ 3.0733,  0.9695, -0.8366,  2.0933,  0.1266, -4.4412,  1.5758, -1.9186],
            [ 2.8887,  2.7317, -1.6094, -0.7951,  3.3937,  1.1292,  1.2509,  0.3788],
            [ 0.2039,  0.2646,  1.2798, -4.4568, -1.4185, -1.2351, -0.6454, -4.8586]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1171, -6.3886, -2.4106, -3.3372, -0.5530,  1.4181,  3.3962,  1.6550,
             -2.6258, -0.0669],
            [ 0.2448,  0.3911,  2.3049,  3.3279,  1.4475,  2.0615,  2.6158,  1.0172,
             -2.9519,  1.5134],
            [ 0.6980,  3.0597, -4.3085, -1.2512, -4.5621,  1.6740, -0.7078,  0.6314,
             -0.7806, -1.0142],
            [-0.0610,  5.4361, -3.7626, -3.9699,  0.9215,  2.3341,  0.0228,  0.3960,
              7.5434, -0.9325],
            [-0.4192, -1.1481,  0.7050,  0.6733,  3.3319,  2.0750, -0.4861, -0.1950,
              4.3811, -3.3778],
            [-0.5311, -0.4896,  5.1522, -4.2651,  0.1309, -2.1560,  2.9029,  4.6119,
             -5.4821,  2.0929],
            [ 0.0760, -4.3576, -4.1855,  1.0233, -0.6448,  0.5199, -1.5938, -7.1015,
             -1.6600,  4.1352],
            [ 0.1648,  0.8962,  0.9971,  0.0790, -3.0710,  5.4564,  2.5286, -0.3715,
              4.7256, -2.9161],
            [ 0.4258,  1.0127, -3.5444, -1.1042, -1.3641,  4.5827, -4.2211, -1.8103,
             -3.2018,  1.7292],
            [-0.1194,  0.0193,  1.1155, -0.6866, -0.5982, -4.0927,  5.2385,  1.3553,
             -1.4704, -1.4436]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.575 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
