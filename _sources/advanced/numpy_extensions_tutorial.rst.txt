.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.2938,  4.5310,  4.1803,  6.5846,  6.2604],
            [ 1.3924,  0.8330, 10.6979,  4.2614, 12.1347],
            [ 6.2157,  2.6245,  3.1630,  8.8448,  6.7143],
            [ 2.5347, 10.4717,  0.2715,  4.1415,  5.0825],
            [ 2.1122, 10.5672,  3.2978, 10.1510, 10.4596],
            [ 2.5347,  6.7345,  2.4393,  7.6889,  5.0825],
            [ 6.2157,  3.7757,  2.6387,  5.3849,  6.7143],
            [ 1.3924,  4.7951,  4.2401,  6.8842, 12.1347]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1246,  0.8833,  0.0744, -1.8785,  0.8463, -0.0780, -0.2940, -0.0669],
            [-0.0139, -1.2370,  1.3546, -0.5982,  1.1860,  0.3173, -1.1925, -0.6175],
            [ 0.6256,  1.4542, -0.0930,  0.1245,  0.0224, -1.6184,  0.2859,  0.1758],
            [ 0.5470, -1.6505,  0.8791,  0.7458,  0.7617,  0.4561,  1.2790, -1.1811],
            [ 0.0599,  0.6837,  0.8318,  0.1381, -0.4940, -0.7632,  0.3499,  0.2153],
            [-1.1296, -0.9258,  0.4239, -0.1993,  0.7713, -0.5962, -0.0799, -0.1211],
            [-1.4792,  1.1198, -0.1722, -0.0769,  0.2909,  1.2775, -0.4284,  0.8109],
            [ 0.2342,  1.0758,  0.0967, -0.0398, -0.6447,  0.7320,  0.0027, -0.0452]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0020,  0.5838, -1.3760],
            [-0.0895,  0.4528, -0.7783],
            [ 0.8433,  0.2501, -0.1899]], requires_grad=True), Parameter containing:
    tensor([[1.3114]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.4456e+00,  1.4332e+00,  1.9078e+00,  4.9787e+00, -1.7116e+00,
              2.1821e+00,  2.9869e+00,  1.3871e+00],
            [ 1.8080e+00,  3.1461e+00, -2.1162e+00,  4.0572e+00, -5.0833e+00,
              2.2716e+00, -1.2776e+00,  9.4743e-01],
            [ 4.4229e-01,  1.6396e-01,  2.2106e-01,  3.9597e+00, -1.4707e+00,
              1.4060e+00,  1.9379e+00, -7.6332e-02],
            [ 1.8468e+00,  4.3061e-01,  3.5386e+00,  2.6034e+00, -3.3866e-01,
             -4.1379e-01,  1.9624e+00, -4.2497e-01],
            [ 1.8535e+00,  3.5749e-01,  2.2781e+00,  6.8922e-01, -2.5391e+00,
              2.9453e+00, -6.9661e-01,  1.4321e+00],
            [ 2.8170e+00,  5.0564e-03,  2.7296e+00,  4.1427e+00, -8.4262e-01,
              5.0606e+00,  2.3612e+00,  2.3774e+00],
            [ 1.3104e+00,  1.2495e+00,  4.0364e+00, -1.7381e+00, -1.0834e-01,
              5.0609e+00,  1.8198e+00,  1.3559e+00],
            [-1.3218e+00,  6.6449e-01,  3.2974e+00, -2.4067e+00, -2.2188e+00,
              7.4173e-01,  2.9628e+00, -3.6995e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.6952e-01, -7.4243e-01,  4.1911e-01,  1.7230e+00, -1.8513e+00,
              4.9704e+00, -1.4461e+00,  3.0971e+00, -5.8759e-01,  3.9350e-01],
            [ 1.7669e-02, -1.1086e+00,  1.8150e+00, -2.1658e+00,  2.0441e+00,
              7.2503e-01,  3.1350e+00,  1.1543e+00,  2.0541e+00, -1.9504e-01],
            [-2.1719e-01, -5.5658e-01,  2.5797e+00, -3.7861e+00,  2.5993e+00,
             -4.0528e-01,  2.4059e+00,  3.0488e+00,  9.7305e-01,  1.4277e+00],
            [-2.9970e-01,  2.6875e-01,  4.1808e-03, -2.2121e+00, -2.3912e+00,
              6.0995e-02, -3.8244e+00,  9.9126e-01,  1.4351e-01, -3.8548e-01],
            [-1.3022e+00,  8.6300e-01, -1.9730e+00, -3.0926e+00, -2.0770e+00,
             -2.4851e-01, -5.0669e+00,  2.2913e+00, -1.5759e+00,  8.7775e-01],
            [ 2.1785e+00,  7.4551e-01,  3.4385e+00,  7.0203e-01,  2.7526e+00,
              2.4431e+00, -3.3341e+00,  2.5994e+00, -6.0693e-01,  5.5506e-01],
            [ 7.0095e-01,  5.5835e-02, -5.8053e-01,  1.9235e+00,  8.6383e-01,
              1.2873e+00,  9.1902e-01, -2.8287e-01,  4.0671e-01,  5.5458e-01],
            [-8.4093e-01, -1.2831e+00, -6.1735e-01, -1.8608e+00,  1.2732e+00,
             -2.5954e+00,  1.8851e+00, -2.6730e+00,  2.3434e+00, -2.0248e+00],
            [ 4.8702e-01, -1.2582e-01,  1.6285e+00, -4.7158e-01, -3.6223e-01,
             -1.5846e+00,  2.2253e-01, -1.1160e+00,  1.3576e+00, -1.2131e+00],
            [-7.5566e-01, -4.5219e-01,  1.5174e-02,  1.4646e+00,  7.3279e-02,
             -1.7674e-01, -4.6413e-01,  1.1295e+00,  5.4775e-01, -3.0913e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.554 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
