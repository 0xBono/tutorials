.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[17.1362,  5.5043,  0.0909,  9.1430,  4.5517],
            [11.3993, 10.6092,  7.3312,  0.8344, 15.2728],
            [ 9.1476,  5.3857,  6.4845,  8.1566,  5.9005],
            [ 3.7645,  7.9178,  8.3740,  1.0410, 10.5876],
            [ 7.4931,  9.3594,  4.1179,  7.0247,  1.1290],
            [ 3.7645,  4.1650, 11.7836,  2.0773, 10.5876],
            [ 9.1476, 11.6405,  4.6699,  2.2976,  5.9005],
            [11.3993,  4.8676,  3.1825,  4.7660, 15.2728]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5945, -0.1127, -1.0800, -0.3062,  0.7415,  1.4312,  1.0125,  1.6540],
            [-0.2785,  1.8017,  1.2288, -0.1994,  2.2252,  1.2592,  0.0203, -0.1775],
            [ 2.6139, -1.1694,  1.1777,  0.4346,  2.0939, -0.2417,  1.2518,  0.2939],
            [-0.9274, -0.4664,  0.9138, -0.7079,  1.1685,  1.5682,  0.2563, -0.2381],
            [ 0.6107, -0.1974,  0.5161, -1.0415, -0.4939, -0.4296,  0.2697,  0.9283],
            [ 0.8106,  0.0893,  0.5258,  0.2015,  0.5082, -1.8654, -0.9155,  0.3954],
            [-0.1328,  0.6853,  0.1558,  0.8533, -0.8030,  1.4095,  0.2383,  0.5455],
            [-1.3178, -0.6550, -0.1439, -0.4444, -0.8481,  0.0397,  0.0400,  0.9543]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3432, -1.1002,  0.7163],
            [-0.7933, -0.3220,  0.0192],
            [-0.7481, -0.1206, -0.3447]], requires_grad=True), Parameter containing:
    tensor([[1.2823]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.6662,  1.5402,  4.7688, -0.1926,  2.1614,  1.3704,  3.6203,  3.9002],
            [ 0.7358,  2.0966,  0.8766,  1.0670, -2.6343,  3.9163,  3.2700,  1.8972],
            [ 4.4418, -0.9746,  2.4518, -2.6982,  1.1682,  2.1150,  0.0680,  2.3136],
            [ 0.5568,  2.8934, -0.4676, -0.2719,  1.4761,  0.9140,  0.4278,  3.6111],
            [ 2.0868,  1.9349, -1.2963,  2.5545,  3.4148,  0.2662,  2.0819,  0.3138],
            [ 3.3371, -0.5179,  3.3214,  1.4500,  4.2235,  0.0170,  1.5272, -0.1718],
            [-0.4618,  1.9079,  0.0804,  3.8828,  1.1780,  2.0539, -0.8456,  0.4861],
            [-0.6650,  2.0262,  1.7596,  1.6281,  2.4615, -0.2717,  3.3627,  3.1705]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.4872e-02,  7.1798e-02, -8.7230e-02,  5.7760e-01, -1.5395e+00,
              1.0559e+00,  8.4458e-01, -2.2355e+00,  1.9397e+00, -6.1993e-01],
            [-9.7774e-02,  7.4090e-01, -6.5854e-01, -1.0985e+00,  6.9478e-01,
             -3.0441e-03,  2.0784e-01, -3.4244e-01, -1.2114e+00,  1.2235e+00],
            [ 1.1005e+00, -2.1894e+00,  7.4467e-01, -2.1560e+00,  8.9268e-01,
              2.1281e+00, -2.7402e+00,  1.3378e+00, -2.8461e+00,  1.0087e+00],
            [-1.2558e+00, -2.0956e+00, -1.1351e+00, -1.5004e+00,  1.9881e-01,
              4.7583e-01, -1.3061e+00,  5.4562e-01, -1.9046e+00, -5.3845e-02],
            [-1.8591e+00,  2.6504e-01,  1.4127e-01, -2.0876e+00, -5.1223e-01,
             -2.6600e+00,  9.4458e-01, -5.3283e-01, -3.9525e-01, -1.7306e-01],
            [ 1.0414e+00,  2.7782e+00,  1.8109e+00,  9.1015e-01, -1.8180e+00,
             -3.3198e-01,  2.1982e-01, -4.6883e-01, -1.7645e+00,  8.3430e-01],
            [-1.0802e-01,  3.6903e+00, -1.8225e+00,  8.2616e-01, -7.9639e-01,
             -4.9462e-01,  1.2949e+00, -2.0616e+00, -1.8750e-01, -8.6466e-02],
            [ 1.2528e+00, -2.3184e+00,  1.4232e+00, -2.3856e+00, -1.1436e+00,
              1.8347e+00, -1.4934e+00, -4.4708e-01,  1.3808e+00, -1.8735e+00],
            [ 2.8183e-01,  2.6899e-02,  8.9851e-01, -7.3651e-01,  7.7898e-01,
              4.1794e-01,  2.8668e-01,  2.0366e+00,  5.3642e-01, -1.2775e-02],
            [-8.3301e-01,  8.0187e-01, -3.4602e-01,  2.6895e-01,  9.2980e-01,
             -2.8078e-01,  1.0258e+00,  1.3380e+00,  5.1462e-01,  6.5018e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.205 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
