.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.7995,  4.4446,  3.8604,  5.9572,  5.3232],
            [ 6.8671,  3.9056,  9.4972,  5.8079,  7.4477],
            [ 9.3672,  8.7234,  4.9174, 10.1124,  6.6631],
            [ 2.3851,  7.0230,  8.0096,  1.9541, 13.4279],
            [ 0.2053,  7.5150, 11.1084, 11.2656, 10.1871],
            [ 2.3851, 10.2709,  7.5856,  8.3501, 13.4279],
            [ 9.3672,  7.1872,  5.4902,  6.3028,  6.6631],
            [ 6.8671,  8.7370,  7.8641,  9.7955,  7.4477]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1425,  1.3328, -0.5538, -0.6436, -0.6802,  0.3419,  1.3667,  1.4347],
            [-2.1146,  0.1885,  1.8289,  0.2321,  0.7738, -0.1763, -0.7833, -0.3044],
            [-0.0181,  0.2349,  0.2121, -1.3348, -1.1735, -0.6515, -0.3198, -0.8533],
            [-1.4205,  0.0159,  1.2977,  0.0448, -0.9191, -1.2790,  0.6384,  0.5992],
            [ 2.6144, -1.2891,  0.3396, -0.6429,  1.1726,  0.0064, -0.5369, -2.5167],
            [-1.1384, -0.1080, -0.3430,  0.1677, -0.0907, -0.5753, -2.1021,  0.5136],
            [-0.4619, -0.7545,  0.2564, -0.2605, -0.0508, -0.2847, -0.9329, -0.4978],
            [-0.5657,  0.3234, -1.4302,  0.1521,  0.8818, -1.0475,  1.8726,  0.0709]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2441,  2.5181, -1.5550],
            [-2.2653, -1.7992,  1.2859],
            [ 1.1779, -0.6153, -0.8006]], requires_grad=True), Parameter containing:
    tensor([[0.8356]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.0691e-01,  1.5798e+00,  4.1726e+00, -5.3631e+00,  5.5340e+00,
              1.8555e-01,  9.1816e-01,  4.9759e+00],
            [ 4.0255e+00, -1.6193e+00,  7.7041e+00, -1.7262e+00, -7.2308e+00,
             -1.6772e+00,  7.1618e+00,  5.1605e+00],
            [ 2.1976e+00,  2.7441e+00, -2.4935e+00,  1.0774e+01,  7.6923e+00,
             -6.2201e+00, -2.7120e+00, -9.5289e+00],
            [-2.2833e+00,  6.2629e+00,  6.4801e-01, -5.5911e+00,  2.9748e-01,
              4.7573e+00,  1.1389e+00,  6.4224e+00],
            [ 3.7948e+00, -7.6373e+00, -7.9533e-01, -3.3466e-03,  6.9314e-01,
              5.6838e-01, -3.6649e+00,  5.3836e+00],
            [ 1.1186e-01,  5.3947e+00,  1.1288e+00,  1.8139e+00, -8.0337e+00,
              6.6782e+00,  1.1992e+00, -9.2392e+00],
            [ 3.0227e+00, -5.2968e+00,  2.9991e+00,  2.2051e+00,  9.7746e-01,
             -6.1575e+00,  4.6364e+00,  4.0075e+00],
            [ 4.1720e+00, -3.2321e+00,  9.7873e-01, -3.9028e+00,  3.2350e+00,
             -1.8465e+00, -4.5869e+00,  4.1006e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0470, -0.6793,  2.6107, -4.5454,  3.3557, -1.5976,  2.6082, -1.9649,
             -2.5587,  1.9335],
            [ 0.0739,  2.7218, -5.6468,  5.0109, -3.0872,  0.8038,  0.8919, -0.7368,
              3.9730, -1.4846],
            [-3.7561,  3.8702,  5.2989, -5.2520,  3.0051, -0.2542, -0.3413,  2.0168,
             -1.8277,  1.5860],
            [ 0.4661, -9.4029,  2.9330,  3.0388, -6.3721,  1.0754, -5.1499,  5.0469,
             -1.3535,  0.9697],
            [ 3.0766,  2.2843, -1.1266, -5.5636,  4.4994,  1.2069, -3.4856,  0.0743,
              0.0857,  1.1691],
            [-1.2899, -3.6043,  1.3261,  0.7637, -1.2103,  3.7452,  5.1403,  0.6320,
             -1.7844,  1.2260],
            [ 1.5450,  3.0165,  0.5055,  3.4529, -5.7227, -5.8061, -2.8527,  3.3311,
              6.0987, -1.3824],
            [ 0.6473,  5.8387, -2.4970,  3.6057,  4.9150,  3.4788, -1.8837,  0.4049,
             -2.2703,  1.4227],
            [-3.6511, -2.4195,  2.3743, -1.7867, -1.5363,  0.5547,  0.0677, -1.4837,
              1.4137, -0.1504],
            [ 1.4650, -1.0126, -0.5202,  0.3639,  0.5032, -1.7664,  1.0892,  0.2427,
             -0.8987, -0.1158]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.629 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
