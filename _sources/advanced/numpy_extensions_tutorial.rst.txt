.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.8324,  5.8354,  8.1598,  7.7686, 11.8457],
            [ 2.9480, 13.5748,  3.9191, 10.2775,  7.0523],
            [12.5266,  9.5717, 10.8016,  6.9173, 14.8801],
            [ 7.0972,  6.5071,  4.8178,  5.6638,  1.5733],
            [13.1390,  3.3190,  8.2454,  5.6131, 10.6583],
            [ 7.0972, 12.4877,  5.0786,  5.4559,  1.5733],
            [12.5266,  8.8775,  7.9682, 12.5363, 14.8801],
            [ 2.9480, 17.9395,  5.1504, 14.0171,  7.0523]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 0.8738, -0.5603,  1.2858,  0.8168,  0.2053,  0.3051,  0.5357, -0.4312],
            [ 2.5581, -0.2334, -0.0135,  1.8606, -1.9804,  1.7986,  0.1018,  0.3400],
            [ 0.7124, -1.7765,  0.3539,  1.1996, -0.3030, -1.7618,  0.6348, -0.8044],
            [-1.6111, -1.8716,  0.5431,  0.6607,  2.2952,  0.6749,  1.7133, -1.7943],
            [-1.3633, -0.9832,  1.5113,  0.6419,  0.4730, -0.4286,  0.5514, -1.5474],
            [ 0.5181,  0.1065,  0.2692,  1.3248,  1.7460,  1.8550, -0.7064,  2.5571],
            [ 0.4175, -0.2127, -0.8400, -0.4200, -0.6240, -0.9773,  0.8748,  0.9873],
            [ 0.3096,  1.5207,  1.2052, -1.8156, -0.4035, -0.9591, -0.0052, -0.0789]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1814,  0.8662, -0.3528],
            [ 0.3482,  1.1371, -0.3339],
            [-1.4724,  0.7296, -0.1312]], requires_grad=True), Parameter containing:
    tensor([[-0.6368]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.8485, -0.6253,  0.5355, -1.6749, -1.6485,  3.1582, -2.0937,  0.4060],
            [-2.3864, -0.5329,  0.5899, -1.7146,  0.2938,  2.4764, -2.2190,  3.5820],
            [-1.8302,  1.1015,  0.3355, -2.7000, -2.4166,  1.8622, -4.2282, -1.0762],
            [-1.1899,  0.3259, -0.0594,  1.0322,  1.3926, -3.1792,  0.1091, -0.4112],
            [-2.3260, -1.6516,  1.4125, -1.1652,  1.2824,  2.0934, -2.2105,  0.9034],
            [-0.4890,  0.0974,  1.1976, -2.1430, -2.9766,  0.9372, -2.9412, -1.2589],
            [ 0.0416, -2.5830, -0.3001,  0.9807, -2.0481, -0.0571, -2.6401,  2.0344],
            [-3.0494, -0.2450,  0.6287, -0.2433,  2.3296, -1.6713,  2.4301, -1.9645]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1040, -0.6702,  1.0316, -0.0858, -1.0190, -0.5211,  0.8379,  0.9025,
             -1.2282,  0.3316],
            [-0.4374,  0.8748,  0.5778, -0.7458, -2.4802,  0.3322,  1.9671, -0.4746,
             -0.2440, -0.0349],
            [ 1.4024, -0.9062, -0.3015,  3.2192, -1.7818,  0.6915, -2.1988,  2.4078,
              0.6152, -0.3832],
            [-2.0767,  0.1588,  2.1040,  1.3704, -3.1749,  0.7151,  0.8825, -0.2075,
             -0.6019,  0.4185],
            [ 0.6585,  0.7918, -1.3731,  2.1596, -2.3222,  0.5804, -2.8146, -0.9965,
             -1.9720,  0.6576],
            [ 0.6561, -3.7498,  0.3336, -0.5845,  0.6157, -0.4897,  1.1092,  1.7356,
             -1.7061,  0.5023],
            [-0.7393,  1.8201,  2.5968, -0.9005,  0.2686, -1.4052, -0.7371, -1.3448,
             -0.0540,  0.2216],
            [ 0.7835, -2.2894, -1.6256,  1.8941,  2.0489, -3.0290, -1.1332, -0.6889,
              1.8491, -0.7020],
            [ 0.6372, -1.7149, -1.5915,  0.2710,  1.4178,  3.0218,  1.1760,  0.5062,
              2.5428, -0.7438],
            [ 0.1395,  3.3387, -2.4957, -0.0349,  0.6016, -1.2391, -0.0843, -3.1013,
              1.5884, -0.2954]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.722 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
