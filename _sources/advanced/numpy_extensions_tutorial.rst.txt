.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.1400,  9.9900,  8.1928,  9.3492,  1.6165],
            [11.0262,  4.8133,  6.3640,  5.2325,  2.8976],
            [17.5812,  5.8064,  4.6528,  8.9636,  4.4801],
            [ 3.9281,  7.8881,  7.4088,  6.7732,  7.2663],
            [ 8.1579,  9.5477,  6.5062,  4.0922, 11.6680],
            [ 3.9281,  5.4038,  8.9168, 10.1982,  7.2663],
            [17.5812,  6.6931,  2.7697,  6.3980,  4.4801],
            [11.0262,  3.2111,  9.7963,  8.9089,  2.8976]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.0428,  0.1251,  0.2560,  0.4443, -1.3241, -1.4340, -0.4258,  0.1752],
            [-0.4042,  0.5466,  0.1261, -1.0913, -1.0576,  0.2916, -1.9315, -2.0766],
            [-0.3854, -0.4810, -0.0581, -0.5656, -1.9334, -0.6207, -1.0011, -1.5369],
            [ 0.0167,  1.2497,  0.3112,  0.5466, -0.5072,  1.6310,  2.1408,  0.1310],
            [ 1.5215,  0.5898,  0.9713,  0.1369, -0.3105,  0.7681,  0.3047, -1.1422],
            [-1.0732, -0.1056,  0.5972,  1.1507, -0.9391,  0.1337, -1.3603,  0.6650],
            [-0.4279, -0.4149,  0.1902, -1.7568,  0.7166, -1.5745, -0.1986,  1.1999],
            [ 0.1949, -0.7445,  1.6322,  0.9426, -0.3525,  1.3582, -0.2101, -0.8031]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0921,  0.8433, -0.4544],
            [ 1.5518, -0.1569,  1.8637],
            [ 0.9299,  0.7216, -1.2942]], requires_grad=True), Parameter containing:
    tensor([[1.7542]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.9645e+00, -2.0049e+00, -4.8531e-01,  1.5092e+00,  3.4511e+00,
              1.0717e-01,  2.4566e-01,  4.2397e+00],
            [-1.1096e+00,  7.1085e-01, -1.7878e+00,  1.8779e+00, -2.3677e+00,
              6.6832e+00, -5.6171e-01,  3.8516e+00],
            [ 3.3836e+00, -8.5220e-01,  4.9641e+00,  2.7750e+00,  4.7604e+00,
             -2.9079e+00,  1.7528e+00, -1.2890e+00],
            [-2.8403e-01,  6.0272e+00, -1.5746e+00, -1.3428e+00, -5.1142e+00,
              4.7823e+00, -2.6150e+00, -3.8676e-01],
            [ 3.9570e+00, -1.7502e+00,  3.6255e+00, -2.9178e+00,  8.9172e+00,
              2.3400e+00,  6.2433e+00,  2.4273e-03],
            [ 2.4725e+00,  2.6823e+00, -1.9570e+00,  6.5016e+00, -1.6672e+00,
              1.7546e+00,  2.6630e+00,  3.4298e+00],
            [ 3.3957e+00,  1.4106e+00, -3.6054e-02, -2.0358e+00,  5.6677e+00,
             -3.1120e+00, -4.5255e+00,  8.5560e-01],
            [ 4.9677e+00, -3.2890e-01,  2.4265e+00,  2.0761e+00, -1.7864e+00,
              3.9108e+00,  3.8093e+00, -4.7333e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1909, -1.4626,  1.1881, -0.2861, -1.9910,  2.0985, -0.7615, -0.4271,
              0.4544, -0.1495],
            [ 0.3792,  2.8548, -0.3605,  3.3182,  1.0933, -1.9629,  3.7155, -3.2908,
              0.9030, -0.1068],
            [-0.4146, -1.0295,  0.8830, -7.4087,  2.8481, -0.7070, -5.0192,  6.2304,
             -1.7286,  2.3896],
            [-2.0497,  4.2713,  0.4575,  6.6784,  2.4295,  9.3309,  6.2694,  1.4745,
              6.3998, -0.9186],
            [ 4.2623,  1.9143,  5.7977,  1.5569,  2.5091, -3.5985,  2.1788, -3.4285,
             -6.0647, -2.9292],
            [ 2.1771, -0.7493, -5.3488, -2.2147, -1.0499,  2.2438, -6.0331,  2.1240,
              0.1872,  2.8653],
            [-0.3892, -0.4417,  0.0168,  0.1651,  2.7250,  1.2771, -0.1465, -5.8663,
             -0.6861, -2.0016],
            [-1.5312, -2.9276,  3.9171,  3.3577, -3.1389,  0.7463, -2.4174, -4.2671,
              0.2972, -0.2877],
            [ 0.6877,  4.7510,  2.1739,  6.4582,  3.6669, -5.2181, -1.1795,  1.4900,
             -1.4945,  2.1292],
            [ 0.5968,  3.5485,  2.0130, -4.9060, -0.2641,  2.2331, -2.5638, -0.2036,
              1.9788, -0.9239]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.614 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
