.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.0611,  1.7059,  8.8917,  1.4743,  7.9184],
            [ 7.8380, 10.4204,  4.9798,  5.7722,  4.3314],
            [ 5.9501,  7.3001,  9.9359,  3.9386,  5.7817],
            [ 4.6769,  0.6248,  8.2098, 10.5011,  5.7287],
            [ 2.2159,  2.8728,  8.2733, 10.3041,  0.1763],
            [ 4.6769, 11.8426,  5.2344,  8.4025,  5.7287],
            [ 5.9501,  4.8768, 12.3431,  6.4011,  5.7817],
            [ 7.8380,  3.2631,  0.7502,  0.9044,  4.3314]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.4453e+00,  3.8546e-01,  6.5266e-01, -3.0719e-01, -7.2407e-02,
              1.5378e+00, -3.5549e-01, -9.2769e-01],
            [-1.4862e-01, -3.9068e-01, -1.3459e+00,  4.2987e-01,  1.8237e-01,
             -1.5693e-01, -4.1342e-01,  1.3050e+00],
            [-1.6017e-01,  1.3597e+00,  7.3913e-04,  3.5830e-02,  2.8216e-01,
             -9.7282e-01, -2.1731e-03,  6.5987e-01],
            [ 6.3631e-01, -3.8958e-01,  4.9615e-01, -1.1463e+00, -2.1854e-01,
              1.4610e+00, -1.4893e+00, -2.8467e+00],
            [-1.3647e-01,  1.8411e+00, -1.1684e+00, -5.4797e-01, -2.0953e-01,
             -9.7958e-01, -2.3962e-03,  2.4762e-02],
            [ 1.0408e+00, -1.0925e-01, -6.6255e-01,  1.1181e+00, -4.2874e-02,
             -2.3775e-01, -2.3053e-01,  6.8369e-01],
            [ 5.2968e-01, -7.2512e-01, -2.8074e-01, -6.8649e-01,  5.1732e-01,
              1.4119e+00,  9.8419e-01,  8.9516e-01],
            [ 7.9837e-01,  4.5071e-01, -7.3155e-01,  9.3895e-01,  2.3774e-01,
              1.0369e+00, -1.7081e-01, -1.6212e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1658, -0.3767, -0.1081],
            [ 0.9091, -0.1586, -0.9628],
            [ 0.4120,  0.1451, -0.7477]], requires_grad=True), Parameter containing:
    tensor([[0.0627]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9772, -0.9651,  0.5801,  0.9187,  0.2008,  3.2552, -1.1557,  0.6179],
            [ 0.8816, -0.8901,  0.3795,  1.3383,  0.7746,  0.7398, -3.5435,  0.4239],
            [ 1.0816, -0.7081, -0.1617, -1.8130,  2.2677,  2.0251, -5.2111, -0.4795],
            [-0.4856, -1.6498, -0.4351, -0.7979,  0.7613,  0.8974, -2.3793,  0.8086],
            [ 0.6465, -0.2732, -1.1125, -0.0164,  0.8946,  0.8396, -1.0649,  0.4069],
            [ 0.3275,  1.0506, -0.3060, -0.2521,  0.1947,  2.5405,  1.7428,  0.8004],
            [-1.9504,  1.2656,  0.2181, -0.3481,  0.9193,  0.9288,  0.8994,  2.0695],
            [ 0.2468,  1.1195,  0.6473,  0.5712, -0.1565,  1.0515, -0.9055,  0.3233]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2985,  0.7943, -0.2621,  0.4966, -0.3435,  0.2715, -0.0553,  0.2871,
              0.6843,  0.1546],
            [-1.6996,  0.8930,  1.2161, -0.1653, -0.2498, -0.3979, -0.1045, -0.6893,
              1.3438,  1.3140],
            [-1.0497, -1.1038,  3.3689,  0.2462, -2.3219, -1.3245,  0.8737,  0.4334,
              1.2923,  0.5516],
            [-0.2146, -0.8509,  2.2601,  2.6855, -3.1361, -2.2886, -0.8737,  0.9097,
              1.0960, -0.1386],
            [-1.2624,  0.4537,  2.6819,  1.5037, -2.9454, -1.6627, -0.7342,  0.2882,
              1.2475, -0.2065],
            [-0.3940,  0.9304,  1.8803, -0.7983, -2.8489, -0.7424,  1.3846, -0.8546,
              0.6304,  0.6338],
            [ 0.7355,  0.6511, -0.8730, -0.4960, -1.2200, -2.2091,  0.3931,  0.5476,
             -0.0888,  1.2959],
            [ 0.0317,  1.8567,  1.3393, -2.6395, -0.6195,  0.6149, -3.0754, -0.7249,
              2.0954,  0.1223],
            [-0.8227,  0.1470,  3.8885, -0.9984, -2.0887,  2.8826, -2.9438, -4.5406,
              2.1941,  1.3203],
            [-0.3403, -0.4325,  1.4010,  0.8847, -1.2704,  0.8624, -0.6810, -2.1851,
              0.3012,  1.3199]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.556 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
