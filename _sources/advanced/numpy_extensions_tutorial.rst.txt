.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.0491,  8.6286,  2.2874,  0.9798,  5.5142],
            [ 7.3753, 13.0240,  8.4207,  5.4351,  7.9824],
            [ 7.2359,  6.9565,  6.9768, 11.6282, 13.2815],
            [17.2817,  9.5143,  3.7077,  5.9259,  5.1433],
            [ 0.3810, 10.5687,  0.1840, 10.7315,  7.0208],
            [17.2817,  6.7002,  8.0066,  3.4815,  5.1433],
            [ 7.2359, 10.3547,  6.8998,  4.3536, 13.2815],
            [ 7.3753,  2.7870, 16.8305,  1.2602,  7.9824]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.6305, -0.8463, -0.0888,  0.1311, -1.0674,  0.5482,  1.3695,  0.7408],
            [ 1.6436, -0.7845, -0.6768, -0.3104,  0.9303,  0.0883,  2.4578,  1.0165],
            [-0.2997, -0.4261,  0.6536,  1.8654,  1.2692,  0.3259, -1.2328,  0.5393],
            [-0.2891, -0.3024, -0.8391,  0.4438,  0.1487, -0.5054, -0.2141,  1.4776],
            [ 0.2328,  0.9393,  0.4757,  0.2843,  0.8326,  1.2158,  0.5006,  0.9599],
            [ 0.0191,  0.0614, -1.0489, -0.9140, -0.5775, -1.5161,  1.7402, -2.2255],
            [ 2.3446,  0.4419,  1.2765, -2.0957, -0.8845, -0.2096, -1.2108, -1.1205],
            [ 0.3160,  1.0863,  0.6128, -0.5480,  0.4273,  2.1144,  1.5909,  0.7920]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9938, -0.4004, -0.4295],
            [ 0.7588, -0.1053, -0.4392],
            [ 0.5504, -0.7229, -1.1806]], requires_grad=True), Parameter containing:
    tensor([[0.4037]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.4598,  3.4882,  2.7221, -0.1531, -0.9520, -0.7968,  0.2491, -0.4422],
            [ 2.0867,  3.5955,  0.8021, -1.2127, -4.1936,  1.5371,  1.5986, -1.4195],
            [-1.4569,  2.3164,  1.1465, -2.3970, -0.9692,  3.7179,  4.0573,  1.9646],
            [-2.6391,  1.0392, -0.0597, -0.6606, -2.3396,  3.6074,  1.9663, -4.2929],
            [-1.2340,  0.4815,  0.9012,  0.9704,  2.5497,  1.8687,  0.7061,  1.9491],
            [-4.7431,  1.3737, -0.4994,  0.4948,  2.6731,  0.5193, -0.1471, -0.4919],
            [ 0.5800,  0.7665,  1.9366,  0.7015,  4.1122,  1.1701, -1.5658,  2.4088],
            [ 0.4879,  0.2164, -0.3323, -0.7969,  3.0972,  0.3933, -0.9819,  0.3929]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.5049e-01,  6.3349e-01, -2.7739e-01,  3.5267e-01,  1.3351e+00,
              2.8217e-01, -1.1072e+00,  1.1358e+00, -6.0444e-01, -6.7782e-01],
            [-4.7575e-01,  2.9556e-01,  8.7278e-01,  3.9007e-01,  1.6589e+00,
             -1.6109e+00, -9.1644e-01,  2.2097e+00, -3.2296e-01, -1.0135e+00],
            [ 1.2722e+00,  9.5031e-01, -1.2575e-01,  2.7310e-02,  8.1004e-01,
             -1.0891e+00, -4.1119e+00,  2.2773e+00, -1.6135e+00, -3.0157e+00],
            [ 9.7434e-01,  1.0181e+00, -3.5677e-01,  1.7105e-01, -7.3353e-01,
              7.1812e-01, -1.5224e+00,  1.3881e+00,  9.0575e-02, -1.3401e+00],
            [-2.7934e-01, -8.3925e-03, -4.0737e+00, -4.9731e-01,  1.6639e+00,
              1.5041e+00, -9.1979e-01, -3.5584e+00, -1.3574e+00, -1.6567e+00],
            [-2.1805e-01,  7.1600e-06, -2.4125e+00,  2.8685e+00,  2.4325e+00,
              1.1313e+00, -1.6791e+00, -5.0136e+00,  5.9739e-01,  1.8081e+00],
            [ 1.1326e+00,  1.3470e+00, -2.5237e+00,  2.0181e+00,  3.1845e+00,
             -9.8780e-01, -1.2313e+00, -5.1401e+00, -9.9831e-01,  1.7482e+00],
            [-6.1645e-01,  4.3569e-01, -2.2839e-01,  1.1983e+00,  2.1335e-01,
             -2.1731e+00,  1.7428e-01, -3.1074e+00,  1.2426e+00,  2.2897e+00],
            [-7.9230e-01, -4.9266e-01, -7.3943e-01, -4.8818e-01,  1.0823e+00,
              4.6625e-01,  1.3196e+00, -1.4151e+00, -2.2604e-02,  1.8871e+00],
            [-1.0585e+00,  1.0553e+00,  3.5045e+00, -1.5059e-03, -1.6626e+00,
             -1.3094e+00, -5.1084e-01, -8.9742e-01, -6.7741e-01,  5.8451e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.210 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
