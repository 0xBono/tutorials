.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.7373,  3.4797, 10.0017,  8.3381, 15.8029],
            [ 7.6973, 14.3052,  7.8063, 12.0204,  1.7737],
            [ 1.8180, 10.6120,  5.0092,  1.9679,  0.2956],
            [ 4.7809,  4.7592,  8.4970, 12.4270,  7.7794],
            [19.0169,  7.7956,  1.8291,  3.4853, 14.3695],
            [ 4.7809,  3.4932,  2.8008,  6.4904,  7.7794],
            [ 1.8180, 13.5003,  3.6987,  8.4024,  0.2956],
            [ 7.6973, 11.4689,  2.3678,  4.9020,  1.7737]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2444, -0.1911, -0.1068, -0.7158,  0.4100, -0.1715,  1.0247, -2.5158],
            [ 0.2703,  0.4992,  0.4898,  0.1290, -0.9321,  0.2825, -0.9102, -1.0952],
            [ 0.2656, -0.6025, -0.1481, -2.0889, -0.9908, -0.5802,  0.2439, -0.4351],
            [ 0.3129, -0.0825, -0.7345, -0.1343,  1.4800,  0.4358,  0.8503, -0.4777],
            [ 0.2113, -1.4160,  0.0863, -2.1252, -0.9329, -0.4176,  0.1555,  1.0823],
            [ 0.4179,  1.6228,  0.7339, -0.4961, -0.8188, -0.6841,  2.4844,  0.9725],
            [ 0.1905,  0.2812, -1.0027,  0.1594,  0.5466, -1.1489,  1.6568, -2.3462],
            [-2.1771,  0.4854,  0.6199,  1.5030,  1.8111,  1.0071,  0.2803, -0.5057]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6938, -0.6156,  0.7799],
            [ 0.8987,  0.8829, -0.9434],
            [ 1.0374,  0.2063, -0.7550]], requires_grad=True), Parameter containing:
    tensor([[0.2682]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.3384, -2.8091,  0.6296,  2.5549,  0.6078, -2.3786, -0.9723,  1.2408],
            [-1.6032,  1.8490, -2.3536,  1.6688,  2.7644,  2.6072, -3.9800, -4.5949],
            [ 4.6212, -3.0270,  0.3783, -2.4798, -0.2453,  1.7784, -2.9004, -1.2030],
            [-2.3765, -1.7070,  0.5786, -0.1865,  1.1010, -0.9789,  1.6574,  4.1105],
            [-1.5273,  2.8325,  0.1920,  2.1672,  0.1340, -0.6779,  1.9257,  2.1690],
            [ 0.9656, -2.5005,  2.1294,  4.5153, -2.6830,  0.0999, -0.7226,  1.1827],
            [-1.8490,  0.7622,  2.6302, -2.5397, -1.7148,  0.3751,  1.2149, -0.0930],
            [-0.7860,  1.6241, -3.5875, -2.5432,  5.6646,  0.2466, -0.4852,  2.7948]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.1058,  0.2781, -2.5405, -0.4691, -0.1772, -0.0212,  0.9902,  1.3339,
             -1.1903,  0.0782],
            [-1.6728, -2.0868,  2.8365,  2.2256, -0.4743,  0.1260, -2.4977, -0.7947,
              2.2433, -0.5821],
            [-2.7565,  0.9657,  4.3445, -1.1104,  1.1147,  0.9660, -1.7547, -2.0918,
              1.7879, -0.1473],
            [ 2.3173,  5.2252, -0.7108, -0.8189, -1.2615, -1.2133,  2.6657, -3.0122,
             -2.6272,  2.6895],
            [ 1.5320,  0.9032, -2.5448, -2.3176,  1.2255,  0.5304,  4.3811,  3.0901,
             -2.3647, -1.0334],
            [-0.3095, -2.1792, -2.6716,  2.6410,  2.3963, -0.5400,  0.0888,  0.1384,
              0.6475, -1.1237],
            [ 1.0801,  1.4996,  2.2541,  0.5674,  1.1236,  0.9379, -3.4539,  1.7014,
              1.1948, -1.0996],
            [ 1.9071,  1.0651, -1.4427,  0.0115, -1.2610,  0.9533,  2.0157, -2.0676,
             -0.5861,  0.3540],
            [ 0.1312, -2.8276, -1.6825,  1.3306, -0.0857, -0.1481, -1.8818, -1.0241,
              0.6177,  0.9239],
            [-0.5610, -1.0065, -0.2482,  0.6299,  0.8803, -1.3223, -1.2275,  0.6119,
              0.3669,  0.1974]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.044 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
