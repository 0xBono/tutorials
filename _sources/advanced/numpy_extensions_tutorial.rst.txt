.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.7547,  9.7094, 10.7982,  2.6385,  5.9832],
            [12.2889,  5.1822,  6.2553,  4.6310,  1.6673],
            [11.4690, 15.0084,  7.5843,  8.3642, 11.6609],
            [ 4.2782,  5.5772,  3.2766,  4.6785,  6.7849],
            [10.6024, 17.6539,  4.3727,  5.9854,  3.3188],
            [ 4.2782,  8.7293,  3.8954,  2.0029,  6.7849],
            [11.4690,  8.6429,  8.5548,  5.9493, 11.6609],
            [12.2889,  6.2885,  5.8783,  8.7655,  1.6673]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.9983, -1.0133,  1.2053, -0.5215,  0.4760,  1.3755,  1.8427,  0.9472],
            [ 0.3801,  1.2553,  0.3048,  0.1188,  0.2883,  0.4574,  1.7660,  0.1252],
            [-0.3616,  0.0929,  0.3233,  2.2781,  0.6387, -0.1307,  0.3043,  1.6366],
            [ 0.7225, -0.4134, -0.8325, -1.0837, -0.5369, -1.9596,  0.5748,  0.7720],
            [ 0.7419, -1.4625, -0.1306, -0.4269,  1.4885,  0.9714,  0.1953,  0.0054],
            [ 0.0249,  0.0519, -1.0628, -0.1409,  0.1591, -0.0732,  0.3239,  1.2886],
            [-1.5989, -1.4219,  0.2926,  2.1438,  1.4491, -0.3498, -1.2000, -1.1106],
            [ 0.8774, -1.5650, -0.4970, -0.3232, -2.1474, -0.0052,  0.3590,  0.8669]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0242,  1.5044,  0.9362],
            [-1.5746,  0.3268, -0.3252],
            [ 1.0336, -0.9548, -2.6422]], requires_grad=True), Parameter containing:
    tensor([[-0.2473]], requires_grad=True)]
    Output from the convolution:  tensor([[-6.5761,  0.2695, -1.2174, -6.1173, -3.2619,  2.3257,  3.8741,  0.4584],
            [ 5.8739, -1.4664,  2.0317,  1.2264, -1.0821, -1.7790,  0.0343, -3.0777],
            [ 6.0564, -5.5030, -3.4521,  5.2303,  0.5783, -1.7345, -4.7057, -5.9951],
            [-4.1270,  5.0890,  0.0179, -0.6924,  4.3364, -1.9052, -1.7100,  0.9622],
            [-2.8275, -5.0313, -2.9419,  1.2971, -0.5556,  0.0397, -0.5483,  7.1778],
            [ 7.2362,  5.4119,  0.1591, -1.1560, -6.5791, -2.7435,  5.6446,  4.2510],
            [-0.1507,  2.1443,  6.3595,  5.5851, -4.9994, -2.7472,  1.4708, -1.3119],
            [ 4.1659, -2.7967, -2.6271,  0.6025, -2.1372,  3.6630, -2.5094, -1.3008]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0339, -2.0876, -2.3925,  0.7291,  3.4091,  1.4331, -1.4468, -1.8985,
              1.8931,  1.5682],
            [ 2.1960,  1.0809, -1.1810, -1.6020, -0.5817,  0.0948,  1.2603, -4.0296,
              2.4963,  1.1780],
            [-1.9268,  3.0470,  5.0104,  0.7690, -7.6475, -3.5863,  4.1833,  0.0972,
              0.1433, -5.0380],
            [-1.9433, -0.1919,  1.0290, -0.2453, -1.2566,  3.6337, -2.2645,  1.5051,
              3.3973, -4.0018],
            [ 2.8966, -3.8367, -6.7991,  2.8587,  9.9305,  5.4492, -6.9882, -0.4331,
              1.5520, -1.4095],
            [ 0.8890,  1.9087,  2.0137, -0.8182, -4.1055, -1.2890,  1.1582,  5.2639,
             -4.0271, -2.1881],
            [-2.1402,  0.2870,  4.1165,  4.7640,  0.3170, -6.4412, -4.5187,  1.1828,
              3.6159,  4.6972],
            [ 1.1109,  1.0833, -3.8452,  0.8145,  2.6576,  0.8894, -4.7183,  1.0885,
              1.2877, -1.4586],
            [-1.6029, -0.7051,  2.5732,  0.8749, -6.4186, -3.8417,  5.1431,  6.9899,
             -6.5915, -3.4155],
            [ 0.8358, -0.1536, -2.2393, -2.9473, -1.3645,  4.3172,  3.0365, -5.3340,
             -1.8605,  4.1310]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.967 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
