.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.5445,  8.1493,  2.8128,  7.0131,  1.1834],
            [12.5169, 17.4756, 11.1070,  5.1773,  8.0347],
            [ 0.3717, 12.4624,  7.0674,  0.8988,  5.0564],
            [ 3.3779,  5.4012,  2.7501, 17.0059, 12.1543],
            [ 9.5288, 10.5202, 11.2303,  7.0263, 10.1385],
            [ 3.3779,  7.8534,  6.1943,  9.9865, 12.1543],
            [ 0.3717,  8.3160,  9.4122,  4.4905,  5.0564],
            [12.5169, 11.2177,  4.7684, 12.8033,  8.0347]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.2981, -1.5231,  0.6226, -0.7802, -0.8649, -0.7693, -0.6498,  1.0865],
            [ 0.3847, -1.3467, -2.2319,  0.9698, -1.2297, -1.6054,  1.3182, -0.5952],
            [-1.6191,  0.0746,  0.0687, -0.9948,  0.1381,  3.1396,  0.2348,  0.6907],
            [-1.4102, -0.3166,  1.4764,  0.0910,  1.9455, -0.0070,  0.1776, -1.3191],
            [ 0.2860,  2.0930, -0.0754,  0.7109, -0.6307,  0.8240, -0.3268,  0.8175],
            [-0.6211, -0.9176,  1.1396,  0.2242,  0.7611,  0.1986, -0.5298,  1.6979],
            [ 2.1326, -0.0688, -1.1666, -2.1019,  0.0071,  0.4517,  0.5526,  0.8344],
            [ 1.6277, -0.8529,  0.2743, -0.1264, -2.2762, -1.1934, -0.4940, -0.2500]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5372,  1.1338,  1.4618],
            [ 0.7694, -0.3445, -1.1715],
            [-0.3109,  0.2751, -0.0075]], requires_grad=True), Parameter containing:
    tensor([[0.9210]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.3787,  1.5297,  2.2933,  0.5486, -1.3432,  0.6087, -1.6283, -0.5140],
            [ 1.7346, -1.4295,  0.2863,  2.8196,  3.0102,  2.0264,  0.6379,  0.7151],
            [-1.4857, -1.6484,  0.2563,  0.3711,  3.1916, -2.5931, -1.2235,  2.6905],
            [ 1.8464,  1.6082,  1.8712,  0.6830, -2.1623, -1.2222, -0.3013,  0.2047],
            [-2.7589, -0.3618, -0.9929, -1.2936, -1.5525, -2.6320,  4.8703,  2.3475],
            [ 3.5950, -0.0091,  0.6560,  0.9544,  4.0123,  4.1570,  0.2866,  2.0741],
            [ 2.8436,  0.9432,  1.3647, -0.2974, -3.0311,  1.1107,  4.6168,  1.1524],
            [-1.8124, -3.8987,  1.2955,  3.8537, -0.8609, -3.8086, -1.5976,  2.7574]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3585, -1.3323, -0.0477,  2.3872,  0.8282, -1.5344, -0.6863, -2.1719,
             -2.4956, -0.0560],
            [-0.4463,  0.8119,  1.5052, -3.0256, -2.9503,  1.6707,  1.6136,  0.1695,
              1.2556,  0.6005],
            [ 0.5351, -0.5108, -2.9015, -2.5025,  1.5086, -0.1768, -1.8653, -1.3612,
              2.2897,  1.5542],
            [-0.6575, -0.0620, -0.0891,  0.6151,  1.7922, -2.5944,  1.2084,  2.4252,
             -3.4512, -3.5225],
            [ 0.5917, -1.0132, -0.5783,  0.5465, -0.4401,  0.3680, -2.3850, -3.0931,
              2.2943,  1.1540],
            [-0.3400, -0.4355,  2.0629,  0.6110, -0.3671,  1.9495,  1.1382,  0.0317,
             -0.9816, -1.2661],
            [-0.0895,  1.9165, -2.1548, -1.7225,  4.3807, -2.4954, -1.9606,  3.8132,
              1.2046,  0.0811],
            [ 0.5549, -1.6562, -0.2983,  0.6607, -2.5327,  2.4970,  4.9452, -1.4314,
             -3.5468, -0.6058],
            [-0.5082,  0.2225,  0.3626,  0.5544,  2.0764, -1.8702, -2.6552,  0.2202,
              0.3775,  1.2576],
            [ 0.1631,  0.0060, -0.1569, -0.0889, -0.4866,  0.5857, -0.0083,  0.2763,
             -0.2923,  0.0080]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.565 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
