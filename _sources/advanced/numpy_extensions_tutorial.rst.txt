.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.1928,  2.6270, 16.4429, 14.5187, 16.3397],
            [12.7476, 12.8570,  2.3471,  1.7528,  3.8253],
            [ 6.6413,  5.6092, 12.1705,  5.8567,  3.8929],
            [ 5.4041,  5.7520,  6.2416,  5.4709,  8.2734],
            [ 2.6971,  3.9150,  7.3118,  5.8136,  5.1749],
            [ 5.4041,  8.1874,  5.8521,  1.5860,  8.2734],
            [ 6.6413,  9.7610,  4.3331,  9.3235,  3.8929],
            [12.7476,  2.0827,  5.8176,  8.6545,  3.8253]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.8266,  1.0282,  1.3577,  0.5555, -1.5042,  0.1609, -0.9627,  0.9310],
            [-0.8186,  0.3434, -1.0300, -1.8083, -0.8493,  1.9379, -0.5899, -0.8924],
            [ 0.0841,  1.4936, -1.3136, -0.8840, -0.4122, -1.3595,  0.6192,  0.3448],
            [-0.5599,  1.0780, -0.5335, -0.0662, -0.6413,  0.6263,  0.5241,  0.2644],
            [-2.9519,  0.4376,  1.4249, -0.1614,  0.9646,  1.8909,  1.4830,  0.4326],
            [-0.5746,  0.6913,  0.8755,  0.2348,  1.1508,  0.8698,  0.5953,  0.5380],
            [-1.5219,  1.1522, -0.3025, -0.1744,  0.1114, -0.2892, -0.2516,  0.1958],
            [-1.2044,  0.0095,  0.3657, -1.3105,  0.0062, -0.8450, -0.4796,  0.1475]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6567, -0.9352,  0.4422],
            [ 0.0784,  0.2882,  0.6219],
            [-0.0419, -0.2280, -0.4695]], requires_grad=True), Parameter containing:
    tensor([[-0.2621]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.6462,  0.3572, -0.4092, -1.2839,  2.0288,  0.5785,  0.4096,  0.1512],
            [ 1.1799,  0.5371, -0.3645,  1.1385,  1.1348,  1.8503,  0.9335, -0.8940],
            [-0.1830, -1.8143, -1.3173,  0.5499, -2.1739, -1.0351, -1.7418, -2.3524],
            [-0.8340,  0.9464, -0.2008, -1.1381,  1.9121,  0.1862,  1.7621,  1.6383],
            [-0.4927,  0.4311,  0.9238,  0.0809,  1.4801,  0.8019, -1.0331, -1.6824],
            [ 0.9281, -0.7165,  1.1035, -1.4320, -0.5659, -0.2388, -0.9732,  1.4850],
            [-0.0117, -1.6414, -0.6456, -1.5810, -0.5608,  1.4172,  1.4375, -1.6864],
            [-1.5497,  1.6161, -0.5407,  0.3976, -1.1171, -0.9936, -1.4550, -0.6975]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.4002,  0.6918,  0.1988,  0.4415, -0.5545, -0.4062,  1.5354,  0.5303,
             -0.6474,  0.0978],
            [-0.6118,  0.3742,  1.2886, -2.6844, -1.0084, -0.1521, -1.0170, -1.3539,
             -0.3329,  0.2357],
            [ 0.9036,  0.9870, -1.3653, -1.6156,  0.4886,  0.8545,  1.9262,  0.6247,
              0.8894,  0.1134],
            [ 0.4339, -0.3199, -2.4137,  0.9834,  1.1429,  0.4541, -1.8056, -0.6786,
             -0.0431, -0.1929],
            [ 0.4945,  1.1280,  1.0532,  1.5144, -0.7634, -1.4146, -0.5440,  1.0985,
              1.1277, -0.7800],
            [ 0.0261, -0.9281, -2.2619, -1.8130, -0.7783,  2.9223,  2.6473, -1.0623,
             -0.5988, -0.1089],
            [-0.9006, -0.4435,  2.0298,  0.8774,  1.0091, -0.5042, -1.1612, -2.1243,
              0.2376,  0.6371],
            [-0.2497, -0.7769, -0.5652, -1.5594,  0.1046,  0.5299,  1.8200,  1.8349,
              1.8189, -1.1808],
            [-0.0157, -0.0579,  0.1552,  1.0298,  0.1944,  0.0273, -0.5500, -0.1788,
             -0.8370, -0.7471],
            [-0.0232, -0.1617, -0.4771, -0.5389, -0.3145, -0.0405,  0.1985,  0.2694,
              0.4642,  0.7018]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.224 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
