.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.7007, 15.7919,  5.6702,  9.9635,  6.3342],
            [13.4607,  0.9433,  5.1901, 11.1730,  1.6391],
            [10.3032,  4.9531,  8.5367, 10.0471,  4.6070],
            [12.8294,  8.1629,  4.4083,  2.4614,  5.1989],
            [12.3158,  6.2502,  9.8352,  4.3047, 12.7294],
            [12.8294, 15.0038,  8.9016, 11.5330,  5.1989],
            [10.3032,  2.7545, 15.6422,  7.6857,  4.6070],
            [13.4607,  6.6875,  6.5915,  7.8499,  1.6391]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7520,  1.8837,  2.3485,  1.7358, -0.3273, -0.4683,  0.8386, -0.2663],
            [-0.9423,  0.5937, -1.2376, -0.8036,  1.4137, -0.3839,  0.5145,  0.7261],
            [ 0.8056,  0.5337, -1.4651, -0.3488, -0.5601, -2.4069, -1.7821, -1.3232],
            [-0.3785,  0.2363, -0.3860,  0.2606, -1.3274,  1.0311, -0.0863, -1.3258],
            [ 0.1171, -0.1005,  2.3452,  1.2638, -1.4038, -0.3449,  1.3624,  0.6842],
            [ 1.3198,  0.7069, -0.9980,  1.3592, -2.2889, -1.7875, -1.1256, -0.7729],
            [ 0.6240,  0.7077,  0.8386,  1.2789,  0.9314, -0.5097,  1.6819,  0.0860],
            [ 0.6061,  0.5213,  0.6326,  0.8046, -0.8448,  0.7084, -1.7911,  0.7378]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8355,  1.2860, -0.8043],
            [ 1.7290,  0.2476,  1.2662],
            [ 1.4105, -0.4039, -1.3353]], requires_grad=True), Parameter containing:
    tensor([[-1.0318]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2026e-02, -9.2012e+00, -8.5239e-02,  4.0990e+00,  2.7186e+00,
              2.8147e+00, -5.8185e+00, -3.1021e-01],
            [-4.1592e+00, -7.1896e+00,  3.7336e+00,  1.3050e+00, -4.9271e+00,
             -3.7517e-01,  2.2818e-01, -3.8946e+00],
            [-2.5127e+00, -3.1554e+00,  9.0824e+00, -4.5472e-01,  1.3986e+00,
              4.3241e-01,  4.7706e-01,  2.2215e+00],
            [-3.8094e+00, -2.6961e+00,  4.3625e+00,  1.5765e+00, -8.2535e+00,
              4.8524e-01,  3.8290e+00, -3.2526e+00],
            [-6.0548e+00, -2.4657e-01,  4.6385e+00, -1.7442e+00, -2.4578e+00,
              1.4691e+00,  3.7745e+00, -1.4259e+00],
            [-6.1638e+00, -5.7681e+00, -9.1791e-01, -3.7819e+00, -9.7224e+00,
             -6.5719e-01, -3.1939e+00,  9.9584e-01],
            [-1.3018e+01, -1.7746e+00,  2.7547e+00,  8.5513e-01, -2.5426e+00,
             -5.4473e+00, -5.6836e+00, -5.1455e+00],
            [ 2.8989e+00, -1.0503e+00,  1.3399e-02, -1.7824e+00,  6.9574e-01,
             -2.1755e+00, -2.5795e+00,  6.0695e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 6.0674e-01,  1.4630e+00,  1.6806e+00,  2.1169e+00, -1.8383e+00,
             -2.8855e+00, -8.6713e-01, -1.0157e+00, -1.2071e+00,  1.0582e+00],
            [ 2.2054e+00,  1.4637e+00,  1.7927e+00,  4.1960e+00, -5.6308e-01,
             -1.6550e+00, -1.6192e+00, -2.3074e+00, -1.3568e+00, -2.0035e+00],
            [ 3.8307e+00, -1.2937e+00,  1.3016e+00, -2.0575e+00, -3.8023e+00,
             -4.6831e-01,  4.6020e+00,  2.5114e+00,  4.0058e+00,  1.1059e+00],
            [ 3.6714e+00, -4.5388e+00, -1.3649e+00,  8.3086e-01, -2.1448e+00,
             -2.1874e+00,  2.8817e+00,  5.5631e+00,  1.8912e+00,  1.3986e-01],
            [ 2.5437e+00, -1.8196e+00,  1.6667e-01,  3.0369e-01, -2.1748e+00,
              2.5019e+00, -5.7254e+00,  2.1638e+00, -1.3883e-01, -8.8412e-01],
            [ 1.9538e+00,  1.8193e-01, -3.9084e-01,  8.7958e+00,  6.2429e+00,
             -3.0175e+00,  4.3778e+00,  5.1111e+00,  3.6680e-01, -1.0927e+00],
            [ 3.0091e+00,  9.5521e-01,  1.8734e-02, -2.4260e-03,  3.9200e+00,
             -2.4411e+00, -9.9651e-01,  3.6694e+00, -6.3487e-01, -9.0902e-01],
            [ 4.2080e+00, -7.6061e-01,  2.0785e+00,  5.5066e+00, -2.9469e+00,
             -4.1203e+00, -2.8385e+00, -3.5252e-01,  1.5085e+00,  3.9118e-01],
            [ 3.7504e+00,  2.8948e-01, -1.7289e+00,  3.2180e+00, -2.4023e+00,
              2.9670e+00,  2.8959e+00, -1.5298e+00, -3.2548e+00, -1.3460e+00],
            [ 1.3139e+00,  2.8004e-01, -2.0419e+00,  1.3421e+00,  6.9706e-01,
             -1.4656e+00, -2.4473e+00, -1.0063e+00,  1.9596e+00,  1.0562e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.321 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
