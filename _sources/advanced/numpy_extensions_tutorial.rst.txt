.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.5832,  5.9212,  9.2537, 11.6798,  3.5552],
            [ 6.8083,  5.7577,  6.8207, 14.2139,  8.5324],
            [ 5.7484,  7.1716, 12.3109,  7.4160,  4.7012],
            [ 9.5239,  8.2776,  7.4076,  5.2951, 18.5918],
            [ 1.0752,  4.6192,  4.0930,  3.6082,  6.7901],
            [ 9.5239,  3.9449,  6.3412,  4.5040, 18.5918],
            [ 5.7484, 13.0396,  6.0076,  8.1891,  4.7012],
            [ 6.8083,  6.8658,  5.8940, 10.2703,  8.5324]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7907, -0.1588, -0.1295, -0.3275, -1.0891, -0.2872,  0.0831,  0.2862],
            [ 0.5562,  0.5944,  0.1692,  1.8994,  0.1917, -0.3101, -2.3561,  1.9513],
            [-0.6485,  0.3908, -0.2769,  0.1875,  1.5445, -1.0082,  0.3774,  0.6797],
            [-0.0220,  1.0419,  1.5448,  0.0739, -0.8358,  0.4952,  0.8060, -0.4146],
            [ 2.2291,  1.4005, -0.5632,  1.4092, -1.4408,  1.2095, -0.4691,  0.2936],
            [ 2.5145, -2.2592, -0.8202, -0.0362, -0.5278, -1.4549,  0.8958, -2.0478],
            [-0.7114, -1.1574, -0.4142,  1.3887,  0.3042,  0.9021, -0.0079, -0.4579],
            [ 1.0144, -0.6356, -0.5441,  0.6977, -0.8735, -0.1557,  0.7226,  1.3786]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1395,  1.4967, -0.2941],
            [ 0.4098, -0.9170,  0.3430],
            [-0.2267, -0.5285,  0.5841]], requires_grad=True), Parameter containing:
    tensor([[-1.2510]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.6792, -4.2608, -3.2937,  2.6330, -4.9391,  2.4533, -1.2742, -1.3770],
            [-2.0226,  0.2419, -3.0054,  3.3450, -3.7436,  0.8273, -3.4776, -3.9331],
            [-3.8509,  0.5880, -3.1646, -2.3303,  2.5725, -6.0881,  3.8084, -2.9909],
            [-1.7308, -2.0238, -1.7119, -1.0463, -0.4750, -0.9606, -0.2621, -1.9028],
            [ 3.0112, -5.5093, -0.9078,  1.3219, -1.1616,  1.2415, -8.0053,  4.5525],
            [-4.2992, -0.6638, -1.2542, -1.8430, -0.3281, -3.3324, -1.5487, -2.0021],
            [-1.3935,  0.3534, -6.7980, -0.3656,  3.5452, -2.5936,  0.7391, -4.1477],
            [ 0.3496, -1.7400, -0.2936, -1.3623, -2.2247,  2.1091, -2.4911, -4.4525]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.6266, -2.6510,  1.1390, -0.3490, -0.4668,  2.7136, -1.8382, -0.5823,
              0.2605, -0.0120],
            [ 1.2708, -3.1922,  2.5829,  0.0816,  0.2055, -1.2517, -0.2762,  1.0883,
             -0.0451, -0.0747],
            [-2.1278,  6.3554, -4.0598, -0.5851,  1.6836, -1.2941,  1.3121, -1.9020,
              1.3868, -0.2667],
            [ 0.3486,  1.6258, -3.9001,  1.3558, -1.9057,  4.2405,  1.0245, -3.8736,
              0.8594,  0.3978],
            [ 0.5372, -3.5076,  3.8706,  1.1741, -0.6181, -1.9715, -1.8499,  4.2014,
             -3.3527,  1.3255],
            [-0.3595,  0.9065,  0.3154,  0.0719, -3.2133,  0.3592,  3.2505, -3.5921,
              2.0131, -0.1416],
            [ 0.1093,  0.3376,  0.9640, -2.0698,  1.9792, -1.1463, -3.0419,  1.6896,
              1.0363, -0.3813],
            [-0.4816,  1.3630, -2.4646,  1.3382,  0.7722,  0.7613, -0.2864, -0.1542,
             -1.7191,  0.9584],
            [ 0.1725, -0.6543,  1.4591,  0.4449, -0.4663, -0.8532,  0.5646, -1.0079,
              0.4038,  0.2830],
            [-0.0974, -0.0711,  0.4788, -0.8705, -0.1494,  0.2794,  0.9833, -0.2500,
             -0.0556, -0.2222]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.339 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
