.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.1513,  4.2698,  2.3793,  6.9975,  3.7740],
            [ 5.9294,  9.6333,  5.0293,  1.5996,  8.0032],
            [10.2005,  5.0175,  2.1999,  4.9197,  1.6926],
            [ 1.0105,  9.7799,  8.2499,  3.6341, 12.9906],
            [ 4.5945,  1.1899,  4.2632,  9.5633,  5.0489],
            [ 1.0105,  5.0940,  4.0727,  4.7219, 12.9906],
            [10.2005,  7.5880,  4.8686, 11.2758,  1.6926],
            [ 5.9294, 11.9047,  4.3225,  3.1682,  8.0032]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0969, -0.5673,  0.5841, -0.3110,  0.6954,  0.2507, -0.2907, -0.7181],
            [ 0.0712,  0.4493, -0.4827,  1.6989, -1.8684, -0.0135, -1.3238, -0.8645],
            [-0.8908, -0.6026, -0.3897,  0.2827,  0.1789,  1.3524, -0.1293, -0.7332],
            [-0.1653,  1.2874, -0.0623,  0.1784,  0.9969,  0.8087,  1.6241, -0.3008],
            [ 0.5856,  0.0931,  0.4338, -0.4236, -0.9951,  0.2616, -0.2208,  1.9617],
            [ 1.7785, -1.2291, -0.2241, -0.7504, -1.1908,  0.1000,  0.8824, -0.3715],
            [ 0.7697, -0.2452, -0.3833, -0.9180, -0.1849, -1.0984, -0.4580, -0.0144],
            [-0.9719, -0.4339, -0.2467,  0.9428, -0.8074,  0.5531,  0.9710,  1.3373]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4831, -0.5967, -0.3262],
            [ 0.0232, -0.3613, -1.0237],
            [-0.3764, -2.0419,  0.9148]], requires_grad=True), Parameter containing:
    tensor([[0.4914]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.1141,  1.4355, -2.1991, -0.1045,  2.2725,  0.2364, -0.6366,  3.2408],
            [-3.6530,  0.3643, -0.9035, -2.4341,  7.4143, -3.4471,  0.6799, -0.0749],
            [-1.8138, -1.0184, -2.7601,  2.6447,  0.8150,  0.2222, -0.3974, -1.0298],
            [ 1.2676, -2.7207, -1.0948, -1.3459,  7.9581, -1.8911,  1.8111,  2.5909],
            [-6.0574, -0.2266,  3.5060,  4.7747, -3.6619,  0.9887,  0.5527, -2.8665],
            [ 0.6894,  0.4202, -1.8247,  1.2238,  2.4682, -2.4957,  3.2954, -1.2753],
            [-1.7567,  2.1845,  2.3160, -1.9597,  0.8667,  0.7823,  1.8423, -2.8040],
            [ 0.3645,  0.1771,  4.0149, -0.3679,  2.0114,  2.8320,  1.1116,  2.1449]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.7476,  1.3256, -0.3470, -1.4464,  2.6249,  0.5468, -0.0172,  0.0260,
             -0.3771, -0.1404],
            [-0.0659,  0.2980,  2.1552, -0.5107,  1.3823,  2.5591, -1.5663,  0.2397,
             -0.6037, -0.5543],
            [ 1.1789,  2.3738, -2.7155,  1.9999,  4.8902, -4.4032, -0.3526, -1.1438,
             -0.6713, -0.2345],
            [ 0.4855, -0.2103, -0.4834, -4.5648, -3.6603,  1.7130,  0.2392,  0.2432,
             -0.0828, -0.0487],
            [ 0.1624, -4.2559, -1.5757, -2.1342,  5.0239, -1.4163, -3.1360, -0.2803,
             -0.7450,  2.3044],
            [ 0.0226, -2.7306, -2.8661, -2.4030, -0.1087,  1.4372, -2.6322,  0.8843,
              1.6067, -1.3097],
            [-1.0308, -2.2106,  3.8696, -0.8598,  1.0994, -6.1520, -3.8505,  1.9917,
              2.3841,  0.2013],
            [ 0.0592, -1.0654,  0.2081,  0.4234, -0.7467, -2.1166,  1.0530, -0.2285,
              1.7687,  1.4632],
            [ 0.4633,  2.5713, -0.5688, -4.1849,  0.7045, -4.4026,  0.0317,  3.1351,
              1.4331, -1.2827],
            [-0.2685, -1.9069, -1.9573, -0.0447, -1.4527, -3.1291, -0.1565,  1.3986,
             -0.4274,  0.0652]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.664 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
