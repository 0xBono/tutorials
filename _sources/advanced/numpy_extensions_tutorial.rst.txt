.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.1415,  8.3878,  8.4925,  9.8549,  1.8100],
            [10.0112,  9.0717, 10.4409,  2.6503, 11.2385],
            [ 6.2517,  6.0510,  3.4085,  7.4974,  7.6174],
            [12.3248,  3.8431,  8.1789, 10.2545,  0.8785],
            [ 2.8456, 11.1107,  1.7337, 14.4644,  6.0921],
            [12.3248,  8.4300, 12.3766, 12.7560,  0.8785],
            [ 6.2517, 11.9885,  4.9368,  5.0434,  7.6174],
            [10.0112, 11.6792,  3.9154, 13.7558, 11.2385]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.0396, -1.6374, -1.1355, -0.2814, -2.6019,  0.6343, -0.8674, -0.3707],
            [-0.4067,  0.9700, -0.1546,  1.8400,  0.2217, -1.1072, -0.3519, -0.2668],
            [-0.0141, -0.2809,  0.2553,  0.8965,  0.6488,  3.1692, -0.4245, -0.3202],
            [-2.9586, -1.5280,  0.9776, -0.9921,  0.7814,  0.4319,  0.9978, -0.5071],
            [ 0.2864,  0.6481,  0.2422, -0.5024,  0.2367, -0.9437,  1.4692, -0.6631],
            [-0.3940, -0.4417,  1.6262, -1.5876,  1.1946,  1.1567, -0.9023, -0.2011],
            [-0.7794, -0.4526, -0.4300, -1.6980, -2.7179,  0.3430, -0.1798,  0.4381],
            [-0.2019, -0.4750, -0.7354, -1.6943,  0.9311,  1.4281, -1.1282,  0.3299]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3620,  2.4849,  0.1322],
            [ 0.2731, -1.1333, -1.0289],
            [-1.2894,  0.2339,  0.2117]], requires_grad=True), Parameter containing:
    tensor([[-1.6425]], requires_grad=True)]
    Output from the convolution:  tensor([[  0.9255,  -3.4823,   1.9565,  -2.6748,  -4.9420,   2.1870,  -2.8383,
              -1.5533],
            [ -1.7480,  -3.9288,  -1.5715,  -0.8720,   1.0696,  -0.6499,   2.4026,
              -3.3472],
            [  2.4354,  -2.8218,  -2.6459,  -2.5857,  -2.9590,   1.6887,  -5.2600,
              -4.2312],
            [ -1.6134,  -3.5885,  -4.5588,   1.1313,  -5.5195,  -7.0920,  -2.5319,
               2.3793],
            [  0.6701,   1.2093,   1.7666,  -0.9005,   0.5183,   2.1116,   2.6004,
              -6.3826],
            [  4.4283,  -0.0855,  -2.1435,   1.5187,   1.5385,   1.7707,  -3.2353,
             -10.5416],
            [ -8.6406,  -5.2554,   1.5768,  -7.3295,  -0.3499,  -3.7233,  -3.9764,
               4.0534],
            [ -0.6125,  -0.0217,  -3.3328,  -5.0182,  -2.2589,   0.4434,   6.9989,
              -9.5531]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ -0.1052,   0.4930,   1.7474,  -0.9699,   1.1896,  -4.0481,   1.7547,
               0.5702,   7.5219,   0.3957],
            [  0.2516,  -1.3242,  -0.3034,  -7.2467,   2.4689,  -2.0132,  -0.7858,
               1.4133,  -4.5610,  -3.1149],
            [ -1.2544,   4.8124,   1.2701,   5.4101,   1.6758,  -0.5015,   2.4435,
             -12.8353,   2.9518,   1.0691],
            [  1.2383,  -2.7820,   1.0353,   0.0986,  -0.9136,   1.0419,  -6.5786,
               5.1683,  -1.3946,  -1.5469],
            [ -3.0637,   3.2021,  -3.4764,  -2.3885,   1.6862,   2.8258,   1.2944,
               1.3516,  -0.5767,   1.6161],
            [  0.6522,  -2.7530,  -2.6219,   5.0399,  -4.1088,  -5.4392,   0.0158,
               3.4465,  -2.6229,   0.3335],
            [ -1.5787,   4.1611,  -0.1420,  -3.8296,   2.6678,   5.0501,  -1.1705,
               0.9617,   2.1382,   0.8087],
            [  1.1093,  -2.5517,   0.5475,   2.4996,  -0.7559,   4.6874,  -2.0513,
               1.6649,  -1.4293,  -0.8371],
            [ -0.9627,   2.2845,   1.2013,  -0.8153,   3.3976,  -0.7154,  -1.3879,
               0.2992,   0.2940,   0.2350],
            [  1.1306,  -0.5723,   0.9229,   0.9056,  -2.7940,   1.8474,   0.0601,
              -0.1203,  -0.0145,  -0.0211]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.221 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
