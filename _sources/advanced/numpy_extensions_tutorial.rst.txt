.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.6159,  8.9221,  8.1637,  1.8768,  8.8364],
            [ 3.9291,  3.7878,  7.4221,  9.2037,  0.8037],
            [ 9.3834,  7.3005,  1.7560, 11.8327,  2.1318],
            [ 3.2279, 10.5513,  4.7354,  4.8699,  5.7855],
            [12.3910,  5.1313,  8.5802, 10.6738,  9.9667],
            [ 3.2279,  9.1088,  6.9396,  9.6930,  5.7855],
            [ 9.3834,  8.5431,  5.8316,  2.2313,  2.1318],
            [ 3.9291,  5.9350, 11.1836,  2.8732,  0.8037]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0743,  1.1469, -0.0385,  1.0882, -0.0922, -1.6988,  0.3118, -2.1332],
            [ 0.8149,  0.1261, -0.0914,  0.8738,  1.3027,  2.8381, -0.8443,  0.0929],
            [ 1.3043,  0.5113, -0.4610,  0.4185, -0.2283, -0.0176, -1.4868, -1.5141],
            [-0.6303,  0.5715, -0.0237, -1.7834,  0.4843,  1.1739, -1.3018, -0.0562],
            [-1.6116, -0.3102,  0.2145,  1.1372,  0.3086, -0.2702,  0.1147, -0.6972],
            [ 0.3988,  0.9915,  0.1941,  1.4298,  0.2667, -0.6464, -0.3727, -0.1070],
            [-1.1372, -0.2579, -0.1438, -1.1018, -0.7157, -0.3743,  0.3678,  0.2890],
            [ 0.0810,  0.7674, -0.8652, -0.2236, -0.1768, -0.0406, -1.2431,  1.3867]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0385, -0.8647, -0.2829],
            [-0.4285, -2.0218,  0.0190],
            [ 0.3617,  0.8867,  1.6545]], requires_grad=True), Parameter containing:
    tensor([[0.2379]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.9186, -3.1632,  4.1065, -1.8250, -1.8039, -4.3473, -0.6290,  0.0479],
            [ 1.4595, -3.2071,  0.1893, -1.6190, -0.5220, -1.6695,  0.1524, -3.3496],
            [-1.1040,  1.1828,  0.8930,  2.1648, -0.3605, -0.6331, -4.3950, -2.7951],
            [ 2.1175,  4.2824,  3.4788,  1.5420,  1.0425,  2.1637, -2.1985, -0.9117],
            [ 2.6816,  0.3418, -4.9195,  4.3006,  0.1574,  4.5424,  5.3852,  8.2968],
            [ 4.4303,  0.8205, -4.5033, -0.1816,  3.0339,  1.7916,  1.5748, -0.3827],
            [-3.0231, -6.0189, -1.6245,  5.7558, -2.2772, -1.9839,  6.9306, -1.9664],
            [ 1.4179,  2.9851,  2.6794, -2.0002,  1.2619,  1.1296,  2.3292, -5.0300]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.8136e+00,  1.5259e+00,  1.3507e+00,  1.8807e+00,  1.6476e+00,
              7.4592e-01,  1.4708e+00,  1.7661e+00,  9.0935e-01,  1.8153e-01],
            [ 2.0674e+00,  4.3948e+00, -5.1193e-01, -1.7325e-02,  2.2182e+00,
              1.8619e+00,  2.2195e+00,  2.2243e+00,  3.0311e-01, -4.1086e-01],
            [ 2.8748e-01,  1.7727e+00, -2.9473e+00, -3.1360e-01, -1.0984e+00,
             -5.0516e-01, -1.0564e+00, -5.4071e-01, -5.4179e+00, -1.0381e+00],
            [-5.1187e-01, -1.0735e+00, -2.0716e+00,  3.4050e+00,  7.9071e+00,
              2.1749e+00, -6.6167e+00, -4.5518e-03,  1.3081e-01,  2.5008e+00],
            [-1.1822e-01, -1.7169e+00, -3.6404e+00, -6.0324e+00, -3.2935e+00,
             -2.5753e+00,  2.6141e+00,  4.5874e+00,  2.1184e+00,  4.5678e-01],
            [ 2.1695e+00,  1.7674e+00,  1.2816e-01,  1.1799e+00, -1.2865e+00,
              3.5829e-01,  3.6490e+00,  1.6248e+00,  4.0790e+00, -8.9233e-01],
            [ 1.5253e+00,  3.7703e+00, -2.3591e+00, -3.9272e-01,  1.4754e+00,
              1.1596e+00, -3.9679e+00, -1.3378e+00, -3.8874e-01, -2.5820e+00],
            [-9.5799e-01, -2.0872e+00, -4.7082e+00, -6.1100e-01,  1.5639e+00,
             -4.0386e-01, -1.9021e-01,  6.5584e+00, -9.9060e-02, -5.5286e-01],
            [-4.6814e-01, -1.8193e+00, -1.6484e+00,  4.4382e+00,  1.8086e+00,
              7.1689e-01,  1.5090e+00,  3.4525e-01, -1.9804e+00, -3.1980e-01],
            [ 1.8625e-01,  8.3114e-01,  1.3676e+00,  7.2969e-01, -1.9250e+00,
             -3.9016e-01, -9.2925e-01, -1.2407e+00, -9.1858e-01, -1.1295e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.056 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
