.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.3670,  9.6627,  2.2887,  9.1566,  4.8642],
            [ 9.8975,  2.9030, 12.8976, 11.1274,  2.9698],
            [ 6.1405, 14.9309,  6.5812,  4.4020,  3.8400],
            [ 7.8052,  7.4861,  5.0434,  2.3634,  6.3173],
            [ 5.7964,  3.3715, 10.2412,  3.8971,  0.1083],
            [ 7.8052,  8.0852,  8.9928,  6.5635,  6.3173],
            [ 6.1405, 11.1140,  3.4744,  5.9085,  3.8400],
            [ 9.8975,  8.4120, 12.1957,  1.0547,  2.9698]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6564,  0.1467,  0.1169,  0.2498,  0.1046,  1.2202,  0.1115,  1.1377],
            [-0.3917,  0.2762, -0.1559,  0.1583,  0.6126,  0.2675, -0.4318, -0.9803],
            [ 0.1972,  0.6110,  1.2570,  0.8324, -0.5385, -0.4156, -0.6501, -1.5140],
            [-0.2768,  0.0419, -1.1338, -1.5175, -1.6265,  1.2686, -1.1799, -0.4185],
            [-0.2817,  0.8112,  1.3003, -0.8214,  0.0321,  1.5536, -0.6766, -0.3451],
            [-0.1346, -1.3249,  1.1599,  1.1497,  1.8684,  0.2112, -2.4791,  0.1100],
            [-1.7298, -0.8466,  0.4200,  1.1942,  0.5094,  0.2073,  0.2191, -0.4875],
            [ 0.9617, -0.0372,  0.4516,  0.5619,  0.7863, -1.7151,  0.1733,  2.5298]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1816,  0.1192, -0.5760],
            [ 1.2819, -1.8121, -0.8420],
            [-2.0234,  0.5819, -1.0882]], requires_grad=True), Parameter containing:
    tensor([[1.5437]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.8394,  3.8006,  0.6903,  3.8898,  0.3229,  8.4629,  3.1891,  1.8379],
            [ 4.0893,  3.1587, -0.1807,  5.0513,  7.2055,  7.0657,  4.6714,  6.1461],
            [ 0.9662,  2.0847,  3.4196,  3.9531,  2.8740,  0.3414,  6.1767, -3.5299],
            [ 0.3925,  3.2386, -0.0416,  7.9792,  0.8179, -0.1525, -7.8425,  0.1786],
            [ 1.7580, -3.6873,  8.2153,  1.0386,  1.2517, -3.7527,  0.9466, -0.2743],
            [ 2.0610, 14.8234,  0.9252,  2.5415, -2.6041, -3.2372,  1.2176,  4.3238],
            [ 6.5199, -3.4328,  9.6977, -0.4768,  2.7858, -0.6778,  5.8639,  2.3551],
            [ 0.9928,  7.4677, -3.6572, -2.2357,  1.4500,  2.7652, -0.5835,  5.8072]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.0567, -0.1587,  0.2721,  0.2582, -1.4444,  0.9292, -2.5714, -1.0404,
             -0.7551, -0.7589],
            [-1.9665,  0.7779,  0.1519, -2.5869, -1.0597, -1.8966,  0.1791,  0.2872,
             -4.0454, -0.9145],
            [ 0.8851, -2.1683, -1.6538,  1.5390, -3.3261, -3.1904, -6.3880, -0.6414,
             -1.6655, -0.7485],
            [-0.7100, -3.0715, -5.1840, -8.0839, -0.8599,  1.6896, -2.7898, -2.4178,
             -0.5092,  0.2713],
            [-1.6587, -4.2447, -1.3377,  0.2203, -0.8970, -2.0193, -0.1272,  4.9046,
             -3.4029,  0.0306],
            [-1.8522,  0.2505, -3.7879, -0.9828, -2.8089,  1.3616, -1.1345, -0.6533,
              2.3307, -1.0245],
            [ 1.7989, -2.3457,  5.7325, -5.5400,  6.2416, -0.4808,  5.0496, -2.0726,
              0.3755, -0.2760],
            [-0.9462,  2.4917, -0.1907,  0.3347,  4.5400, -5.0959,  1.0631,  0.4536,
             -2.8901, -1.2110],
            [ 2.9069, -1.0219,  5.1953, -1.7699, -0.0293,  5.5016,  0.1391, -4.4899,
             -0.4683, -1.2559],
            [ 1.1439, -1.1961,  1.1792, -1.3191,  3.4060, -4.3471,  0.2045, -1.3068,
             -1.1461, -0.1710]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.064 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
