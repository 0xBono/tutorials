.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.1699,  2.1349,  5.7180,  1.4829,  6.7256],
            [ 5.7540,  9.3541,  8.4109,  2.3688,  4.5413],
            [ 1.1555,  5.9509, 10.2371,  1.7784,  4.1339],
            [ 7.0472,  4.1507,  1.5446,  6.6052,  4.3216],
            [ 8.6744,  8.4644,  5.0109,  2.3155,  6.1211],
            [ 7.0472,  8.3353, 11.4658,  9.7676,  4.3216],
            [ 1.1555, 16.9795, 18.3733, 11.8257,  4.1339],
            [ 5.7540,  9.3548,  8.3808, 10.1500,  4.5413]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5833, -0.6051,  0.1911, -1.7143, -0.3358, -0.6040, -0.8490, -0.1752],
            [ 0.0117, -1.6699,  1.1184,  0.3168, -0.2638,  0.2003,  1.1492,  0.4780],
            [-0.5104, -1.3632,  0.7575, -0.2341, -0.2198, -0.2633, -0.1909, -0.4639],
            [ 0.2404, -0.5368, -1.8455,  0.6545,  0.8614,  1.2632,  1.7176, -0.6082],
            [ 0.6334,  0.4456, -0.4664, -0.5288,  0.5929,  0.2362, -0.4937, -0.0251],
            [ 0.3864,  0.9821,  1.6862,  0.0280, -2.4768, -0.8642, -0.5858,  0.0376],
            [ 1.0650,  0.0318, -0.7309,  1.5621,  1.3443, -1.6230, -0.7033, -1.5984],
            [ 0.1169,  0.8327, -2.2598, -2.0277,  1.9037,  1.4415, -0.9827, -0.0531]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2040, -1.0848, -0.4208],
            [-0.2886,  0.8930,  0.8433],
            [ 1.1008,  0.0028,  0.1986]], requires_grad=True), Parameter containing:
    tensor([[-0.5585]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.0929,  0.3362,  1.3769,  1.2684, -2.4216,  1.5375, -1.5311, -1.3662],
            [ 1.6941,  0.3997, -3.0973, -1.2327,  0.0979, -2.2655, -1.5734, -3.0174],
            [-1.1322, -3.7510,  1.6796,  2.9081, -1.9857,  1.8299,  0.2808,  2.2149],
            [-3.2407,  1.0425, -0.8795, -1.7307,  2.4414, -2.0327,  0.5847,  0.1156],
            [-0.1052, -2.1735, -2.8944, -3.6653, -3.2547, -0.8577, -1.6998, -3.5505],
            [ 0.4260, -1.9888, -2.8382,  1.5186,  0.0337, -2.0303, -1.3362, -0.0580],
            [-0.8439, -0.0677,  3.1739,  0.0241,  1.2351, -0.6313,  2.5423,  0.6564],
            [-3.8996,  0.5184, -2.3360, -2.7963, -1.3626,  1.5807,  0.5520, -2.7996]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.5182e-01,  8.0501e-01,  9.7782e-02,  1.5486e+00, -1.3425e+00,
             -4.6502e-01, -5.2215e-01, -8.1204e-01, -1.2205e+00, -3.6520e-01],
            [ 2.3974e-01, -9.5408e-01,  4.7095e-01, -1.5204e+00,  2.7134e+00,
              2.6959e+00,  5.3909e-01,  7.1298e-01,  8.8386e-01,  5.8910e-01],
            [-6.1939e-01, -9.3418e-01, -2.8451e+00,  4.2089e+00, -1.9097e+00,
             -2.4137e+00,  2.2065e-01,  5.2960e-01,  1.6035e+00,  9.2839e-01],
            [-5.4150e-01,  1.9189e+00,  2.7047e+00, -4.4185e+00, -2.1185e+00,
             -2.2204e-01, -6.4106e-01,  1.4492e+00,  9.3549e-01, -4.2660e-01],
            [ 1.4673e+00,  4.3281e-01, -4.8295e+00, -1.0758e+00, -2.5400e-01,
              1.1473e+00,  2.0821e+00, -2.0913e+00, -3.3693e-01, -6.0517e-01],
            [-1.5528e+00, -1.3745e+00, -1.4210e+00,  1.5772e+00,  3.3325e+00,
             -1.1813e+00, -2.1174e+00,  6.0351e-01,  4.3229e-01, -9.0344e-01],
            [-1.4838e+00,  1.3610e+00,  1.3174e+00,  1.2101e+00, -1.5423e+00,
              3.2246e+00,  5.3085e-01, -2.2757e+00, -9.0838e-01, -7.5088e-01],
            [-7.5084e-01,  2.4457e+00,  8.7976e-01, -1.1140e+00,  3.2724e+00,
             -2.8002e+00,  3.0324e-01,  2.2353e+00,  1.4313e-01, -2.2084e-01],
            [ 3.9497e-04, -9.8506e-01, -1.3706e+00,  8.2633e-01, -1.4756e+00,
              3.2715e+00, -2.9227e-01, -1.3335e+00, -1.6557e+00, -6.3269e-01],
            [-1.6291e+00, -3.1847e-01,  8.3034e-01, -6.9402e-01,  1.3183e+00,
             -8.2962e-01, -1.0519e+00, -8.5465e-01, -2.2761e-01, -1.3027e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.082 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
