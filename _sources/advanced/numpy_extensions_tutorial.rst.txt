.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[25.7544,  8.3734,  5.8320,  9.3877, 12.3438],
            [10.9433,  5.5296,  5.5905,  4.4834,  7.4624],
            [ 5.1850, 12.5476, 14.1925, 10.1232,  2.5179],
            [ 9.7715,  7.6129,  5.5052,  1.5740,  3.0156],
            [ 2.8197,  2.1190,  2.4216,  4.8054,  8.3322],
            [ 9.7715,  6.6356,  2.2542,  7.0706,  3.0156],
            [ 5.1850,  9.1945,  1.8344,  9.6166,  2.5179],
            [10.9433,  2.1920,  2.0819, 11.9457,  7.4624]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.9531e-01, -6.7526e-01, -1.4402e+00, -1.2624e+00,  1.9567e+00,
             -6.8876e-01,  7.2100e-01,  8.2430e-01],
            [-1.0243e+00, -1.1048e-01,  8.5968e-01,  8.6379e-01, -2.2209e-01,
             -3.1241e-01, -9.7700e-01,  3.5492e-01],
            [ 1.3031e+00,  6.6133e-01,  1.7657e-01, -7.5716e-02, -1.9030e-01,
              1.2234e+00,  3.5554e-01, -5.2266e-01],
            [ 1.0975e+00, -1.9819e+00,  2.5731e-01,  2.8704e-01,  5.5957e-01,
              2.1593e+00, -3.7668e-01,  7.0425e-04],
            [ 7.2721e-01, -7.1078e-01,  1.3098e+00,  1.1048e+00,  1.6214e+00,
              8.5706e-01,  7.1844e-01,  9.4030e-02],
            [ 1.4296e+00,  7.2370e-01,  1.2460e+00, -7.7907e-02,  2.7808e-02,
              3.8972e-01,  9.7526e-01,  5.2231e-01],
            [ 1.6495e+00,  2.1079e-01,  1.2037e+00, -3.3237e-01, -2.8373e-01,
              1.0602e+00,  1.2693e+00, -1.2032e+00],
            [ 1.5453e+00,  3.6050e-01, -4.9630e-01,  8.4341e-01,  1.5084e+00,
              2.3216e+00,  1.7364e+00, -2.0369e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6555, -1.1167, -1.9280],
            [-0.9817, -0.2442,  0.3382],
            [-0.5636, -1.2263, -1.8351]], requires_grad=True), Parameter containing:
    tensor([[0.4834]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.1509, -5.2282, -1.0154, -1.7704, -3.2167,  0.5249, -3.4571, -4.6398],
            [-3.1790, -2.0318, -1.9709, -3.2701, -2.3811, -0.0757, -4.3595, -2.5922],
            [ 1.8199,  2.5481,  2.2105,  4.0928,  3.0463, -3.3650,  0.5987,  2.3374],
            [ 0.5336,  2.8981,  0.8741, -1.0162, -1.1716,  3.5882,  2.8094, -2.1933],
            [ 2.4537,  7.2806,  6.3799,  1.3184, -3.8265, -3.6290, -0.5778, -0.8833],
            [-1.1729, -3.4927, -0.1382, -0.3065,  0.0323,  0.7428, -1.5256, -0.4231],
            [ 0.5066,  4.8212,  3.9552, -2.2621, -3.1398,  0.3212, -0.0392, -3.5917],
            [ 0.8774,  0.1072, -1.4352,  2.8067,  0.7333,  4.4775,  0.9600, -5.5537]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0188, -0.1545, -0.0218, -0.3383,  1.7899,  4.3054, -0.4085, -2.1013,
              3.4875,  3.2627],
            [ 0.3037,  0.4284, -2.7669,  1.2198,  0.3104, -1.6399,  3.4267, -0.1037,
              0.3271,  1.3300],
            [-0.3150, -1.9965,  1.0093,  3.2174,  4.0896,  0.5811, -2.4455, -0.0636,
              2.9299,  2.7577],
            [ 0.0305, -3.2428, -0.3620,  0.4106,  0.4299, -0.1556,  0.4604, -0.3827,
              1.6667,  1.4724],
            [-1.1573,  1.7134,  1.7928,  1.0710, -2.8734, -4.0590,  1.2762,  2.2615,
             -1.0456, -1.1347],
            [-0.3598, -0.5002,  1.1037,  5.2220,  1.9766,  2.5090,  3.5422,  2.5478,
              1.2172,  2.7135],
            [-0.6760,  3.1386,  1.7874, -1.8973, -1.3900,  2.2370,  1.4151,  2.8892,
              3.7012,  0.3512],
            [ 1.2147, -0.3816, -1.1868,  2.1078, -0.2402, -0.5929,  4.0712,  5.0297,
             -1.2495,  2.6268],
            [ 0.0845, -0.1399,  0.1554, -3.8531, -2.3740, -0.9963, -1.4787,  0.8444,
              3.4165,  1.8280],
            [-0.2674, -0.9455, -1.7402, -2.1382, -2.2628, -3.0507, -1.2303, -0.6890,
             -1.7534,  0.2650]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.018 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
