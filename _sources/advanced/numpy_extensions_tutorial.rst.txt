.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.6390, 10.2812,  3.5473,  9.4667,  0.0298],
            [ 4.0063,  8.2977,  6.5339,  5.3940,  5.1747],
            [ 6.2443,  7.7843,  5.2430,  5.7851,  5.6302],
            [ 9.6315,  3.8909,  4.8908,  7.5525,  1.9390],
            [ 8.2685, 11.3982, 11.7961,  7.0178, 10.3956],
            [ 9.6315,  8.0656,  4.1293,  2.8083,  1.9390],
            [ 6.2443,  2.4473,  8.9698, 10.2533,  5.6302],
            [ 4.0063,  9.9403,  4.0385,  4.0617,  5.1747]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6310, -0.0430, -0.0783,  0.6079, -0.8972,  1.4811, -0.4160, -0.3209],
            [ 0.2107, -0.7140, -1.3951, -0.3932,  0.4428,  1.5423,  0.1145, -0.8948],
            [-1.3765, -0.6505, -0.5173,  0.3733, -0.8117, -1.2444, -0.4963, -0.9327],
            [ 0.9874, -0.4723, -0.2743,  0.4571,  0.5045,  0.3522,  0.4447,  1.0538],
            [ 0.9352, -1.4685,  0.4934, -0.6265, -2.7368, -0.1401, -1.2917,  2.4542],
            [ 0.5948, -0.2708, -1.2138, -1.1386,  0.7906,  0.7361,  0.5058, -0.6057],
            [ 0.7698, -0.1677,  0.5989, -0.6563, -1.4230, -0.7251,  0.5337,  1.1887],
            [ 0.4953, -0.4357,  0.2900, -0.5364,  0.4334, -0.6685,  0.3175,  0.0544]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0071,  0.1531,  1.4424],
            [ 0.2524, -1.3654,  1.2474],
            [ 0.0965, -0.3164, -1.5310]], requires_grad=True), Parameter containing:
    tensor([[-0.9092]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.6466, -0.1463, -8.9774,  3.5511, -6.2633, -1.6616,  3.4608, -3.0553],
            [-0.8761,  3.1344, -3.0184, -2.0624, -0.8874, -2.3802, -3.3286, -2.7124],
            [ 6.7748, -7.9374,  4.6936, -3.8729, -1.1716, -0.6962, -3.5502,  2.2996],
            [-0.3683,  2.4932, -3.1382,  2.3767, -1.1306,  3.1801, -2.3783, -1.3481],
            [-7.7288,  1.8151, -0.2038,  0.6502, -3.1702, -0.1452, -1.5277, -0.4155],
            [ 1.9672, -3.8596, -4.3622,  3.5031, -3.0027,  1.0900, -2.6932,  0.8467],
            [-2.9246,  7.4035, -3.9697, -2.6204,  1.3268, -2.5297,  0.7365, -2.7548],
            [-5.1179, -2.9707,  3.8771, -0.6438, -2.5339, -1.6715, -0.3817, -5.6268]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1945e-03, -2.2816e-02, -1.7833e-01,  6.1511e-01,  2.6400e-01,
             -2.2218e+00,  1.5793e+00, -1.2839e+00,  1.1379e+00,  1.3249e+00],
            [-4.3506e-02,  2.9251e-01, -1.1331e+00, -2.5838e+00,  1.6203e+00,
             -4.9577e+00,  5.3969e+00, -2.9516e+00,  2.3989e+00,  2.9348e+00],
            [-5.0511e-02,  1.7230e-01,  3.6193e+00, -5.7249e-01,  1.4763e+00,
              5.2900e-01,  1.4759e+00, -4.5715e+00,  2.3747e+00,  8.0235e-01],
            [ 2.9868e-01, -1.8515e+00, -4.6323e-01,  2.7954e+00, -1.2720e+00,
              3.0045e+00,  1.5282e-01, -4.2459e+00,  2.9801e+00,  2.3051e+00],
            [-1.9777e-01,  1.2605e+00, -4.5544e+00,  2.4051e+00, -7.9423e-01,
             -1.0999e-01,  3.7857e+00,  5.4683e-01, -5.4722e+00,  1.2396e+00],
            [-2.9410e-01,  1.5740e+00, -1.4626e+00,  1.7581e+00,  3.3545e+00,
             -2.1031e+00,  3.8101e+00,  3.3888e+00, -5.0769e+00, -5.9021e+00],
            [-2.2080e-01,  1.2512e+00, -5.8410e-01, -3.6852e+00,  2.8297e+00,
             -8.5401e+00, -2.5567e+00, -2.0444e-01,  3.1916e+00,  2.8871e-02],
            [-1.2855e-01,  6.3286e-01, -5.1212e-01, -1.1423e+00,  9.6173e-01,
              4.3435e+00, -4.7222e+00, -1.2052e+00, -3.1696e-01,  1.9232e+00],
            [-1.3796e-01,  7.6409e-01, -3.0128e-01, -1.0496e+00, -1.3587e+00,
              3.4245e+00,  1.7633e+00,  1.7320e+00, -2.2008e+00,  1.4062e+00],
            [-4.3056e-02,  1.5263e-01,  6.9221e-01, -2.0899e-01, -1.1206e+00,
             -2.0497e+00, -6.7797e-01, -3.0074e-01,  9.3246e-01, -1.2433e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.607 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
