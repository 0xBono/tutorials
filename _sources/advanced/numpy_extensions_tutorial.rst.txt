.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.4602,  5.3249, 18.4954,  5.6539,  3.0088],
            [ 1.8901,  5.6744,  7.2156,  3.9478, 14.2243],
            [ 5.4444,  5.0129,  8.3381,  9.7140,  6.4600],
            [10.2438, 11.1076,  4.5772, 10.1324,  5.0824],
            [ 2.4796, 11.5149,  7.3268, 16.4951,  4.8744],
            [10.2438,  4.5099,  9.2640,  6.1187,  5.0824],
            [ 5.4444,  1.9528,  9.1008,  2.4516,  6.4600],
            [ 1.8901, 10.6985,  2.9191,  6.9263, 14.2243]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.3865,  0.4925, -0.0527,  0.7552, -0.5981,  0.1438, -0.2101, -0.1057],
            [ 0.0719,  0.6592, -0.0552,  0.8845, -0.9696, -1.4043,  0.7560,  1.2825],
            [-0.8080, -2.1553, -1.5503,  1.6389,  0.3763,  0.0578,  2.1472, -1.0929],
            [-1.3657,  0.1028,  1.9726, -1.7583,  0.2547,  0.3039,  1.0392, -0.1995],
            [-0.8478,  0.2179,  0.3962,  0.9331, -0.6423,  1.0983,  2.8283, -0.2106],
            [-0.3939, -0.4654,  0.4169, -1.7739,  0.8509, -1.1241, -0.0706,  0.5936],
            [-0.5492,  0.4013,  0.4938,  0.6636, -1.5903, -0.8532,  1.2680,  0.2311],
            [ 0.2619,  0.7482,  0.6995,  0.2841, -0.6188,  1.5771, -0.8984,  1.3081]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6711, -0.9438,  1.0202],
            [-0.7037,  0.4009, -0.7978],
            [-0.3346, -2.2800, -0.6497]], requires_grad=True), Parameter containing:
    tensor([[-2.2151]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.6018, -0.4557, -0.1568,  2.6032, -7.8724, -3.6845, -2.4754, -3.8243],
            [-3.2719, -4.1209, -1.1637, -0.9196,  1.7309, -6.9981, -2.4503, -2.6652],
            [-2.0734, -4.5241, -1.4503,  4.8162, -7.1976,  1.2204, -1.4926, -1.9047],
            [-5.4531,  1.3017, -3.8138, -5.5328,  0.7780, -4.4900, -3.8745, -2.4485],
            [ 3.0547, -6.3007, -0.2456, -1.9023, -1.3420, -6.8979, -0.1141, -1.5859],
            [-5.5437,  3.0221, -7.4560, -3.6044, -3.1670,  0.7613, -1.1915,  2.8843],
            [-0.2681, -6.2885, -1.9473, -3.3273, -1.6750,  0.6910,  1.1113, -2.5360],
            [-5.8171,  0.5449, -2.1895, -6.2803, -1.8737, -6.0821, -3.7742, -1.4137]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 7.2550e-02,  7.0668e-01,  7.5128e-01, -1.3440e+00, -6.8619e-02,
              1.5529e+00, -3.5386e-01,  3.1575e-01, -7.4317e-01,  1.6086e-01],
            [-9.5200e-01, -1.2566e+00,  4.1789e-01,  2.9182e-01,  1.2658e+00,
             -4.0089e-02,  1.2944e+00, -1.3107e-02,  2.5285e+00, -1.9325e+00],
            [-1.1502e+00,  6.5333e-01,  4.8087e-01, -2.0610e+00, -7.4869e-01,
              5.6546e+00, -9.0264e-01,  3.2420e+00, -8.5963e-01,  9.9709e-01],
            [-5.1296e-01, -4.9543e+00, -5.0138e+00,  1.4475e+00,  2.9832e-01,
             -3.1262e+00,  2.8719e+00,  2.7225e+00,  1.1097e+00,  2.6545e+00],
            [ 3.9631e-02, -2.6884e+00,  1.8331e+00, -9.4037e-01, -4.0309e+00,
              2.5736e+00,  5.0719e+00, -3.5818e+00,  3.6560e+00, -1.1924e+00],
            [ 3.0121e-01, -7.3088e-02, -3.3783e+00, -3.8760e-01,  4.3707e+00,
              1.9317e+00, -3.2193e+00,  1.4111e+00, -2.1383e+00,  1.3307e-03],
            [ 1.1755e+00,  5.8938e-02, -5.3018e+00,  7.7347e+00,  3.9600e+00,
              2.7217e-01,  7.5855e-01,  1.4395e+00,  1.3679e+00, -9.7717e-01],
            [-3.3368e-01, -3.0382e+00,  4.9961e+00, -4.4261e-02,  3.1455e+00,
             -2.0550e-01,  1.4561e+00,  4.3298e-01, -2.3655e+00,  2.5003e-01],
            [-1.0346e+00,  2.8757e+00, -5.1978e+00, -5.4844e-01,  1.6426e+00,
              8.9581e-02, -1.4781e+00, -2.4252e+00,  1.5625e+00,  6.3454e-01],
            [-7.0618e-01, -5.0101e+00, -2.8640e+00, -9.0815e-01,  2.9790e+00,
              1.0592e+00, -2.5152e+00, -5.7121e-01,  2.9717e-01,  7.1706e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.310 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
