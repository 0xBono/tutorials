.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.5116,  2.0518,  2.0349,  8.1608,  6.4107],
            [15.1753,  8.4274,  2.3839,  2.2975,  3.2057],
            [ 5.1129,  7.1095,  4.7051,  3.7461,  5.8168],
            [ 4.4760,  7.5962,  6.6086, 13.6791,  5.3819],
            [ 3.3426,  7.0713,  4.9634, 10.6317, 10.4944],
            [ 4.4760,  4.2397, 10.5917,  4.4663,  5.3819],
            [ 5.1129, 12.1122, 15.9254,  2.1614,  5.8168],
            [15.1753,  6.8221,  2.1608, 13.4976,  3.2057]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.2033e+00, -1.9135e+00,  1.1823e+00,  8.9766e-01,  1.3580e+00,
             -8.9992e-01, -2.1230e+00,  2.7419e-01],
            [ 1.4862e+00,  1.1318e-01, -5.5724e-01, -7.6211e-01,  1.5851e-01,
              5.5362e-01,  1.1870e-01, -6.6167e-01],
            [-1.9401e-01,  2.1128e-01,  1.0018e+00,  7.8954e-01, -1.1118e+00,
              2.2290e+00, -5.6616e-01, -1.9222e-01],
            [ 1.1533e+00, -9.8916e-01,  2.0908e+00,  1.2945e+00, -3.7270e-01,
             -4.5158e-02,  3.7684e-01, -1.7936e-01],
            [ 7.3179e-01,  8.9781e-01, -6.2973e-01,  1.2605e+00,  1.5544e+00,
             -5.2391e-01,  4.3417e-01, -5.7570e-01],
            [ 9.8726e-01, -8.2674e-01, -3.5916e-01, -6.0152e-01, -8.8233e-01,
              2.6267e-01,  5.9657e-01, -7.4468e-01],
            [-1.0693e+00,  1.9773e-01, -9.2647e-01, -1.9182e+00, -1.6079e+00,
             -1.5709e+00,  6.8485e-01,  3.9392e-01],
            [ 2.2088e-01,  5.4868e-02,  2.4659e-05, -6.6845e-01, -1.2410e+00,
              1.6458e-01,  6.5743e-01, -9.8308e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5097,  0.8835, -1.6646],
            [-0.7016,  1.2028, -2.1118],
            [-0.5119, -1.7495,  0.6721]], requires_grad=True), Parameter containing:
    tensor([[-0.5105]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.5034,  4.1653,  0.8182, -2.1749,  1.1842, -6.9027,  2.9109, -6.7837],
            [ 7.6882, -5.7373,  0.0921,  2.0436, -2.7451,  1.4099,  1.1255, -5.9826],
            [-0.4788, -0.7224,  4.0613, -4.6068,  1.9692, -6.8533,  0.6028, -5.9528],
            [ 3.1566,  1.7854, -0.1880, -8.3038,  2.4217, -4.9699, -1.6009,  3.7229],
            [ 4.9951, -4.9307,  1.2603, -4.9106,  4.5173, -2.7633, -4.9290,  2.4705],
            [-0.9052, -1.0645,  1.2278, -7.1753, -0.9373, -0.0104,  2.0840,  3.1441],
            [-0.6314, -1.7164, -4.1535,  6.3493, -8.8110,  6.4489, -2.1276,  5.9513],
            [-0.0128,  2.5228, -5.5898,  0.0990, -3.1919,  8.2253, -3.0621, -0.3689]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0154, -0.0151, -0.1816,  0.8661, -1.2188,  0.8462, -0.1642,  1.5986,
             -4.1938, -0.5933],
            [ 0.1971, -0.3327,  1.1068, -0.6346,  2.0454, -0.3981,  0.2128,  2.8804,
             -2.7145, -2.1245],
            [ 1.3701, -2.0742,  4.3620, -0.9475,  4.2716,  0.1101, -4.4137, -2.6185,
              2.7127, -2.4061],
            [ 1.1868, -1.9722,  4.3449,  1.4728, -7.2739,  8.5838, -3.8123,  3.5996,
             -6.7087,  0.7095],
            [ 0.3512,  3.8166, -0.9478, -5.6945, -0.9104,  0.4671, -0.7347, -1.4846,
             -4.7425,  5.3102],
            [-0.5812, -2.4070, -3.4895,  2.9830,  5.0177, -6.1721,  2.5314, -1.4318,
             -0.7071,  2.9633],
            [-0.9324,  2.0478, -3.2264, -0.5264,  0.9586,  2.7808, -4.4703,  3.2863,
             -0.6105, -2.9079],
            [-1.7530,  2.8057, -2.7910,  1.0127, -1.3216, -1.5192, -2.7406,  5.2502,
             -4.6196, -2.7626],
            [-1.6277, -2.8135,  0.8693, -4.7648,  0.5320, -0.7156, -1.0568, -0.7203,
              1.8001, -2.4209],
            [-0.5308, -2.6237, -2.1514,  0.6863,  0.4138,  3.3855,  2.6740, -2.6257,
             -2.0298,  0.8620]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.545 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
