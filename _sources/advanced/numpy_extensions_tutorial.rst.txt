.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.6319,  5.8810,  5.1430,  1.4379,  4.4929],
            [ 9.2543,  2.5105, 11.4629,  8.1048, 12.5022],
            [ 9.6885, 12.4467,  5.8416,  2.9642,  4.3757],
            [ 7.3036, 11.1476,  4.1107,  1.1463,  6.1450],
            [12.2276,  8.5873,  5.9581,  4.3316,  1.1320],
            [ 7.3036,  5.9024,  3.0377,  1.2142,  6.1450],
            [ 9.6885,  1.6314,  7.6165,  9.7516,  4.3757],
            [ 9.2543,  5.5669,  9.2640,  5.6032, 12.5022]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.3329, -0.6543, -0.2245,  0.9727,  1.0966,  0.2822,  0.7301,  0.4054],
            [-0.4609, -0.3317,  0.0661,  0.3799,  0.7732, -1.6582,  0.2466,  0.5479],
            [-0.2598,  1.0623, -0.4427, -1.0891, -0.1458,  1.1762, -0.4421,  0.4125],
            [-0.4875,  2.0334,  0.0507, -0.2570, -0.6613,  0.2395, -0.4392, -0.8572],
            [ 0.2253,  0.9330, -1.8500, -0.2093, -0.8502,  0.6092,  0.6647,  1.2762],
            [-1.7002, -0.5613, -0.4760,  0.1832, -0.6039, -1.1137, -1.2920, -0.7189],
            [ 2.3704, -0.2539,  1.6015,  0.6115,  1.0276,  0.1176, -1.0252, -0.0313],
            [ 2.1450,  0.1482,  0.7502,  0.3214, -0.3511, -0.6290, -0.2989,  1.2147]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0293,  0.7631, -0.6811],
            [-0.4804,  0.2547, -1.7217],
            [-0.4455, -1.1141,  1.6719]], requires_grad=True), Parameter containing:
    tensor([[-2.9273]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.8166, -0.0953, -6.4686,  0.8117, -2.1092, -1.4616, -6.0560,  2.6081],
            [-4.4357, -2.0951, -0.6240, -2.7376, -7.6712, -3.2413, -1.3044, -2.1226],
            [-3.5556, -3.2723, -0.9114, -5.6961, -3.5352,  0.1686, -4.6332, -6.3131],
            [-5.3639, -7.5712, -0.6537, -4.1643,  0.3953, -6.0987, -2.3292, -1.7974],
            [-1.0193, -0.6401, -4.2475,  2.3390, -1.1603, -5.8348, -0.9473, -3.8755],
            [-2.5618, -3.2475, -9.4735, -0.7679, -8.1078, -2.1128, -2.9601,  1.0339],
            [-0.5972, -0.9008, -1.0850, -6.2099, -3.0791,  4.0994, -5.1220, -4.5115],
            [ 0.6090, -6.4962,  4.8702, -6.5638,  3.9273, -4.1043, -2.2691, -1.1238]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0884, -0.3206, -0.7143, -2.4519,  2.3567, -0.7422, -4.1017,  3.6007,
             -2.1466, -0.0145],
            [ 0.4636, -1.5902,  1.5841, -2.2314,  0.5191, -5.5564,  2.2790,  4.9108,
             -6.4960,  1.8608],
            [ 0.5521, -1.2939,  1.2409, -3.3326,  0.0821,  6.8956,  2.5844, -6.8377,
              7.1182,  5.1156],
            [ 1.0410,  0.5894, -2.3401,  3.0781,  0.6613,  0.9541, -0.4596,  3.3437,
              1.7066, -4.2544],
            [ 1.2900,  0.6121,  2.3995,  2.8123,  0.7397, -0.6477, -0.9594,  2.8412,
              2.0444, -1.1780],
            [-0.3781,  2.6220,  2.1115, -2.8880,  3.5129,  4.8356,  1.3506,  2.1742,
             -2.8293,  2.1526],
            [ 1.3561,  1.8238, -1.3876,  3.2985, -2.4598,  0.9839, -2.1744, -0.9623,
              0.2668,  1.2845],
            [ 0.7622, -1.5670,  5.7917,  2.6354, -3.3408, -0.3409, -0.6781,  5.9098,
              1.0025, -0.5374],
            [ 0.8940,  1.8704,  0.2174, -3.1079, -0.4143,  5.0086, -0.1675, -1.4303,
             -0.4719, -2.3220],
            [ 0.2272,  0.3738, -1.0666,  1.9803, -0.1438, -3.1930,  2.5708, -1.9765,
              0.2003,  0.9923]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.563 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
