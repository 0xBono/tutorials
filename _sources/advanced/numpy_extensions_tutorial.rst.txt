.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.8025, 21.3201,  4.3579,  6.6625,  1.4417],
            [ 8.7034, 20.3418,  1.6185,  6.3846,  1.9657],
            [ 8.5869,  6.5207,  5.9318,  7.2099,  2.3773],
            [ 4.1020,  0.9320,  4.9217, 12.5805,  7.9040],
            [16.7973,  4.7440,  9.8914,  6.9280,  9.1179],
            [ 4.1020,  1.2142, 10.4137,  7.4393,  7.9040],
            [ 8.5869, 13.9014,  4.9612,  7.3623,  2.3773],
            [ 8.7034,  8.4850,  1.6607, 12.0498,  1.9657]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1600,  0.5476,  0.3336,  0.0673, -0.0287, -0.4630,  0.9169,  1.3636],
            [ 1.6326,  0.2981, -0.4165,  1.9132,  1.2874,  0.1334,  0.3894, -0.8080],
            [-1.1889, -0.0136,  0.6824,  0.8634,  0.0773, -0.6033, -0.3081, -1.1495],
            [-0.1588,  2.6000, -0.2115,  0.2577, -0.1946, -1.9438,  0.6839,  1.0372],
            [ 1.9476,  1.6760,  0.6147,  0.0430, -1.3526, -2.7506, -0.6244,  0.2870],
            [ 0.3078,  2.8232,  0.6963, -1.0662, -0.6544, -0.3539, -1.7065,  0.6652],
            [ 1.3219, -1.8933,  0.7204,  0.7633, -1.6683, -1.4390, -0.8634, -0.7166],
            [ 1.2205,  1.1474,  0.3921, -0.1649, -0.0981,  1.1175,  1.0906,  1.8837]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-2.1544,  0.1550,  0.3416],
            [-0.3011, -1.4767, -0.0444],
            [ 1.4946,  0.6805, -0.0353]], requires_grad=True), Parameter containing:
    tensor([[1.3598]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.0719, -1.3139,  6.4118,  2.5401, -0.5341,  3.2244,  0.5161,  2.7050],
            [ 1.8122,  4.2176,  6.7895, -0.1908, -3.8774,  0.8936,  2.4559,  3.5328],
            [ 6.8102,  4.0744,  1.2364,  2.8892,  5.1614,  0.2536,  4.0210, -0.6908],
            [ 0.8669, -2.3954,  1.9650,  0.0401,  4.2641,  4.0815,  2.0980,  1.8233],
            [-2.4428,  1.5858,  2.9031,  1.3352, -0.1497,  1.9617,  2.5153, -0.0997],
            [-0.1729,  0.4995,  3.0006,  6.4706,  2.3101,  2.5042,  2.1350,  7.9803],
            [ 7.6949,  0.9418, -1.9281,  4.2731,  1.8328, -1.9411, -0.3191,  6.3304],
            [-0.1082,  4.9409,  5.5275,  1.7168, -4.5896, -1.1763,  2.3663, -5.1168]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 4.3377e-03, -3.9478e-01,  1.3286e+00,  2.1779e-01,  2.5537e+00,
             -8.8074e-01, -4.0487e-01,  6.8088e-01, -3.9929e-02, -9.1702e-02],
            [ 3.4954e-01,  2.3735e+00,  3.5575e-01,  3.0268e-01,  2.8176e+00,
             -1.6624e+00,  1.8451e+00, -2.1652e+00,  2.0856e-01,  4.2187e-01],
            [ 3.7342e+00,  1.6830e+00,  8.2490e-01, -4.2748e-01, -8.8511e-01,
              1.0533e+00, -5.7543e-01,  1.1013e+00, -2.1415e+00, -1.1984e-01],
            [ 2.4979e-01,  2.2554e+00, -2.5460e+00,  3.0947e+00, -9.9558e-01,
             -3.1629e-01, -9.9883e-01,  6.9151e+00,  1.0444e+00, -7.5681e-01],
            [ 9.7468e-01, -2.1066e+00, -2.1673e+00, -7.4779e-01,  1.5852e+00,
              8.5709e-01, -1.3199e+00, -1.5779e+00,  2.7936e+00,  1.6754e-01],
            [ 2.7181e+00,  7.9761e-01, -3.0367e+00, -1.7752e+00,  2.4935e+00,
             -6.4379e-02,  4.8189e+00, -5.6196e-01, -2.2307e+00, -1.5249e-01],
            [-5.2077e+00,  2.2400e+00,  3.0083e-01, -7.4073e+00, -5.6776e-01,
              4.3602e-02,  1.2342e-01,  3.4716e+00,  7.8065e-01, -2.1043e-01],
            [-2.5714e+00, -1.1750e+00,  3.8867e+00,  3.3299e+00, -2.9894e+00,
             -1.9570e+00, -2.3630e+00,  4.0617e+00,  2.2494e-01, -6.8123e-01],
            [ 2.0391e+00, -4.3635e-01,  5.0260e-01,  4.4970e+00,  5.6688e+00,
              4.0661e+00, -3.0086e-01, -5.4768e-01,  2.7499e+00,  1.1935e-01],
            [ 4.2460e-01, -5.0270e-01, -5.0068e-01, -2.5995e+00, -3.4922e+00,
             -1.1862e+00, -4.0809e-01, -3.3811e+00, -1.4533e+00,  7.5823e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.105 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
