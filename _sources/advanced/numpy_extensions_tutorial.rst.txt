.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.0446,  5.5323, 12.3998,  4.1223, 13.5816],
            [ 7.3234,  7.5305,  2.6082, 11.3813,  4.1666],
            [ 6.6849,  4.0610,  9.6882, 11.6040, 14.9776],
            [10.1800,  6.7869,  6.2132,  7.3387,  0.9070],
            [13.7681,  6.5550,  7.4115,  6.6827, 15.1240],
            [10.1800,  8.1897,  2.2046, 12.4260,  0.9070],
            [ 6.6849,  2.5480,  4.7123,  8.7462, 14.9776],
            [ 7.3234,  5.5309,  4.0742,  7.0100,  4.1666]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8281, -0.5213,  1.9228, -1.7100,  1.9363, -0.2086, -0.7621,  1.7458],
            [-0.0372,  0.2614, -0.9725,  0.6354, -0.8783, -1.2034, -1.4730,  0.3025],
            [ 0.1774, -0.5616, -0.3397,  0.4350,  0.4541, -1.2420,  1.0496, -0.8149],
            [ 0.5484, -1.4884, -0.0975,  0.1533,  0.4118,  0.8274,  0.0269, -1.5396],
            [ 0.8977,  0.7881,  0.7122,  0.3384,  0.2887, -0.5192, -0.3114, -1.1871],
            [-0.2872, -1.1185,  0.2404,  1.6325,  0.9443,  0.9453, -1.7348,  2.2107],
            [ 1.3767,  0.5483,  0.7952,  0.4655, -0.0104, -1.3738,  1.3419, -0.1783],
            [ 0.5551, -1.2814, -0.7072, -1.7421,  0.7631, -1.3903, -1.3911, -0.5223]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4429, -1.5278, -0.5172],
            [ 0.2183,  0.0914,  1.9435],
            [ 0.3425, -0.6811,  0.5966]], requires_grad=True), Parameter containing:
    tensor([[-0.7998]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.0869, -1.4509, -0.2322, -1.9331, -4.7924, -0.1191, -1.3705, -0.2234],
            [ 4.2548, -2.0551,  2.1007,  4.9444, -0.7722,  7.0929,  1.8813,  2.7123],
            [-0.0979, -3.0082, -4.4173,  1.6089, -5.1627, -4.0991, -6.8039, -1.0410],
            [ 1.8418,  2.3625,  0.2649,  1.5259, -3.4128, -4.3624,  2.7705,  8.1971],
            [ 1.3778,  2.3748, -0.4952, -1.3937,  2.5558, -0.7090,  2.7623,  1.8780],
            [-0.0928, -6.1121, -0.4357,  0.7207,  6.4042,  2.8052, -2.4659, -4.5267],
            [ 6.3584,  1.0673,  4.4155,  2.8195,  3.2125,  1.4761, -2.5805,  1.9467],
            [-2.3851, -0.3711, -1.6574, -0.6509, -8.2947, -6.0243, -6.9064, -2.0767]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.9483e-01, -1.8092e+00, -4.3501e+00, -3.0358e+00,  9.9876e-01,
              2.4142e+00, -2.2192e+00, -2.1946e+00,  8.2498e-02,  4.4509e-01],
            [-6.2949e-01,  2.8194e-01,  9.6888e-01,  2.1025e+00,  2.4318e+00,
             -1.6083e+00, -2.9286e+00, -3.6700e+00,  1.7292e+00, -2.7073e+00],
            [-2.1685e+00, -2.5708e+00, -2.7946e+00,  3.8380e-01,  1.3412e+00,
              3.9815e+00, -1.8868e+00, -2.1181e+00, -1.4124e+00,  2.6095e+00],
            [ 1.6819e+00,  1.9242e+00,  3.7640e+00,  6.2660e-01, -8.2438e-01,
             -3.3153e+00,  1.4516e+00,  6.5979e+00,  4.4629e+00,  5.2190e+00],
            [ 4.3596e-01,  1.7819e+00, -1.6561e+00, -5.8625e+00, -8.7391e-01,
             -6.0233e+00, -3.7581e+00, -4.3925e+00, -4.1074e+00, -3.0313e+00],
            [ 1.0231e+00,  2.5617e+00,  9.9378e-01, -6.3526e+00,  5.5811e+00,
              4.0516e-01,  1.9389e+00,  6.1289e-01,  5.2977e+00, -2.9304e+00],
            [ 5.9459e-01,  9.1123e-01,  2.2027e+00, -3.3231e-01,  8.9658e+00,
              7.3068e+00,  5.3540e+00,  7.3976e-01,  1.9737e+00, -8.1387e-01],
            [-9.2308e-01,  9.7507e-01,  1.7024e+00,  2.8616e+00,  3.5446e-01,
             -4.3806e+00, -3.6933e+00,  3.8792e-02, -1.1922e+00,  2.9926e+00],
            [-1.2109e-01,  1.4302e-03,  3.2330e-01, -3.1982e+00, -1.2787e+00,
             -4.6833e+00,  1.7889e+00,  9.5139e-01, -4.5904e+00,  1.1709e-01],
            [ 1.1498e-01, -5.4500e-01,  4.9360e-01, -6.6092e-01,  1.4313e+00,
             -2.1935e+00,  1.4444e-01,  1.0039e+00, -5.9455e-01, -2.1770e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.212 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
