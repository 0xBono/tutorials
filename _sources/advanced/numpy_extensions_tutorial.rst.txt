.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.0983,  7.7958,  2.8199,  6.9842,  4.3681],
            [10.3615,  0.5608,  6.9835,  2.5607,  9.4595],
            [ 8.9568,  5.1677, 15.3877,  6.3918, 14.2298],
            [ 3.1296,  5.1061,  3.9220, 10.7266,  8.2821],
            [24.4212,  3.6246,  8.3151,  7.2510,  0.1459],
            [ 3.1296,  5.4806, 11.5878,  2.6248,  8.2821],
            [ 8.9568,  5.6502,  5.4932,  9.4249, 14.2298],
            [10.3615,  7.4243,  5.9376,  5.7174,  9.4595]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0923, -0.9106, -1.3322, -1.5809, -0.5067, -1.0479, -2.1586, -0.3013],
            [-0.5586,  0.7157, -0.3540,  1.7118, -0.6956, -0.9299,  0.2850,  0.3761],
            [-0.1091, -0.8739,  1.3488, -1.1257,  0.1980,  0.1685,  0.1035, -1.8388],
            [ 0.4608,  2.0027,  1.7438, -0.8426,  2.2256, -0.5312, -0.3045,  1.3204],
            [-0.9446, -0.5425,  0.3157,  0.9132, -1.2680, -0.0813, -1.3536,  1.0354],
            [-0.9792,  0.5477,  0.3093,  1.4690,  0.6465,  1.5497, -0.4365, -0.0601],
            [-1.0542,  0.9810,  0.0117, -0.3132, -0.7151,  0.8576,  0.3714, -0.4138],
            [ 1.5822, -0.8563, -0.0877,  0.6029,  1.9457, -0.6305, -0.8305,  0.7638]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.2684,  0.5217,  0.1595],
            [-0.8713, -0.3563, -0.8145],
            [-1.2717, -0.2103,  0.8906]], requires_grad=True), Parameter containing:
    tensor([[0.1016]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.3233,  3.3684, -0.3254, -2.5520,  2.3580,  1.0644, -4.4448, -2.6570],
            [ 2.1061, -1.7994, -1.2437,  0.0090, -1.4781,  0.1222,  0.1164,  1.2097],
            [-3.2647,  0.0110,  2.4468,  1.1056,  2.6157,  2.2295,  2.2176, -3.0395],
            [-0.7227,  1.2246,  0.3565,  2.1501,  1.5921, -0.9228,  1.9017, -1.9023],
            [-4.0604,  3.5531, -0.3182,  0.7622,  5.4183,  2.1213,  3.1042,  0.8347],
            [ 0.0888,  1.7541,  0.7421, -2.8616, -2.8510, -2.2611, -1.8097, -1.0024],
            [-6.3770, -2.5925, -1.6254, -3.4901,  0.6598,  4.4659,  1.4119, -4.3456],
            [-1.8178,  1.3726,  2.4020,  1.3836,  1.0424, -2.4362,  3.2114, -2.3890]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.7323,  0.9023, -0.6638, -0.2553,  1.9309, -0.5306, -1.6363,  0.9356,
              0.0443, -0.0424],
            [-4.4771, -0.1237, -2.3847, -2.5254,  0.5515,  0.7050,  2.1687, -2.3736,
             -0.6535,  0.3632],
            [-7.4663,  0.2881, -0.8897, -3.1194,  2.1482, -0.4861, -0.2604, -1.1040,
              2.6236, -0.8494],
            [-4.2934, -2.4336,  1.5233, -2.9159, -1.2512, -0.3006,  4.7749, -2.9965,
             -1.2306,  0.2828],
            [ 0.1553, -2.4660,  4.2284, -0.9157,  0.1101, -5.4816,  0.3211, -1.4791,
             -1.3299, -0.2281],
            [ 3.5221, -2.8870,  2.4939,  4.1098, -1.9693, -2.5227,  3.3542,  0.4458,
             -0.8012,  1.5137],
            [ 3.2725,  0.7202, -0.3840,  2.7037, -1.4018, -2.7481, -1.8187,  4.5337,
              1.5613,  0.1568],
            [ 2.0117,  0.6074, -1.1632,  5.1856, -1.4140, -2.2920,  1.2461,  4.9684,
             -1.9955, -1.3303],
            [ 0.3116,  2.7537,  3.6915,  1.6492, -1.9996, -0.7710, -2.3713, -0.1006,
              0.4770,  1.1401],
            [ 1.1027,  1.6746,  0.2409, -0.0982, -2.1836, -1.9018,  0.1425,  2.4054,
              0.9587, -1.2865]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.231 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
