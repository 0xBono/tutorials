.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.8536, 14.0949,  5.0126, 13.2325,  0.8417],
            [ 4.9058,  5.4492,  5.4700, 10.5497,  4.6322],
            [12.3346,  5.6947,  0.3873,  0.7154, 11.1630],
            [ 2.2340,  9.7512,  9.8255,  6.5003,  5.2257],
            [ 8.6386,  2.5438,  3.7682,  7.3384, 13.2716],
            [ 2.2340,  2.0037,  4.9450, 10.6623,  5.2257],
            [12.3346,  1.6387,  4.3925,  5.8865, 11.1630],
            [ 4.9058,  7.4449,  3.6808, 13.7577,  4.6322]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2366, -0.1787, -0.7319, -0.1687,  0.0920,  1.9861,  0.8108,  0.3850],
            [ 0.0755, -0.2250, -1.2654,  0.7349,  0.6788,  0.9105,  0.7821,  0.4262],
            [ 0.5513, -1.3330, -0.0955,  0.3963, -2.3493,  2.8256, -0.0614,  0.6341],
            [ 0.1705, -2.2104,  0.0102, -0.6864, -0.8838, -0.2053,  0.9826, -2.1892],
            [ 1.3430,  0.0737, -0.7913,  0.5719, -0.1705, -0.1137,  0.0082,  0.1639],
            [-0.5596, -0.1319, -0.0528, -0.3417, -0.1141,  1.3666,  0.4530, -0.5040],
            [-0.2682,  0.6260, -1.4480,  0.6876,  0.5364, -0.1034, -0.2443, -1.9781],
            [-0.2929, -0.2238, -1.4694, -1.0674,  0.3095, -1.6843,  0.9103, -0.4495]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1017, -0.6716, -0.2041],
            [-0.5570, -0.8136,  0.7854],
            [ 1.5593, -0.6301, -0.0310]], requires_grad=True), Parameter containing:
    tensor([[-2.5460]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.5601, -5.8873, -0.1571, -1.4871, -4.0187, -5.9339, -3.5847, -0.7061],
            [ 1.1379, -3.9694, -1.9113, -2.3075, -0.8662, -0.5944, -5.9673, -2.3972],
            [-2.3423, -1.0569, -4.3740, -1.9661, -0.9037, -0.6569,  1.5420, -2.6772],
            [-2.4924,  0.7710, -3.7038, -5.1899, -0.1819, -4.6573, -5.3245, -3.6171],
            [-3.2706, -5.2842, -2.5226, -5.5262,  0.4143, -5.5796, -0.8631, -2.1963],
            [-3.1830, -1.0762, -1.3446, -6.8242, -2.0457, -2.5752, -2.6215, -2.0069],
            [-2.4577, -4.4751, -2.5171, -0.5750,  0.8917, -3.3829, -3.8062,  2.6424],
            [-3.3186,  3.1562, -4.2979, -5.3264, -5.1474,  1.0869, -1.8337, -5.2219]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0674,  0.5334, -0.5983,  0.7449,  1.0586, -1.3103,  0.6152, -0.1856,
              0.1333,  0.0807],
            [ 0.4403, -0.3198, -1.2255,  2.6822, -1.1714, -0.5135,  2.7363, -2.5275,
              1.1575, -0.1189],
            [-1.5890,  1.7832, -2.2964,  2.4852,  3.9264, -2.9094, -0.9451, -1.7304,
              2.7059, -0.5858],
            [ 2.0857,  1.6869, -1.8611,  1.8376, -2.6481,  1.5549,  2.2025,  0.0098,
              0.0117, -0.7740],
            [-2.8963, -0.2251,  1.3751,  2.8875, -1.6060,  2.6686, -1.3856, -3.6559,
             -2.0456,  0.8824],
            [ 0.7488, -3.2354, -2.0863, -2.7966, -0.9256, -0.8842, -2.6614, -0.0830,
              0.9941,  0.6407],
            [ 1.4909, -6.2439,  2.0566,  0.7266,  0.5674, -2.4103,  3.3584,  1.6953,
             -0.8647, -0.3075],
            [ 0.5451,  0.8976,  1.9038, -1.6831,  1.1531,  2.2112, -1.0305,  0.1249,
              0.5940,  0.3227],
            [ 4.3039, -0.6846,  0.5859,  1.8992, -2.1906,  1.2666,  0.8633, -0.3380,
              0.8144, -0.7748],
            [-2.6741,  1.4881, -2.6576,  2.1411, -0.0773, -2.3681,  1.0888, -1.5664,
              0.6141,  0.0304]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.167 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
