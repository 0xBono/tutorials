.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.5041,  2.1912,  2.2719,  4.1268,  1.8268],
            [ 2.9733, 13.7732,  0.4224, 12.3621,  6.5817],
            [10.1241,  3.6975,  4.5720,  8.3877, 11.5496],
            [15.2569,  0.5891,  9.4113, 11.5101,  5.5763],
            [ 9.3993,  6.5968,  7.3849,  2.0741,  0.3977],
            [15.2569, 11.5202, 12.0944,  6.9967,  5.5763],
            [10.1241,  3.7400, 14.1111,  6.7299, 11.5496],
            [ 2.9733,  6.3363,  3.2890,  8.4369,  6.5817]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4670, -1.0287,  0.3414, -0.4732,  0.5899, -0.2404, -0.2034,  1.6904],
            [-0.8459, -0.1797, -1.5709, -1.7932, -1.2924,  1.8209, -1.9873,  0.0558],
            [-1.0993,  0.4852, -0.0145,  0.7965, -0.5029,  0.0694,  0.2544, -0.5451],
            [-0.1075, -0.8379,  1.0898,  1.6286,  1.6365,  0.5788,  0.9119, -0.2072],
            [ 0.3878,  0.4959, -1.6159, -0.8228,  0.3038, -1.6751, -0.9982, -1.3604],
            [-0.3932,  0.2014,  0.5841,  0.7770, -0.7435,  0.1770,  1.1540, -1.0185],
            [ 1.1529, -0.4351, -0.6671, -1.9744, -2.2947,  1.1772, -1.3832, -0.3291],
            [-0.4191,  0.3271,  1.4889, -0.6944,  0.0089, -1.7650,  0.1022,  1.2605]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.8533,  1.0494,  2.3057],
            [-0.5473,  0.2647, -1.4386],
            [ 0.4444,  0.6082, -1.9757]], requires_grad=True), Parameter containing:
    tensor([[-0.1417]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.3881, -7.1346,  5.5965,  0.5331, -1.8614,  3.9675,  1.9960,  0.0151],
            [-0.4806,  0.9315,  3.9017, -5.6219, -1.1121,  2.1224, -3.1709, -2.0193],
            [ 1.7568,  3.2806,  1.2058, -0.6845,  1.4027,  1.1729, -8.3836, -1.5287],
            [-4.5695,  6.1466,  8.2340,  8.4235,  5.9517,  4.8147,  0.3153,  1.2247],
            [-0.9429,  5.1676,  1.2455, -7.0153, -6.9658, -3.7512,  2.0403,  0.6152],
            [ 3.0076, -3.0117, -0.2989, -5.8792,  0.9182, -2.4386,  1.6874, -2.6429],
            [ 3.1359, -0.0729, -5.4550,  2.7533, -3.4704,  4.4503,  8.5893, -6.2710],
            [-2.8783, -2.0968,  1.2219, -4.3594, -5.5284, -2.9687, -3.9171, -1.0883]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.6313, -1.1279, -2.0747, -0.9685, -1.3878, -0.6743, -1.9430,  4.1359,
             -2.6377, -0.2861],
            [ 1.7773, -2.4737, -0.2253, -3.6544, -8.3459, -0.9558,  0.2526, -3.0463,
              3.2571, -1.5814],
            [ 0.1330, -0.3913,  8.0274, -1.6590,  2.0765,  1.9910,  6.0672, -4.3578,
             -1.1084,  1.7282],
            [ 2.0349,  4.7399, -1.7465,  4.6254, -8.5753, -2.1952, -0.0416, -0.2993,
             -1.8259,  2.4818],
            [-1.7863,  0.7194, -3.3585, -2.6222, -4.8827, -3.5429, -1.6101, -5.4525,
              1.2638, -0.9395],
            [ 2.0580,  1.9331,  0.5852, -5.8618, -0.7968, -0.5638, -2.4774, -5.3106,
             -4.4752, -3.7121],
            [-0.8769,  0.7824,  1.5139, -1.2688,  2.9045,  5.0965,  6.4365,  3.5425,
              5.4073, -0.6973],
            [-2.8109, -1.5336, -4.4798, -3.4588,  3.0818, -3.7340, -0.7956, -5.2735,
             -2.9222,  1.0237],
            [ 0.8764, -0.3129,  2.8457, -0.2072, -0.5988,  1.1751, -2.3786,  2.0191,
             -1.3290,  3.4573],
            [-0.7525, -1.0202,  3.4312, -0.3098, -0.0729,  2.1565, -4.6555,  0.9087,
              2.0721,  2.1825]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.008 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
