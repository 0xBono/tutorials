.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.7374, 14.1344,  6.1952, 11.9212, 13.9125],
            [ 8.6311,  7.4286,  9.1445,  8.9112,  6.9582],
            [ 2.8797, 11.0719,  5.9969,  5.0343,  8.1113],
            [ 8.8363,  8.1613,  5.7659, 14.9305,  5.6851],
            [ 6.2270,  8.0030,  9.8507, 10.3689,  7.8697],
            [ 8.8363,  6.8592,  1.9264,  9.7075,  5.6851],
            [ 2.8797,  7.8361,  9.9814, 10.3845,  8.1113],
            [ 8.6311, 11.1123,  2.0113,  8.6155,  6.9582]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9513, -0.2931,  0.1609, -0.0255,  1.6276,  0.1869, -1.5937, -1.1296],
            [-1.0042, -1.4766, -2.1052,  0.6375, -0.6210,  1.4969,  0.9672, -0.9837],
            [-0.5746, -0.8464,  0.4692,  0.5860,  0.9713,  2.3857,  0.3673, -1.4658],
            [ 0.9311,  0.8653,  0.2990,  0.5238,  2.1437, -2.0284,  0.2576, -0.3066],
            [ 0.2296,  1.1435, -1.9669, -0.0535,  1.1301, -0.5335,  0.7617, -0.9419],
            [ 0.8684, -0.0605,  0.3312,  0.4395,  1.8120, -1.1659,  0.3128,  0.2573],
            [-1.5791, -0.9967,  0.8381, -0.3908, -0.3291, -0.6067, -0.0414, -0.5202],
            [ 1.9585, -0.5253, -0.3474,  1.6969, -0.4855, -1.7504,  1.2498, -1.9431]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1088, -3.1729,  0.4932],
            [ 1.5177, -0.4914,  1.4971],
            [-1.4745, -0.0955, -0.2159]], requires_grad=True), Parameter containing:
    tensor([[0.2422]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.2494,  0.9477,  0.8336, -2.1747, -3.7926, -2.3916,  0.2072,  9.0845],
            [ 0.1421,  7.6876,  4.2926,  1.9683,  2.5408,  2.4608,  2.3900, -2.9340],
            [-8.0794, -2.0811,  0.7453,  2.7262, -0.8452, -4.1245,  1.8487,  4.2995],
            [ 6.7064,  0.6364, 11.1761, -4.1849,  3.5994, -3.6379,  1.4740, -6.8277],
            [ 4.1975,  3.9825, -0.1590, -7.0889,  1.2256, -2.0709,  3.9330, -0.5173],
            [-3.7520,  0.2972,  5.4222, -2.4460,  2.1144, -2.1252, -5.7474, -0.0914],
            [ 8.4938, -8.0878,  0.1767, -4.5129, -2.2710,  0.7187,  9.2601, -2.3265],
            [-2.2478,  6.8428,  5.5031, -1.1162,  3.5777, -0.5584,  6.2610,  1.0355]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 8.3417e-02, -2.9891e-01, -1.6196e+00,  4.0187e-01,  4.1158e-01,
             -1.9137e+00, -1.1500e+00,  7.6786e-01, -2.7379e-01,  2.8289e-02],
            [ 1.1532e+00,  4.5700e+00, -1.5933e+00, -4.3004e+00, -1.7446e+00,
              3.0245e-01, -1.7507e+00, -5.6760e+00, -9.2197e-01,  3.2668e-01],
            [-5.7964e-01,  2.1231e+00, -2.8110e+00, -4.8867e-01,  4.1749e+00,
              1.0239e+00,  5.0614e+00, -4.4767e+00, -7.4826e+00,  2.2946e+00],
            [ 1.6469e+00,  5.9820e+00, -2.2891e-01, -1.2470e+00,  1.7805e+00,
              2.6926e+00, -1.3679e+00,  3.9092e+00,  1.7709e+00,  4.1034e+00],
            [-1.1587e+00, -3.2117e+00, -5.9343e+00, -1.4354e+00, -3.9671e+00,
              2.0286e+00, -1.5747e+00, -8.5026e+00,  8.7126e-02, -2.3762e+00],
            [ 4.7615e+00,  8.8163e+00,  4.5595e+00, -4.3727e+00,  1.6522e-01,
              5.8479e-01,  9.7237e+00,  3.2113e+00, -4.8363e+00,  1.1609e+00],
            [-3.7225e+00, -2.6461e+00, -7.6370e-01, -1.4533e+00, -3.1394e+00,
             -4.3275e+00,  2.8918e+00,  6.1859e+00, -1.7836e-02,  1.6131e+00],
            [ 1.7502e+00, -4.0193e+00, -1.3435e+01,  1.9360e+00, -5.8703e-01,
              7.7225e+00,  3.2255e+00, -4.2760e+00, -1.9047e+00, -2.0267e+00],
            [ 1.3482e+00,  3.9031e+00,  2.7249e+00,  9.3825e-01, -1.9915e-01,
             -2.4626e+00,  2.6634e+00,  2.1951e-01,  9.6656e-01,  3.4288e-01],
            [-1.4218e+00, -4.6881e+00, -1.8701e+00,  1.9261e-03,  6.2819e-01,
              1.7392e+00, -2.8709e-01,  1.0753e-01, -7.9559e-02, -1.3298e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.286 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
