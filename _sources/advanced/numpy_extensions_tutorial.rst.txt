.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.6173,  7.4090,  4.2009,  4.5621, 11.7801],
            [ 2.4605,  8.1998,  2.7050, 12.4463, 10.6183],
            [12.3214, 13.7602, 11.6634,  5.3831,  5.5157],
            [11.5162,  5.9945,  6.7552, 11.3890,  7.9762],
            [ 0.2385, 10.1235,  8.8477,  4.1528,  1.3418],
            [11.5162,  4.9075,  4.0461,  9.6013,  7.9762],
            [12.3214,  2.3272,  6.2362,  8.3163,  5.5157],
            [ 2.4605, 11.9170,  8.8032, 12.4780, 10.6183]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5275,  1.5514, -0.0204, -1.4470,  0.1097, -0.2792, -0.1926,  0.5383],
            [-0.5442, -0.1554, -0.5182, -2.4098,  0.5709,  0.3026,  1.0880,  0.4141],
            [ 0.2163,  0.0390,  0.0042, -1.1792,  1.3941, -0.2119,  0.6526,  2.6774],
            [-1.2913, -1.3203, -0.7062,  2.0857, -2.0421,  1.2760,  0.8146,  0.8857],
            [ 0.6392,  0.4817, -1.2052,  0.6739, -1.8805, -1.7369, -1.0983, -0.2913],
            [ 0.0578,  1.8004,  0.1615,  0.5357,  0.0167,  0.6492,  0.8121,  1.2408],
            [ 1.4266,  0.5171, -1.1922,  1.3503, -0.4675,  0.5037, -0.1234, -0.2330],
            [-0.9736, -1.0195,  1.1010,  0.6193,  0.5010, -1.1338, -1.8644, -0.0264]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0916, -1.7104, -0.3106],
            [-0.5341,  0.0348, -1.8311],
            [-1.1254, -0.8536, -0.3762]], requires_grad=True), Parameter containing:
    tensor([[-0.4455]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.7873, -1.9295, -5.4044,  0.9914, -0.3766,  0.6911, -2.7026, -2.8204],
            [ 0.2627, -2.5997,  0.1203,  2.0182, -0.6261,  1.6487, -5.4475, -6.8071],
            [ 0.6846, -1.3327, -1.6452, -2.2808,  0.3308,  1.2889, -2.7380, -2.3089],
            [-5.8068, -6.3036, -2.3558, -0.5470, -1.1165, -2.6549, -3.7587, -6.6803],
            [-9.1208, -4.4474, -2.4160, -3.4752, -3.6468, -2.4462, -0.6680, -1.8173],
            [ 0.1192, -4.2021, -4.3958, -3.2392,  0.4705,  3.2427,  2.7531,  4.2614],
            [-4.8646, -2.4493, -1.6578, -0.1387, -3.5348, -0.8573,  3.1105,  1.7997],
            [ 0.6178,  0.3205, -0.7755, -3.2099, -2.0326, -1.8755, -4.1887, -1.8711]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4234, -0.6982,  0.2471, -0.9394, -1.5312,  2.2447,  0.5099, -3.2674,
             -1.6329, -0.1989],
            [ 2.2246,  2.6633, -1.1830, -1.3115,  0.9407, -0.6511,  2.0194,  3.8782,
             -2.5396, -1.1147],
            [ 0.5751, -1.9768,  4.1741, -1.2204,  2.5586,  1.2642,  2.7720, -3.0217,
              0.1832,  0.1208],
            [ 2.4260, -1.4128, -1.6011,  0.0984,  3.1954,  5.2933, -1.4056,  3.3673,
             -2.0391,  0.2189],
            [-0.4535, -3.2832, -2.7430, -4.2910,  0.9156,  5.4054,  4.3303,  1.1718,
             -2.2032,  0.0779],
            [ 1.9308, -0.0150, -1.8180,  0.0447, -1.0949, -2.1920, -1.2374,  1.5599,
              2.0195, -0.5596],
            [ 0.4979, -3.0051,  0.4081, -4.4009, -2.1820,  0.8338, -3.6058,  0.4938,
             -0.1420,  1.0019],
            [ 0.7204, -0.2681,  2.9767, -1.1693, -2.8080, -6.0987, -0.7513, -2.6859,
              0.2529,  1.6538],
            [-0.8661, -0.2864, -2.1956,  0.3320, -0.3908, -4.1269, -3.5705,  1.2383,
              0.4407,  0.8078],
            [-1.3301,  0.4332,  1.1920, -0.3877, -1.9063, -0.6104,  0.0583,  0.4899,
              0.2206,  0.1079]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.173 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
