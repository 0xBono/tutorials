.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.1051,  3.7790,  3.1545,  3.1892,  4.9674],
            [ 5.0439, 12.5787,  7.3726,  5.3893,  3.6711],
            [ 9.0741, 11.5598, 12.0577,  6.6157,  7.7797],
            [ 9.2259, 13.9011, 11.9328, 14.9881,  7.3405],
            [ 6.9100, 10.4766, 10.2417,  5.4982,  0.4742],
            [ 9.2259,  4.9295,  9.1443,  9.9740,  7.3405],
            [ 9.0741,  2.9069, 15.4684,  6.4217,  7.7797],
            [ 5.0439,  2.8196,  5.0530,  7.2834,  3.6711]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0871, -1.1646,  1.2887,  2.3487, -1.7912, -0.3418, -1.7510, -1.3645],
            [-0.2923,  0.8957,  0.4070, -0.3981, -1.1955, -0.3984, -0.4405,  1.2605],
            [ 1.4972, -0.8648, -1.2711, -0.8174, -0.7402, -1.3559,  0.1047,  0.1570],
            [-0.5468,  1.9248,  0.7425, -0.6618,  0.6836,  2.5334,  1.6959, -1.6823],
            [ 0.1033,  1.1891, -0.1191, -0.4764,  0.6313, -0.5686, -1.3726,  2.2895],
            [ 0.6190, -2.2635, -1.2080, -0.3612,  0.1085, -0.3003,  0.0341,  0.7790],
            [-0.6524,  0.8969,  1.1393, -0.5158,  0.5961,  0.4370, -0.4006, -0.4265],
            [-1.3442,  1.5649, -0.1945, -0.2723,  0.3915,  0.4416,  0.9331,  0.0521]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.0657,  0.2969, -0.5107],
            [-0.6006, -0.9524,  0.8349],
            [-1.5881,  0.9105, -1.8343]], requires_grad=True), Parameter containing:
    tensor([[1.2055]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.5972e+00,  4.3731e+00,  1.0143e+00,  2.4944e+00,  5.5710e+00,
             -1.6964e+00,  3.1105e+00, -3.4511e-01],
            [-2.2778e-02, -2.1860e+00, -1.9714e+00, -3.4493e+00,  4.8129e+00,
              8.3397e-01,  8.6350e+00,  1.7471e+00],
            [-6.9410e-01,  9.0097e+00, -2.1963e+00,  8.3551e+00, -4.5030e+00,
              4.5012e+00, -4.9701e+00,  5.1898e+00],
            [ 1.7184e-01,  3.9406e+00,  1.5293e+00,  3.7851e+00,  1.8222e+00,
              6.4664e+00, -1.8642e+00,  2.8407e+00],
            [ 2.7264e+00, -4.0298e+00,  1.3393e-03,  5.4144e+00, -7.1484e-01,
              1.6588e+00,  1.5762e+00, -1.7263e+00],
            [-3.4144e+00,  8.2731e+00, -4.6286e-01, -1.0365e+00,  1.4424e+00,
              1.8299e+00, -1.4931e+00, -4.6878e+00],
            [ 4.0760e+00, -1.8792e+00,  2.4735e+00,  1.5257e+00,  3.1763e+00,
             -2.7194e+00, -1.9965e-01,  2.4264e+00],
            [ 2.7792e+00, -4.3207e+00,  5.3332e+00, -2.4817e+00, -1.5760e-01,
              6.9920e-01,  4.3753e+00,  1.3899e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0222e+00,  4.8415e-02, -1.0416e+00, -5.5057e-01,  2.2246e+00,
             -3.7068e-03, -7.8876e-01,  9.8898e-01,  2.2595e-01, -3.8849e-01],
            [ 5.2232e-02, -1.5081e+00, -1.1805e-01,  1.5435e+00, -4.3025e+00,
             -1.5567e+00,  4.0222e+00, -1.3260e+00, -2.0771e+00,  1.3320e+00],
            [-2.5816e-01,  4.2653e-01,  6.5422e+00, -2.4424e+00,  2.3262e+00,
              8.0709e-01, -4.6535e+00, -2.5954e+00,  3.5708e+00, -2.1718e+00],
            [ 9.8868e-01,  3.8130e+00, -4.6875e+00,  5.2172e+00, -8.0880e-01,
              3.2084e+00,  4.8339e-01,  5.7339e+00, -4.8352e+00,  2.0344e+00],
            [ 4.1727e+00, -1.8047e-01,  4.1002e+00, -2.2877e+00,  4.5476e+00,
             -2.2438e-01,  1.6558e+00,  1.1316e+00,  1.3128e+00,  6.8784e-01],
            [-3.3198e-01, -8.0011e-01,  3.8995e+00, -1.9825e+00,  2.4012e+00,
              7.2361e-01, -5.3883e-01,  2.2533e+00, -2.2317e+00,  1.3629e+00],
            [ 1.1399e+00, -7.3926e-01, -1.0631e+00, -5.7161e-01,  2.7171e+00,
             -4.5927e+00,  1.9576e-01,  6.0533e-01,  1.5043e+00, -3.1061e+00],
            [ 2.4340e+00, -5.0421e+00,  3.6507e+00, -3.9764e-01, -1.4723e-01,
              4.5127e+00,  3.8545e+00, -2.4751e+00, -3.8712e+00,  4.1601e+00],
            [-2.1549e+00, -8.4356e-01,  8.5639e-01, -3.1801e+00,  1.2339e+00,
             -1.0581e+00,  1.0829e-01, -4.0558e+00,  7.0897e+00, -6.5040e+00],
            [-1.3110e+00,  7.2061e-01,  1.0169e+00, -3.5018e+00,  4.9733e+00,
             -2.4766e+00, -2.6828e+00,  6.4164e+00, -6.3277e+00,  4.5731e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.589 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
