.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.7370, 10.7761,  9.4199,  5.9537,  3.5121],
            [ 5.3664,  8.2856,  3.9177,  5.4788, 11.3526],
            [15.1301,  2.5870,  3.8413,  4.4858,  5.2821],
            [ 7.3026,  4.3765,  2.2267,  6.8652, 12.2929],
            [ 3.5351,  2.9369, 10.2593,  9.1938,  0.5540],
            [ 7.3026, 10.6150,  3.4197,  9.7991, 12.2929],
            [15.1301,  7.4292,  1.9065,  7.4794,  5.2821],
            [ 5.3664,  7.4435,  8.1930,  8.3548, 11.3526]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4005, -0.3857,  1.0584, -0.9170,  2.2881,  0.8387,  0.2629,  0.4559],
            [ 0.0593, -1.3268,  0.1130,  0.5428,  2.0576,  0.5735, -0.2762,  0.3869],
            [-0.5623, -0.4040, -0.4046, -0.7827,  0.5963, -1.7737, -0.6823, -0.9260],
            [-0.1591, -0.8325,  0.3872, -0.1279,  1.6159, -0.8180, -0.7476, -0.4189],
            [ 0.8238,  1.4295,  0.0696, -0.0128,  0.4497,  1.8137, -0.5547,  0.0029],
            [ 1.6978,  0.9645,  0.0036,  1.1345, -0.2444, -0.8224,  0.7326, -0.6309],
            [-1.7310,  1.4890,  0.4371,  0.2784,  1.3886,  0.7310, -0.7557, -0.7857],
            [-1.2639, -0.1358, -2.3078,  0.9245, -0.8291,  0.2700,  0.2011, -0.1224]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8215,  1.5987, -0.7915],
            [ 0.4565, -0.3080, -1.5837],
            [-0.2859, -1.4407,  1.0209]], requires_grad=True), Parameter containing:
    tensor([[1.4775]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.6743,  1.5514,  0.5338,  0.3608, -3.5637, -4.5535,  1.9289,  2.2140],
            [ 1.5930, -3.0582, -2.6075, -1.6807, -0.2631,  4.7639,  2.2936,  3.3016],
            [ 4.6161, -1.8841,  0.4222,  1.1890,  6.7282,  7.0107,  2.0756,  3.9455],
            [-4.8389, -4.2809,  8.7281,  3.3671,  7.1597,  1.6391, -3.3044,  1.5970],
            [ 0.1947,  8.2349,  2.6959,  0.7070, -1.0377,  1.5053,  1.3682,  3.1538],
            [ 1.7735,  3.7908, -2.8527, -0.8837,  5.0784, -2.3394,  7.5516,  1.5789],
            [ 6.2559,  2.9004, -2.4527,  5.1314, -5.9260, -1.5313,  4.7346, -1.7345],
            [-0.4016, -3.9108,  0.4457,  1.4827,  2.3223,  6.5175, -0.2230,  3.8577]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5351, -2.1284, -2.2135, -1.3701, -0.7065,  5.4268,  3.0099, -3.1143,
             -1.5171,  0.8043],
            [-0.5266, -0.8803,  1.3368,  1.0364, -0.5509,  2.3379,  0.3113, -3.6466,
              0.4080,  1.3416],
            [ 0.3241,  1.7388, -0.1497, -3.5537,  0.5324, -3.6249, -1.3807,  4.9524,
              0.6032, -2.2535],
            [ 0.9730,  0.7387, -3.8259,  1.7901,  3.1854, -0.3354, -1.7058,  2.9455,
             -2.8384, -0.3716],
            [-0.4605, -3.6038, -1.0705,  3.6161, -3.8926,  0.2400,  4.1589, -6.0963,
             -0.4319,  2.6894],
            [-0.5190, -1.2777,  2.1786, -0.3325,  5.3201,  3.9263,  1.0291, -2.0855,
              6.6902, -0.7502],
            [-0.8324, -0.9392,  2.1520,  2.8767,  0.8140, -0.9036, -2.1065,  0.9320,
             -2.5258, -1.4800],
            [-0.7665,  0.1927,  5.3424,  3.2254, -4.7550,  1.4418,  0.7420, -2.2576,
             -1.1525,  3.6199],
            [ 0.3977,  2.0799, -1.0772, -1.4043, -0.3963, -1.5095, -3.0413,  2.2745,
              1.8073, -1.2178],
            [ 0.0130,  0.0840, -0.3981, -2.5528,  0.2328,  0.1820,  0.5585,  0.1554,
              0.1147, -0.1524]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.600 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
