.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.5672,  4.2597,  0.6640, 12.0539, 17.8427],
            [14.6489,  2.0946,  5.9000, 11.1070,  1.6583],
            [ 5.5702,  8.9894,  4.9957,  6.2384,  7.1840],
            [10.7973,  5.8027,  1.3638, 18.7063, 15.2982],
            [10.5751,  7.1423,  8.9173,  4.1564,  3.8951],
            [10.7973, 12.1511, 13.3320,  5.2106, 15.2982],
            [ 5.5702,  1.6133,  6.3028,  1.1108,  7.1840],
            [14.6489,  3.9074, 22.8367,  2.7748,  1.6583]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-3.1091e-01, -3.1783e-01,  1.9271e+00, -4.0947e-01, -1.5941e+00,
              1.7412e+00, -8.9779e-01, -2.0426e-01],
            [-9.4870e-01, -2.5870e+00,  6.2050e-01, -1.5657e+00, -9.5468e-01,
             -2.5376e+00,  2.1761e-01, -6.7386e-02],
            [ 1.6234e-01, -1.7594e+00, -3.3537e-01,  6.3428e-01,  3.7997e-01,
              9.5253e-01,  1.2289e-01, -6.8484e-01],
            [-9.1649e-01, -1.0939e+00,  4.9942e-01, -2.4348e-01, -1.0466e+00,
             -1.7398e+00,  4.3718e-01,  7.5478e-01],
            [ 2.1794e+00, -5.3643e-04, -1.8847e-01,  1.5798e+00,  1.8703e+00,
             -6.1672e-01,  1.5004e-01, -6.2637e-01],
            [ 2.2381e+00,  7.5459e-01, -1.1831e+00, -2.6154e-01,  7.0556e-02,
              2.2973e+00,  2.1115e-01, -2.6608e-01],
            [ 1.1416e+00,  8.1577e-02,  8.6728e-01, -2.0780e+00,  1.5208e+00,
             -6.1517e-01, -5.8741e-02, -1.6093e+00],
            [ 2.1688e-01, -1.3896e+00, -4.0577e-01,  1.5840e+00, -3.5815e-01,
              1.2443e+00,  1.0033e+00, -2.1552e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4712,  0.9490, -0.4337],
            [ 0.2800,  0.5355,  0.1274],
            [-0.0188, -0.2290, -1.7007]], requires_grad=True), Parameter containing:
    tensor([[-0.3957]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.4788,  0.9791, -1.7911, -1.4591,  1.7056, -1.7626,  0.3887,  1.8153],
            [ 1.7798,  1.8830, -3.1547,  1.1096,  4.8098,  1.3912, -4.4560, -2.4283],
            [-1.4164,  0.2314,  0.6758,  1.7881,  3.1256,  1.1992, -1.7470, -1.0376],
            [ 4.9975,  0.4170, -2.8951,  2.8746,  1.9371, -1.8136, -2.6053,  0.1148],
            [-2.3129, -1.7866, -3.9032, -5.0593, -5.7862, -3.6524, -4.8348,  0.2455],
            [ 2.9923, -0.7558, -2.7526,  1.3622,  0.0945, -0.3568, -0.2321,  0.4952],
            [ 0.1456, -0.7110, -2.1456,  0.3360,  2.4116,  3.2050, -0.3709, -0.2814],
            [-0.0541,  0.1069, -2.0662, -2.1914, -2.1315, -1.5235, -1.1905,  0.6140]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 6.7704e-01,  1.6397e+00,  2.1387e-01,  8.3719e-01,  1.4032e+00,
              4.8728e-01, -6.7888e-01,  1.0856e+00, -1.1402e-01, -1.0391e-01],
            [ 2.1569e-02, -7.9379e-01, -1.3149e+00,  1.0072e-01, -6.5272e-01,
              7.0424e-02,  8.4304e-01,  3.1386e-01, -1.7137e-02,  1.3164e-01],
            [-2.7436e-01, -1.2010e+00, -4.7912e+00, -4.7404e+00, -2.1054e+00,
             -4.5721e+00, -1.3805e+00,  9.4589e-01, -2.0956e+00, -2.5918e-01],
            [-7.4136e-02,  4.2144e-02,  1.3677e+00,  2.4353e+00,  8.1661e-01,
              2.7520e+00, -8.4854e-01, -8.9001e-03, -4.4972e-01,  5.8495e-01],
            [-7.5994e-01, -1.8277e+00, -4.6611e-01, -1.0787e+00,  5.5732e+00,
              1.2577e+00,  1.7805e+00, -8.3736e-01, -2.4177e+00,  1.1104e+00],
            [-9.3621e-01, -1.8901e+00,  3.1088e-01, -6.4551e-01, -1.8226e+00,
              2.4590e+00, -1.8127e+00,  3.0671e+00,  6.2306e-01,  1.0212e+00],
            [ 6.9384e-01,  1.9286e+00,  2.6430e+00,  1.7263e+00,  7.1663e-01,
             -2.0497e+00, -2.2513e+00, -1.7984e+00, -1.4301e+00,  1.9093e+00],
            [ 5.3362e-01,  1.3491e+00,  2.3717e+00, -3.4893e-01, -6.2210e-01,
              1.7999e+00,  1.7577e-01, -1.0618e+00, -5.9546e-01,  1.8080e+00],
            [-7.6757e-02, -5.3473e-01, -3.7440e+00, -1.1310e+00, -1.7962e+00,
             -2.6959e-01,  1.2596e+00, -5.6993e-02, -8.4598e-01,  2.4393e-02],
            [ 2.5527e-03,  2.9936e-02,  2.2763e-01,  3.0439e-02,  9.8363e-01,
              3.1792e-01,  8.6585e-01, -7.7328e-02,  7.6212e-01,  3.8096e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.601 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
