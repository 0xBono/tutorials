.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.9643,  8.9826,  3.3775,  5.9415,  3.9332],
            [ 6.9752, 15.3237,  4.3012,  7.8824,  2.3051],
            [ 4.0759,  8.6244,  8.5053,  8.2155,  6.6933],
            [12.9019,  8.1905,  2.4881, 11.7702,  5.2256],
            [ 7.4682,  5.4733,  2.6749,  5.0516, 15.2271],
            [12.9019,  6.7429,  7.4547, 10.6764,  5.2256],
            [ 4.0759,  6.4801,  8.8533,  7.1459,  6.6933],
            [ 6.9752,  3.0462,  6.4206,  1.1474,  2.3051]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2423,  0.2212, -0.4114, -0.0337, -0.7864,  0.7831,  0.1363,  0.5208],
            [-1.1723, -0.4701, -0.0496, -1.2953, -1.1797, -1.6386,  0.6570, -0.1522],
            [-0.2494,  0.4209, -0.3409,  0.5853,  0.5644, -1.3297, -0.8657,  0.5138],
            [ 1.5154,  0.6739, -2.6408, -0.4392, -0.5840,  0.5770,  1.5223,  0.6142],
            [-0.5955, -1.6192, -0.3678, -1.2034, -0.7433,  1.4014, -0.7667,  2.0556],
            [ 0.3154, -0.0519,  1.3575, -0.3907,  0.7517,  0.5208,  1.9731,  0.1515],
            [-2.0485,  0.0137, -0.5912,  0.1597, -0.3434,  0.5918,  0.2538, -0.8993],
            [-0.1204,  0.5793,  1.2233, -0.5233,  1.5088, -0.3236, -1.1283,  0.4709]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3487, -1.1140,  0.4188],
            [ 0.7410, -1.2167,  1.3363],
            [-0.9236,  1.6479,  2.3326]], requires_grad=True), Parameter containing:
    tensor([[-0.6316]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.1007e-01,  1.9281e+00, -2.0663e+00, -7.9148e+00,  3.4511e+00,
             -1.5380e+00, -2.5989e+00,  2.6078e+00],
            [ 3.9904e+00, -2.7142e+00, -4.6053e+00, -7.4708e-02,  2.5657e+00,
             -5.1529e+00,  1.5804e+00, -1.7647e+00],
            [-3.8058e-01, -3.7281e-03,  6.4200e+00, -3.2296e-01,  1.7256e+00,
             -6.4254e+00,  7.6706e-01,  6.8230e+00],
            [-3.9413e+00, -7.1276e+00,  5.2901e+00,  6.1639e-01,  3.1150e+00,
             -1.3641e+00, -9.3922e-01,  2.1629e+00],
            [-1.1871e+01, -2.2199e+00,  1.5626e+00, -4.3484e+00,  9.8706e-01,
             -3.7519e+00,  2.7833e+00, -1.1192e+00],
            [-7.9667e+00, -4.7527e-02, -1.9144e+00, -3.9424e-01,  9.8663e-01,
             -6.2799e+00, -2.5516e-01,  2.6972e+00],
            [-8.2510e+00,  3.5270e+00,  2.9618e+00, -6.5310e-01,  3.0997e-01,
              3.1021e+00,  6.5825e+00, -6.3906e+00],
            [-1.9504e+00,  6.0395e-01, -3.3864e+00, -2.3245e+00,  6.0998e-01,
              2.2160e+00,  2.9091e+00, -4.6888e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.5260,  1.8739, -1.8283,  2.8576, -2.8511, -0.3526,  0.4508,  2.1077,
             -1.3156,  0.1772],
            [-1.0558,  1.9751, -3.5247,  4.0580, -4.5335,  2.4345,  0.6341,  1.4656,
             -3.6082,  0.7765],
            [ 1.3341, -2.8377,  0.2481, -6.2671, -0.3982,  8.8333,  0.0822, -5.1559,
             -4.8270,  2.0025],
            [-0.7722,  2.1365, -0.3710, -4.6771,  5.8248, -1.2050, -5.2126,  3.6407,
              1.1156,  2.1139],
            [ 0.1976,  0.5009, -3.3928,  1.3407,  6.4667, -2.9674,  4.7426,  4.6271,
              2.0726,  1.0105],
            [ 1.0128, -3.7306,  0.5307,  6.9295,  2.8210,  0.4114,  2.8482, -7.2187,
             -2.8109, -1.6852],
            [-0.6119,  2.5900, -0.7183,  1.7926, -0.6098,  1.9237, -0.8758, -0.5160,
              0.9345, -1.2172],
            [-2.0660,  3.5057, -2.1241, -0.2541, -0.2605,  3.0703,  1.1043,  5.3886,
              4.9685,  1.2903],
            [ 2.0370, -2.8843, -4.8320, -2.7567,  2.0342,  3.3151,  1.7314, -0.7777,
             -6.3503, -2.1063],
            [-0.1247, -0.4866,  1.1190,  2.9431, -1.0225,  0.4480,  7.1363,  3.2565,
             -0.3399,  0.5381]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.258 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
