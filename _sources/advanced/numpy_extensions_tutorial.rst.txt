.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.8299,  6.8678,  1.6546,  6.1379,  6.9882],
            [ 7.7118,  8.5812, 13.3997,  6.2231,  2.6612],
            [ 6.9153,  7.4153,  4.2511, 14.4968,  6.8566],
            [ 0.7351, 10.1159,  7.4395, 10.1406,  2.7953],
            [14.0784,  7.9542,  7.7440, 10.1087,  4.3970],
            [ 0.7351,  4.5774,  7.6482,  9.3323,  2.7953],
            [ 6.9153,  4.1433,  4.5582,  5.7296,  6.8566],
            [ 7.7118,  5.0220,  5.5633, 10.8535,  2.6612]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5411,  0.5895,  0.3604, -0.9983, -1.8750,  0.8077,  0.2793, -0.7114],
            [-0.7445,  0.0558, -0.6112, -1.6514,  0.1323, -0.8523, -1.0580, -1.9914],
            [-0.1861, -0.3468, -0.5282,  0.4654,  0.2805,  0.1411, -0.8421,  0.5086],
            [-0.6549,  0.9909, -0.7877,  0.6392,  0.5994, -1.7956, -0.1304,  0.1719],
            [-0.0625,  0.1582,  0.0443,  2.1333,  0.2689, -0.5783, -0.0939, -0.2976],
            [ 0.3895, -0.9666,  1.7927, -1.6950, -0.2842, -0.1690, -3.0352,  1.2897],
            [-0.2794,  0.7719,  0.2301, -1.3797, -1.3753,  1.2626,  1.4538,  1.3823],
            [-0.7938,  0.3592, -0.2690,  0.2274,  0.0151, -0.3302, -1.1850,  0.3882]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0806,  1.8353,  0.2010],
            [-0.3342,  0.8179, -1.1951],
            [ 1.9624, -0.0221,  0.7004]], requires_grad=True), Parameter containing:
    tensor([[-0.4841]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.4446,  2.8858, -3.3425, -5.0593,  0.4661, -0.2679, -2.0364, -3.9804],
            [ 3.5021,  4.3908, -5.5788,  2.3632, -3.7830,  4.0499, -3.1143,  0.0520],
            [ 2.6091, -4.9769, -5.4606,  1.9530,  4.7892, -1.5471, -1.0747, -2.4922],
            [-1.0561, -6.6532, -3.3787, -1.0224,  1.9525, -5.4726,  2.9347, -5.5967],
            [ 2.7249, -2.0887,  2.9533, -0.4198, -2.6934,  1.1328, -3.7353, -3.2401],
            [ 2.5992, -7.3068,  2.4845, -3.7516,  0.6916, -1.6262, -4.8974, -2.2697],
            [-7.0751,  2.5642, -6.2877,  0.7713,  0.6999,  2.2926, -4.2673, -0.0496],
            [-1.0733, -2.2776, -0.7767, -2.0325, -3.9498, -3.4729, -6.5467,  0.6936]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.0298,   0.5972,  -1.7983,  -0.8149,   0.9014,   1.3650,  -1.1515,
              -1.9969,  -0.8344,  -0.0694],
            [ -0.2599,  -2.5015,  -2.2910,  -0.0825,  -2.1534,  -0.9483,  -2.7727,
               1.5584,   6.6611,   1.0249],
            [  1.3258,  -2.5628,  -1.8571,  -2.4009,  -1.3632,   0.9165,  -0.8923,
              -1.8130,  -1.5336,  -4.1318],
            [ -3.4562,   0.2242,  -6.5159,  -6.1058,  -3.7227,  -5.1588,   2.0929,
               8.9749,   2.5440,   3.7906],
            [  0.6494,  -6.4411,  -3.0957,  -1.5067,  -3.0708,   1.3359,   1.2338,
              -0.6344,  -1.0215,  -1.7716],
            [  0.9373,  -4.7719,  -0.1280,  -6.8682, -10.7250,  -1.6504,   2.6512,
               1.1920,   3.7520,  -0.3139],
            [ -4.1004,   0.7409,   0.0131,  -7.3319,  -0.1921,   0.6057,   2.0663,
               3.1002,   3.7683,   0.2853],
            [  0.5436,   0.4480,  -2.7011,  -7.2054,   1.0665,  -1.7000,   1.3303,
              -3.3245,   1.3139,  -1.9846],
            [ -0.5598,   1.2426,  -3.9631,  -0.6172,   0.5959,  -1.5658,   0.5378,
               2.1975,   1.8394,   1.5411],
            [  0.1185,  -1.7824,  -1.6187,   2.9387,  -0.2679,   2.4939,  -3.1495,
               0.2571,  -1.1642,  -0.0780]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.291 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
