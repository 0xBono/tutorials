.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.0424,  1.6915, 13.4478,  7.0519,  0.5083],
            [ 7.5432, 11.9061,  4.2311,  7.3857,  8.5652],
            [ 6.7951,  7.5619,  3.0171,  3.2514,  8.8826],
            [ 6.2857,  7.3794,  3.7925,  7.7171,  3.0484],
            [12.8161,  7.8450,  7.3582,  1.7553,  6.5680],
            [ 6.2857,  6.0332,  2.9367,  5.5396,  3.0484],
            [ 6.7951,  5.9771,  7.8889,  5.1844,  8.8826],
            [ 7.5432,  4.8623,  3.8814,  3.3397,  8.5652]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.3638, -0.8674, -0.1289,  0.2740,  0.5309, -0.5941,  0.5694,  0.1195],
            [ 1.0630,  1.6918, -0.8220,  0.9921,  0.1419, -1.3566, -0.3618,  0.5047],
            [ 0.0632,  0.5427, -0.0501,  1.2794,  0.1173,  0.2808,  1.0566,  0.0127],
            [ 0.4732, -0.3387, -1.1627, -0.4175,  0.2488, -1.3143,  0.1831,  1.0984],
            [ 0.6415, -0.1879, -1.3112,  0.9325, -0.3654,  0.5410,  0.1682,  1.6236],
            [-0.3106, -0.6538, -1.0456,  0.1378,  0.2920,  0.2162, -0.8290, -0.6821],
            [-0.9453,  0.4431,  1.0433,  1.1935,  1.2339, -0.7422, -0.0854, -0.1388],
            [ 0.3370, -2.1253,  0.8823, -0.2894, -0.2419, -1.9857, -0.7974, -0.4572]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6626,  0.3995, -0.0762],
            [-0.4706, -0.3497,  0.9066],
            [-1.3246,  0.0990,  0.8765]], requires_grad=True), Parameter containing:
    tensor([[-1.4165]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7826, -4.4860,  0.3727,  2.5015, -2.7301, -1.1695, -1.2055, -0.2815],
            [-1.6473, -1.8973, -1.4028, -0.8068, -0.7652, -5.1678, -0.2052,  2.4835],
            [ 0.2354, -3.1797, -3.0643, -0.2939,  0.8238, -2.5605, -1.6815,  1.2390],
            [ 0.1783, -1.0630, -5.3867, -0.3756, -0.5682,  0.6197,  2.3382, -3.0561],
            [-1.0575, -3.1580,  0.3545, -2.7685, -2.9647,  0.3684,  5.1026, -5.5935],
            [-2.8609, -1.9614,  0.5605, -1.1025, -6.0130,  0.6066,  3.8669, -2.1562],
            [ 2.5658, -1.8908, -0.3455, -6.1733, -3.1582, -0.5945,  0.0596, -0.2579],
            [-0.4153, -3.9868, -1.4625, -4.7296, -3.5185,  0.8238, -0.1620, -0.0557]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0915,  0.8677, -0.3183,  0.1120,  0.5011, -0.1286, -0.9187,  1.5277,
             -0.6924,  0.1131],
            [ 0.0236,  0.7330, -0.3715,  0.1606,  0.7460,  0.3852, -1.8192,  0.1470,
              1.7079, -1.3503],
            [ 0.2337,  1.3835, -0.9707, -0.6745,  3.7045, -1.0616, -2.8938,  0.3796,
              1.3492, -1.2424],
            [-0.7852,  0.8204, -2.6041,  1.5500,  5.4435, -1.2017, -2.6676,  0.4757,
             -0.0859,  0.1705],
            [ 0.6575, -0.9613, -0.5595,  1.0191,  2.4088, -2.6666, -1.6681,  1.3241,
              0.5784, -0.1061],
            [-0.8352,  0.7376,  0.0259, -0.3464,  1.7930, -1.5974, -2.0524,  0.3283,
             -0.3474,  1.0267],
            [ 2.3639, -0.4200, -4.2527,  1.9761,  1.4363, -0.1403,  2.7489, -3.8815,
             -1.1413,  1.6499],
            [ 0.7738, -3.3096, -2.7541, -0.2760,  0.9141,  2.9410,  2.0143, -0.7812,
             -1.4027,  0.7501],
            [ 1.1174,  0.2517, -2.7178, -0.8067, -0.8427,  0.6180,  1.3373, -0.3203,
              0.4655, -0.0482],
            [ 1.2923, -0.8118, -1.1497, -0.9892,  0.9869,  2.0978, -1.6559, -0.3144,
              0.7282, -0.2439]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.545 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
