.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'forms' b'old' b'Busch' b',' b'in' b'the' b'process' b'of' b'a' b'map' b'gold' b',' b'by' b'that' b'time' b'.' b'On' b'August' b'31' b','
    b'Mosley' b'was' b'a' b'for' b'@-@' b'run' b'for' b'a' b'prison' b'was' b'badly' b'forced' b'to' b'<unk>' b'.' b'"' b'It' b'marked' b'individually' b'and'
    b'many' b'new' b'methods' b'of' b'twice' b',' b'and' b'I' b'lose' b'what' b'would' b'be' b'always' b'well' b'to' b'arrive' b'.' b'it' b"'s" b'himself'
    b'for' b'him' b'to' b'that' b'day' b'made' b'long' b'get' b'.' b'It' b'is' b'the' b'only' b'time' b'to' b'mention' b'Norse' b'racing' b'from' b'much'
    b'aired' b';' b'by' b'each' b'year' b'when' b'it' b'are' b'so' b'much' b'like' b'a' b'drink' b'in' b'Arabia' b'of' b'all' b'over' b'getting' b','
    b'he' b'have' b'no' b'pressure' b'of' b'religious' b'skills' b',' b'but' b'all' b'@-@' b'deep' b'think' b'we' b'do' b'completely' b'reflect' b'series' b',' b'but'
    b'it' b'would' b'be' b'that' b'I' b'could' b'be' b'<unk>' b'.' b'"' b'Hornung' b'Wilbur' b'mothers' b'servant' b'the' b'third' b'conversion' b'designer' b'John' b'<unk>'
    b';' b'The' b'profit' b'of' b'Joseph' b'"' b'To' b'desperate' b'consent' b'and' b'doubt' b'"' b'were' b'associated' b'by' b'connects' b'a' b'R' b'One' b'built'
    b'in' b'Baltimore' b',' b'but' b'was' b'established' b'among' b'generally' b'at' b'a' b'depth' b'containing' b'other' b'censor' b'cast' b'.' b'Wally' b'Goldman' b'<unk>' b'named'
    b'Hoover' b'TRIGA' b'"' b'emulate' b'[' b'ed' b']' b'SCW' b'8' b'that' b'admitted' b'Street' b'life' b'"' b',' b'and' b'the' b'thinking' b'was' b'counterproductive'
    b'even' b'.' b'Some' b'of' b'the' b'police' b',' b'he' b'is' b'merely' b'receives' b'the' b'series' b'Athletic' b'27' b',' b'unlike' b'she' b'called' b'"'
    b'I' b"'m" b'one' b'can' b'be' b'<unk>' b'.' b'"' b'<eos>' b'Whilst' b'up' b'itself' b',' b'it' b'was' b'since' b'Llandaff' b'.' b'It' b'was'
    b'also' b'included' b'that' b'he' b'may' b'tell' b'31' b'%' b'of' b'his' b'stories' b',' b'except' b'42' b'years' b'ago' b'.' b'They' b'includes' b'Ross'
    b'shows' b'if' b'it' b'would' b'be' b'proclaiming' b'to' b'understand' b'race' b',' b'individuals' b'vowel' b'them' b',' b'and' b'<unk>' b'are' b'its' b'flesh' b'.'
    b'Khe' b'jets' b',' b'in' b'conjunction' b'to' b'<unk>' b'schoolchildren' b',' b'and' b'Leviathan' b'are' b'known' b'to' b'be' b'exposed' b'from' b'tides' b'to' b'a'
    b'kind' b'@-@' b'A' b'genes' b'that' b'killed' b'their' b'limited' b'existence' b'"' b'for' b'other' b'Babylon' b',' b'historical' b'spots' b'.' b',' b'"' b'Benedict'
    b'acceptance' b'of' b'Tamil' b'and' b'visitors' b'"' b'caught' b'in' b'<unk>' b'"' b'.' b'The' b'only' b'authored' b',' b'of' b'example' b'The' b'text' b','
    b'dishonest' b'bones' b'on' b'16' b'December' b'1967' b',' b'and' b'have' b'contributed' b'to' b'in' b'little' b',' b'emitting' b'a' b'object' b'.' b'intervening' b'on'
    b'his' b'list' b'of' b'renovate' b'over' b'100' b'minutes' b',' b'derives' b'are' b'brownish' b',' b'etc' b',' b'when' b'it' b'is' b'much' b'correct' b'that'
    b'by' b'typical' b'nights' b',' b'some' b'individuals' b'are' b'painful' b'@-@' b'rich' b'areas' b',' b'and' b'<unk>' b'tail' b'best' b'on' b'ground' b'when' b'they'
    b'go' b'to' b'state' b'and' b'share' b'so' b'until' b'the' b'issue' b'to' b'be' b'its' b'prey' b'.' b'Their' b'overall' b'player' b'is' b'interested' b'in'
    b'beak' b',' b'including' b'magnate' b'Ellis' b',' b'for' b'example' b'(' b'died' b'by' b'Toulouse' b')' b'.' b'<eos>' b'In' b'a' b'bosses' b'published' b'by'
    b'spiders' b'operationally' b'S.' b'M.' b'Brown' b',' b'giant' b'faded' b'Virginia' b"'s" b'gas' b',' b'Aguda' b"'s" b'Bern' b'<unk>' b'ecological' b'art' b'(' b'The'
    b'Pulse' b'of' b'<unk>' b')' b'.' b'The' b'kakapo' b'consists' b'of' b'an' b'hunt' b'for' b'12' b'@.@' b'5' b'%' b'per' b'cell' b',' b'39'
    b'@.@' b'5' b'mm' b',' b'or' b'degraded' b'or' b'nevertheless' b'importantly' b'.' b'He' b'comes' b'distract' b'an' b'universal' b'length' b'in' b'a' b'wedding' b','
    b'and' b'ending' b'four' b'other' b'amphibians' b'.' b'<eos>' b'The' b'kakapo' b'takes' b'place' b'on' b'the' b'developing' b'sum' b'of' b'Palmyra' b',' b'the' b'year'
    b'of' b'55' b'years' b'before' b'her' b'1961' b'gives' b'a' b'36' b'@-@' b'term' b'Shelley' b'cluster' b'.' b'[' b'of' b'kids' b',' b'body' b'or'
    b'adult' b',' b'they' b'completed' b'rhythm' b'on' b'the' b'side' b'of' b'hide' b'.' b'The' b'city' b'is' b'comfortable' b'under' b'found' b'various' b'photographs' b'such'
    b'as' b'crests' b',' b'has' b'been' b'moved' b'by' b'rest' b'to' b'prepare' b'what' b'manner' b',' b'or' b'a' b'terrible' b'maximum' b'watch' b'.' b'Although'
    b'there' b'are' b'equal' b'a' b'evil' b'hair' b',' b'they' b'are' b'taking' b'a' b'impression' b'of' b'operatic' b'for' b'they' b'swimming' b'.' b"'" b'One'
    b'days' b'in' b'this' b'bird' b'occupies' b'certain' b'other' b'forward' b'steady' b',' b'and' b'none' b'about' b'it' b'Capablanca' b'(' b'Concerning' b'brown' b'controlling' b'compartments'
    b',' b'however' b')' b'allows' b'them' b'to' b'be' b'clear' b'blind' b'.' b'Although' b'their' b'smooth' b'or' b'the' b'same' b'flight' b',' b'it' b'is'
    b'mentioned' b'by' b'other' b'other' b'predators' b'.' b'As' b'they' b'do' b'not' b'enter' b'ribosomes' b',' b'they' b'only' b'compromised' b'molecules' b',' b'safety' b'<unk>'
    b',' b'positional' b'energy' b',' b'and' b'collegiate' b'trees' b'proteins' b'in' b'1874' b'.' b'These' b'art' b'nails' b'export' b'which' b'is' b'placed' b'around' b'the'
    b'traditional' b'starling' b'bear' b'them' b'him' b'to' b'turn' b'work' b',' b'and' b'may' b'begin' b'beautifully' b'to' b'continue' b'.' b'Preservation' b'in' b'shows' b','
    b'or' b'certain' b'literary' b'expression' b';' b'Veronica' b'causes' b'that' b'metres' b'with' b'the' b'city' b':' b'<unk>' b'for' b'bracket' b'befriending' b'deep' b'towards' b'the'
    b'back' b'.' b'Lalande' b'could' b'be' b'modeled' b'to' b'<unk>' b'a' b'while' b'(' b'the' b'largest' b'nomads' b')' b'is' b'probably' b'.' b'Another' b'method'
    b'of' b'gum' b'is' b'difficult' b'to' b'learn' b'to' b'have' b'shown' b'by' b'eating' b'cover' b':' b'one' b'of' b'first' b'to' b'prey' b'into' b'a'
    b'sandstone' b'if' b'emitting' b'manage' b'(' b'close' b'steps' b'the' b'female' b',' b'so' b'as' b'of' b'showcased' b'the' b'first' b'allowed' b'whether' b'these' b'times'
    b'or' b'eggs' b'speculated' b'is' b'"' b'a' b'22' b'million' b'phone' b'dead' b',' b'1910' b'in' b'N\xc3\xb6ldeke' b'is' b'our' b'<unk>' b')' b',' b'background'
    b',' b'secondary' b';' b'and' b'we' b'enable' b'unacceptable' b',' b'gunboats' b',' b'you' b'loves' b'it' b'to' b'the' b'truth' b'representing' b'light' b'ideas' b'"'
    b'.' b'Hundreds' b'explaining' b'that' b'it' b'might' b'present' b'another' b'greater' b'block' b'in' b'them' b'.' b'Leinster' b'occur' b'in' b'thereafter' b'effect' b',' b'because'
    b'a' b'dramatic' b'player' b'relocate' b'and' b'spread' b'to' b'a' b'variety' b'of' b'prey' b'having' b'risen' b'as' b'him' b'.' b'<eos>' b'The' b'heavier' b'Introduced'
    b'object' b'of' b'1843' b'fighting' b'substantially' b'suggests' b'they' b'are' b'supported' b'.' b'The' b'apse' b'makes' b':' b'"' b'We' b'may' b'Coco' b'along' b'a'
    b'one' b'more' b'a' b'so' b'nominally' b',' b'"' b'emigrants' b',' b'that' b'"' b'The' b'more' b'<unk>' b'<unk>' b'word' b'is' b'easily' b'making' b','
    b'more' b'heavily' b'<unk>' b'or' b'can' b'have' b'is' b'the' b'tree' b'as' b'the' b'most' b'likely' b'fortunate' b'(' b'a' b'point' b'or' b'mountain' b'streaks'
    b')' b'100' b'\xe2\x80\x93' b'45' b'kg' b'.' b'That' b'all' b'of' b'<unk>' b',' b'heavier' b'matter' b'is' b'capable' b'of' b'seal' b',' b'almost' b'and'
    b'either' b'but' b'understood' b'to' b'a' b'blind' b'Sanitar' b'"' b'.' b'The' b'chairman' b'literature' b'consists' b'of' b'reality' b'or' b'Carl' b'M.' b'ferreum' b','
    b'which' b'has' b'smaller' b'health' b'fastball' b',' b'one' b'@-@' b'male' b'eggs' b',' b'Sandy' b'identification' b',' b'a' b'flightless' b'polished' b'machine' b'problem' b','
    b'and' b'gills' b'convinces' b'its' b'<unk>' b',' b'distantly' b'Scandinavia' b'and' b'circulation' b'are' b'created' b'by' b'the' b'<unk>' b',' b'\xe3\x80\x88' b'clumsy' b'piano' b'and'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 228.2
    loss: 5.168
    elapsed time (seconds): 153.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  27.037 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
