.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'after' b'with' b'a' b'large' b'wiped' b'into' b'one' b'gravity' b'of' b'a' b'blues' b'nurse' b'of' b'a' b'stucco' b'tree' b'.' b'The' b'archaeologist' b'<unk>'
    b'said' b'that' b'the' b'author' b'would' b'have' b'strong' b'James' b'tastes' b',' b'and' b'James' b'<unk>' b'worked' b'on' b'a' b'special' b'southern' b'unknown' b'number'
    b'and' b'was' b'filled' b'there' b'.' b'Fern\xc3\xa1ndez' b',' b'a' b'terrible' b'proton' b',' b'served' b'to' b'write' b'a' b'243' b'@-@' b'planet' b'star' b','
    b'carrying' b'themes' b'known' b'as' b'horrified' b'by' b'various' b'mosque' b',' b'decayed' b',' b'and' b'relatives' b';' b'by' b'the' b'court' b'Lynes' b'Hairan' b'"'
    b'you' b'is' b'shallow' b'from' b'you' b'is' b'different' b',' b'so' b'you' b'did' b'out' b'whose' b'will' b'be' b'to' b'go' b'the' b'peace' b'side'
    b'and' b'down' b'up' b'with' b'night' b'Epsom' b'"' b'.' b'The' b'planet' b'feels' b'of' b'my' b'spare' b'poetic' b'appeal' b'that' b'mature' b'a' b'eye'
    b'of' b'both' b'invertebrates' b"'" b'agricultural' b'boilers' b',' b'but' b'the' b'well' b'Litigators' b'develops' b'Ferranti' b'in' b'the' b'eye' b'.' b'It' b'is' b'one'
    b'of' b'her' b'most' b'popular' b'he' b'will' b'be' b'RCR' b'in' b'multiple' b'hospitals' b'or' b'described' b'to' b'catch' b'protesters' b'spines' b'.' b'A' b'second'
    b'gun' b'appearance' b'that' b'his' b'next' b'pair' b'is' b'being' b'found' b',' b'with' b'alcohol' b'and' b'whiskey' b'Kusanagi' b',' b'which' b'may' b'lead' b'over'
    b'or' b'the' b'death' b'of' b'feeding' b'into' b'producers' b'(' b'the' b'Narasimha' b'and' b'<unk>' b'button' b')' b'.' b'<eos>' b'bicolor' b'listener' b'continued' b'to'
    b'decide' b'people' b',' b'that' b'56' b'\xe2\x80\x93' b'81' b'or' b'wide' b',' b'so' b'has' b'dedicated' b'to' b'various' b'head' b',' b'dark' b',' b'light'
    b',' b'<unk>' b'and' b'gray' b'.' b'<unk>' b'waterfront' b'burning' b'may' b'be' b'frequently' b'feather' b'.' b'They' b'collected' b'the' b'fungus' b'River' b'of' b'a'
    b'specific' b'sex' b'nobleman' b',' b'whereas' b'Paranthodon' b'equipped' b'shift' b'in' b'a' b'kneeling' b'decision' b'in' b'sight' b'.' b'Between' b'winter' b',' b'this' b'makes'
    b'astronomers' b'were' b'a' b'annihilated' b'evocative' b'for' b'12th' b'@-@' b'century' b'purposes' b'and' b'<unk>' b'before' b'crew' b'.' b'The' b'minds' b'of' b'one' b'length'
    b'and' b'could' b'be' b'a' b'dwarf' b'or' b'persuaded' b'them' b'with' b'Reala' b"'s" b'life' b'.' b'When' b'this' b'female' b'pocket' b'crew' b',' b'leave'
    b'by' b'a' b'addition' b'by' b'breakage' b'as' b'closer' b'to' b'a' b'imprisoned' b'ride' b',' b'is' b'01' b'in' b'these' b'times' b'.' b'Other' b'birds'
    b'resemble' b'these' b'praise' b'who' b'disqualified' b'the' b'powers' b'of' b'prey' b'so' b'Christmastime' b'<unk>' b',' b'smart' b'starspots' b'.' b'Each' b'Treatment' b'who' b'calls'
    b'to' b'fire' b'so' b'they' b'know' b'that' b',' b'they' b'give' b'a' b'star' b'to' b'be' b'than' b'them' b'.' b'<unk>' b'will' b'know' b'that'
    b'they' b'might' b'be' b'able' b'to' b'undergo' b'than' b'the' b'bird' b"'s" b'stability' b'.' b'Towards' b'the' b'next' b'20' b'years' b',' b'the' b'R\xc3\xa9union'
    b'head' b'could' b'have' b'come' b'in' b'privately' b'with' b'when' b'they' b'says' b'they' b'are' b'their' b'true' b'truth' b'gathered' b'by' b'her' b'grant' b'<unk>'
    b',' b'and' b'though' b'they' b'leave' b'or' b'agents' b'to' b'everything' b'.' b'He' b'express' b'whether' b'if' b'there' b'began' b'out' b',' b'Mosley' b'still'
    b'decided' b'to' b'comment' b'to' b'identify' b'its' b'arrest' b',' b'and' b'losing' b':' b'"' b'This' b"'s" b'longer' b'Joseph' b'!' b'The' b'founder' b'asking'
    b'you' b'is' b'<unk>' b'reflected' b'a' b'professor' b'of' b'Bologna' b'to' b'die' b'to' b'<unk>' b',' b'and' b'before' b'who' b'have' b'This' b'his' b'bad'
    b'pagan' b'observations' b',' b'there' b'is' b'no' b'emotional' b'nature' b'with' b'a' b'Mothers' b'of' b'glory' b'.' b'"' b'<eos>' b'Crash' b'or' b'Takeda' b'Marilyn'
    b'was' b'created' b'in' b'February' b'2008' b'at' b'a' b'peak' b';' b'v\xc4\x81da' b'references' b'to' b'Lord' b'Stanley' b'adopted' b'certain' b'eggs' b'by' b'the' b'country'
    b'.' b'<unk>' b'<unk>' b'in' b'The' b'16th' b'century' b',' b'writing' b'in' b'2006' b'Village' b"'" b'<unk>' b'hope' b'are' b'abundant' b'as' b'Pohl' b'Peters'
    b'understood' b'<unk>' b'proteins' b',' b'but' b'they' b'usually' b'an' b'indie' b'engineer' b',' b'they' b'left' b'a' b'astronomical' b'beak' b'.' b'Oscar' b'is' b'that'
    b'that' b'they' b'only' b'remember' b'Marymount' b',' b'and' b'they' b'can' b'be' b'getting' b'back' b'to' b'athlete' b'.' b'The' b'convict' b'has' b'all' b'swim'
    b'the' b'Student' b'<unk>' b'Federation' b'and' b'the' b'chip' b'<unk>' b'(' b'Christianity' b')' b',' b'namely' b'a' b'"' b'<unk>' b'sense' b'"' b',' b'whose'
    b'allows' b'slender' b'base' b'on' b'a' b'single' b'room' b'.' b'The' b'earlier' b'pastoral' b'story' b'will' b'be' b'unlikely' b',' b'saying' b'that' b'"' b'['
    b'a' b'pretty' b'<unk>' b',' b'and' b'Eventually' b'so' b'good' b',' b'with' b'its' b'ability' b'to' b'play' b'fire' b'\xe2\x80\x93' b'.' b'They' b'can' b'eat'
    b'that' b'they' b"'ve" b'years' b'to' b'engage' b'move' b',' b'when' b'after' b'a' b'male' b'land' b'parallax' b'in' b'it' b'.' b'"' b'<eos>' b'Sir'
    b'Despite' b'stunningly' b'establishments' b'be' b'unable' b'to' b'employ' b'B.' b'Boom' b'plants' b'about' b'speculative' b'problems' b'.' b'However' b',' b'they' b'are' b'killed' b'on'
    b'or' b'leave' b'problems' b'later' b'.' b'In' b'the' b'second' b'comedies' b',' b'appropriate' b',' b'Chen' b'went' b'to' b'sex' b',' b'hoping' b'to' b'be'
    b'unique' b'.' b'According' b'to' b'Gary' b'of' b'M.' b'v.' b'Days' b'may' b'said' b'that' b',' b'"' b'forever' b'our' b'involvement' b'to' b'reddish' b'foreign'
    b'attacks' b'of' b'fundamentally' b'or' b'tail' b'on' b'their' b'walls' b'demands' b'behind' b'the' b'all' b',' b'many' b'or' b'more' b'requests' b'away' b'were' b'all'
    b'all' b'in' b'cell' b'<unk>' b'.' b'"' b'<eos>' b'One' b'models' b'in' b'137' b'students' b'energy' b'the' b'eggs' b',' b'feeding' b'into' b'social' b'changes'
    b'when' b'one' b'mean' b'the' b'player' b'also' b'could' b'survey' b'into' b'Broom' b'.' b'<eos>' b'Most' b'results' b',' b'<unk>' b'is' b'intended' b'to' b'cause'
    b'a' b'different' b'favor' b'of' b'asteroid' b',' b'implications' b'and' b'then' b'shaped' b':' b'an' b'<unk>' b';' b'god' b',' b'which' b'are' b'that' b'West'
    b'dances' b'.' b'To' b'continue' b'@-@' b'up' b',' b'they' b'was' b'still' b'faithful' b'every' b'rotation' b'punch' b'by' b'their' b'home' b'halting' b'.' b'<unk>'
    b'suggests' b'that' b'prevalent' b'they' b'are' b'important' b'once' b',' b'but' b'this' b'to' b'make' b'some' b'attention' b'will' b'be' b'equal' b'when' b'additional' b'tablets'
    b'may' b'be' b'compelling' b'.' b'Some' b'man' b'like' b'Fireforce' b',' b'most' b'of' b'which' b'are' b'threads' b'as' b'a' b'king' b'about' b'no' b'Jew'
    b'.' b'<unk>' b'possibly' b'as' b'they' b'said' b'that' b'ode' b'could' b'continue' b'them' b'forward' b'for' b'those' b'zone' b',' b'with' b'breast' b',' b'or'
    b'rich' b'duties' b'.' b'But' b'the' b'most' b'recent' b'while' b'good' b'Igual' b'star' b'documented' b'to' b'Tennyson' b"'s" b'offspring' b'to' b'be' b'the' b'contemplation'
    b'of' b'sitting' b'marketed' b'towards' b'the' b'infrequently' b'model' b'.' b'The' b'text' b'elements' b'may' b'make' b'such' b'theatrical' b'aspects' b'of' b'their' b'variety' b'.'
    b'Nuclear' b'applications' b'who' b'rarely' b'wish' b'to' b'develop' b'well' b'proteins' b',' b'particularly' b',' b'but' b'that' b'they' b'will' b'be' b'treated' b'inside' b'them'
    b';' b'this' b'score' b'is' b'made' b'to' b'negotiate' b'to' b'the' b'search' b'by' b'the' b'phone' b'and' b'<unk>' b'and' b'make' b'infraction' b'to' b'their'
    b'internal' b'visceral' b'.' b'The' b'fact' b'in' b'a' b'fertility' b'staffs' b'by' b'flash' b'activity' b'can' b'be' b'dark' b'and' b'even' b'burned' b'.' b'<eos>'
    b'\xe1\x83\xa1' b'young' b'starlings' b'involve' b'that' b'gems' b',' b'forming' b'structural' b'or' b'modern' b'images' b'scaling' b'whether' b'such' b',' b'from' b'resided' b',' b'or'
    b'lose' b'shelf' b'bonds' b'.' b'God' b'mainly' b'holds' b'the' b'solutions' b'to' b'draw' b'their' b'face' b'as' b'he' b'Fledglings' b'kilometres' b'as' b'possible' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 234.0
    loss: 5.168
    elapsed time (seconds): 162.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  42.078 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
