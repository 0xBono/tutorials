.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'In' b'experimental' b',' b'he' b'transcribes' b'a' b'father' b'share' b'La' b'Macrianus' b'for' b'two' b'short' b'volts' b',' b'with' b'70' b'@.@' b'5'
    b'organisations' b'per' b'A' b'and' b'612' b'@-@' b'fiction' b'map' b'.' b'The' b'contract' b'on' b'7' b'January' b'show' b'students' b'featured' b'several' b'monospaced' b'eggs'
    b'.' b'The' b'brilliant' b'crime' b'support' b'falling' b'in' b'one' b'the' b'48' b'to' b'3' b'%' b'of' b'the' b'field' b'from' b'1926' b',' b'with'
    b'over' b'8' b'metres' b'(' b'62' b'km' b'/' b'h' b')' b'at' b'sermon' b',' b'in' b'total' b'puts' b'to' b'4' b'@.@' b'4' b'km'
    b'(' b'4' b'@.@' b'3' b'km' b')' b'high' b'or' b'next' b'.' b'(' b'77' b'consistent' b'%' b')' b'are' b'shown' b'in' b'action' b','
    b'Ireland' b'is' b'complete' b'"' b'if' b'males' b'are' b'treated' b'in' b'tissues' b'directly' b'.' b'"' b'The' b'body' b'Study' b'R\xc3\xa9union' b'tightly' b'24' b'@.@'
    b'5' b'in' b'(' b'910' b')' b'in' b'miner' b'shade' b',' b'at' b'the' b'audible' b'South' b'Africa' b'Arena' b',' b'would' b'last' b'be' b'raised'
    b'by' b'adult' b'cells' b'.' b'<eos>' b'tall' b'strip' b'of' b'Wallace' b'was' b'suggested' b'to' b'become' b'very' b'Analyses' b'to' b'be' b'referred' b'to' b','
    b'as' b'known' b'as' b'new' b'stance' b',' b'but' b'previously' b'that' b'been' b'originally' b'will' b'be' b'metallic' b'by' b'Raoul' b'during' b'the' b'country' b'.'
    b'However' b',' b'they' b'have' b'become' b'a' b'entity' b'to' b'court' b'for' b'creating' b'males' b';' b'less' b'than' b'wildlife' b'wheatgrass' b'was' b'Mitch' b'<unk>'
    b'.' b'No' b'characteristics' b'in' b'the' b'next' b'year' b'follower' b'have' b'made' b'vie' b'with' b'sexually' b'to' b'65' b'months' b'until' b'management' b',' b'when'
    b'or' b'over' b'8' b'%' b'of' b'the' b'year' b'.' b'Therefore' b',' b'it' b'was' b'viewed' b'by' b'Christian' b'astronomers' b',' b'and' b'he' b'is'
    b'playable' b'by' b'enriched' b'Federer' b'to' b'obtain' b'his' b'own' b'supreme' b'faces' b'.' b'Regardless' b'in' b'the' b'Langstaff' b',' b'Mozambique' b'plural' b'and' b'pieces'
    b'of' b'slaughter' b',' b'lasting' b'it' b'into' b'time' b'from' b'movement' b'and' b'disagreement' b',' b'buildings' b'even' b'begin' b'to' b'tend' b'to' b'attract' b'it'
    b'.' b'<eos>' b'Bate' b'is' b'Flash' b'processes' b'by' b'Hindi' b'red' b'flightless' b'sea' b'<unk>' b'but' b'massacred' b'several' b'cellular' b'islands' b'.' b'Some' b'primary'
    b'researchers' b'(' b'Jesse' b'<unk>' b')' b'can' b'be' b'found' b'Delhi' b',' b'usually' b'fades' b'and' b'likely' b'<unk>' b'(' b'landing' b'eggs' b')' b'.'
    b'These' b'Mongolian' b'treatments' b'will' b'have' b'well' b'core' b',' b'by' b'support' b'the' b'beta' b'bowl' b'after' b'seeds' b'.' b'In' b'the' b'well' b','
    b'Ceres' b'were' b'population' b'to' b'be' b'more' b'factor' b'and' b'threatened' b'in' b'damages' b'there' b'is' b'little' b'evidence' b'of' b'Pompeii' b'.' b'<eos>' b'S.'
    b'Wayne' b'!' b'(' b'pseudonares' b'\xe2\x80\x93' b'50' b')' b'has' b'been' b'used' b'on' b'the' b'board' b'to' b'a' b'close' b'@-@' b'term' b'direction' b'representing'
    b'each' b'inheritance' b'in' b'those' b'for' b'about' b'08' b'years' b'later' b'.' b'Numerous' b'universities' b'will' b'be' b'changed' b'.' b'They' b'are' b'also' b'visible'
    b'throughout' b'the' b'inner' b'and' b'local' b'birds' b',' b'from' b'males' b'flying' b'Mhalsa' b'.' b'In' b'the' b'country' b',' b'birds' b'do' b'not' b'extend'
    b'suggesting' b'for' b'young' b'females' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Medal' b'=' b'=' b'<eos>' b'<eos>' b'linebackers' b'caliber' b'their' b'<unk>' b',' b'tornado'
    b'(' b'6F' b')' b',' b'found' b'populations' b'until' b'Howe' b'means' b'it' b'on' b'a' b'bat' b'has' b'stands' b'more' b'than' b'a' b'million' b'%'
    b'of' b'24' b'to' b'1' b'million' b'in' b'any' b'transfer' b',' b'and' b'exception' b'belongs' b'.' b'Common' b'starlings' b'and' b'bonus' b'plane' b',' b'some'
    b'<unk>' b'and' b'energy' b'may' b'be' b'attempts' b'a' b'high' b'challenge' b'.' b'In' b'wet' b',' b'they' b'cannot' b'have' b'allowed' b'less' b'than' b'3'
    b'million' b'individuals' b',' b'which' b'Wrestling' b'confronts' b'beak' b'construction' b'Toronto' b'@-@' b'like' b'spaces' b',' b'in' b'admirals' b'.' b'They' b'attempts' b'those' b'for'
    b'short' b'<unk>' b'in' b'the' b'territory' b'.' b'They' b'can' b'help' b'a' b'kind' b'of' b'predators' b',' b'distal' b'their' b'laying' b'consequences' b'where' b'they'
    b'while' b'depend' b'in' b'a' b'<unk>' b',' b'and' b'associated' b',' b'so' b'they' b'only' b'see' b'it' b'.' b'small' b'ability' b'to' b'be' b'Tarantino'
    b'accumulated' b'or' b'grew' b'throughout' b'their' b'life' b'.' b'To' b'have' b'made' b',' b'to' b'Cholera' b',' b'they' b'may' b'night' b'it' b'.' b'Rie'
    b'there' b'takes' b'replaced' b'acyclic' b'Acute' b'forests' b'(' b'Madsen' b')' b'occurs' b'and' b'sometimes' b',' b'but' b'are' b'very' b'running' b'to' b'about' b'one'
    b'other' b'exception' b'.' b'Zombies' b'archaea' b'(' b'chasing' b'Spirit' b')' b',' b'generally' b'arranged' b'to' b'hatch' b'on' b'<unk>' b'separately' b',' b'causing' b'1766'
    b',' b'Mah\xc4\x81v\xc4\xabra' b'and' b'looms' b'including' b'humans' b'.' b'In' b'the' b'head' b',' b'it' b'is' b'apparent' b'into' b'more' b'sides' b'that' b'to' b'be'
    b'deliberately' b'regarded' b'as' b'bright' b'.' b'The' b'chicks' b'are' b'differentiated' b'for' b'<unk>' b'trade' b',' b'some' b'eye' b',' b'since' b'18' b'bear' b'Mountain'
    b'.' b'The' b'tracts' b'of' b'<unk>' b'\xe2\x80\x94' b'ancient' b',' b'or' b'or' b'<unk>' b',' b'have' b'a' b'range' b'of' b'large' b'bird' b'enough' b'.'
    b'However' b',' b'when' b'a' b'car' b'(' b'control' b'with' b'particularly' b'even' b'A.' b'materiel' b')' b',' b'can' b'just' b'be' b'found' b'for' b'their'
    b'skull' b',' b'because' b'and' b'they' b'also' b'have' b'got' b'considerably' b'each' b'away' b'of' b'glass' b'.' b'This' b'account' b'is' b'greatly' b'long' b'.'
    b'There' b'are' b'no' b'evidence' b'that' b'they' b'are' b'there' b'.' b'Only' b'Munei' b'Information' b'legs' b'were' b'thus' b'considered' b'on' b'whether' b'they' b'have'
    b'derivative' b'Triceratops' b'.' b'<eos>' b'A' b'existence' b'of' b'authors' b'who' b'may' b'only' b'indicate' b'that' b'fusion' b'.' b'One' b'should' b'be' b'distinguished' b'by'
    b'<unk>' b',' b'need' b'to' b'everything' b'that' b'they' b'often' b'speak' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Name' b'=' b'=' b'<eos>' b'<eos>' b'As'
    b'of' b'2006' b',' b'poaching' b'starlings' b'and' b'dams' b'formed' b'color' b',' b'as' b'they' b'were' b'enhanced' b'.' b'Another' b'recent' b'ability' b'like' b'exposed'
    b',' b'individuals' b'such' b'as' b'<unk>' b'armour' b',' b'rarely' b'discover' b'them' b'may' b'do' b'assert' b'them' b'.' b'Some' b'regions' b'who' b'can' b'form'
    b'knee' b'displays' b'sticks' b'as' b'they' b'can' b'nurse' b'.' b'Whether' b'proteins' b'emerged' b'on' b'the' b'star' b'direction' b'early' b'during' b'the' b'year' b'when'
    b'they' b'were' b'related' b'to' b'planets' b'.' b'<eos>' b'Common' b'starlings' b'include' b'free' b'hesitates' b',' b'such' b'as' b'<unk>' b',' b'retire' b',' b'municipalities'
    b',' b'common' b'temperatures' b'by' b'rails' b'affected' b'by' b'a' b'ferrets' b'.' b'<eos>' b'Bayreuth' b'into' b'ecosystem' b'divalent' b'DNA' b'is' b'thought' b'to' b'be'
    b'different' b',' b'so' b'it' b'will' b'be' b'more' b'important' b'.' b'This' b'results' b'to' b'be' b'separate' b'very' b'by' b'over' b'4' b'%' b'of'
    b'its' b'Celtic' b'species' b'.' b'A' b'supernova' b'can' b'be' b'or' b'<unk>' b'structures' b'and' b'217' b'male' b'plumage' b'.' b'These' b'kakapo' b'of' b'health'
    b'pilots' b'may' b'occur' b'on' b'Pictish' b'normal' b',' b'by' b'their' b'they' b'Google' b'then' b'to' b'reproduce' b'it' b'.' b'However' b',' b'they' b'were'
    b'stable' b'unstable' b',' b'when' b'them' b'has' b'been' b'shown' b'and' b'1672' b',' b'so' b'by' b'masonry' b'periods' b'without' b'their' b'body' b'setting' b'.'
    b'Likewise' b',' b'heavier' b'planets' b'are' b'closer' b'as' b'Tessa' b'.' b'There' b'are' b'no' b'evidence' b':' b'<unk>' b'Ydll' b',' b'Turkey' b',' b'and'
    b'iron' b'industries' b'each' b'rods' b'and' b'museums' b'and' b'<unk>' b'.' b'These' b'factors' b'may' b'cause' b'even' b'on' b'the' b'ground' b'when' b'nests' b'is'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 228.8
    loss: 5.168
    elapsed time (seconds): 159.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  32.307 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
