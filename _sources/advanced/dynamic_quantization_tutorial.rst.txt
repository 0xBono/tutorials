.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'at' b'verify' b'to' b'activate' b'or' b'waive' b'its' b'assignment' b',' b'striking' b'Formula' b'One' b'in' b'his' b'remote' b'land' b'levels' b'of' b'Hecht' b','
    b'his' b'1929' b'mini' b'@-@' b'party' b'or' b'patents' b'Glorious' b"'s" b'budget' b'.' b'The' b'1952' b'fourth' b'level' b'on' b'blood' b'<unk>' b'is' b'legal'
    b',' b'and' b'the' b'Caishi' b'form' b'Tell' b'@-@' b'Semitic' b'routine' b'from' b'Mexico' b',' b'resembles' b'it' b'under' b'a' b'small' b'body' b'that' b'were'
    b'not' b'Cadet' b'getting' b'.' b'Within' b'this' b'school' b',' b'it' b'reopened' b'ten' b'times' b'when' b'they' b'are' b'will' b'be' b'.' b'Jagannadh' b'notes'
    b'that' b'it' b'was' b'so' b'<unk>' b'to' b'be' b'over' b'less' b'than' b'she' b'<unk>' b'.' b'When' b'they' b'might' b'be' b'absent' b'for' b'the'
    b'comrades' b'or' b'an' b'numeric' b',' b'Waddon' b'X' b'and' b'novelist' b'I' b'must' b'be' b'used' b'out' b'forced' b'?' b'"' b'Mothers' b'Apostolid\xc3\xa8s' b'"'
    b'and' b'"' b'amazing' b'"' b'and' b'"' b'tactic' b'"' b',' b'which' b'gives' b'it' b'a' b'flung' b'female' b'if' b'bull' b'itself' b'exists' b'much'
    b'have' b'been' b'held' b'in' b'music' b',' b'though' b'it' b'was' b'allowed' b'to' b'govern' b'its' b'efforts' b'to' b'camouflage' b'the' b'same' b'or' b'to'
    b'show' b'.' b'In' b'turn' b'a' b'linear' b'fox' b'who' b'is' b'not' b'pumas' b'if' b'his' b'mother' b',' b'though' b'a' b'group' b'man' b'was'
    b'inspired' b'by' b'<unk>' b'Bhai' b',' b'she' b'became' b'aware' b'of' b'Michael' b'Williams' b',' b'who' b'takes' b'visiting' b'aware' b'of' b'them' b'and' b'Mother'
    b'Walpole' b'in' b'Bologna' b'.' b'<unk>' b'<unk>' b'suggests' b':' b'"' b'If' b'you' b'<unk>' b'even' b'like' b'it' b'knows' b'he' b'is' b'a' b'dark'
    b'pass' b'for' b'Seattle' b'quite' b'.' b'"' b'<eos>' b'Like' b'his' b'tenure' b'in' b'The' b'Horizon' b',' b'"' b'he' b'says' b'that' b'he' b'finished'
    b'off' b'the' b'term' b'and' b'Arniel' b'translations' b"'" b'novels' b'and' b'yet' b'compete' b'near' b'the' b'end' b',' b'although' b'I' b'don' b"'t" b'get'
    b'up' b'the' b'transmission' b'.' b'I' b'speaks' b'her' b'to' b'look' b'...' b'at' b'his' b'and' b'blew' b'it' b',' b'in' b'this' b'way' b'they'
    b'ever' b'shall' b'last' b'think' b'that' b'Horgan' b'is' b'very' b'capable' b'of' b'convict' b',' b'and' b'a' b'subsequent' b'Bernstein' b'vehicle' b'is' b'rather' b'historical'
    b'.' b'"' b'Mike' b'<unk>' b'has' b'said' b'himself' b'unification' b'Jamie' b'Perrin' b'"' b',' b'notably' b'Raffles' b'<unk>' b',' b'"' b'and' b'get' b'"'
    b'a' b'prophet' b'for' b'bond' b'and' b'struggle' b'signs' b'like' b'love' b'...' b'and' b',' b'never' b'arriving' b'upon' b'four' b'years' b',' b'at' b'an'
    b'good' b'rate' b',' b'would' b'help' b'public' b'attention' b'.' b'If' b'he' b'calmly' b'was' b'at' b'that' b'point' b',' b'plain' b'enzymes' b'at' b'an'
    b'request' b'has' b'demonstrated' b'him' b'against' b'happens' b'duties' b'.' b'"' b'In' b'1968' b'it' b'also' b'marked' b'1888' b'during' b'the' b'first' b'two' b'months'
    b',' b'<unk>' b'Dharmendra' b'a' b'potential' b'movement' b'in' b'the' b'larger' b'later' b',' b'and' b'"' b'<unk>' b'"' b',' b'Ross' b'goes' b'wearing' b'synthesize'
    b'Frank' b'writer' b'and' b'manager' b'closes' b'while' b'attempting' b'work' b';' b'Nelson' b'Manuel' b'driver' b'Andrew' b'<unk>' b'(' b'1989' b')' b'offered' b'it' b'the'
    b'leading' b'Abe' b'in' b'Chicago' b'and' b'Henderson' b'.' b'<eos>' b'motivating' b'references' b'to' b'89' b'%' b'and' b'March' b'1931' b',' b'\xc3\x86lfric' b'will' b'have'
    b'to' b'begin' b'away' b'from' b'political' b'issues' b',' b'as' b'they' b'don' b"'t" b'be' b'maintained' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Legacy' b'='
    b'=' b'<eos>' b'<eos>' b'The' b'argument' b'of' b'aggressively' b'dioceses' b'could' b'be' b'her' b'friend' b'James' b'trip' b'with' b'Shueisha' b',' b'Cliff' b'Jerome' b','
    b'avian' b'Price' b'<unk>' b'a' b'<unk>' b'project' b'(' b'November' b'2006' b')' b'and' b'the' b'Carpenter' b'in' b'1966' b'.' b'By' b'the' b'end' b'of'
    b'1998' b',' b'he' b'was' b'eventually' b'voted' b'Habitat' b'that' b'he' b'for' b'these' b'stories' b'would' b'potentially' b'happen' b'.' b'His' b'friend' b'and' b'editor'
    b'<unk>' b'O' b"'Malley" b'<unk>' b'ended' b'Fans' b'with' b'himself' b'Highlands' b',' b'who' b'met' b'his' b'party' b'saying' b'"' b'so' b'no' b'every' b'lot'
    b'from' b'good' b'!' b'of' b'<unk>' b',' b'and' b'instead' b'of' b'him' b'[' b'of' b'I' b"'ve" b'trouble' b'before' b'<unk>' b',' b'I' b"'re"
    b'<unk>' b'.' b'"' b'David' b'Farr' b'described' b'his' b'thesis' b'of' b'husband' b'of' b'Professor' b',' b'Gibraltar' b'called' b'heralded' b'his' b'return' b'to' b'the'
    b'international' b'book' b',' b'three' b'submarines' b'taste' b',' b'describing' b'"' b'fifteen' b'men' b'to' b'Oxford' b'(' b'one' b'.' b'only' b'"' b')' b'.'
    b'In' b'Rosberg' b'with' b'digital' b'society' b',' b'Baltimore' b'influenced' b'their' b'extraction' b',' b'working' b'in' b'a' b'United' b'States' b'company' b'that' b'ruled' b'at'
    b'a' b'schoolhouse' b',' b'built' b'at' b'11' b'@.@' b'5' b'%' b'in' b'the' b'air' b',' b'after' b'his' b'own' b'works' b'.' b'He' b'said'
    b',' b'"' b'The' b'most' b'real' b'I' b"'m" b'heard' b'before' b'they' b'take' b'to' b'death' b',' b'Don' b"'t" b'donate' b'the' b'switch' b'is'
    b'senator' b'.' b'They' b'were' b'a' b'mere' b'Eight' b'lover' b',' b'but' b'he' b'should' b'go' b'to' b'apply' b'like' b'being' b'Nation' b'.' b'And'
    b'I' b"'re" b'a' b'bit' b'appearance' b'that' b'react' b'very' b'indigenous' b'[' b'the' b'air' b']' b'.' b'"' b'<eos>' b'<eos>' b'=' b'=' b'In'
    b'War' b'=' b'=' b'<eos>' b'<eos>' b'Crash' b'Boom' b'Bang' b'!' b'reported' b'that' b'he' b"'s" b'even' b'compromise' b',' b'deal' b'Nisibis' b'.' b'The'
    b'demon' b'Post' b'<unk>' b'owning' b'him' b'that' b'give' b'it' b'all' b'of' b'30' b'annoying' b'to' b'get' b'solves' b'runs' b'.' b'Trees' b'started' b'themselves'
    b'after' b'his' b'fundamentalists' b'recognized' b'fame' b'for' b'a' b'range' b'of' b'mental' b'stories' b'.' b'At' b'the' b'Winnebago' b'policeman' b'Hearts' b'Doping' b'Agency' b'Walpole'
    b'on' b'his' b'assassination' b'and' b'strategy' b'for' b'Michael' b'Northgate' b',' b'in' b'his' b'article' b'on' b'the' b'final' b'Star' b'Prix' b'.' b'730' b','
    b'deteriorate' b',' b'Charmed' b'turnover' b'Dominion' b'Holden' b'viewed' b'The' b'Cutting' b'Independent' b'Region' b'award' b'to' b'Humphrey' b'in' b'1828' b',' b'which' b'would' b'be'
    b'invited' b'to' b'realise' b'himself' b'into' b'pal' b',' b'citing' b'the' b'Richard' b'<unk>' b'Friday' b',' b'2005' b'an' b'copy' b'of' b'permit' b'international' b'to'
    b'the' b'SEC' b'Machine' b'London' b'Park' b',' b'"' b'The' b'Most' b'Special' b'Peabody' b'Company' b'"' b'.' b'The' b'novel' b'toured' b'in' b'ABC' b'with'
    b'a' b'temperature' b'of' b'1' b'@.@' b'23' b'%' b'for' b'a' b'earlier' b'@-@' b'race' b'spot' b'on' b'the' b'next' b',' b'so' b'sold' b'to'
    b'problems' b'outside' b'268' b'at' b'his' b'homes' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Control' b'game' b'=' b'=' b'<eos>' b'<eos>' b'Charlie' b'achieved' b'his'
    b'home' b'on' b'37' b'August' b'1996' b'(' b'1909' b')' b'.' b'He' b'was' b'always' b'published' b'as' b'Mo' b'Fulton' b'after' b'his' b'band' b'recorded'
    b'to' b'prepare' b'"' b'abandoned' b'company' b',' b'The' b'longtime' b'and' b'Pat' b'Dead' b'<unk>' b'[' b'...' b']' b'he' b'likes' b'upon' b'just' b'to'
    b'be' b'lenient' b'or' b'realised' b',' b'even' b'he' b'spent' b'roughly' b'$' b'1' b'million' b'in' b'the' b'game' b'in' b'2000' b'.' b'And' b'nectar'
    b'is' b'<unk>' b'highlighted' b',' b'it' b'wasn' b"'t" b'couldn' b"'t" b'Be' b"'t" b"'m" b'dependent' b'over' b'Sarajevo' b'and' b'I' b"'ve" b'debated' b'.'
    b'Christopher' b'I' b'<unk>' b'the' b'role' b'of' b'phone' b',' b'so' b'it' b'was' b'given' b'in' b'a' b'wonders' b'that' b'decided' b'Altarpiece' b'to' b'well'
    b'or' b'because' b'it' b'is' b'"' b'.' b'Electronic' b'Carl' b'Stewart' b'suggested' b'that' b'with' b'Pfaster' b"'s" b'cabinet' b'all' b'are' b'still' b'known' b'from'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 234.6
    loss: 5.168
    elapsed time (seconds): 162.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  42.455 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
