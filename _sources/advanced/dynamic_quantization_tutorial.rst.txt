.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'under' b'Zionism' b'.' b'<eos>' b'The' b'visitor' b'is' b'the' b'largest' b'sum' b'of' b'franchise' b'power' b',' b'whose' b'rebuilding' b'volume' b'was' b'"' b'straight'
    b'@-@' b'hatred' b'"' b',' b'two' b'counties' b'<unk>' b'and' b'Sand\xc3\xa9' b',' b'which' b'also' b'merged' b'with' b'Disc' b',' b'either' b'Twenty' b'on' b'the'
    b'intercourse' b'.' b'As' b'the' b'spelling' b'is' b'once' b'uncovering' b'above' b'done' b',' b'they' b'are' b'put' b'to' b'be' b'<unk>' b'.' b'Due' b'to'
    b'it' b',' b'plants' b'have' b'risen' b'to' b'Campbeltown' b'and' b'ribosomal' b'@-@' b'<unk>' b'.' b'Most' b'European' b'starlings' b'Krasinski' b"'s" b'\xe2\x80\x93' b'creative' b'hairs'
    b'foxes' b'have' b'<unk>' b'as' b'even' b'by' b'fifty' b'@-@' b'consumers' b'.' b'outlook' b'were' b'observed' b'by' b'a' b'Palenque' b',' b'Forrester' b',' b'and'
    b'were' b'adopted' b'for' b'Muslims' b'.' b'If' b'not' b',' b'the' b'drift' b'will' b'eventually' b'be' b'a' b'final' b'planet' b'.' b'IR' b'can' b'gain'
    b'to' b'try' b'in' b'scene' b'for' b'the' b'game' b'to' b'Swedish' b'plants' b',' b'designated' b'as' b"'" b'the' b'most' b'degree' b'I' b'was' b'traced'
    b';' b'I' b'make' b'most' b'more' b'massive' b'requests' b'or' b'probably' b'explore' b'their' b'more' b'successful' b'.' b'But' b'we' b"'ve" b'a' b'overall' b'model'
    b'how' b'they' b'come' b'with' b'<unk>' b'by' b'some' b'other' b',' b'Piquet' b'.' b'"' b'<eos>' b'<eos>' b'=' b'=' b'=' b'loneliness' b'=' b'='
    b'=' b'<eos>' b'<eos>' b'During' b'the' b'native' b'race' b',' b'the' b'Crash' b'Council' b"'" b'and' b'other' b'director' b':' b'The' b'Warriors' b'was' b'higher'
    b'returned' b'to' b'Essentially' b'Ceres' b'by' b'showed' b'them' b'to' b'benefit' b'Fatu' b'flocks' b'the' b'conclusion' b'of' b'specifically' b'candidates' b'.' b'<eos>' b'Despite' b'a'
    b'considerable' b'election' b',' b'Latin' b'readings' b'including' b'goats' b'have' b'been' b'accepted' b'to' b'support' b'enhance' b'except' b'with' b'Chamber' b"'" b'<unk>' b',' b'to'
    b'the' b'Euphrates' b'and' b'brightness' b'Guard' b',' b'which' b'mechanism' b'Lambeth' b'for' b'the' b'final' b'sequences' b'of' b'the' b'spots' b';' b'A' b'Portable' b'work'
    b'that' b'easily' b'left' b',' b'and' b'included' b'some' b'of' b'his' b'people' b'<unk>' b'like' b'beginning' b'under' b'George' b'III' b'.' b'Attempting' b'on' b'July'
    b'23' b',' b'2007' b',' b'132' b'@,@' b'000' b'feedback' b'talk' b',' b'this' b'drifts' b'shows' b'pounds' b'abroad' b'for' b'skilled' b'R' b'American' b'd'
    b'lamins' b'.' b'While' b'many' b'other' b'types' b'of' b'sticks' b'appear' b',' b'this' b'project' b'restored' b'"' b'The' b'national' b'thing' b'once' b'stand' b'<unk>'
    b'Avant' b'.' b'"' b'The' b'kakapo' b'@-@' b'themed' b'burning' b'1633' b'Paramount' b'!' b'Akr\xc4\x81d' b',' b'condoms' b'and' b'detractors' b'were' b'announced' b'to' b'be'
    b'classified' b'to' b'occur' b'at' b'Churchill' b',' b'including' b'another' b'constitutional' b'predominantly' b'and' b'developer' b'.' b'The' b'Viscount' b"'s" b'TV' b'is' b'not' b'a'
    b'popular' b'official' b'village' b'.' b'Almost' b'32' b'acts' b'of' b'60' b'%' b'year' b'.' b'remarks' b'both' b'suffered' b'over' b'a' b'narrow' b',' b'rising'
    b'completed' b'jump' b',' b'for' b'five' b'eggs' b',' b'Wight' b'<unk>' b'(' b'<unk>' b',' b'Kabir' b')' b',' b'clear' b'liner' b'Ratzenberger' b'.' b'The'
    b'forward' b'layer' b'fell' b'for' b'the' b'Hanson' b'around' b'the' b'R\xc3\xa9union' b'circle' b'after' b'RedOctane' b'into' b'state' b'that' b'a' b'female' b'begins' b'.' b'The'
    b'Catholic' b'King' b'believed' b'that' b'Crystal' b'should' b'have' b'a' b'predominant' b'motion' b'or' b'redeveloped' b'appointed' b'from' b'the' b'<unk>' b',' b'a' b'task' b'with'
    b'infrared' b'white' b'exactly' b'streaks' b'of' b'binding' b'short' b'paths' b'.' b'It' b'is' b'reserved' b'that' b'there' b'is' b'considerable' b'vehicles' b'could' b'be' b'drawn'
    b',' b'nor' b'the' b'various' b'spots' b'use' b'that' b'excess' b'exists' b'the' b'body' b'at' b'least' b'by' b'he' b'drowned' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Family' b'analysis' b'=' b'=' b'<eos>' b'<eos>' b'As' b'the' b'race' b',' b'they' b'show' b'lay' b'rebellion' b'from' b'minimise' b'@-@' b'season' b','
    b'and' b'Qedarites' b'took' b'part' b'of' b'various' b'other' b'grooves' b'.' b'Unlike' b'the' b'introduction' b'of' b'any' b'M\xc4\x81ori' b'obligation' b',' b'Ceres' b'were' b'appropriate'
    b'.' b'The' b'planet' b'said' b'"' b'course' b',' b'literacy' b'exhibited' b'in' b'writings' b',' b'Baal' b'~' b'Stanwix' b'Kir' b'Church' b'"' b'as' b'"'
    b'steady' b'"' b',' b'in' b'Steve' b'v.' b'West' b'and' b'XVI' b'of' b'Pit' b'rulers' b'provides' b'and' b'chin' b'during' b'his' b'books' b'at' b'al'
    b'Hollywood' b',' b'Denmark' b'(' b'galaxies' b')' b',' b'as' b'a' b'source' b'of' b'decorative' b'Coastal' b'stories' b'.' b'He' b'felt' b'that' b'it' b'"'
    b'alterations' b'in' b'Pope' b'McPherson' b',' b'finally' b',' b'in' b'a' b'Prakash' b'protest' b'performance' b'"' b'.' b'Thaksin' b'Studio' b'reprised' b'\xc2\xa3' b'300' b'thousand'
    b'in' b'1845' b'vocalist' b'Mitchell' b'and' b'flawed' b'descendants' b'as' b'a' b'guidance' b',' b'a' b'<unk>' b'pupil' b'or' b'which' b'shot' b'noted' b'for' b'his'
    b'huge' b'media' b'.' b'He' b'said' b'that' b'they' b'were' b'"' b'largely' b'more' b'faithful' b'on' b'people' b'"' b'and' b'come' b'the' b'moth' b'with'
    b'Hairan' b'<unk>' b'.' b'This' b'is' b'featured' b'in' b'Up' b'D\xc3\xadaz' b'bequeathed' b'by' b'his' b'sound' b'masters' b'.' b'suspended' b'on' b'members' b'of' b'plays'
    b'out' b'on' b'no' b'death' b'is' b'possible' b'.' b'<eos>' b'A' b'combined' b'developed' b'by' b'a' b'passionate' b'<unk>' b'photograph' b'with' b'Walter' b'Houston' b'<unk>'
    b'as' b'a' b'Member' b'of' b'Vasco' b'Boom' b'Bang' b'!' b'died' b'in' b'five' b'languages' b',' b'while' b'Vistara' b'between' b'(' b'5' b'\xe2\x80\x93' b'38'
    b'January' b'1980' b')' b'was' b'a' b'prominent' b'free' b'planet' b'site' b',' b'an' b'planet' b'with' b'which' b'his' b'character' b'is' b'backdrop' b'.' b'Engineers'
    b'called' b'Alfred' b'projections' b'hoped' b'that' b'do' b'not' b'have' b'delegated' b'a' b'cargo' b'be' b'no' b'faults' b'by' b'Iguanodontia' b'who' b'could' b'be' b'an'
    b'letting' b'artist' b'to' b'be' b'written' b'.' b'To' b'accuses' b'his' b'sense' b'and' b'the' b'body' b'may' b'recover' b'how' b'they' b'feathers' b'after' b'a'
    b'slave' b',' b'or' b'their' b'body' b'@-@' b'definition' b'Period' b'.' b'When' b'extraterrestrials' b'has' b'seen' b'a' b'source' b'of' b'English' b'for' b'it' b'during'
    b'English' b'goalball' b',' b'the' b'department' b'extended' b'by' b'indicating' b'it' b'back' b'over' b'fend' b'.' b'It' b'is' b'upset' b'as' b'valid' b'.' b'In'
    b'Tamaulipas' b',' b'<unk>' b'well' b'stated' b'that' b':' b'"' b'Crash' b"'t" b'be' b'more' b'important' b'<unk>' b'is' b'just' b'known' b'when' b'I' b'have'
    b'"' b',' b'the' b'Neapolitan' b'convention' b'has' b'some' b'legal' b'singers' b',' b'such' b'as' b'<unk>' b',' b'<unk>' b'Merrifield' b',' b'<unk>' b',' b'and'
    b'Celtic' b'Finn' b'"' b'universal' b'Until' b'<unk>' b',' b'<unk>' b',' b'DNA' b'or' b'Islander' b',' b'<unk>' b',' b'Evans' b'<unk>' b',' b'Baptist' b','
    b'nails' b',' b'or' b'even' b'bowl' b'unfortunately' b',' b'and' b'from' b'venue' b'like' b'<unk>' b'here' b'.' b'The' b'law' b'might' b'have' b'heard' b'taking'
    b'place' b'.' b'It' b'has' b'energy' b'white' b',' b'and' b'for' b'this' b'time' b'that' b'<unk>' b',' b'and' b'it' b'joins' b'a' b'comparable' b'planet'
    b'that' b'can' b'be' b'made' b'when' b'they' b'function' b'are' b'recorded' b'.' b'The' b'rooms' b'video' b'he' b'has' b'my' b'third' b'beauty' b'.' b'The'
    b'reintroduction' b'for' b'Vargas' b'Crash' b'is' b'the' b'ability' b'types' b'of' b'pining' b'together' b'from' b'good' b'mines' b',' b'though' b',' b'the' b'Ayesha' b'matter'
    b'and' b'heaviest' b'people' b'today' b'were' b'reduced' b'.' b'For' b'this' b'third' b"'" b'resumption' b"'" b',' b'<unk>' b',' b'they' b"'m" b'its' b'magical'
    b'direction' b'.' b'I' b'may' b'be' b'able' b'to' b'drain' b'a' b'great' b'fast' b'regional' b'formula' b'in' b'a' b'variety' b',' b'and' b'focused' b'there'
    b'to' b'control' b'that' b',' b'or' b'they' b'fear' b',' b'more' b'episodes' b'to' b'talking' b'to' b'the' b'small' b'language' b'to' b'even' b'cross' b'emotions'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 244.3
    loss: 5.168
    elapsed time (seconds): 168.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  58.588 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
