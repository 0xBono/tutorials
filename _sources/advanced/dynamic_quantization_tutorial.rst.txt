.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'used' b'popularity' b'.' b'When' b'there' b'are' b'also' b'several' b'resistance' b',' b'the' b'story' b'has' b'a' b'broken' b'image' b'of' b'2' b'@.@' b'5'
    b'\xe2\x80\x93' b'5' b'@.@' b'8' b'in' b'(' b'45' b'\xe2\x80\x93' b'18' b'@.@' b'5' b'in' b')' b'at' b'a' b'base' b',' b'something' b'below' b'for'
    b'females' b'and' b'fluoride' b',' b'with' b'low' b'air' b'organizations' b',' b'and' b'at' b'which' b'men' b'ornithopod' b'reactions' b',' b'one' b'phase' b',' b'has'
    b'transported' b'their' b'body' b',' b'Tong' b',' b'striving' b'up' b'after' b'58' b'years' b',' b'and' b'a' b'height' b'at' b'night' b'.' b'As' b'he'
    b'finished' b'wanted' b'to' b'travel' b'a' b'easy' b'season' b',' b'unlike' b'teeth' b'that' b'first' b'reach' b'any' b'other' b'time' b'(' b'43' b'@.@' b'8'
    b'%' b')' b'apart' b'to' b'produce' b'ground' b'and' b'width' b'onto' b'GCSE' b',' b'and' b'females' b'confronted' b'the' b'halftime' b'main' b'bony' b'Viaduct' b'.'
    b'This' b'hated' b'text' b'...' b'The' b'only' b'to' b'fall' b'by' b'possible' b'or' b'fragments' b'shoes' b'(' b'e.g.' b')' b',' b'should' b'be' b'soluble'
    b'for' b'guard' b'.' b'At' b'a' b'grade' b',' b'the' b'kakapo' b'was' b'sweeping' b'as' b'localities' b'with' b'its' b'breast' b'.' b'When' b'Terri' b'create'
    b'ticking' b'alone' b',' b'it' b'has' b'two' b'different' b'spots' b'.' b'Another' b'nucleolus' b'red' b'sense' b',' b'their' b'mild' b'gate' b',' b'in' b'which'
    b'very' b'reductions' b'devoted' b'his' b'intentions' b'and' b'personnel' b'travelling' b'out' b'to' b'hear' b'land' b'.' b'A' b'religious' b'sex' b'bird' b'will' b'be' b'shown'
    b'to' b'pack' b'or' b'Drake' b'to' b'be' b'their' b'cleansing' b'.' b'One' b'female' b'was' b'seen' b'to' b'be' b'able' b'chromatography' b'for' b'the' b'presence'
    b'of' b'Croats' b'.' b'<eos>' b'Ceres' b'said' b'that' b'setting' b'switching' b'for' b'to' b'60' b'@-@' b'bucket' b'strengthen' b'other' b'types' b'that' b'were' b'dressed'
    b'in' b'East' b'Christian' b'Church' b'\xe2\x80\x93' b'Georgia' b'were' b'dated' b'.' b'This' b'type' b'will' b'be' b'broken' b'effects' b'regardless' b'of' b'improvements' b'with' b'technically'
    b',' b'often' b'detailed' b'chances' b',' b'"' b'bonnet' b'or' b'ethics' b'"' b',' b'attempts' b'to' b'have' b'in' b'Afghanistan' b',' b'as' b'they' b'can'
    b'have' b'earlier' b'extensive' b'to' b'ed' b'or' b'permanence' b'.' b'Sources' b'Franz' b'gabonica' b'was' b'modernized' b'to' b'support' b'most' b'of' b'it' b'from' b'rescuing'
    b'predators' b'for' b'their' b'release' b'.' b'depressed' b'into' b'elimination' b'replacement' b'race' b'develop' b'rumor' b'and' b'its' b'cause' b'and' b'turnovers' b',' b'both' b'500'
    b'%' b'.' b'Similarly' b',' b'the' b'neck' b'are' b'fruiting' b'and' b'still' b'found' b'on' b'members' b',' b'colour' b',' b'which' b'did' b'not' b'become'
    b'Charitable' b',' b'but' b'sole' b',' b'all' b'of' b'the' b'proportional' b'Vickers' b'modern' b'female' b'studios' b',' b'are' b'similarly' b'<unk>' b'or' b'the' b'habitat'
    b'such' b'.' b'Pliny' b'structure' b'usually' b'provides' b'reader' b'possession' b'which' b'lacks' b'fresh' b'men' b'.' b'Ceres' b'moon' b'Corythosaurus' b'often' b'encounters' b'with' b'saint'
    b',' b't1' b',' b'\xc5\x8czora' b',' b'catapulted' b'well' b'commenced' b'as' b'gills' b'of' b'a' b'number' b'of' b'nascent' b'greater' b'status' b'.' b'Some' b'often'
    b'calling' b',' b'Gerald' b'<unk>' b'and' b'All\xc4\x81h' b'and' b'Hillary' b'Erich' b'.' b'Now' b',' b'after' b'the' b'unstable' b'apparent' b'standard' b',' b'it' b'classified'
    b'<unk>' b'in' b'44th' b',' b'reaching' b'a' b'peak' b'vertical' b'stumps' b',' b'and' b'Hank' b'Leading' b'small' b'sugar' b'Henry' b'for' b'body' b',' b'who'
    b'may' b'certainly' b'be' b'worshipped' b'police' b'families' b'into' b'all' b'time' b'.' b'They' b'are' b'assigned' b'to' b'scholarship' b'of' b'narration' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'=' b'Transportation' b'=' b'=' b'=' b'<eos>' b'<eos>' b'There' b'are' b'little' b'evidence' b'of' b'red' b'techniques' b'(' b'including' b'bluff' b'\xe2\x80\x93'
    b'storage' b')' b',' b'as' b'there' b'have' b'been' b'few' b'traits' b'the' b'common' b'county' b'and' b'greasewood' b'structures' b'snap' b'known' b'as' b'<unk>' b'slip'
    b'.' b'Contact' b'of' b'<unk>' b'for' b'natural' b'and' b'long' b'areas' b'of' b'additional' b'donation' b',' b'dry' b'(' b'95' b'%' b')' b',' b'meaning'
    b'Napol\xc3\xa9on' b',' b'no' b'commonly' b'matted' b'reactions' b'for' b'each' b'other' b'.' b'Both' b'sweet' b'speakers' b'have' b'recorded' b'males' b'and' b'Dvaita' b'twisted' b','
    b'so' b'large' b'fruit' b'indications' b'are' b'largely' b'packed' b'.' b'Mycena' b'Hampson' b'states' b'to' b'have' b'in' b'occur' b'assigned' b'to' b'those' b'of' b'the'
    b'total' b'who' b'are' b'part' b'of' b'people' b'for' b'other' b'years' b'.' b'The' b'male' b'has' b'a' b'unusually' b'outgrowth' b'@-@' b'shaped' b'<unk>' b'or'
    b'mothers' b',' b'elevated' b':' b'one' b'were' b'a' b'persistent' b'<unk>' b'of' b'large' b'core' b'.' b'These' b'authors' b'are' b'connected' b'to' b'a' b'greater'
    b'pale' b'Whaler' b'Doctor' b'where' b'man' b'once' b'ventral' b'down' b'the' b'head' b'.' b'Chemical' b'activity' b'is' b'broken' b'to' b'be' b'a' b'deeply' b'.'
    b'There' b'is' b'10' b'killed' b'centuries' b'they' b'rescues' b'referring' b'to' b'predators' b'with' b'the' b'male' b'.' b'Furthermore' b',' b'when' b'resurgence' b'moving' b','
    b'it' b'is' b'rarely' b'heard' b'by' b'breaking' b'a' b'habitat' b',' b'so' b'it' b'cannot' b'be' b'burned' b'by' b'lead' b'to' b'hygrometricus' b'.' b'<eos>'
    b'The' b'main' b'climate' b'of' b'record' b'receives' b'significant' b'stereotypes' b',' b'but' b'they' b'pulmonary' b'attributed' b'to' b'way' b'and' b'limited' b'bowls' b',' b'but'
    b'sometimes' b'actually' b'simply' b'bearing' b'heat' b'following' b'difficulty' b'<unk>' b'.' b'One' b'menagerie' b',' b'possibly' b'as' b'they' b'cannot' b'be' b'elected' b'the' b'Republic'
    b'of' b'expression' b',' b'has' b'are' b'suitable' b'by' b'her' b'own' b'trucks' b'.' b'Released' b'with' b',' b'an' b'attachment' b'soon' b'will' b'feed' b'on'
    b'a' b'eye' b'technique' b'flotation' b'across' b'a' b'one' b'of' b'Croatia' b'fail' b'.' b'Although' b'this' b'species' b'in' b'post' b'@-@' b'frequency' b'are' b'unknown'
    b',' b'he' b'arrived' b'on' b'agricultural' b'or' b'narrow' b'trees' b',' b'which' b'may' b'be' b'associated' b'with' b'characteristic' b'Dell' b',' b'which' b'are' b'shown'
    b'as' b'characteristic' b'to' b'have' b'permits' b',' b'having' b'fewer' b'joy' b',' b'throughout' b'1832' b'.' b'Without' b'Derby' b'body' b'populations' b'are' b'"' b'microorganisms'
    b'"' b',' b'especially' b'for' b'a' b'or' b'prostitutes' b'whose' b'reading' b'.' b'<eos>' b'Since' b'of' b'the' b'first' b',' b'kakapo' b'have' b'handled' b'his'
    b'Nevermind' b'up' b',' b'and' b'there' b',' b'woods' b'if' b'a' b'deep' b'particle' b'was' b'called' b'orientalis' b',' b'may' b'be' b'seen' b'that' b'the'
    b'Persian' b'starling' b'found' b'his' b'original' b'beliefs' b'.' b'Their' b'technique' b'occurs' b'on' b'the' b'same' b'as' b'in' b'an' b'<unk>' b',' b'while' b'she'
    b'make' b'concerns' b'throughout' b'a' b'large' b'book' b',' b'which' b'must' b'be' b'distinguished' b'County' b'flightless' b',' b'selling' b'at' b'a' b'normally' b'regulated' b';'
    b'it' b'is' b'flanked' b'by' b'foliage' b'or' b'punctuation' b',' b'but' b'zinc' b',' b'Santa' b'(' b'<unk>' b')' b',' b'<unk>' b'(' b'or' b'allusion'
    b',' b'truth' b')' b'save' b'every' b'gamma' b'membrane' b'provided' b'by' b'it' b'<unk>' b'such' b'as' b'the' b'fine' b'origin' b'of' b'commending' b'access' b'on'
    b'touch' b'.' b'<eos>' b'sentences' b'are' b'generally' b'branched' b'.' b'Any' b'orbits' b'have' b'depends' b'to' b'the' b'door' b'and' b'the' b'nucleus' b'when' b'Gruffudd'
    b'(' b'<unk>' b')' b'has' b'lost' b'the' b'Gaza' b'Coast' b'\xe2\x80\x99' b'universe' b'so' b'cut' b'on' b'them' b'on' b'a' b'decree' b';' b'it' b'preferred'
    b'a' b'answer' b'and' b'transmitted' b'for' b'a' b'permit' b'can' b'be' b'Bocks' b',' b'they' b'will' b'wish' b'to' b'secure' b'back' b'between' b'their' b'ball'
    b',' b'when' b'their' b'main' b'finger' b'or' b'head' b'Chopra' b'found' b'.' b'Another' b'marble' b'skeletons' b'bringing' b'radiates' b'in' b'a' b'annual' b'single' b'uncertainty'
    b',' b'with' b'attracting' b'spawning' b'burn' b'trees' b'(' b'partly' b'grain' b')' b'.' b'<eos>' b'To' b'ensure' b',' b'S.' b'Bandicoot' b'often' b'acknowledged' b'larger'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 240.6
    loss: 5.168
    elapsed time (seconds): 164.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  49.348 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
