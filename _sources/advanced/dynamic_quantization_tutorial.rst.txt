.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'dates' b'.' b'Heavy' b'did' b'not' b'indicate' b'that' b'"' b'Released' b'it' b'requires' b'less' b'a' b'full' b'two' b'octaves' b'(' b'<unk>' b'<unk>' b'"'
    b')' b'.' b'The' b'Valuable' b'Labour' b'Race' b'was' b'released' b'in' b'1914' b'and' b'B' b'Benigno' b'.' b'As' b'a' b'replacement' b'after' b'the' b'discovery'
    b'of' b'his' b'foundation' b'three' b'years' b'they' b'started' b'<unk>' b',' b'"' b'<unk>' b'"' b'promote' b'a' b'single' b'female' b',' b'9' b'years' b'set'
    b'down' b'each' b'other' b'.' b'The' b'draft' b'1945' b'closed' b'with' b'each' b'date' b',' b'but' b'is' b'watching' b'as' b'an' b'creative' b'word' b'by'
    b'Mycological' b'Erich' b'is' b'ready' b'to' b'comment' b'up' b'to' b'organized' b'(' b'43' b'\xc2\xb0' b'F' b')' b',' b'and' b'he' b'would' b'rather' b'associate'
    b'when' b'elliptical' b'mean' b'for' b'69' b'years' b'later' b'.' b'The' b'projection' b'as' b'an' b'planet' b'is' b'so' b'lit' b',' b'such' b'as' b'is'
    b'one' b'of' b'the' b'male' b"'s" b'mother' b'.' b'The' b'Behind' b'examples' b'of' b'Constabulary' b'they' b'love' b'every' b'female' b';' b'he' b'enter' b'a'
    b'third' b'days' b',' b'but' b'wrote' b'bodies' b'or' b'curb' b'other' b'playing' b'his' b'pantheon' b'.' b'In' b'the' b'poem' b',' b'the' b'story' b'is'
    b'displayed' b'for' b'arriving' b'in' b'a' b'dark' b'ice' b',' b'with' b'a' b'circulation' b'on' b'about' b'4' b'minutes' b',' b'and' b'solved' b'the' b'night'
    b'for' b'his' b'large' b'consoles' b'.' b'A' b'male' b'observed' b'like' b'the' b'right' b'John' b'of' b'lever' b'.' b'Until' b'this' b'end' b'Common' b'and'
    b'Christian' b'activity' b',' b'they' b'have' b'an' b'co' b'@-@' b'beachhead' b',' b'<unk>' b'grouse' b'and' b'ritual' b'styles' b'(' b'which' b'they' b'may' b'be'
    b'eventually' b'partners' b'or' b'served' b'as' b'it' b'is' b'for' b'thick' b'murder' b'being' b'.' b')' b'is' b'packed' b'where' b'Homer' b'and' b'Djedkare' b'are'
    b'oxidation' b'the' b'same' b'vessel' b'to' b'be' b'required' b'to' b'extend' b'well' b'.' b'It' b'amongst' b'their' b'wings' b'where' b'they' b'were' b'moved' b'to'
    b'extensive' b'splitting' b'as' b'reunite' b'with' b'audience' b'.' b'<eos>' b'The' b'most' b'experienced' b'evidence' b'of' b'flightless' b'@-@' b'like' b',' b'that' b'of' b'a'
    b'bomb' b'involving' b'his' b'offspring' b'of' b'a' b'agent' b'and' b'then' b'hollow' b'severe' b'disorders' b'.' b'As' b'the' b'barn' b'of' b'feeding' b'associated' b'is'
    b'some' b'dramatic' b'<unk>' b',' b'its' b'<unk>' b'(' b'TBSA' b"'s" b'head' b')' b'filmed' b'him' b'sniping' b',' b'as' b'its' b'generous' b'difference' b'alone'
    b'and' b'quickly' b'successful' b'=' b'goats' b'distance' b'their' b'primary' b'Egyptologist' b'!' b'for' b'gaining' b'him' b'having' b'artificial' b'Carpenter' b',' b'when' b'<unk>' b'quinine'
    b'might' b'be' b'searched' b'so' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'While' b'they' b'think' b'that' b'a' b'claim'
    b'of' b'audiences' b'must' b'be' b'asked' b'at' b'diversity' b',' b'there' b'are' b'large' b'moderate' b'calls' b'of' b'pilots' b'\xe2\x88\x92' b'or' b'so' b'on' b'the'
    b'ground' b'.' b'Though' b'and' b',' b'<unk>' b'are' b'still' b'positioned' b'that' b'he' b'was' b'virtually' b'visiting' b'other' b'islands' b',' b'bad' b'spots' b','
    b'tree' b'@-@' b'frequency' b'paradigm' b'by' b'more' b'armored' b'habitat' b'may' b'involve' b'his' b'stegosaurid' b'.' b'Furthermore' b',' b'coupled' b',' b'however' b',' b'saints'
    b'are' b'bearing' b'somewhat' b'parodies' b'trajectory' b'to' b'run' b'feet' b'in' b'direct' b',' b'certainly' b'where' b'easily' b'<unk>' b'.' b'In' b'areas' b',' b'other'
    b'birds' b'remain' b'down' b'birds' b'.' b'However' b',' b'common' b'starlings' b'are' b'cold' b'<unk>' b'factories' b'by' b'Elton' b'Emeli' b'.' b'Store' b'with' b'parents'
    b'heavier' b'Eurasian' b',' b'mats' b'@-@' b'bass' b',' b'flax' b',' b'framing' b',' b'scientific' b',' b'found' b',' b'odor' b',' b'and' b'background' b'only'
    b'.' b'Rarely' b',' b'they' b'are' b'neglected' b'to' b'have' b'fewer' b'different' b'distinctive' b'patrols' b',' b'which' b'suggest' b'to' b'food' b'if' b'they' b'were'
    b'.' b'<unk>' b'form' b'an' b'face' b'which' b'laid' b'nearly' b'in' b'the' b'Dawn' b'shell' b'may' b'be' b'dark' b'to' b'other' b'cedars' b':' b'the'
    b'village' b'lend' b'in' b'parking' b',' b'room' b'and' b'starting' b'directly' b'\xe2\x80\x94' b'nesting' b'cultivation' b'is' b'to' b'achieve' b'enough' b',' b'judgment' b'around' b'that'
    b'the' b'male' b'has' b'"' b'no' b'dances' b'with' b'her' b'<unk>' b',' b'shield' b'and' b'the' b'1390' b'midline' b',' b'arguing' b'we' b'do' b'not'
    b'succeed' b'touch' b'a' b'taste' b'in' b'senior' b'places' b'"' b'.' b'For' b'example' b'at' b'a' b'height' b'of' b'different' b'parts' b'on' b'Iguanodon' b','
    b'this' b'species' b'could' b'be' b'needed' b'to' b'attract' b'each' b'of' b'us' b',' b'without' b'their' b'mass' b',' b'when' b'they' b'may' b'act' b'.'
    b'When' b'they' b'were' b'distinguished' b'by' b'effect' b',' b'they' b'are' b'locally' b'able' b'to' b'be' b'true' b'from' b'a' b'suitable' b'way' b'other' b'hosts'
    b'of' b'constructing' b'monitoring' b'factors' b'.' b'<eos>' b'Prior' b'to' b'this' b'mode' b',' b'in' b'February' b'of' b'bearings' b',' b'a' b'500' b'@-@' b'game'
    b'story' b'expanded' b'to' b'85' b'\xe2\x80\x93' b'2' b'@.@' b'9' b'million' b'(' b'5' b'@.@' b'7' b'in' b')' b'diameter' b',' b'but' b'it' b'is'
    b'maximum' b'(' b'5' b'@.@' b'40' b'%' b'of' b'buying' b'females' b')' b',' b'and' b'as' b'perished' b'in' b'a' b'other' b'successful' b'head' b','
    b'his' b'<unk>' b'can' b'be' b'lower' b',' b'so' b'England' b'represents' b'them' b'\xe2\x82\xac' b',' b'known' b'as' b'direction' b'.' b'Similarly' b',' b'they' b'are'
    b'recorded' b'as' b'this' b'unlikely' b'dark' b'appearance' b',' b'as' b'it' b'it' b'is' b'missing' b'by' b'tea' b'products' b'from' b'a' b'village' b'between' b'ABC'
    b'(' b'and' b'Jubba' b')' b'.' b'A' b'190' b'@-@' b'frequency' b'is' b'usually' b'used' b'as' b'insects' b',' b'due' b'to' b'black' b'microscopy' b'.'
    b'Seeing' b'nocturnal' b'bodies' b',' b'enters' b'triple' b'associations' b':' b'Crisis' b'(' b'<unk>' b';' b'cellular' b'<unk>' b'or' b'238' b'/' b'Iberia' b')' b'lobbying'
    b',' b'or' b'this' b'plan' b'thick' b',' b'and' b'they' b'may' b'rely' b'in' b'graced' b'forests' b'or' b'just' b'notice' b'by' b'lightning' b'another' b'narrow'
    b'behaviour' b'.' b'When' b'they' b'feed' b'greater' b'plumage' b'towards' b'540' b'tribes' b'during' b'different' b'1935' b',' b'they' b'survived' b'their' b'physical' b'tree' b'.'
    b'Common' b'males' b'are' b'facing' b'predators' b'around' b'the' b'plumage' b'of' b'namely' b'swing' b'their' b'genius' b'.' b'<eos>' b'Because' b'any' b'two' b'are' b'well'
    b'million' b'but' b'recorded' b'round' b'in' b'stoppage' b',' b'they' b'will' b'be' b'monitored' b'if' b'they' b'Tomasevich' b'the' b'physical' b'round' b'.' b'<eos>' b'In'
    b'the' b'starling' b',' b'they' b'are' b'languid' b'.' b'W.' b'oxide' b'is' b'apparent' b'by' b'But' b'HIV' b'desires' b'is' b'<unk>' b'or' b'even' b'rough'
    b'seasonal' b'.' b'However' b',' b'they' b'find' b'them' b',' b'so' b'condom' b'they' b'are' b'supported' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Countries' b'='
    b'=' b'<eos>' b'<eos>' b'The' b'common' b'starling' b',' b'Amjad' b',' b'represents' b'Nice' b',' b'is' b'absent' b'with' b'poets' b',' b'before' b'this' b'species'
    b'is' b'as' b'they' b'possess' b'going' b'to' b'provide' b'water' b'prominence' b'.' b'As' b'diseases' b'or' b'Melt' b'societal' b',' b'they' b'are' b'thought' b'to'
    b'have' b'standardised' b'two' b'or' b'insects' b'.' b'flowers' b'were' b'often' b'mentioned' b'from' b'preparing' b'of' b'anything' b'fully' b'more' b'than' b'a' b'step' b'.'
    b'It' b'may' b'be' b'subject' b'to' b'host' b',' b'forming' b'reddish' b',' b'and' b'Meilani' b'contaminated' b'.' b'High' b'features' b'be' b'intended' b'to' b'avoid'
    b'speed' b',' b'although' b'they' b'either' b'learned' b'for' b'them' b'to' b'be' b'<unk>' b'in' b'its' b'way' b'of' b'food' b'.' b'In' b'1852' b','
    b'local' b'inner' b'starlings' b'such' b'as' b'chaotic' b'decentralization' b'are' b'not' b'docile' b'.' b'In' b'these' b'areas' b',' b'specifically' b'showing' b'and' b'white' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 222.9
    loss: 5.168
    elapsed time (seconds): 157.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  25.326 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
