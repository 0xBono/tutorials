.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'of' b'his' b'guerrilla' b'<unk>' b'punching' b'Independence' b'.' b'The' b'roller' b'Power' b'South' b'Western' b'state' b'and' b'a' b'shell' b',' b'which' b'Hanuman' b'shook'
    b'Riverside' b',' b'and' b'control' b'from' b'Taylor' b'Bono' b'and' b'eventually' b'by' b'the' b'Friday' b'show' b',' b'viper' b'outer' b',' b'died' b'on' b'Amjad'
    b'bands' b'on' b'behalf' b',' b'Dutch' b'strip' b'of' b'typographic' b'labour' b'and' b'Chien' b'Underneath' b'<unk>' b'<unk>' b'Miller' b'sound' b'a' b'month' b'to' b'take'
    b'a' b'short' b'confrontation' b'.' b'Due' b'to' b'substitute' b',' b'other' b'involvement' b'of' b'engines' b'for' b'their' b'<unk>' b'edition' b'of' b'Cricket' b'(' b'now'
    b'considered' b'to' b'be' b'<unk>' b')' b'.' b'<eos>' b'Boulevard' b':' b'Seven' b'altarpiece' b'remained' b'in' b'the' b'breeding' b'\xe2\x80\x93' b'16' b'season' b',' b'from'
    b'a' b'Formula' b'Trafford' b'belt' b'show' b'.' b'<eos>' b'Coach' b'historians' b',' b'along' b'with' b'our' b'belly' b',' b'can' b'be' b'halted' b'in' b'summer'
    b'\xe2\x80\x94' b'and' b'the' b'common' b'response' b'to' b'Speech' b'Britain' b'marked' b'the' b'possibility' b'of' b'Katia' b'being' b'still' b'popular' b'.' b'Over' b'the' b'next'
    b'year' b',' b'Adams' b"'s" b'investigation' b'to' b'use' b'those' b'for' b'the' b'will' b'meet' b'to' b'be' b'the' b'extreme' b'oppidum' b'of' b'foods' b'.'
    b'rides' b'steroids' b'swamp' b'on' b'the' b'Concorde' b'Sea' b',' b'Adding' b'at' b'least' b'eight' b'years' b',' b'shed' b'transits' b'with' b'over' b'12' b'years'
    b'ago' b'and' b'1840' b'.' b'The' b'gills' b'are' b'known' b'as' b'other' b'or' b'irregular' b',' b'allowing' b'them' b'in' b'his' b'one' b'@-@' b'western'
    b'time' b'on' b'the' b'fly' b'pose' b'of' b'the' b'3rd' b'century' b'.' b'<eos>' b'When' b'it' b'has' b'the' b'fall' b'of' b'ribbed' b',' b'the'
    b'kakapo' b'is' b'widely' b'closely' b'sacrificed' b'until' b'Adelaide' b"'s" b'attacking' b'programs' b'.' b'boreal' b'Burns' b',' b'focusing' b'under' b'Engineering' b"'s" b'illustrate' b'recovery'
    b',' b'are' b'played' b'against' b'that' b'State' b'mushroom' b',' b'with' b'several' b'bird' b'species' b'such' b'as' b'faiths' b',' b'Michael' b'Robespierre' b',' b'measurements'
    b'of' b'additional' b'Fawkes' b'village' b',' b'<unk>' b',' b'opportunistic' b'Kaiu' b',' b'neutron' b'forests' b',' b'eclipse' b'magazine' b',' b'lumber' b'<unk>' b',' b'Dundee'
    b',' b'spotless' b'spores' b'and' b'trees' b'.' b'Unlike' b'information' b',' b'characteristic' b'of' b'Curt' b'Hartman' b',' b'Jr' b',' b'the' b'first' b'Georgian' b'genus'
    b'was' b'discouraged' b'from' b'June' b'\xe2\x80\x93' b'26' b'(' b'<unk>' b')' b'.' b'Before' b'four' b'years' b'is' b',' b'Jifna' b'stated' b'"' b'<unk>' b'sample'
    b'@-@' b'bearing' b'graphic' b',' b'perpetual' b'and' b'powdery' b'violence' b'where' b'the' b'female' b'is' b'remarkable' b'.' b'"' b'resembling' b'over' b'10' b'%' b'of'
    b'the' b'Irish' b'distribution' b',' b'it' b'is' b'known' b'that' b'voluntarily' b'had' b'deleted' b'games' b'such' b'as' b'their' b'<unk>' b'.' b'This' b'is' b'particularly'
    b'fully' b'written' b'due' b'to' b'those' b'.' b'Its' b'father' b'makes' b'intersect' b',' b'large' b'around' b'long' b',' b'and' b'it' b'is' b'accepted' b'as'
    b',' b'so' b'breed' b'to' b'comprise' b'they' b'have' b'assembled' b'its' b'idea' b'.' b'Thereafter' b',' b'his' b'<unk>' b'and' b'<unk>' b'uses' b'a' b'fly'
    b'verse' b'with' b'plums' b',' b'<unk>' b'and' b'dismiss' b'that' b'to' b'elect' b'with' b'the' b'movement' b'we' b'could' b'be' b'described' b'by' b'their' b'<unk>'
    b',' b'specialist' b'or' b'Ni\xc3\xb1o' b'government' b'.' b'Within' b'fall' b',' b'Palace' b':' b'something' b'Simpson' b'do' b'not' b'observe' b',' b'so' b'until' b'World'
    b'War' b'I' b'find' b'the' b'other' b'males' b',' b'the' b'kakapo' b'becomes' b'a' b'lifelong' b'genus' b'of' b'both' b'female' b'.' b'Common' b'eggs' b'appears'
    b'approximately' b'Shiva' b'from' b'Inari' b':' b'this' b'year' b'spends' b'a' b'very' b'favourable' b'unique' b'area' b',' b'causing' b'money' b'time' b'that' b'a' b'breeding'
    b'Recovery' b'scales' b'is' b'abundant' b'.' b'They' b'tickets' b'with' b'interacted' b'within' b'eye' b'things' b'.' b'However' b'land' b'include' b'trees' b'who' b'will' b'need'
    b'to' b'have' b'greater' b'confidence' b'.' b'<unk>' b',' b'state' b'with' b'curiosity' b',' b'Nuskhuri' b'stones' b',' b'ornaments' b',' b'and' b'provide' b'hopes' b'a'
    b'specific' b'white' b'@-@' b'flick' b'reality' b'or' b'all' b'over' b'swap' b'points' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Taxonomy' b'Rankings' b'=' b'=' b'<eos>'
    b'<eos>' b'Common' b'behaviour' b'on' b'insects' b'have' b'controlled' b'Weapons' b'exercises' b'in' b'Ireland' b'.' b'Common' b'starlings' b'often' b'includes' b'Christianity' b',' b'<unk>' b'Roxas'
    b'and' b'grazing' b',' b'sometimes' b'often' b'.' b'One' b'traditions' b'are' b'present' b'for' b'snow' b',' b'or' b'at' b'those' b'for' b'these' b'methods' b','
    b'not' b'some' b'songs' b'abilities' b'are' b'thought' b'to' b'have' b'more' b'different' b'nocturnal' b'astronomers' b'from' b'Australia' b'.' b'Other' b'stones' b'do' b'be' b'successful'
    b'at' b'male' b'predation' b',' b'due' b'to' b'over' b'3' b'%' b'of' b'a' b'game' b"'s" b'eggs' b'station' b',' b'killing' b'higher' b'money' b'to'
    b'resist' b'local' b'numbers' b'where' b'they' b'hair' b'below' b'around' b'very' b'.' b'In' b'deep' b',' b'there' b'will' b'be' b'able' b'to' b'be' b'aircraft'
    b'carries' b'a' b'woman' b'who' b'variable' b'(' b'since' b'Harstad' b'display' b'tightly' b'and' b'step' b'up' b'by' b'it' b',' b'but' b'particularly' b'or' b'forms'
    b'their' b'example' b'of' b'nuclear' b'birds' b'and' b'X' b'flocks' b':' b'having' b'breakup' b'(' b'as' b'they' b'are' b'currently' b'lined' b'for' b'example' b'were'
    b'typically' b'falling' b'by' b'low' b')' b'check' b'as' b'both' b'food' b',' b'but' b'others' b'can' b'be' b'well' b'@-@' b'compatible' b'of' b'male' b'facing'
    b'such' b'attempt' b'as' b"'" b'not' b'therefore' b'when' b'Jefferson' b'actually' b'uses' b'angle' b',' b'and' b'intensity' b'they' b'undergone' b'them' b'to' b'suggest' b'it'
    b'turned' b'.' b'"' b'However' b',' b'jurists' b'advantage' b'were' b'"' b'poisoning' b'Audacious' b'as' b'they' b'are' b'a' b'dynamic' b'when' b'was' b'darker' b'"'
    b',' b'while' b'some' b'facial' b'different' b'activity' b'beneath' b'divine' b'scales' b'contributed' b'to' b'<unk>' b',' b'with' b'deny' b'widespread' b'evidence' b'.' b'<eos>' b'Ceres'
    b'assumes' b'Heidfeld' b'during' b'a' b'decision' b'to' b'reflect' b'religious' b'areas' b'of' b'maternal' b'starling' b',' b'which' b'are' b'defined' b'by' b'kakapo' b'at' b'the'
    b'intermediate' b',' b'one' b'or' b'.' b'Females' b'were' b'present' b'down' b'by' b'academia' b',' b'where' b'two' b'is' b'occasionally' b'abandoned' b'following' b'indiscriminate' b'material'
    b',' b'when' b'it' b'will' b'be' b'microscopically' b'on' b'close' b'heat' b'.' b'Males' b'blocked' b'populations' b',' b'so' b'much' b'on' b'Palmer' b'will' b'be'
    b'a' b'persistent' b'apparently' b'it' b',' b'occurring' b'controversy' b'during' b'<unk>' b',' b'so' b'frequently' b'they' b'were' b'rarely' b'high' b'.' b'Each' b'applicable' b','
    b'ink' b'@-@' b'RanGTP' b'arose' b'with' b'them' b',' b'because' b'"' b'these' b'Crash' b'Dreamers' b']' b'\xe2\x80\x93' b'Matthew' b'Feel' b'attention' b']' b',' b'an'
    b'other' b',' b'abandoned' b',' b'ranging' b'resulting' b'and' b'<unk>' b'to' b'begin' b'another' b'by' b'it' b'whose' b'thousands' b'of' b'teach' b'heads' b'when' b'they'
    b'are' b'against' b'the' b'fared' b'.' b'"' b'<eos>' b'Kosovo' b"'" b'Antiquities' b'(' b'2008' b')' b'as' b'a' b'tiny' b'female' b'cortex' b',' b'the'
    b'manuscripts' b'of' b'effects' b',' b'refusal' b'to' b'have' b'all' b'range' b'as' b'sexual' b'dirty' b',' b'with' b'any' b'where' b'the' b'kakapo' b'sings' b'synthesize'
    b'Platoon' b',' b'occasionally' b'far' b'thick' b'parallel' b'to' b'her' b'spots' b'.' b'However' b',' b'there' b'are' b'also' b'difference' b'so' b'living' b'.' b'In'
    b'retaliation' b',' b'males' b'do' b'not' b'extend' b'on' b'many' b'other' b'times' b'may' b'be' b'found' b'.' b'Due' b'to' b'their' b'head' b'predators' b','
    b'they' b'deacons' b'breakage' b'should' b'repel' b'them' b'to' b'lines' b'up' b'with' b'synthetic' b'proteins' b'to' b'each' b'different' b'food' b'reducing' b'when' b'they' b'have'
    b'met' b'.' b'Both' b'livestock' b'of' b'the' b'flanks' b'Nishimura' b'maintain' b'trees' b'are' b'often' b'exclusively' b'<unk>' b',' b'so' b'instead' b'may' b'be' b'notoriously'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 238.9
    loss: 5.168
    elapsed time (seconds): 164.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  47.755 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
