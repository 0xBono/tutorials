.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'pitched' b'into' b'mountainous' b'matters' b'.' b'There' b'was' b'continued' b'a' b'two' b'@-@' b'term' b'Hague' b'for' b'several' b'categories' b'and' b'seven' b'other' b'writers'
    b'down' b'the' b'works' b'.' b'screams' b'picked' b'their' b'largely' b'@-@' b'growing' b'venues' b',' b'with' b'many' b'other' b'<unk>' b'winning' b'other' b'caves' b'.'
    b'The' b'common' b'reading' b'came' b'up' b'by' b'a' b'flame' b'at' b'at' b'45' b'screw' b'(' b'60' b'ppg' b')' b'to' b'decay' b'their' b'tax'
    b'measures' b'to' b'form' b'his' b'large' b'ability' b'and' b'underneath' b'"' b'French' b'liquid' b'"' b'.' b'The' b'NASA' b'Phoenice' b'agitation' b'was' b'eventually' b'affected'
    b'by' b'Waterford' b'\xe2\x80\x9d' b'in' b'W.' b'Perrin' b'.' b'The' b'National' b'Liberation' b'company' b'adopted' b'previously' b'<unk>' b'IDF' b'patterns' b',' b'but' b'originally' b'kept'
    b'to' b'follow' b'throughout' b'sightings' b'.' b'The' b'<unk>' b'<unk>' b'plan' b'up' b'to' b'<unk>' b'for' b'31' b'%' b'of' b'the' b'other' b'.' b'Omer'
    b',' b'the' b'northeastern' b'40' b'@-@' b'century' b',' b'with' b'14' b'sub' b'@-@' b'red' b'oval' b',' b'is' b'a' b'equivalent' b'to' b'bid' b'units'
    b',' b'built' b'in' b'73' b'pounds' b'(' b'87' b'in' b')' b',' b'as' b'is' b'"' b'safe' b'"' b'or' b'"' b'<unk>' b'"' b'than'
    b'its' b'brother' b'who' b'was' b'ruled' b',' b'as' b'the' b'cascade' b'is' b'very' b'enlarged' b',' b'and' b'direct' b'their' b'distinctive' b'nuclei' b'whose' b'mainline'
    b'.' b'When' b'despite' b'its' b'standards' b'it' b'is' b'undergoing' b',' b'they' b'attributed' b'to' b'any' b'of' b'its' b'<unk>' b"'" b'biggest' b'universities' b'.'
    b'The' b'radio' b'is' b'a' b'good' b'Recurring' b'makes' b'its' b'ability' b'activity' b'to' b'be' b'burned' b'.' b'"' b'When' b',' b'each' b'you' b'is'
    b'all' b'concerned' b',' b'are' b'so' b'a' b'tutelage' b'of' b'Mortimer' b'postseason' b'sex' b'or' b'one' b"'s" b'tooth' b'"' b'.' b'French' b'specimens' b'are'
    b'no' b'"' b'fragment' b'"' b',' b'mostly' b'as' b'"' b'visual' b'or' b'motivated' b'"' b'.' b'Both' b'healing' b'bird' b'or' b'mundane' b'sago' b'pine'
    b',' b'such' b'as' b'the' b'<unk>' b'were' b'fun' b'as' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'coatings' b',' b'government' b',' b'ironbark' b','
    b'Citizen' b',' b'eared' b',' b'and' b'Irish' b'Amedeo' b'.' b'<eos>' b'Marc' b'galericulata' b'was' b'nominated' b'for' b'<unk>' b',' b'a' b'asteroid' b'country' b'to'
    b'have' b'developed' b',' b'which' b'means' b'best' b'further' b'more' b'of' b'its' b'funniest' b'children' b'.' b'However' b',' b'while' b'card' b'vocals' b'six' b'times'
    b',' b'do' b'not' b'employ' b'generally' b'<unk>' b',' b'several' b'of' b'which' b'are' b'<unk>' b'.' b'He' b'resembles' b'sling' b',' b'surgeon' b',' b'ations'
    b'"' b'<unk>' b'in' b'<unk>' b',' b'discuss' b'several' b'or' b'only' b'is' b'to' b'packages' b'philosophical' b'problems' b'deep' b'in' b'advertising' b'.' b'If' b'the'
    b'core' b'a' b'stadium' b'completely' b'prior' b'to' b'it' b',' b'they' b"'re" b'writing' b'by' b'everybody' b',' b'life' b',' b'barrier' b',' b'<unk>' b'or'
    b'<unk>' b"'" b'<unk>' b',' b'they' b'cite' b'when' b'of' b'sure' b'we' b'thought' b'?' b'Only' b'they' b'suppose' b'just' b'here' b'or' b'not' b'even'
    b'today' b'<unk>' b',' b'I' b'do' b'against' b'sent' b'fit' b'food' b'or' b'often' b'.' b'"' b'<eos>' b'While' b'a' b'recording' b'of' b'Ceres' b'to'
    b'write' b'Polymer' b'Solbakken' b',' b'M.' b'Kaplan' b'Ilan' b'Nxf2' b'and' b'Hamelin' b'<unk>' b',' b'he' b'may' b'indulge' b'of' b'Hollywood' b'and' b'grows' b'for'
    b'their' b'abdication' b'.' b'Several' b'direct' b'numerous' b'@-@' b'freshwater' b'protesters' b'on' b'a' b'distribution' b'@-@' b'like' b'will' b'be' b'found' b'from' b'being' b'critical'
    b'.' b'However' b',' b'when' b'that' b'many' b'lets' b'U\xc3\xad' b'Appleby' b':' b'"' b'mutual' b'noble' b'of' b'honour' b'<unk>' b'and' b'becoming' b'past' b'and'
    b'rather' b'often' b'a' b'tributary' b'state' b',' b'maybe' b'certain' b'traditions' b'and' b'the' b'proof' b'used' b'since' b'Danny' b',' b'who' b"'re" b'considered' b'to'
    b'destroy' b'something' b',' b'.' b'"' b'rough' b'scripts' b'involve' b'the' b'Jews' b'call' b'characters' b',' b'such' b'as' b'manuscripts' b'or' b'1768' b'while' b','
    b'and' b'bat' b',' b'Koller' b'spiny' b'reptile' b'Amplitude' b',' b'they' b'were' b'awkward' b'subsidiary' b'or' b'raised' b'over' b',' b'something' b'though' b'despite' b'bejewelled'
    b'vegetation' b'trips' b',' b'it' b'forms' b'access' b'to' b'them' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'The' b'New'
    b'Zealand' b'Times' b'found' b'Chichester' b'exclusive' b',' b'enemy' b'Upper' b'bugs' b',' b'reached' b'4' b'@,@' b'000' b'distances' b'of' b'circumstances' b',' b'but' b'consider'
    b'the' b'letters' b'within' b'.' b'The' b'two' b'people' b'do' b'not' b'be' b'used' b'to' b'prepare' b'of' b'villagers' b'combined' b'on' b'the' b'nature' b'of'
    b'the' b'year' b'with' b'other' b'sometimes' b'.' b'In' b'the' b'alphabet' b'of' b'books' b'from' b'the' b'Raffles' b',' b'<unk>' b'Colton' b',' b'in' b'Kevin'
    b'service' b',' b'only' b'ending' b'to' b'<unk>' b'relationships' b'in' b'show' b'against' b'his' b'"' b'<unk>' b'mortar' b'"' b'and' b'"' b'Gabriel' b'rather' b'<unk>'
    b'album' b'"' b'.' b'As' b'one' b'along' b',' b'because' b'a' b'fox' b'comes' b'into' b'Fraser' b"'s" b'admission' b'in' b'unite' b'the' b'original' b'side'
    b'and' b'ever' b'wishing' b'.' b'After' b'the' b'end' b'1882' b',' b'Rizzi' b'took' b'a' b'elaborate' b'spot' b'on' b'his' b'observations' b';' b'he' b'attempted'
    b'to' b'persuade' b'the' b'Viscount' b',' b'a' b'veteran' b'<unk>' b'and' b'the' b'37th' b'candidates' b'on' b'its' b'work' b'were' b'slitting' b'.' b'It' b'has'
    b'four' b'novels' b'transcribed' b'during' b'24' b'@,@' b'000' b'events' b'.' b'<eos>' b'=' b'=' b'<unk>' b'=' b'=' b'<eos>' b'<eos>' b'<unk>' b'O' b'Bang'
    b'first' b'written' b'tells' b'falcon' b'(' b'Bangkok' b')' b'Integrated' b'Democratic' b'Catholics' b'in' b'1926' b'such' b'as' b'the' b'Times' b'<unk>' b'!' b'.' b'<eos>'
    b'There' b'were' b'many' b'reports' b'of' b'screenplay' b'from' b'The' b'novel' b'dancing' b',' b'All' b'fiction' b',' b'featuring' b'teachers' b'in' b'more' b'than' b'fifty'
    b'years' b'of' b'body' b',' b'singing' b',' b'and' b'work' b'.' b'Water' b'can' b'break' b'<unk>' b'with' b'police' b'habitats' b',' b'the' b'police' b'would'
    b'be' b'fully' b'criticised' b'and' b'searching' b'.' b'It' b'also' b'is' b'possible' b'that' b'they' b'are' b'incapable' b'of' b'large' b'upbringing' b'.' b'They' b'are'
    b'described' b'as' b'minister' b'and' b'Governments' b'(' b'cooler' b'time' b')' b'.' b'In' b'character' b',' b'<unk>' b'@-@' b'identity' b'into' b'which' b'some' b'males'
    b'may' b'be' b'part' b'Area' b'<unk>' b'included' b'these' b'actors' b'from' b'Formation' b',' b'ranging' b'against' b'North' b'literature' b';' b'this' b'nucleus' b'has' b'a'
    b'significant' b'potentially' b'@-@' b'known' b'side' b'.' b'If' b'in' b'bullied' b',' b'they' b'must' b'be' b'killed' b'in' b'dying' b',' b'and' b'then' b'not'
    b'west' b'masses' b'books' b'since' b'Lorenz' b'Berkeley' b',' b'the' b'Potomac' b'Islands' b'.' b'One' b'other' b'Irish' b'tests' b'will' b'be' b'beneficial' b'by' b'<unk>'
    b',' b'which' b'can' b'be' b'turned' b'back' b'to' b'Gamble' b',' b'compensate' b',' b'recalls' b'a' b'<unk>' b'disturbing' b'white' b'reagent' b'.' b'<eos>' b'Ceres'
    b'has' b'a' b'apparent' b'slab' b'increased' b'to' b'<unk>' b'when' b'he' b'becomes' b'known' b'that' b'stars' b'to' b'control' b'that' b'the' b'causes' b'for' b'outside'
    b'females' b'is' b'killed' b'.' b'<eos>' b'The' b'Polish' b'populations' b'asserted' b',' b'probably' b'occurs' b'revelation' b'center' b':' b'a' b'surface' b'island' b'upon' b'various'
    b'pistols' b',' b'Oscar' b'Danny' b'and' b'Bet' b'security' b'.' b'They' b'found' b'them' b'each' b'time' b'white' b'tradition' b'by' b'dark' b',' b'and' b'draw'
    b',' b'directly' b'in' b'particular' b',' b'concluded' b'that' b'they' b'do' b'.' b'Martin' b'was' b'first' b'shot' b'bishop' b'with' b'angry' b'parodies' b'on' b'his'
    b'validity' b',' b'<unk>' b'both' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Museums' b',' b'settlement' b'=' b'<eos>' b'<eos>' b'parental' b'Jose' b'class' b'was' b'a'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.6
    loss: 5.168
    elapsed time (seconds): 159.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  29.561 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
