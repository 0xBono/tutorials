.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'wisdom' b'featuring' b'his' b'adopted' b'@-@' b'withdrawing' b'campaign' b'.' b'The' b'Wallabies' b"'" b'becoming' b'very' b'transmitted' b',' b'to' b'raise' b'their' b'behavior' b','
    b'they' b'are' b'<unk>' b';' b'they' b'contacted' b'a' b'common' b'consensus' b'history' b'of' b'Crusader' b'needed' b'.' b'Every' b'year' b'they' b'will' b'have' b'become'
    b'large' b'during' b'several' b'or' b'four' b'times' b',' b'during' b'the' b'first' b'white' b'and' b'highly' b'important' b'votes' b',' b'and' b'deserted' b'when' b'many'
    b'other' b'times' b'left' b'.' b'The' b'south' b'premarital' b'exact' b'gamma' b'character' b',' b'in' b'the' b'first' b'ten' b',' b'indicating' b'actually' b'allowing' b'it'
    b'to' b'be' b'encouraged' b'Erie' b'Xavier' b'as' b'Venus' b'and' b'by' b'regulator' b'.' b'Then' b'to' b'Ozploitation' b'headquarters' b',' b'Motoko' b'see' b'the' b'fact'
    b'and' b'Sun' b'Molly' b'practised' b'the' b'new' b'situation' b'into' b'their' b'star' b'.' b'As' b'weapons' b'prevalent' b'about' b'scrapping' b',' b'scholars' b'installed' b'the'
    b'FOCA' b'as' b'a' b'planet' b'against' b'<unk>' b'Ranulf' b'and' b'"' b'dangerous' b'sweet' b'"' b'.' b'In' b'1879' b',' b'the' b'media' b"'s" b'next'
    b'autobiography' b'followed' b'her' b'four' b'years' b',' b'with' b'of' b'Damietta' b'in' b'hero' b'<eos>' b'<eos>' b'=' b'=' b'Project' b'reception' b'=' b'=' b'<eos>'
    b'<eos>' b'In' b'4' b'January' b'2015' b'of' b'the' b'death' b'of' b'Madhvacharya' b'was' b'convicted' b'of' b'the' b'Boat' b'War' b'of' b'Natural' b'Forest' b','
    b'Joint' b'History' b'Kurt' b'Army' b'Ibotenic' b'Nights' b',' b'a' b'series' b'of' b'a' b'men' b'Ante' b'Amla\xc3\xadb' b',' b'a' b'"' b'for' b'705' b'Network'
    b'fringe' b'in' b'Rise' b'"' b'\xe2\x80\x94' b'and' b'the' b'1874' b'governments' b'would' b'begin' b'so' b'significantly' b'in' b'case' b'.' b'Its' b'12th' b'marketing' b'demographic'
    b'likened' b'for' b'series' b'of' b'Roman' b'Scientology' b'.' b'The' b'sensual' b'language' b'soundtrack' b'hampered' b'elongated' b',' b'<unk>' b',' b'or' b'from' b'to' b'poor'
    b',' b'seeks' b'it' b'that' b'Western' b'energy' b'research' b'is' b'not' b'golden' b'.' b'The' b'Crimson' b'DS' b'(' b'<unk>' b')' b'is' b'a' b'driving'
    b'semblance' b'to' b'Adults' b'360' b'%' b'of' b'them' b'known' b'as' b'Humpty' b"'Malley" b',' b'and' b'the' b'surrounding' b'largest' b'forms' b'removed' b'from' b'cooking'
    b'.' b'He' b'Excavation' b'another' b'decade' b'until' b'his' b'premium' b',' b'but' b'they' b"'ve" b'continued' b'to' b'gain' b'himself' b'of' b'bad' b',' b'during'
    b'other' b'forms' b'after' b'stealing' b'Blues' b'game' b',' b'poor' b',' b'<unk>' b'and' b'construct' b'.' b'<eos>' b'The' b'common' b'Democratic' b'Survey' b'of' b'Public'
    b'History' b'showed' b'"' b'You' b'"' b'.' b'<unk>' b'<unk>' b'died' b'in' b'<unk>' b',' b'and' b'said' b'that' b'they' b'"' b'are' b'a' b'sense'
    b'of' b'parts' b'of' b'a' b'asteroid' b'church' b'"' b'.' b'In' b'1681' b',' b'the' b'video' b'and' b'nasals' b'travelers' b'represent' b'the' b'Lone' b'Robe'
    b',' b'Allah' b',' b'as' b'the' b'old' b'suggestion' b'class' b'.' b'During' b'a' b'new' b'appearance' b'of' b'wordplay' b'made' b'plans' b',' b'with' b'countries'
    b',' b'colored' b'forests' b',' b'print' b'even' b'<unk>' b',' b'and' b'interpreted' b'human' b'deer' b'in' b'non' b'@-@' b'tourism' b',' b'and' b'between' b'Waddell'
    b'.' b'Its' b'<unk>' b'platform' b'has' b'both' b'evolved' b'to' b'be' b'used' b'.' b'The' b'kakapo' b'is' b'found' b'by' b'the' b'Romantic' b'<unk>' b'dark'
    b'works' b'of' b'a' b'female' b'contemporary' b'body' b'that' b'is' b'difficult' b'due' b'to' b'Charan' b'as' b'a' b'lovely' b'planet' b'and' b'the' b'mass' b'its'
    b'name' b'rather' b'Mumps' b'.' b'As' b'of' b'South' b'America' b',' b'when' b'his' b'head' b'objections' b'is' b'normally' b'decorations' b',' b'containing' b'Parry' b"'s"
    b'opinion' b',' b'they' b'were' b'stiff' b'to' b'be' b'darker' b'by' b'flightless' b'abilities' b'and' b'unlike' b'the' b'good' b'scripts' b'.' b'In' b'another' b'area'
    b'total' b'of' b'fish' b'is' b'thought' b'to' b'be' b'lifted' b'next' b'on' b'her' b'family' b'.' b'They' b'have' b'a' b'population' b'of' b'equal' b'@-@'
    b'distance' b'such' b'adaptations' b'and' b'its' b'form' b',' b'while' b'then' b'since' b'Telugu' b',' b'cycles' b'makes' b'<unk>' b'or' b'wiped' b'in' b'mythology' b'.'
    b'Like' b'these' b',' b'Ireland' b'flanked' b'the' b'definition' b'of' b'Venus' b',' b'preventing' b'her' b'to' b'arrive' b'its' b'involvement' b'forward' b'.' b'Stevens' b'Tong'
    b'lists' b'"' b'it' b'.' b'"' b'<eos>' b'Snow' b'McPherson' b'(' b'1948' b')' b"'s" b'acquisition' b'a' b'ratio' b'for' b'modern' b'guys' b'who' b'distributed'
    b'Petershagen' b';' b'the' b'word' b'of' b'nightingale' b'(' b'Matthew' b'I' b')' b';' b'he' b'died' b'the' b'marriage' b'by' b'<unk>' b'which' b'may' b'continue'
    b'to' b'full' b'researchers' b',' b'venues' b',' b'and' b'the' b'girl' b'.' b'Some' b'of' b'these' b'students' b'(' b'including' b'confident' b'out' b'of' b'common'
    b'artefacts' b')' b'were' b'thematically' b'a' b'decayed' b'Extinct' b'precedent' b'.' b'This' b'Hard' b'stronger' b'is' b'usually' b'doing' b'to' b'R\xc3\xa9union' b'.' b'Later' b','
    b'when' b'short' b'numbers' b'has' b'six' b'more' b'degrees' b',' b'it' b'seems' b'to' b'replicate' b'.' b'At' b'least' b'one' b'million' b'individuals' b'is' b'also'
    b'gregarious' b',' b'and' b'the' b'female' b'was' b'unprotected' b'to' b'rendezvous' b'.' b'Lady' b'asiaticus' b'may' b'be' b'made' b'to' b'be' b'identified' b'as' b'500'
    b'Way' b'or' b'attract' b'.' b'There' b'reporter' b'and' b'<unk>' b'<unk>' b'states' b'that' b'the' b'flattened' b'numbers' b'of' b'it' b'dominated' b'Viking' b'from' b'rat'
    b'or' b'burned' b'range' b'and' b'control' b'than' b'unlikely' b'a' b'fully' b'dramatic' b'sequence' b'than' b'soap' b'@-@' b'feet' b'Vatatzes' b'.' b'Opinions' b'minerals' b','
    b'portrayed' b'by' b'rioting' b'underground' b'medical' b'brown' b',' b'The' b'monopoly' b'occasionally' b'(' b'firing' b'as' b'some' b'or' b'argue' b'to' b'personnel' b')' b'Johanna'
    b'analysis' b'is' b'a' b'panel' b'of' b'100' b'.' b'(' b'43' b'\xe2\x80\x93' b'8' b'%' b')' b',' b'in' b'its' b'droppings' b'depicted' b'into' b'10'
    b'\xe2\x80\x93' b'11' b'to' b'4' b'\xe2\x80\x93' b'5' b'years' b',' b'trips' b'to' b'the' b'Earth' b'.' b'He' b'is' b'to' b'be' b'regarded' b'from' b'its'
    b'absence' b'"' b'Warner' b'for' b'an' b'aerobatics' b'<unk>' b'destroying' b'The' b'length' b'"' b'.' b'He' b'was' b'unjustly' b'hoped' b'be' b'called' b'up' b'as'
    b'she' b'sizes' b'in' b'the' b'<unk>' b'Weekly' b'<unk>' b'contributions' b',' b'<unk>' b'in' b'this' b'case' b',' b'<unk>' b'"' b'Valanginian' b'and' b"'ve" b'a'
    b'invitation' b'harmonies' b'to' b'give' b'itself' b'of' b'people' b'are' b'rare' b'.' b'"' b'<unk>' b'<unk>' b'favorably' b'punch' b'on' b'"' b'problems' b'"' b','
    b'probably' b'to' b'fill' b'its' b'snap' b'.' b'He' b'highlighted' b'snap' b',' b'without' b'the' b'images' b'selected' b'<unk>' b'maturation' b',' b'that' b'drive' b'noting'
    b'"' b'this' b'means' b'of' b'us' b'can' b'be' b'made' b'outside' b',' b'and' b'centric' b'capture' b'for' b'each' b'other' b'.' b'"' b'However' b','
    b'after' b'dawn' b'a' b'voice' b'of' b'2' b'miles' b'(' b'12' b'ha' b')' b'high' b'man' b',' b'the' b'virtue' b'of' b'Sitriuc' b'is' b'called'
    b'stories' b'of' b'Ceres' b'.' b'However' b',' b'female' b'behaviour' b'vary' b'between' b'Texas' b'and' b'early' b'grammarian' b'(' b'2006' b')' b'and' b'the' b'family'
    b'(' b'"' b'deep' b'"' b')' b'long' b'on' b'the' b'nonspecific' b'appearance' b'<unk>' b'lambei' b'and' b'pathways' b'by' b'dark' b'figures' b',' b'mainly' b'as'
    b'and' b'loud' b',' b'River' b'@-@' b'white' b',' b'Hoffmann' b'Krishna' b'and' b'blossom' b'(' b'Langhelle' b')' b',' b'changing' b'inn' b'and' b'animals' b'folding'
    b'reasoning' b',' b'and' b'his' b'component' b'then' b'consisted' b'apart' b';' b'they' b'adds' b'its' b'weight' b',' b'taking' b'up' b'a' b'sharp' b'core' b'with'
    b'their' b'head' b',' b'and' b'inappropriate' b'splinter' b'.' b'<eos>' b'forests' b'may' b'be' b'bought' b'as' b'they' b'spread' b'by' b'the' b'asteroid' b'expertise' b'.'
    b'This' b'makes' b'simply' b'her' b'cookery' b'efforts' b'to' b'be' b'(' b'also' b'owe' b'this' b'Helmet' b')' b'.' b'If' b'this' b'has' b'been' b'displayed'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 230.0
    loss: 5.168
    elapsed time (seconds): 158.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  33.773 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
