.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'with' b'being' b'able' b'to' b'be' b'"' b'referred' b'to' b'and' b"'s" b'excitement' b'"' b'.' b'<unk>' b'considers' b'because' b'of' b'the' b'other' b'folk'
    b',' b'Mock' b'suburbs' b'centres' b',' b'as' b'programmes' b'spends' b'an' b'pattern' b',' b'who' b'also' b'seek' b'them' b'affected' b'by' b'her' b'map' b','
    b'and' b'<unk>' b'possible' b'as' b'Anselm' b'had' b'.' b'While' b'auditioning' b'people' b'who' b'had' b'just' b'recently' b'done' b',' b'Hornung' b'began' b'from' b'in'
    b'1874' b'directly' b'differently' b'.' b'<eos>' b'peacekeeping' b'books' b'on' b',' b'beliefs' b'for' b'relatives' b',' b'class' b',' b'and' b'other' b'cities' b'are' b'introduced'
    b'for' b'<unk>' b',' b'taking' b'over' b'even' b'local' b'duties' b'.' b'They' b'choose' b'the' b'ground' b'from' b'helium' b',' b'and' b'save' b'or' b'will'
    b'have' b'repeated' b'several' b'different' b'ideas' b'.' b'Song' b'typesetters' b'win' b'them' b'by' b'<unk>' b'the' b'more' b'clever' b'empire' b'from' b'M' b'@-@' b'white'
    b'properties' b'.' b'<eos>' b'The' b'Association' b'of' b'Tigernach' b'visited' b'with' b'Domnall' b'at' b'thrilling' b'times' b'and' b'Charles' b'Holmes' b'combined' b'to' b'demand' b'an'
    b'<unk>' b'to' b'land' b'(' b'<unk>' b')' b'and' b'the' b'other' b'teammates' b'is' b'also' b'used' b'for' b'Tasmania' b',' b'but' b'Ferry' b'had' b'wanted'
    b'to' b'simply' b'react' b'in' b'Wily' b'.' b'When' b'he' b'becomes' b'by' b'guessed' b'to' b'have' b'in' b'Morocco' b'surrounding' b'<unk>' b'has' b'a' b'curve'
    b'about' b'the' b'same' b'end' b'as' b'they' b',' b'and' b'that' b'they' b'are' b'really' b'controversial' b'.' b'Also' b'on' b'Luzon' b'fast' b'human' b'farmers'
    b'such' b'as' b'<unk>' b',' b'composers' b'Riata' b',' b'or' b'selecting' b'certain' b'@-@' b'cold' b'religion' b'in' b'and' b'based' b'on' b'a' b'certain' b'description'
    b'of' b'1913' b'.' b'They' b'concluded' b'his' b'<unk>' b'which' b'contain' b'it' b'"' b'so' b'long' b'enough' b'to' b'find' b'this' b'as' b'everything' b'of'
    b'so' b'and' b'alive' b'.' b'"' b'He' b'was' b'declared' b'for' b'becoming' b'little' b'on' b'a' b'short' b'Japanese' b'game' b',' b'so' b'they' b'taught'
    b'other' b'quantity' b',' b'<unk>' b'is' b'morally' b'direct' b'.' b'In' b'his' b'opponent' b',' b'608' b'represents' b'the' b'kakapo' b'of' b'<unk>' b'Aaron' b'"'
    b'Great' b'Testament' b'"' b';' b'they' b'predicted' b'it' b'"' b'Veblen' b'"' b'\xe2\x80\x94' b'and' b'aimed' b'his' b'and' b'"' b'a' b'emotional' b'planet' b'"'
    b'.' b'<eos>' b'Despite' b'a' b'map' b'of' b'Ceres' b',' b'there' b'are' b'no' b'accounts' b'to' b'begin' b'on' b'third' b'1993' b'of' b'Arthur' b'Guy'
    b'(' b'The' b'<unk>' b'"' b'The' b'overture' b'of' b'the' b'decade' b'"' b')' b'near' b'that' b'point' b'<unk>' b',' b'while' b'has' b'apparently' b'died'
    b'several' b'or' b'ten' b'engineering' b'songs' b'in' b'Copenhagen' b',' b'mainly' b'named' b'reports' b'of' b'legislation' b',' b'where' b'justification' b'Toys' b'identify' b'make' b'death'
    b',' b'forcing' b'modern' b'propose' b'acting' b'as' b'a' b'"' b'cultural' b'of' b'office' b'"' b'.' b'The' b'reviewer' b'acknowledged' b'Saint' b'Carpenter' b"'" b'readers'
    b',' b'him' b'that' b'resulted' b'in' b'in' b'the' b'supervision' b'of' b'<unk>' b'as' b'in' b',' b'so' b'that' b'its' b'real' b'instability' b'is' b'an'
    b'vest' b'if' b'"' b'Bernis' b'of' b'The' b'<unk>' b'"' b'be' b'resurrected' b'as' b'a' b'asteroid' b',' b'but' b'was' b'also' b'described' b'as' b'"'
    b'one' b'of' b'their' b'most' b'well' b'for' b'the' b'player' b'since' b'when' b',' b'they' b'think' b'it' b'is' b'more' b'secretive' b',' b'no' b'pleasure'
    b'and' b'FOCA' b'"' b'.' b'Besant' b'tries' b'much' b'to' b'the' b'fact' b',' b'but' b'are' b'shown' b'by' b'<unk>' b'superstitious' b'a' b'partial' b'rationale'
    b',' b'as' b'the' b'latter' b'is' b'not' b'closely' b'tightly' b'.' b'No' b'another' b'change' b'often' b'choose' b'the' b'Louisiana' b'episode' b'dominion' b'females' b'and'
    b'cross' b'him' b'of' b'state' b'material' b'and' b'Maza' b'of' b'them' b'to' b'play' b'her' b'date' b',' b'rather' b',' b'wishes' b'to' b'sing' b'to'
    b'eat' b'the' b'scene' b'.' b'M\xc4\x81ori' b',' b'as' b'men' b'is' b'Johnny' b'Suryanarayana' b',' b'the' b'poem' b'does' b'not' b'murderer' b'a' b'barge' b','
    b'whereas' b'they' b'cannot' b'help' b'it' b'.' b'With' b'commercial' b'civilians' b',' b'Takumi' b'possessed' b'them' b'under' b'pierced' b'an' b'human' b'stone' b',' b'and'
    b'the' b'crystal' b'altar' b'from' b'Cambridge' b'also' b'migrate' b'to' b'those' b'Portrait' b'of' b'the' b'stem' b'.' b'The' b'female' b'expanded' b'a' b'statement' b'of'
    b'fragment' b'.' b'Therefore' b',' b'after' b'fact' b',' b'and' b'when' b'they' b'tried' b',' b'the' b'Torchwood' b'map' b'were' b'not' b'depressing' b';' b'they'
    b'worked' b'styles' b'over' b'a' b'season' b'.' b'Bearded' b'contradictory' b'eyes' b'are' b'the' b'25' b'aggressive' b'pages' b'from' b'her' b'date' b'.' b'The' b'flame'
    b'is' b'<unk>' b',' b'much' b'seven' b'or' b'more' b'adults' b',' b'in' b'his' b'hospitalization' b',' b'and' b'a' b'Clay' b'man' b',' b'needs' b'on'
    b'ancient' b'back' b'of' b'a' b'iron' b'side' b'which' b'all' b'is' b'.' b'<eos>' b'The' b'<unk>' b'adult' b'unusual' b'skeleton' b'can' b'be' b'seen' b'on'
    b'a' b'lesser' b',' b'DNA' b'guide' b'of' b'times' b'of' b'$' b'1' b'million' b'.' b'It' b'is' b'depicted' b'later' b'from' b'methods' b'of' b'tools'
    b'\xe2\x80\x93' b'including' b'retaliation' b'and' b'Riker' b'escape' b'as' b'females' b'use' b'Dominican' b'people' b'.' b'<eos>' b'cakes' b'is' b'seen' b'as' b'morality' b'.' b'An'
    b'break' b'to' b'brass' b'is' b'apparent' b'as' b'they' b'regulate' b'so' b'nervous' b'.' b'The' b'caninus' b'of' b'the' b'kakapo' b'is' b'Rosenblum' b'with' b'poor'
    b'deposited' b'.' b'A.' b'galericulata' b'separated' b'the' b'well' b'short' b'sins' b'of' b'Iwo' b'teamed' b'and' b'spots' b',' b'the' b'others' b'devoted' b'to' b'home'
    b'@-@' b'transplantation' b'as' b'well' b'as' b'tightly' b'stairway' b'(' b'<unk>' b'diversity' b')' b';' b'their' b'eyes' b'(' b'muted' b')' b'is' b'very' b'step'
    b'to' b'tone' b'.' b'The' b'belly' b'playground' b'away' b'with' b'Simpson' b'in' b'his' b'wings' b'.' b'Also' b'biology' b',' b'they' b'leave' b'that' b'other'
    b'people' b'may' b'be' b'described' b'in' b'northern' b'Ireland' b',' b'when' b'they' b'have' b'"' b'<unk>' b',' b'food' b'and' b'dark' b';' b'future' b','
    b'supports' b',' b'directly' b'and' b'Willie' b'calls' b',' b'to' b'be' b'identified' b'as' b'stigma' b',' b'Wish' b'.' b'"' b'However' b',' b'in' b'this'
    b'general' b'way' b',' b'for' b'example' b',' b'there' b'appears' b'that' b'a' b'self' b'@-@' b'year' b'mechanism' b'was' b'not' b'disagreeable' b'.' b'In' b'one'
    b'third' b'@-@' b'old' b'bird' b'established' b'hand' b'monuments' b'rostral' b'Motion' b',' b'involve' b'downloadable' b'subspecies' b',' b'Leningrad' b'.' b'Wang' b'resembles' b'their' b'rendered'
    b'experience' b'and' b'the' b'same' b'trains' b'no' b'licensing' b',' b'principally' b'McFarland' b'but' b'rarely' b'still' b'bonded' b'to' b'eyes' b'by' b'her' b'paradox' b'.'
    b'In' b'her' b'eighth' b'front' b'of' b'Ceres' b',' b'26' b'thousand' b'5' b'@-@' b'A5' b'according' b'to' b'jazz' b',' b'large' b'social' b'animals' b','
    b'with' b'five' b'dried' b'losses' b'to' b'each' b'other' b'called' b'about' b'10' b'years' b'per' b'volts' b'.' b'<eos>' b'S.' b'cohesion' b'was' b'originally' b'more'
    b'regarded' b'throughout' b'<unk>' b',' b'producing' b'it' b'not' b'during' b'the' b'world' b"'s" b'container' b'.' b'The' b'<unk>' b'context' b'have' b'their' b'eye' b'bodyguard'
    b'with' b'therapy' b'sin' b'.' b'He' b'wrote' b'that' b'there' b'are' b'adults' b'that' b'niche' b'large' b'that' b'was' b'"' b'not' b'quite' b'<unk>' b'on'
    b'recent' b'times' b'indicates' b',' b'"' b'hair' b'as' b'they' b'have' b'entirely' b'seen' b'force' b'in' b'<unk>' b'.' b'Ceres' b'goes' b'to' b'the' b'approach'
    b'of' b'older' b'cellular' b'mistress' b'and' b'Samoa' b'.' b'These' b'birds' b'makes' b'both' b'kakapo' b'sources' b'or' b'become' b'subsequent' b'or' b'<unk>' b'as' b'they'
    b'find' b'the' b'droppings' b'often' b'determined' b'.' b'If' b'can' b'be' b'seen' b',' b'they' b'mentions' b'divalent' b'small' b'1621' b'down' b'size' b'cards' b'them'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 250.7
    loss: 5.168
    elapsed time (seconds): 171.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  7.129 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
