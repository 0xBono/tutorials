.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'In' b'the' b'occupation' b'he' b'saw' b'the' b'<unk>' b'National' b'Kingdom' b'to' b'prove' b'Liam' b'977' b'in' b'in' b'the' b'United' b'States' b';'
    b'he' b'has' b'previously' b'been' b'collaborator' b'yet' b',' b'having' b'the' b'first' b'selling' b'one' b'time' b'.' b'<eos>' b'Baltimore' b"'s" b'time' b'winners' b'of'
    b'Norway' b'is' b'rank' b'of' b'Man' b'who' b'died' b'from' b'vizier' b'Path' b',' b'"' b'.' b'In' b'comparison' b'to' b'his' b'Salford' b',' b'and'
    b'I' b'knew' b'for' b'among' b'the' b'playing' b'rocks' b'and' b'the' b'folk' b'Johannes' b'@-@' b'race' b',' b'thy' b'Hairan' b'and' b'The' b'accolade' b'of'
    b'inn' b'represent' b'intimidated' b'Law' b'.' b'"' b'The' b"'" b'Get' b'XLVII' b'Post' b"'" b'ranked' b'a' b'transit' b'of' b'three' b'series' b',' b'This'
    b'biggest' b'aspects' b',' b'from' b'Ceres' b'and' b'primaries' b'School' b'(' b'commenting' b')' b',' b'which' b'connects' b'with' b'radical' b'<unk>' b'ridiculously' b'opposition' b'rich'
    b'worse' b'levels' b'wide' b'.' b'Although' b'they' b'could' b'<unk>' b'Lauren' b',' b'they' b'were' b'were' b'shorter' b'.' b'The' b'most' b'review' b',' b'big'
    b'premier' b'schools' b'and' b'power' b'insomnia' b',' b'is' b'angered' b'by' b'Nick' b'photography' b'and' b'joyful' b'for' b'proposing' b'<unk>' b',' b'although' b'"' b'there'
    b'is' b'no' b'deal' b'is' b'available' b'...' b'on' b'that' b'day' b'will' b'reaches' b'pairs' b'of' b'money' b'.' b'"' b'Mfume' b'stated' b'that' b'his'
    b'book' b'was' b'killed' b'.' b'In' b'response' b',' b'<unk>' b'motorsport' b'has' b'been' b'built' b'during' b'his' b'third' b'Phoenician' b'election' b'@-@' b'local' b'lyrics'
    b'in' b'religious' b'locations' b'who' b'was' b'Rodney' b'about' b'liberating' b'"' b'and' b'looked' b'a' b'task' b'for' b'witnesses' b'in' b'a' b'sequence' b'to' b'some'
    b'political' b'criminals' b'on' b'[' b'considered' b"'" b'T.' b'lust' b'"' b'.' b'According' b'to' b'Bob' b'Valanginian' b',' b'the' b'organisation' b'is' b'frequently' b'important'
    b',' b'was' b'revised' b'only' b'realised' b'that' b'it' b"'s" b'underground' b'groups' b',' b'and' b'South' b'development' b'found' b'a' b'venerable' b'amount' b'of' b'feet'
    b'.' b'He' b'must' b'so' b'save' b'there' b'have' b'adversely' b'real' b'thing' b'to' b'one' b'from' b'Veronica' b"'s" b'videos' b'1' b'or' b'50' b'not'
    b'.' b'Other' b'observations' b'of' b'WASP' b'Pradesh' b'<unk>' b'Harvester' b'ylides' b'to' b'window' b'.' b'A' b'rough' b'female' b'is' b'being' b'rotated' b'by' b'its'
    b'wings' b'that' b'one' b'side' b'of' b'a' b'level' b',' b'along' b'until' b'before' b'.' b'downloadable' b'interpreted' b'reaches' b'when' b'they' b'are' b'innovative' b'as'
    b'by' b'the' b'aid' b'of' b'repellent' b'brood' b',' b'but' b'well' b'Lomonosov' b'Weir' b'stringent' b'advantage' b'relocate' b'into' b'that' b'play' b'.' b'Mantellisaurus' b'marking'
    b'a' b'great' b'record' b'of' b'Luis' b'<unk>' b'.' b'The' b'collection' b"'s" b'quiet' b'wireless' b'association' b'was' b'range' b'until' b'colonial' b'planets' b',' b'and'
    b'elsewhere' b'in' b'a' b'object' b'and' b'to' b'aid' b'them' b'them' b'operators' b'as' b'when' b'they' b'<unk>' b'.' b'This' b'other' b'Americans' b'attributed' b'to'
    b'brutality' b'all' b'route' b',' b'and' b'ringing' b'uses' b'a' b'tie' b'presence' b'.' b'anemia' b',' b'instead' b'of' b'the' b'reader' b'usually' b'<unk>' b'the'
    b'territory' b'@-@' b'four' b'by' b'belly' b',' b'who' b'was' b'surprised' b'the' b'following' b'decades' b'.' b'However' b',' b'several' b'large' b'player' b'names' b'show'
    b'the' b'"' b'defensive' b'"' b'legs' b'.' b'Because' b'this' b'always' b'always' b'understand' b'the' b'dispatches' b'of' b'Ceres' b'Taft' b'and' b'penal' b'eggs' b','
    b'Even' b'a' b'female' b'OS' b'would' b'participate' b'on' b'for' b'other' b'Germans' b'.' b'<eos>' b'anthropologist' b'tips' b'Ceres' b',' b'consisting' b'of' b'two' b'cm'
    b'repairs' b'and' b'four' b'thirds' b'masked' b'three' b'years' b'ago' b'if' b'flying' b'to' b'qualify' b'.' b'Once' b'then' b'being' b'still' b'killed' b'regarding' b'storytelling'
    b',' b'they' b'cannot' b'layer' b'on' b'survival' b'.' b'He' b'is' b'currently' b'unusual' b'by' b'Song' b'dies' b'.' b'The' b'dictatorship' b'is' b'his' b'kingdom'
    b';' b'imported' b'up' b'.' b'The' b'behavior' b'may' b'be' b'working' b'in' b'concentration' b'or' b'species' b'that' b'they' b'continue' b'to' b'fly' b'each' b'other'
    b'when' b'they' b'need' b'being' b'caused' b'by' b'dealings' b'.' b'Australia' b'try' b'to' b'have' b'significant' b'domains' b',' b'which' b'may' b'require' b'up' b'11'
    b'men' b'and' b'millions' b'are' b'recorded' b'.' b'Plum' b'behaviour' b'may' b'have' b'O.D.B' b'explicitly' b'with' b'French' b'heights' b',' b'(' b'while' b'potential' b'to'
    b'those' b'the' b'other' b'theater' b'climate' b':' b';' b'necessary' b',' b'when' b'there' b'is' b'is' b'already' b'that' b'females' b'gradually' b'indicate' b'it' b'as'
    b'they' b'let' b'to' b'their' b'powerful' b'planet' b'.' b'It' b'may' b'be' b'executed' b'to' b'contain' b'precise' b'health' b'Radical' b'%' b'with' b'anyone' b','
    b'something' b'directly' b'.' b'possessed' b'other' b'Gy' b'found' b'dinner' b',' b'nature' b',' b'manse' b',' b'and' b'communication' b'.' b'For' b'example' b'may' b'have'
    b'difficult' b'by' b'some' b'extend' b',' b'each' b'species' b'tends' b'period' b'.' b'This' b'is' b'rarely' b'herbivorous' b';' b'the' b'inter' b'@-@' b'tree' b'died'
    b'was' b'issued' b'too' b'on' b'one' b'side' b'as' b'these' b'as' b'one' b'who' b'brought' b'it' b'by' b'other' b'methods' b'of' b'legal' b'<unk>' b'.'
    b'<eos>' b'Thus' b',' b'it' b'is' b'occasionally' b'effective' b'despite' b'quick' b'copious' b'struggle' b'such' b'as' b'purge' b',' b'and' b'the' b'spar' b'smell' b'on'
    b'Earth' b'.' b'Once' b'the' b'same' b'author' b',' b'path' b'exists' b'long' b'in' b'display' b',' b'does' b'not' b'be' b'able' b'to' b'sail' b'or'
    b'the' b'eggs' b'fell' b'and' b'can' b'be' b'anything' b'to' b'point' b'.' b'They' b'may' b'keep' b'<unk>' b'and' b'Sabo' b'.' b'<eos>' b'Similar' b'brood'
    b'individuals' b'lion' b',' b'ibotenic' b'Handwriting' b',' b'<unk>' b',' b'<unk>' b',' b'to' b'<unk>' b'for' b'humans' b',' b'thinks' b'they' b'were' b'"' b'doubtful'
    b'"' b'.' b'From' b'their' b'early' b'manufacturing' b'studies' b'orbital' b'adults' b'to' b'help' b'pine' b',' b'they' b'Jainism' b'in' b'accordance' b'.' b'<unk>' b'the'
    b'fact' b'that' b'vocalists' b'or' b'roost' b'occur' b'.' b'Unlike' b'side' b'of' b'mushroom' b',' b'they' b'frames' b'that' b'time' b',' b'so' b'for' b'other'
    b'birds' b',' b'often' b'stray' b'as' b'some' b'birds' b'throughout' b'only' b'grabbing' b'.' b'Males' b'emptied' b'and' b'females' b'over' b'Max' b'ladies' b',' b'flattened'
    b'coil' b'or' b'analysis' b'together' b'.' b'Although' b'enamel' b'132' b'%' b'of' b'the' b'male' b'first' b'full' b'up' b'the' b'Sun' b',' b'they' b'would'
    b'attributed' b'to' b'those' b',' b'so' b'kitsune' b'extends' b',' b'tend' b'to' b'move' b'to' b'those' b'to' b'ensure' b'just' b'their' b'neck' b';' b'they'
    b'do' b'not' b'cite' b'them' b'molecule' b'.' b'In' b'their' b'closed' b'position' b'limit' b'tracery' b'added' b'Ceres' b'they' b'assumed' b'.' b'DNA' b'divine' b'language'
    b'Janna' b'extends' b'in' b'the' b'cap' b',' b'while' b'he' b'says' b'that' b'there' b'are' b'no' b'evidence' b'that' b'when' b'interior' b'often' b'inflicting' b'an'
    b'behaviour' b'air' b',' b'they' b'regulate' b'they' b'to' b'be' b'plume' b'.' b'If' b'subnuclear' b'birds' b'often' b'has' b'intensified' b'to' b'eye' b',' b'they'
    b'may' b'be' b'too' b'<unk>' b'.' b'If' b'it' b'is' b'worshipped' b'in' b'her' b'enemies' b',' b'they' b'throw' b'to' b'have' b'an' b'strong' b'eye'
    b'.' b'They' b'answered' b'up' b'around' b'approximate' b'<unk>' b'that' b'evolved' b'at' b'20' b'.' b'Such' b'concentrations' b'have' b'fallen' b'and' b'up' b'until' b'.'
    b'When' b'its' b'mating' b'observation' b'of' b'this' b'version' b'on' b'a' b'psychological' b'hand' b'is' b'obviously' b'membrane' b',' b'they' b'would' b'be' b'on' b'80'
    b'November' b'2004' b'.' b'There' b'are' b'also' b'good' b'females' b'at' b'different' b'times' b'.' b'<eos>' b'Later' b',' b'they' b'have' b'preserves' b'over' b'50'
    b'%' b',' b'longer' b'female' b':' b'are' b'the' b'most' b'sort' b'of' b'310' b'@.@' b'5' b'm' b'(' b'18' b'ft' b')' b'in' b'diameter'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 237.2
    loss: 5.168
    elapsed time (seconds): 164.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  45.880 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
