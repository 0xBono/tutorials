.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'recently' b'from' b'the' b'mother' b',' b'including' b'Arthur' b'360' b',' b'34' b'.' b'<eos>' b'corrosive' b'to' b'be' b'played' b'during' b'March' b',' b'Formula'
    b"'Malley" b'admitted' b',' b'user' b'<unk>' b',' b'realising' b'the' b'game' b'to' b'6' b'@.@' b'4' b'million' b'overall' b',' b'and' b'was' b'the' b'first'
    b'leadership' b'in' b'order' b'to' b'support' b'a' b'act' b'even' b'.' b'The' b'condition' b'possibly' b'make' b'secondary' b'all' b'servants' b',' b'with' b'moving' b'less'
    b'@-@' b'over' b',' b'such' b'as' b'The' b'Rajamouli' b',' b'but' b'it' b'should' b'well' b'publication' b'for' b'reasons' b'Turk' b'.' b'The' b'suggestion' b'is'
    b'recipe' b'by' b'a' b'<unk>' b'theme' b'.' b'<eos>' b'Bell' b'ahead' b'of' b'L\xc3\xa9gion' b'Boom' b'Bang' b'!' b'and' b'the' b'single' b'parrot' b'was' b'occasionally'
    b'voicing' b'around' b'30' b'%' b'where' b'fictional' b'characters' b'included' b'their' b'writing' b'.' b'The' b'system' b'meant' b'that' b'"' b'some' b'players' b'generally' b'read'
    b'or' b'put' b'it' b'as' b'they' b"'ve" b'work' b'pop' b',' b'it' b'fat' b'the' b'original' b'ever' b'layer' b'of' b'transits' b'when' b'it' b'also'
    b'have' b'been' b'found' b'taking' b'so' b'a' b'option' b'@-@' b'change' b'"' b'.' b'The' b'first' b'solution' b'of' b'fellow' b'art' b'art' b'treason' b','
    b'though' b'T' b'status' b'@-@' b'championship' b'indicate' b'that' b'North' b'Korean' b'remixed' b'of' b'Udaynath' b'may' b'report' b'co' b'@-@' b'needed' b'pupils' b',' b'lauded'
    b'that' b'time' b'after' b'he' b'cannot' b'not' b'be' b'talking' b'to' b'its' b'for' b'a' b'act' b'.' b'<eos>' b'The' b'non' b'@-@' b'definition' b'developers'
    b'were' b'lacking' b'to' b'switch' b'him' b'.' b'Hal\xc3\xa9vy' b'would' b'be' b'short' b',' b'and' b'Taylor' b',' b'Sam' b'O' b"'Malley" b',' b'argued' b'that'
    b'while' b'in' b'defensive' b',' b'because' b'it' b'should' b'be' b'floated' b'until' b'New' b'Zealand' b'he' b'was' b'most' b'faster' b',' b'eliminating' b'a' b'hundred'
    b'trip' b'.' b'The' b'primary' b'player' b'is' b'"' b'Irresistible' b'"' b'.' b'The' b'island' b'family' b'was' b'<unk>' b'to' b'help' b'assimilated' b'the' b'name'
    b'characters' b',' b'so' b'it' b'Bassin' b'walked' b'.' b'the' b'relationship' b'of' b'175' b'%' b'are' b'a' b'nest' b'titled' b'when' b'VHF' b'for' b'severe'
    b'bas' b'and' b'white' b'.' b'For' b'extensive' b'reasons' b',' b'it' b'is' b'delicate' b'Kitana' b'.' b'Williams' b'is' b'being' b'drawn' b'by' b'strictly' b'Pennebaker'
    b'itself' b'after' b'85' b'\xe2\x80\x93' b'3' b'or' b'15' b'@.@' b'4' b'mph' b'(' b'5' b'@.@' b'9' b'in' b')' b',' b'tossed' b'measurements' b'from'
    b'Williams' b'explanation' b'(' b'Yamashita' b'.' b'French' b'Pozzobonelli' b',' b'such' b'9' b'\xe2\x80\x93' b'4' b'\xce\xbcm' b')' b',' b'on' b'a' b'old' b'long' b'or'
    b'$' b'34' b'million' b'that' b'the' b'greatest' b'populations' b'of' b'oxidation' b'.' b'Young' b'controls' b'Sidonian' b'male' b'calls' b'fluid' b'may' b'be' b'achieved' b'.'
    b'<eos>' b'One' b'species' b'have' b'designated' b'until' b'its' b'role' b'.' b'This' b'bird' b'is' b'surrounded' b'by' b'<unk>' b'.' b'This' b'Michelle' b'Mars' b'is'
    b'a' b'frequency' b'for' b'her' b'changes' b'.' b'Males' b'<unk>' b'nearly' b'60' b'centimetres' b'(' b'9' b'ft' b')' b'as' b'they' b'release' b'before' b'they'
    b'was' b'today' b'.' b'On' b'a' b'male' b'space' b',' b'the' b'kakapo' b'is' b'a' b'male' b'evolutionary' b',' b'and' b'blew' b'about' b'fakes' b'the'
    b'longest' b'chicks' b'.' b'In' b'diameter' b',' b'enraged' b'and' b'male' b'female' b'have' b'formed' b'us' b',' b'they' b'remain' b'in' b'multiple' b'touch' b'and'
    b'help' b'well' b'salvos' b'concerns' b'.' b'Throughout' b'their' b'first' b'season' b',' b'they' b'were' b'distributed' b'to' b'change' b',' b'from' b'a' b'dark' b'ridge'
    b'with' b'two' b'spots' b',' b'Clarissa' b'<unk>' b',' b'chiefly' b'respect' b',' b'in' b'the' b'two' b'<unk>' b'and' b'feathers' b'.' b'They' b'finds' b'bird'
    b'as' b'they' b'they' b'were' b'the' b'sensitive' b'contents' b'to' b'migrate' b'to' b'accomplice' b'.' b'Following' b'interfering' b',' b'they' b'may' b'advance' b'it' b'four'
    b'days' b'old' b',' b'according' b'to' b'the' b'copper' b'word' b'to' b'even' b'meet' b'to' b'biologists' b'back' b'.' b'Unlike' b'their' b'offspring' b'twice' b'it'
    b'results' b'for' b'their' b'impressive' b'<unk>' b'(' b'\xe1\x83\xac' b')' b';' b'the' b'calls' b'teaches' b'a' b'upper' b'messenger' b'from' b'Atlantic' b'(' b'itself' b')'
    b',' b'and' b'in' b'South' b'Australia' b',' b'only' b'the' b'recollection' b'to' b'chase' b',' b'they' b'can' b'be' b'contestants' b'.' b'<eos>' b'Within' b'they'
    b'are' b'associated' b'on' b'the' b'then' b'females' b"'" b'wings' b'.' b'Almost' b'from' b'six' b'females' b'was' b'otherwise' b'the' b'center' b'in' b'beginning' b'@-@'
    b'lived' b',' b'when' b'they' b'trust' b'on' b'<unk>' b'them' b'.' b'One' b'other' b'rates' b'of' b'eye' b'bodies' b'and' b'feeding' b'cannot' b'be' b'verified'
    b'.' b'<eos>' b'When' b'useless' b'little' b'with' b'bark' b'may' b'also' b'be' b'a' b'close' b'form' b',' b'the' b'<unk>' b'floor' b'can' b'maintain' b'the'
    b'kakapo' b',' b'where' b'11' b'@.@' b'45' b'%' b',' b'a' b'pair' b'of' b'high' b'eclipsing' b'Roman' b',' b'feeding' b'or' b'grayish' b'application' b';'
    b'males' b'eat' b'eggs' b',' b'weaken' b'or' b'blue' b'.' b'Unlike' b'the' b'another' b'movement' b',' b'they' b'done' b'the' b'territory' b'between' b'Sarasaland' b'.'
    b'The' b'cycling' b'Association' b'will' b'be' b'found' b'on' b'hand' b',' b'and' b'<unk>' b'on' b'teeth' b'up' b'into' b'a' b'chromosome' b'Wi\xc5\x9bniowiecki' b'<unk>' b','
    b'copies' b'of' b'spare' b'gravity' b'.' b'In' b'17' b'years' b',' b'Ceres' b'has' b'been' b'involved' b'the' b'size' b'of' b'agricultural' b'ALL' b'.' b'The'
    b'forehead' b'is' b'often' b'Banksia' b'and' b'is' b'therefore' b'unique' b'.' b'This' b'meant' b'they' b'do' b'much' b'study' b'20' b'%' b'of' b'soldiers' b','
    b'because' b'there' b'is' b'just' b'that' b'or' b'significant' b',' b'if' b'her' b'function' b'can' b'know' b'.' b'Irish' b'starlings' b'increases' b'back' b'until' b'his'
    b'very' b'first' b'cow' b'cow' b'sequences' b'to' b'which' b'they' b'lift' b'eggs' b'.' b'In' b'his' b'attempt' b'the' b'opportunity' b'for' b'true' b'starling' b'are'
    b'considered' b'this' b'source' b'.' b'If' b'their' b'average' b'been' b'less' b'prepared' b',' b'it' b'was' b'their' b'longer' b'velocity' b'of' b'230' b'hours' b','
    b'and' b'pastures' b'may' b'be' b'distinguished' b',' b'objects' b'of' b'people' b'B' b'death' b'and' b'megawatts' b'.' b'Some' b'wakes' b',' b'by' b'2' b'%'
    b'of' b'cluster' b'draw' b'appropriated' b'so' b'telescope' b'head' b',' b'above' b'4' b'@.@' b'5' b'%' b',' b'are' b'given' b'a' b'grey' b'increase' b'on'
    b'other' b'ingested' b'that' b'their' b'mountainous' b'trees' b'of' b'common' b'predators' b'and' b'<unk>' b',' b'with' b'they' b'tends' b'to' b'age' b'@-@' b'point' b'.'
    b'Everybody' b'if' b'buses' b'have' b'a' b'fault' b'around' b'magnate' b'rules' b'or' b'exist' b'.' b'As' b'one' b'of' b'these' b'islands' b'has' b'no' b'cycle'
    b',' b'and' b'is' b'found' b'for' b'them' b',' b'both' b'<unk>' b'or' b'thy' b'leaf' b'male' b'.' b'Conversely' b',' b'it' b'traversing' b'food' b','
    b'but' b'this' b'may' b'commit' b'prey' b',' b'occasionally' b'directly' b'blood' b',' b'being' b'able' b'to' b'be' b'some' b',' b'scattered' b',' b'straight' b','
    b'when' b'to' b'break' b'with' b'Aramburu' b'and' b'pull' b'.' b'There' b'are' b'different' b'evidence' b'that' b'some' b'respected' b'dried' b'body' b'movement' b'may' b'be'
    b'transmitted' b'simultaneously' b',' b'so' b'long' b'pair' b'of' b'them' b'of' b'females' b'Policy' b'as' b'little' b'as' b'5' b',' b'as' b'well' b'.' b'Females'
    b'who' b'have' b'commonly' b'allowed' b'and' b'otherwise' b'served' b'through' b'MI6' b'common' b'starlings' b'that' b'should' b'be' b'kind' b'or' b'just' b'<unk>' b'.' b'They'
    b'also' b'regulate' b'her' b'likelihood' b',' b'can' b'indicate' b'it' b':' b'"' b'wanted' b'to' b'afford' b'back' b'up' b'us' b'to' b'give' b'some' b'bills'
    b',' b'while' b'as' b'they' b'are' b'too' b'reputed' b'to' b'be' b'very' b'effective' b'from' b'their' b'cargo' b'.' b'If' b'the' b'puppeteers' b'took' b'up'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 226.3
    loss: 5.164
    elapsed time (seconds): 159.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  30.006 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
