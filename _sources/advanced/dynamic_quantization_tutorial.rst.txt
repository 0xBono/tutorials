.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'imply' b'organizations' b';' b'the' b'priest' b'brought' b'to' b'the' b'original' b'closure' b'of' b'the' b'collection' b'is' b'scheduled' b'by' b'a' b'nurse' b'of' b'"'
    b'One' b'<unk>' b'"' b',' b'taking' b'to' b'speak' b'that' b'year' b'as' b'more' b'elaborate' b':' b'the' b'mix' b'of' b'prepare' b'(' b'Minneapolis' b')'
    b',' b'<unk>' b':' b'Along' b'.' b'Less' b'elects' b'figures' b'exist' b'in' b'1828' b'.' b'The' b'supervision' b'of' b'pre' b'@-@' b'runners' b'avatars' b'suggest'
    b'that' b'death' b'came' b'them' b',' b'and' b'when' b'he' b'decides' b'are' b'good' b'when' b'wanting' b',' b'McCall' b'died' b'for' b'the' b'Corran' b'.'
    b'<eos>' b'<eos>' b'<eos>' b'=' b'[' b'of' b'Kicking' b"'s" b'Hebrew' b'union' b'=' b'<eos>' b'<eos>' b'The' b'1925' b'transit' b'of' b'Edinburgh' b'is' b'attributed'
    b'four' b'times' b'reconstruction' b'from' b'1976' b'to' b'1200' b'subsidies' b',' b'together' b'from' b'campus' b'from' b'<unk>' b'Lejeune' b',' b'from' b'August' b'2' b','
    b'2006' b'.' b'They' b'merged' b'in' b'Everton' b'among' b'<unk>' b'1518' b'.' b'It' b'is' b'bigger' b'from' b'East' b'Aviv' b',' b'although' b'one' b'phase'
    b'was' b'less' b'hostile' b',' b'more' b'than' b'4' b'%' b'of' b'whom' b'only' b'resulted' b'in' b'capacity' b'affected' b'by' b'it' b',' b'the' b'creation'
    b'of' b'its' b'duck' b',' b'Christian' b'gravity' b'with' b'an' b'large' b'support' b'of' b'and' b'rise' b',' b'and' b'particular' b'meals' b'have' b'sold' b'corporate'
    b'counties' b'.' b'This' b'is' b'O' b'Rico' b',' b'though' b'there' b'are' b'little' b'H.' b'foreshadowing' b'recent' b'meteorological' b'deposits' b'in' b'Varanasi' b',' b'North'
    b'Africa' b',' b'the' b'M\xc4\x81ori' b',' b'Georgia' b',' b'Indian' b'Carnival' b',' b'and' b'Irish' b'Asia' b',' b'and' b'galleries' b',' b'plant' b'replication' b','
    b'H' b'Rico' b',' b'cream' b'Burman' b',' b'Metropolis' b'Haifa' b',' b'Castle' b'Trends' b',' b'Field' b'PFA' b',' b'&' b'50' b',' b'his' b'naming'
    b'Mediterranean' b',' b'and' b'Central' b'City' b'<unk>' b'and' b'towed' b'more' b'than' b'occasionally' b',' b'on' b'multiple' b'islands' b'.' b'The' b'wind' b'measure' b'of'
    b'Natural' b'Authors' b'was' b'performed' b'by' b'Herbert' b'S.' b'<unk>' b',' b'who' b'named' b'many' b'over' b'\xe2\x88\x92' b'blankets' b'and' b'cultural' b'years' b',' b'and'
    b'about' b'30' b'%' b'of' b'religions' b'had' b'fallen' b'to' b'Ireland' b'.' b'In' b'1996' b',' b'March' b'race' b'at' b'Madison' b'dominated' b'125' b'to'
    b'4th' b'%' b'and' b'connects' b'perpetual' b'tactics' b'for' b'a' b'total' b'of' b'three' b',' b'with' b'Prague' b'21' b'victories' b',' b'with' b'isolated' b'frigate'
    b'(' b'but' b'prevention' b'or' b'new' b'amplexus' b')' b'.' b'Instead' b'in' b'Le\xc3\xb3n' b',' b'now' b'settlers' b'were' b'truncated' b'for' b'land' b',' b'poles'
    b'around' b':' b'English' b'National' b'Construction' b'(' b'<unk>' b')' b',' b'and' b'36th' b'farms' b'(' b'which' b'was' b'widely' b'recognized' b'in' b'half' b'23'
    b'million' b'BCE' b')' b'.' b'In' b'the' b'country' b',' b'in' b'October' b'2002' b',' b'a' b'detailed' b'producer' b'named' b'Carl' b'Judge' b'B.' b'Chapman'
    b'Bennett' b'recorded' b'it' b'back' b'to' b'Fencing' b'Calloway' b'.' b'The' b'moniker' b'presided' b'in' b'2009' b',' b'in' b'1999' b',' b'it' b'was' b'unclear'
    b'extension' b'to' b'Tennessee' b'2' b'%' b'twenty' b'@-@' b'game' b'Scotland' b'to' b'delays' b'in' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Sixth' b'science' b'='
    b'=' b'<eos>' b'<eos>' b'Art' b'Chambers' b'is' b'greatly' b'introduced' b'by' b'some' b'local' b'slaves' b',' b'as' b'early' b'as' b'when' b'they' b'become' b'known'
    b'as' b'females' b'and' b'popular' b'large' b'services' b'.' b'<unk>' b'begins' b'they' b'were' b'technically' b'reduced' b'to' b'the' b'software' b'range' b'of' b'songs' b'.'
    b'The' b'bronze' b'portion' b'of' b'the' b'United' b'States' b'AD' b'distribute' b'alphabets' b'include' b'encoded' b'or' b'1747' b'or' b'rebuild' b'.' b'This' b'nests' b'is'
    b'described' b'by' b'petrol' b',' b'<unk>' b',' b'applied' b',' b'<unk>' b',' b'and' b'fragments' b'for' b'one' b'Street' b',' b'allowing' b'them' b'by' b'Wallace'
    b'fused' b',' b'and' b'is' b'nocturnal' b'in' b'season' b'.' b'2010' b'authorities' b'that' b'the' b'common' b'starling' b',' b'Montenegro' b'(' b'1980' b')' b'indicated'
    b'that' b'they' b'are' b'robust' b'(' b'named' b'tropical' b'or' b'50' b'BCE' b')' b',' b'which' b'is' b'made' b'by' b'<unk>' b'members' b'.' b'If'
    b'working' b'in' b'1870s' b',' b'most' b'forms' b'this' b'species' b'that' b'was' b'probably' b'IndiaGlitz' b'by' b'Gordon' b'Theodore' b'Penn' b'as' b'a' b'candidate' b','
    b'but' b'to' b'open' b'recruitment' b'candidates' b'.' b'A' b'early' b'1850s' b'is' b'monitored' b';' b'many' b'in' b'Ireland' b'spent' b'over' b'toll' b'when' b'they'
    b'can' b'be' b'part' b'of' b'the' b'major' b'ground' b'between' b'Ireland' b'.' b'The' b'European' b'starling' b',' b'somewhat' b'became' b'group' b'of' b'common' b'synonym'
    b',' b'so' b'a' b'parallax' b'will' b'be' b'attributed' b'to' b'pagodas' b',' b'which' b'is' b'however' b'offshore' b',' b'monitor' b'enthusiasts' b'using' b'potentially' b'implies'
    b'or' b'even' b'typical' b'soils' b',' b'gene' b'electrical' b'starlings' b',' b'however' b',' b'<unk>' b'and' b'<unk>' b'weapon' b'Raton' b'.' b'<eos>' b'Irish' b'refers'
    b'to' b'contents' b',' b'though' b'crop' b'plants' b'were' b'significantly' b'affected' b'by' b'splicing' b'blocks' b'to' b'indicate' b'the' b'introduction' b'of' b'food' b',' b'many'
    b'of' b'The' b'male' b"'s" b'trees' b'finally' b'carried' b',' b'though' b'they' b'were' b'estimated' b'.' b'<eos>' b'In' b'addition' b',' b'kakapo' b'covers' b'in'
    b'Castle' b',' b'with' b'Castanea' b'population' b'contribute' b'to' b'<unk>' b',' b'Muslim' b',' b'<unk>' b',' b'ocean' b'@-@' b'1000' b',' b'Askew' b',' b'<unk>'
    b',' b'<unk>' b',' b'and' b'<unk>' b'.' b'They' b'Growing' b'production' b',' b'such' b'as' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'converge' b','
    b'of' b'Scotland' b'.' b'The' b'river' b'has' b'also' b'been' b'employed' b'by' b'populations' b'on' b'their' b'<unk>' b',' b'with' b'1638' b'holding' b'Goodman' b'viziers'
    b'in' b'this' b'type' b',' b'Whip' b'collecting' b'one' b'and' b'south' b'pink' b',' b'locally' b'soil' b'work' b'<unk>' b',' b'County' b'rock' b',' b'1'
    b'Poduke' b',' b'and' b'range' b',' b'diseases' b'and' b'strong' b'enrolment' b',' b'run' b'for' b'methylene' b'n' b'than' b'large' b'starlings' b'.' b'They' b'well'
    b'to' b'be' b'frequent' b'partly' b'birds' b'to' b'rely' b'more' b'burst' b',' b'principally' b'without' b'Irish' b',' b'diameter' b',' b'maritime' b',' b'yellow' b','
    b'and' b'<unk>' b'standards' b'to' b'runway' b'starlings' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'='
    b'Influences' b'=' b'=' b'=' b'<eos>' b'<eos>' b'All' b'major' b'settlers' b'have' b'led' b'movement' b'but' b'they' b'are' b'part' b'of' b'fatal' b',' b'unusable'
    b',' b'Sibley' b',' b'daunting' b',' b'domains' b',' b'and' b'copper' b'units' b'.' b'These' b'signs' b'have' b'happen' b'helped' b'involving' b'(' b'ice' b','
    b'2002' b')' b',' b'although' b'two' b'males' b'occurred' b'.' b'A' b'species' b'in' b'the' b'common' b'Darkness' b'was' b'filled' b'in' b'Iraq' b'.' b'The'
    b'centers' b'by' b'devoid' b'were' b'performed' b'throughout' b'continental' b'periods' b'and' b'corporate' b',' b'deep' b',' b'and' b'Narayan' b'elevations' b'.' b'Males' b'created' b'extensive'
    b'birds' b',' b'development' b'and' b'any' b'other' b'livestock' b'integration' b'.' b'It' b'was' b'present' b'by' b'large' b'units' b',' b'matures' b',' b'spiders' b','
    b'black' b',' b'<unk>' b',' b'chestnut' b'<unk>' b',' b'radiation' b',' b'fulfilling' b'6' b'languages' b',' b'and' b'microscopic' b'windows' b'common' b'car' b',' b'the'
    b'mortality' b'of' b'analyze' b',' b'medical' b',' b'Husband' b',' b'agriculture' b',' b'Augustan' b',' b'and' b'Armored' b'annuity' b',' b'with' b'rare' b'victims' b','
    b'Rio' b'Africa' b',' b'vice' b'and' b'moist' b'smell' b'.' b'The' b'antagonist' b'is' b'subsequently' b'painted' b'as' b'there' b'have' b'been' b'isolated' b'Sapper' b'in'
    b'the' b'birds' b',' b'such' b'as' b'central' b'.' b'Their' b'mechanics' b'by' b'freezing' b'sticks' b'are' b'<unk>' b'.' b'A' b'main' b'location' b',' b'she'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 238.5
    loss: 5.168
    elapsed time (seconds): 163.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  47.396 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
