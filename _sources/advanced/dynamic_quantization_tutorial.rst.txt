.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'compose' b'.' b'Although' b'the' b'<unk>' b'started' b'in' b'value' b',' b'they' b'wanted' b'to' b'be' b'confused' b'for' b'any' b'similar' b'risks' b',' b'more'
    b'than' b'continue' b'it' b'in' b'diameter' b'for' b'its' b'<unk>' b'@-@' b'female' b'tails' b'.' b'Paul' b'cancel' b'@-@' b'a' b'@-@' b'colored' b'circle' b'including'
    b'collecting' b'vehicles' b',' b'each' b'living' b'at' b'different' b'stages' b'.' b'Consequently' b',' b'overrun' b'to' b'become' b'established' b'resulting' b'on' b'studies' b'that' b'conflicts'
    b'to' b'span' b'the' b'character' b"'s" b'body' b'as' b'to' b'compensate' b'to' b'South' b'Australia' b'.' b'There' b'also' b'supported' b'northeast' b'individually' b'session' b';'
    b'in' b'particular' b',' b'the' b'series' b'was' b'transcribed' b'at' b'eight' b'years' b'of' b'years' b',' b'and' b'was' b'the' b'final' b'@-@' b'time' b'Agate'
    b'with' b'five' b'equilibrium' b'stories' b'with' b'the' b'introducing' b'astronomical' b'lines' b'(' b'such' b'as' b'smaller' b'coat' b'as' b'potential' b'as' b'"' b'over' b'version'
    b'off' b'"' b')' b'that' b'they' b'consume' b'<unk>' b'.' b'Furthermore' b',' b'Kramer' b'consisted' b'of' b'a' b'invalid' b'mature' b'planet' b'named' b'a' b'tutor'
    b'smashed' b'by' b'their' b'main' b'sister' b'essay' b',' b'having' b'written' b',' b'which' b'can' b'judge' b'art' b'.' b'Crash' b'Daddy' b'said' b'that' b'North'
    b'in' b'the' b'room' b'"' b'could' b'be' b'sheets' b'at' b'a' b'point' b'of' b'<unk>' b',' b'its' b'ear' b',' b'and' b'extraterrestrial' b'exceptional' b'concept'
    b'.' b'"' b'The' b'performance' b'escapes' b'may' b'be' b'underway' b'up' b',' b'and' b'although' b'Babyface' b'like' b'how' b'they' b'played' b'him' b',' b'others'
    b'satisfied' b'how' b'there' b'are' b'no' b'union' b'.' b'However' b',' b'when' b'no' b'other' b'types' b'of' b'Ordovician' b'can' b'be' b'<unk>' b'or' b'another'
    b'visceral' b'planet' b'.' b'rings' b'ceased' b'time' b'from' b'this' b'family' b',' b'another' b'inscription' b'greatly' b'lying' b'by' b'21' b':' b'00' b'(' b'rotator'
    b')' b',' b'<unk>' b'(' b'pronunciation' b')' b'and' b'the' b'inclined' b'of' b'justice' b'.' b'Police' b',' b'a' b'array' b'of' b'high' b',' b'they'
    b'moved' b'the' b'idea' b'of' b'even' b'being' b'we' b'actually' b"'m" b'"' b'this' b'planet' b'close' b'to' b'start' b'activists' b'"' b'.' b'maximus' b'also'
    b'suggests' b'of' b'excess' b'mostly' b'<unk>' b',' b'as' b'much' b'the' b'monogamous' b',' b'"' b'helping' b'tangled' b'rights' b'"' b',' b'and' b'the' b'ability'
    b'to' b'be' b'hostile' b'.' b'With' b'its' b'only' b'account' b'of' b'these' b'frill' b',' b'over' b'2' b'or' b'5' b'goals' b'of' b'7' b'%'
    b',' b'kissed' b'further' b'takes' b'place' b'.' b'The' b'rise' b'of' b'body' b'or' b'female' b'measures' b'might' b'be' b'lost' b'to' b'reelection' b',' b'and'
    b'at' b'just' b'point' b'they' b'are' b'kept' b'.' b'His' b'pressed' b'particular' b'character' b',' b'or' b'supplied' b'their' b'<unk>' b'settings' b',' b'eventual' b'580'
    b'beings' b'who' b'don' b"'t" b'Cycle' b'spark' b'.' b'<eos>' b'In' b'1848' b',' b'the' b'importin' b'will' b'be' b'understood' b'to' b'make' b'the' b'typewriter'
    b'for' b'<unk>' b'@-@' b'down' b'programs' b'(' b'thoughts' b')' b'.' b'Taylor' b'discovers' b'three' b'lower' b'scripts' b',' b'which' b'are' b'known' b'during' b'Scottish'
    b'public' b',' b'except' b'some' b'levels' b'of' b'Laughs' b'mean' b',' b'eucalypts' b',' b'forbs' b',' b'Manson' b',' b'NCAA' b'@-@' b'<unk>' b',' b'winner'
    b',' b'Flames' b',' b'feral' b',' b'aggression' b',' b'algal' b',' b'white' b',' b'or' b'sufficiently' b'a' b'chain' b'of' b'electricity' b'as' b'is' b'a'
    b'door' b'of' b'the' b'kakapo' b'.' b'Destiny' b'degraded' b'Shield' b'for' b'them' b'to' b'the' b'dimensions' b'@-@' b'attack' b'to' b'wait' b'to' b'create' b'their'
    b'power' b'wing' b',' b'and' b'<unk>' b'or' b'chased' b'the' b'cause' b'of' b'morphology' b',' b'but' b'as' b'they' b'are' b'possible' b'\xe2\x80\x94' b'however' b','
    b'they' b'offered' b'them' b'to' b'bye' b'a' b'night' b'for' b'animals' b',' b'not' b'over' b'the' b'killer' b'.' b'This' b'protagonist' b',' b'Omar' b','
    b'or' b'motions' b'can' b'be' b'found' b'to' b'can' b'be' b'queue' b'by' b'humans' b'.' b'Upon' b'30' b'years' b',' b'they' b'are' b'still' b'lady'
    b'.' b'If' b'other' b'margin' b'makes' b'the' b'dictatorial' b',' b'mating' b'broad' b'areas' b',' b'glacial' b'sex' b',' b'heavy' b'water' b',' b'is' b'vital'
    b'to' b'the' b'verse' b'.' b'During' b'it' b',' b'it' b'is' b'a' b'subtle' b'shape' b'or' b'cargo' b',' b'but' b'she' b'is' b'mates' b'wearing'
    b'that' b',' b'they' b'died' b'had' b'its' b'way' b'.' b'In' b'addition' b',' b'Ceres' b'differ' b'on' b'what' b'they' b'otherwise' b'use' b'bit' b'and'
    b'even' b'become' b'even' b'<unk>' b',' b'without' b'worn' b'or' b'12' b'parrot' b',' b'which' b'is' b'sometimes' b'thought' b'to' b'be' b'transcription' b'.' b'Those'
    b'process' b'when' b'pure' b'families' b'were' b'only' b'useful' b'onto' b'display' b'.' b'They' b'do' b'not' b'migrate' b'to' b'as' b'they' b'is' b'listed' b'chapters'
    b'.' b'One' b'insects' b'have' b'achieved' b'their' b'control' b'season' b',' b'and' b'believed' b'that' b'<unk>' b'"' b'only' b'daunting' b'and' b'these' b'that' b'sometimes'
    b'those' b'lawful' b'calls' b'once' b'woodwork' b'into' b'that' b'air' b',' b'having' b'hastily' b'dominated' b'a' b'very' b'irregular' b'and' b'theatrical' b'sweet' b'mind' b'.'
    b'"' b'This' b'book' b'must' b'have' b'suggested' b'on' b'other' b'natural' b'nature' b'.' b'In' b'England' b',' b'Paranthodon' b'can' b'be' b'lost' b'particularly' b'after'
    b'entourage' b',' b'which' b'they' b'are' b'significant' b'when' b'they' b'have' b'survived' b'on' b'pink' b'areas' b'and' b'reform' b'they' b'\xe2\x80\x94' b'one' b'more' b'<unk>'
    b'beneficial' b'.' b'This' b'walk' b'on' b'their' b'way' b'into' b'<unk>' b'by' b'human' b'lakes' b'.' b'Each' b'maturity' b'of' b'O' b"'Malley" b'are' b'overall'
    b'strongly' b'known' b'as' b'incredibly' b'@-@' b'eared' b',' b'reddish' b'radicals' b'.' b'The' b'export' b'<unk>' b'nymphs' b'(' b'sometimes' b'closely' b'renamed' b'contexts' b')'
    b'itself' b',' b'so' b'by' b'then' b',' b'the' b'kakapo' b'Property' b',' b'somewhat' b'always' b'forested' b'from' b'his' b'young' b'and' b'most' b'mating' b','
    b'of' b'yellow' b',' b'as' b'always' b'reading' b'into' b'it' b'.' b'She' b'also' b'brought' b'several' b'player' b'cruzi' b'after' b'.' b'The' b'Sturnidae' b'water'
    b'<unk>' b'to' b'be' b'Ysabel' b'across' b'eight' b'steps' b'.' b'<eos>' b'In' b'the' b'first' b'two' b'years' b'of' b'mitosis' b'is' b'long' b'native' b','
    b'the' b'kakapo' b'is' b'the' b'subject' b'of' b'low' b',' b'lasting' b'and' b'red' b',' b'and' b'those' b'can' b'be' b'disturbed' b'by' b'very' b'objects'
    b'has' b'overlap' b'and' b'brought' b'a' b'usual' b'amount' b'of' b'Pallas' b'(' b'control' b'of' b'small' b'corporations' b')' b'(' b'maintenance' b')' b'.' b'For'
    b'example' b'he' b'suspect' b'that' b'"' b'More' b'Among' b'those' b'Construction' b'for' b'great' b',' b'die' b',' b'"' b'gems' b'features' b'method' b',' b'using'
    b'a' b'translation' b'of' b'skin' b'species' b'display' b'the' b'realm' b'of' b'<unk>' b'distinct' b'areas' b'by' b'human' b'behaviour' b',' b'and' b'Stupnitsky' b'up' b'from'
    b'tracts' b'of' b'his' b'misunderstanding' b'.' b'<eos>' b'A' b'<unk>' b'population' b'to' b'tends' b'as' b'it' b'will' b'Nabataeans' b'that' b'they' b'oxygen' b'up' b'and'
    b'occurs' b'up' b'.' b'At' b'present' b',' b'mating' b',' b'Shea' b',' b'impact' b',' b'and' b'dry' b',' b'requiring' b'methods' b'of' b'Gofraid' b'from'
    b'<unk>' b'.' b'A' b'typical' b'measure' b'to' b'enter' b'males' b'intended' b'to' b'results' b'up' b'they' b'exceed' b'Ceres' b',' b'even' b'spending' b'extreme' b'arts'
    b'.' b'There' b'are' b'decline' b'from' b'large' b'trees' b',' b'barely' b'without' b'other' b'species' b'of' b'other' b'monitors' b'.' b'<unk>' b'proton' b'a' b'male'
    b'or' b'around' b'jumping' b'Firth' b'could' b'figure' b'high' b'.' b'Noisy' b'Almost' b'happen' b'fusion' b'leaves' b'food' b'.' b'A' b'body' b'greater' b'relative' b'feed'
    b'(' b'possibly' b'9' b'@.@' b'4' b'AU' b'per' b'figure' b')' b'rapidly' b'when' b'each' b'other' b'spots' b'of' b'males' b',' b'unlike' b'is' b'few'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 235.0
    loss: 5.168
    elapsed time (seconds): 163.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  43.547 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
