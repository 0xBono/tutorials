.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'support' b'on' b'Joseph' b'<unk>' b'.' b'However' b',' b'from' b'September' b'5' b',' b'2003' b'in' b'1924' b'Hornung' b'sent' b'sponsorship' b'in' b'<unk>' b'.'
    b'Heavy' b'resulted' b'on' b'the' b'millions' b'of' b'their' b'power' b',' b'left' b'in' b'1893' b',' b'and' b'the' b'United' b'States' b'@-@' b'The' b'@-@'
    b'2008' b',' b'the' b'least' b'named' b'generator' b'dedicated' b'to' b'a' b'book' b'of' b'24' b'mph' b'.' b'In' b'Tales' b',' b'translators' b'had' b'a'
    b'deal' b'of' b'non' b'@-@' b'sail' b'resulted' b'to' b'<unk>' b'over' b'the' b'population' b'of' b'58' b'mph' b'(' b'Jonathan' b'Copperfield' b')' b'and' b'Dunstan'
    b'Krajowa' b"'" b'K' b'host' b'Swanson' b',' b'a' b'side' b'that' b'last' b'turned' b'spaced' b'to' b'Sb' b',' b'with' b'more' b'than' b'three' b'additional'
    b'contributing' b'test' b'(' b'2' b'@.@' b'9' b'@,@' b'<unk>' b'ft' b')' b'.' b'The' b'lobbying' b'is' b'a' b'mistake' b'of' b'tin' b',' b'with'
    b'many' b'smaller' b'lines' b'singing' b':' b'<eos>' b'Helen' b'Aguilera' b'sexpunctatus' b'is' b'seem' b'to' b'be' b'<unk>' b'.' b'<eos>' b'As' b'they' b'be' b'Reservoir'
    b'in' b'the' b'summer' b'of' b'Labyrinth' b',' b'Brown' b'have' b'long' b'gives' b'islands' b',' b'but' b'it' b'has' b'written' b'80' b'ha' b'(' b'2008'
    b')' b'in' b'Chemical' b',' b'Lithuania' b',' b'<unk>' b',' b'Copacabana' b',' b'water' b',' b'and' b'Irish' b'give' b'@-@' b'protector' b'of' b'males' b'.'
    b'Because' b'of' b'contemporary' b',' b'Tower' b'is' b'"' b'more' b'passionate' b'"' b',' b'having' b'determined' b',' b'they' b'should' b'be' b'collected' b'as' b'a'
    b'consumption' b'by' b'Signs' b'in' b'the' b'kakapo' b'.' b'From' b'the' b'seven' b'minute' b'within' b'the' b'season' b',' b'five' b'years' b'it' b'lacked' b'a'
    b'logo' b'in' b'racing' b'.' b'Another' b'natural' b'immortal' b'is' b'discounted' b'on' b'20' b'Hornung' b'the' b'first' b'two' b'years' b'.' b'In' b'long' b'weather'
    b',' b'the' b'advisers' b'is' b'considered' b'shown' b'@-@' b'palisade' b'to' b'be' b'executed' b';' b'agriculture' b'rainfall' b'portion' b'of' b'Germany' b',' b'is' b'better'
    b'curious' b'to' b'find' b'plan' b'and' b'<unk>' b'or' b'wings' b'.' b'In' b'fusing' b'regions' b',' b'they' b'antiquities' b'tool' b'<unk>' b'for' b'large' b'Eurasia'
    b'to' b'Northern' b'regions' b'including' b'glass' b'.' b'By' b'a' b'curve' b'to' b'assist' b',' b'they' b'do' b'experience' b'long' b',' b'reaches' b'Australia' b'to'
    b'leave' b'rank' b'test' b',' b'mainly' b'hail' b',' b'and' b'gravitational' b'heads' b'.' b'They' b'<unk>' b'all' b'calcium' b'south' b'into' b'disturbed' b',' b'where'
    b'its' b'angle' b'carries' b'cadmium' b'after' b'it' b'is' b'like' b'.' b'There' b'are' b'little' b'differences' b'boats' b'or' b'navigate' b'cares' b',' b'far' b'on'
    b'.' b'<eos>' b'To' b'promote' b'churches' b',' b'they' b'are' b'also' b'open' b'.' b'Up' b'thereafter' b',' b'they' b'be' b'seen' b'to' b'have' b'been'
    b'unlocked' b'by' b'fruit' b'supply' b'objects' b'.' b'Further' b'feathers' b'served' b'as' b'the' b'insect' b'disruptive' b'range' b'or' b'even' b'measure' b'as' b'they' b'participate'
    b'nearly' b'decades' b'to' b'kill' b'good' b'movements' b'from' b'adults' b'with' b'cell' b'frets' b'.' b'<eos>' b'Kakapo' b'activity' b'of' b'1931' b':' b'360' b'/'
    b'20' b'(' b'1847' b')' b',' b'yellow' b',' b'Irv' b',' b'is' b'one' b'of' b'males' b'as' b'many' b'of' b'its' b'evidence' b'to' b'their'
    b'secondary' b'ghosts' b'and' b'lured' b'their' b'inscription' b',' b'and' b'in' b'Christ' b'have' b'much' b'reluctant' b'to' b'add' b'into' b'symbiotic' b'.' b'For' b'example'
    b',' b'the' b'abdomen' b'is' b'only' b'thought' b'to' b'be' b'an' b'sign' b'@-@' b'day' b'<unk>' b'vegetation' b',' b'which' b'was' b'put' b'away' b'for'
    b'evolution' b'at' b'Blackburn' b'.' b'In' b'August' b'2015' b',' b'when' b'60' b'%' b'of' b'females' b'are' b'situated' b'by' b'water' b'such' b'as' b'<unk>'
    b'<unk>' b'<unk>' b',' b'their' b'<unk>' b'<unk>' b'was' b'<unk>' b'was' b'<unk>' b'.' b'In' b'however' b',' b'the' b'bird' b'of' b'Ireland' b'married' b'very'
    b'favored' b'compact' b'minister' b',' b'Chicago' b'of' b'West' b'and' b'Russia' b',' b'but' b'that' b'Adults' b'part' b'of' b'the' b'26' b'@.@' b'2' b'rounds'
    b',' b'it' b'would' b'be' b'seen' b'that' b'birds' b'may' b'have' b'plastic' b'areas' b'among' b'water' b',' b'rescued' b'two' b'different' b'starlings' b'.' b'At'
    b'the' b'47' b'times' b',' b'they' b'start' b'for' b'capacity' b'about' b'pure' b'prehistoric' b'daily' b'subjects' b'(' b'40' b'%' b')' b',' b'<unk>' b'inputs'
    b'(' b'museums' b')' b'.' b'They' b'are' b'clearly' b'attached' b'for' b'common' b'starlings' b'.' b'<unk>' b'over' b'Athens' b',' b'meteorological' b'females' b',' b'or'
    b'associated' b'support' b'.' b'This' b'mind' b'centered' b'on' b'complaints' b',' b'including' b'the' b'regulation' b'broods' b',' b'88th' b'vehicles' b',' b'and' b'a' b'slip'
    b'in' b'eastern' b'Ireland' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Yongdok' b'=' b'=' b'<eos>' b'<eos>' b'R.' b'Peh' b'Bang' b'!' b'died' b'in' b'1790'
    b'as' b'the' b'name' b'is' b'due' b'to' b'cannot' b'flashes' b'a' b'planet' b'moved' b'to' b'raising' b'a' b'remnant' b'colour' b'near' b'night' b'.' b'A'
    b'4' b'@.@' b'5' b'million' b'2008' b'field' b'includes' b'that' b'the' b'planet' b'breeds' b'up' b'to' b'having' b'another' b'improvement' b'100' b'years' b'after' b'being'
    b'categorised' b'on' b'it' b'.' b'<unk>' b'for' b'the' b'male' b'comprises' b'less' b'and' b'unprecedented' b'birds' b'that' b'are' b'abandoned' b',' b'as' b'some' b'teams'
    b'were' b'spreading' b'up' b'when' b'other' b'are' b'too' b'therefore' b'described' b'.' b'It' b'is' b'deemed' b'well' b'only' b'until' b'similar' b'.' b'<eos>' b'After'
    b'and' b'improved' b'flooding' b',' b'they' b'may' b'be' b'starling' b'embassies' b'as' b'this' b'is' b'mules' b'in' b'specific' b'areas' b'.' b'Until' b'William' b'Leonard'
    b'Boom' b'!' b'when' b'this' b'bird' b'has' b'a' b'very' b'small' b'body' b',' b'a' b'may' b'@-@' b'face' b',' b'restrictions' b'into' b'roots' b','
    b'they' b'said' b'that' b'it' b'was' b'very' b'more' b'superficial' b'or' b'mostly' b'need' b'.' b'At' b'this' b'level' b'of' b'only' b'women' b'being' b'considered'
    b'as' b'they' b'alleged' b',' b'causing' b'them' b'to' b'unlock' b'feeding' b'Regular' b'disc' b'was' b'removed' b',' b'only' b'though' b'the' b'other' b'suspicions' b'initially'
    b'fitting' b'it' b'.' b'The' b'mass' b'track' b'records' b',' b'its' b'combination' b'of' b'different' b'\xe2\x80\x94' b'large' b',' b'but' b'are' b'also' b'Cardinal' b'pitchers'
    b'boxing' b'.' b'This' b'subsequent' b'sequence' b'take' b'to' b'designated' b'bend' b',' b'starting' b'from' b'Chinese' b'locations' b'to' b'may' b'complete' b'losses' b'donated' b'reliquaries'
    b'.' b'The' b'kakapo' b'continues' b'up' b'six' b'triple' b'of' b'the' b'kakapo' b'.' b'<eos>' b'The' b'first' b'free' b'basic' b'bird' b'is' b'replaced' b'by'
    b'Arabs' b'of' b'the' b'Wyoming' b'Agency' b',' b'where' b'it' b'is' b'illegal' b'that' b'can' b'be' b'needed' b'by' b'native' b'their' b'shape' b'.' b'Common'
    b'roosts' b'most' b'estimate' b'were' b'treated' b'to' b'ba' b'in' b'because' b'before' b'their' b'source' b'question' b'by' b'sea' b',' b'increase' b',' b'Homs' b','
    b'economic' b'areas' b',' b'eat' b',' b'<unk>' b',' b'<unk>' b'.' b'The' b'dark' b'range' b'they' b'found' b'town' b'the' b'Wolfpack' b'of' b'blood' b'.'
    b'The' b'eggs' b'Feldman' b'sought' b'to' b'be' b'kept' b'as' b'high' b'as' b'likely' b',' b'and' b'so' b'they' b'continue' b'them' b',' b'they' b'as'
    b'well' b'as' b'brunt' b'.' b'As' b'of' b'association' b',' b'conservation' b',' b'Mt' b',' b'breath' b'and' b'<unk>' b'have' b'long' b'<unk>' b'calendar' b','
    b'initially' b'provisions' b'when' b'any' b'tropical' b'Ireland' b'were' b'forced' b'are' b'.' b'<eos>' b'Skye' b'also' b'Splitsider' b'the' b'second' b'as' b'the' b'send' b'morals'
    b'are' b'become' b'only' b'known' b'to' b'yield' b',' b'the' b'Rules' b"'s" b'deity' b'was' b'placed' b'in' b'flightless' b'snakes' b'.' b'the' b'owl' b','
    b'Marie' b',' b'and' b'regulation' b'were' b'located' b'on' b'1' b'December' b'2006' b',' b'and' b'beach' b'and' b'<unk>' b'helmets' b'activities' b'on' b'Alkan' b"'s"


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 238.1
    loss: 5.168
    elapsed time (seconds): 165.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  47.707 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
