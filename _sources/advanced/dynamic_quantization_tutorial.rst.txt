.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'of' b'their' b'arms' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'The' b'Peach' b'Boom' b'Bang' b'Bang' b'game' b'=' b'<eos>' b'<eos>' b'dataDyne' b'premiered' b'in'
    b'northeastern' b'Dublin' b'remained' b'in' b'limestone' b',' b'North' b'Korea' b'to' b'a' b'near' b'attendant' b'throughout' b'number' b'was' b'about' b'about' b'60' b'hours' b'are'
    b'going' b'in' b'1856' b'that' b'had' b'one' b'increased' b'range' b'.' b'Its' b'1611' b'did' b'not' b'shift' b'police' b'activities' b',' b'weather' b'before' b'one'
    b'face' b'and' b'Brachylophosaurus' b'within' b'the' b'open' b'flanks' b'.' b'By' b'07' b'and' b'200' b',' b'the' b'entire' b'Origin' b'is' b'held' b'in' b'Ireland'
    b',' b'and' b'walk' b'in' b'service' b'notes' b'various' b'individual' b'years' b'acknowledging' b'birds' b'a' b'mini' b'@-@' b'governmental' b'larger' b'assembly' b'.' b'This' b'city'
    b'is' b'common' b'in' b'areas' b',' b'but' b'in' b'1997' b',' b'they' b'be' b'visited' b'by' b'the' b'other' b'potent' b'bird' b'of' b'some' b'of'
    b'(' b'150' b'metres' b')' b'blessing' b'(' b'<unk>' b')' b'.' b'autobiography' b'million' b'were' b'widely' b'met' b',' b'including' b'the' b'sexual' b'Hegna' b'in'
    b'western' b'Ireland' b'.' b'In' b'his' b'deployment' b'and' b'Pakistan' b',' b'efforts' b'such' b'as' b'<unk>' b',' b'Camptosaurus' b',' b'Tel' b'Gacy' b',' b'151Eu'
    b',' b'<unk>' b',' b'<unk>' b',' b'anchors' b',' b'lubricants' b',' b'Sidonian' b'Revival' b',' b'solitarius' b'and' b'other' b'regions' b'.' b'In' b'western' b'Somerset'
    b',' b'Kansas' b',' b'New' b'Zealand' b'Smith' b',' b'Barre' b',' b'Provisional' b'Amber' b',' b'Bode' b',' b'and' b'South' b'Africa' b',' b'is' b'now'
    b'them' b'to' b'be' b'more' b'successful' b'.' b'Since' b'they' b'still' b'featured' b'first' b'organized' b'by' b'its' b'presence' b'with' b'jumping' b'an' b'female' b','
    b'they' b'hit' b'some' b'legs' b'be' b'<unk>' b'.' b'They' b'coined' b'most' b'regard' b'to' b'<unk>' b',' b'usually' b'similar' b'to' b'<unk>' b',' b'doubled'
    b'high' b'the' b'core' b'or' b'flipped' b';' b'however' b'.' b'Though' b'this' b'is' b'only' b'written' b'through' b'any' b'other' b',' b'many' b'of' b'these'
    b'sins' b',' b'however' b',' b'become' b'strong' b'until' b'the' b'gleba' b'effects' b'.' b'cells' b'and' b'a' b'Purple' b'signs' b'of' b'antibodies' b'are' b'261'
    b',' b'especially' b'less' b'than' b'since' b'water' b',' b'Lemon' b'posterior' b'next' b'relationship' b'.' b'<eos>' b'A' b'version' b'for' b'first' b'eight' b'hours' b'of'
    b'divers' b',' b'and' b'Favorite' b'modes' b'duet' b',' b'East' b'vegetation' b'Christians' b'are' b'grassland' b'from' b'consultancy' b'Western' b'inscriptions' b'.' b'Ceres' b'and' b'Conservation'
    b'457' b'joked' b'his' b'existence' b'on' b'<unk>' b',' b'largely' b'lacking' b'more' b'commonly' b'starting' b'.' b'The' b'royal' b'frigate' b'is' b'carried' b'into' b'New'
    b'Zealand' b',' b'where' b'she' b'falls' b',' b'states' b'that' b'species' b'detected' b'those' b'to' b'some' b'at' b'night' b'.' b'Near' b'six' b'years' b','
    b'one' b'half' b'of' b'these' b'convective' b'residents' b'contained' b'to' b'identify' b'three' b'earned' b'its' b'lives' b'of' b'conversations' b'available' b',' b'and' b'adding' b'them'
    b',' b'however' b',' b'he' b'allows' b'more' b'better' b'Dycroft' b'in' b'blue' b'.' b'Nuclear' b'speckles' b'held' b'such' b'large' b'areas' b'from' b'Ireland' b','
    b'which' b'is' b'also' b'known' b'for' b'surveying' b'from' b'maturity' b'or' b'laity' b'.' b'These' b'oil' b'species' b'are' b'incorporated' b'to' b'possibly' b'.' b'More'
    b'late' b'of' b'birds' b'were' b'confronted' b'by' b'age' b'<unk>' b'system' b',' b'which' b'saw' b'no' b'natural' b'areas' b'in' b'non' b'@-@' b'Islamic' b'starlings'
    b'.' b'<eos>' b'Tito' b'of' b'flightless' b'starlings' b',' b'may' b'not' b'be' b'high' b'<unk>' b',' b'typically' b'<unk>' b'.' b'Reports' b'structures' b'directed' b'Octavia'
    b'to' b'be' b'spread' b'GeForce' b'the' b'first' b'Communists' b'outside' b'their' b'larvae' b',' b'<unk>' b'@-@' b'spearheaded' b'plumage' b',' b'fragments' b'or' b'time' b','
    b'though' b'Eaton' b'and' b'Paranthodon' b'are' b'camel' b'1645' b',' b'causing' b'their' b'Einstein' b'placement' b'of' b'its' b'Picpoul' b'Square' b',' b'<unk>' b'a' b'special'
    b'snake' b',' b'while' b'the' b'male' b'will' b'turn' b'a' b'suitable' b'cloth' b'with' b'cells' b'.' b'Eventually' b',' b'they' b'are' b'deeply' b'aided' b'by'
    b'<unk>' b'.' b'As' b'isn' b'dwarf' b',' b'it' b'seized' b'doubt' b'where' b'it' b'will' b'be' b'built' b'.' b'<eos>' b'galaxies' b'include' b'pathways' b'in'
    b'jetport' b'Pagan' b'suburbs' b'remains' b'so' b'grammarian' b'well' b',' b'dot' b',' b'<unk>' b',' b'Warm' b',' b'<unk>' b',' b'resuming' b',' b'tracking' b'and'
    b'microscopic' b',' b'primarily' b'Abby' b'and' b'bony' b',' b'depending' b'on' b'less' b'than' b'Tintin' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'='
    b'<eos>' b'<eos>' b'In' b'turn' b',' b'the' b'common' b'starling' b'of' b'starling' b'depends' b'on' b'3' b'%' b'au' b'1' b'second' b'isotopes' b',' b'which'
    b'is' b'distinguished' b'by' b'<unk>' b',' b'permitted' b'<unk>' b',' b'about' b'75' b'meters' b'(' b'124' b'mi' b')' b'above' b'times' b'at' b'08' b'million'
    b'substances' b'.' b'In' b'1941' b',' b'there' b'have' b'no' b'fewest' b'calls' b'about' b'with' b'a' b'conditional' b'bird' b',' b'not' b'so' b'<unk>' b'<unk>'
    b',' b'although' b'it' b'is' b'Islander' b'or' b'less' b'ambiguous' b'become' b'difficult' b'.' b'What' b'has' b'high' b'damage' b'at' b'times' b'that' b'are' b'Chaoyangsaurus'
    b'as' b'part' b'of' b'<unk>' b',' b'\xe2\x80\x98' b',' b'and' b'even' b'for' b'induced' b'honour' b'<unk>' b',' b'but' b'when' b'wet' b',' b'they' b'are'
    b'a' b'missing' b'roughly' b'realigned' b'leaves' b'.' b'They' b'arrive' b'out' b'that' b'sprinting' b'their' b'left' b'is' b'Archdiocese' b';' b'they' b'are' b'found' b'to'
    b'common' b'sand' b'areas' b'that' b'are' b'often' b'a' b'booms' b'for' b'depending' b'on' b'that' b'season' b';' b'well' b',' b'perhaps' b',' b'kakapo' b'\xe2\x80\x94'
    b'releasing' b'it' b'.' b'A' b'significant' b'block' b'is' b'report' b'to' b'be' b'consistently' b'transcribed' b'on' b'the' b'Isle' b'of' b'Previously' b'.' b'Polyurethane' b'suggests'
    b'that' b'they' b'do' b'not' b'think' b'that' b'a' b'night' b'species' b'exists' b'up' b'over' b'most' b'weeks' b'.' b'Further' b'can' b'be' b'confined' b'to'
    b'genomics' b',' b'which' b'will' b'be' b'seen' b'for' b'such' b'languages' b'may' b'be' b'made' b'down' b'to' b'<unk>' b'at' b'a' b'extant' b'angle' b'.'
    b'those' b'males' b'under' b'Celtic' b'birds' b'supplied' b'by' b'an' b'breast' b'normally' b'ranged' b'and' b'only' b'bite' b'control' b'up' b'for' b'the' b'eye' b'.'
    b'In' b'eastern' b'autumn' b',' b'this' b'male' b'nest' b'feathers' b'may' b'Dollodon' b'1605' b'\xe2\x80\x93' b'one' b'a' b'appearance' b'so' b'them' b'to' b'eat' b'farms'
    b'.' b'These' b'structural' b'foraging' b'characteristic' b'of' b'intelligent' b'weather' b',' b'variables' b'and' b'even' b'ribosomes' b'appear' b'back' b'so' b'to' b'synthesis' b'.' b'sword'
    b'brought' b'them' b'to' b'improve' b'by' b'processing' b'or' b'farms' b',' b'their' b'upright' b'Policy' b'were' b'charged' b'in' b'eukaryotic' b'native' b'areas' b'.' b'A'
    b'large' b'LED' b'kakapo' b'Brahma' b'supplies' b'that' b'intend' b',' b'for' b'one' b'panther' b',' b'one' b'believing' b'to' b'symbiosis' b'by' b'wolves' b'with' b'it'
    b',' b'about' b'up' b'out' b'19th' b'or' b'litters' b'.' b'For' b'nineteen' b'or' b'half' b',' b'the' b'kakapo' b'is' b'sunny' b';' b'with' b'leg'
    b'other' b'divine' b',' b'pale' b'trees' b'appear' b'and' b'widespread' b'with' b'muscaria' b',' b'they' b'have' b'timing' b'power' b'with' b'<unk>' b'or' b'other' b'ions'
    b'.' b'<unk>' b'here' b'(' b'such' b'Glenn' b'fossils' b'does' b'not' b'live' b'in' b'other' b'starlings' b',' b'such' b'as' b'amino' b'wind' b'Mahabharata' b')'
    b'is' b'subject' b'.' b'<eos>' b'Three' b'other' b'cells' b'controlled' b'infections' b'\xe2\x80\x93' b'including' b'tree' b'vegetation' b'depicting' b'monastic' b',' b'while' b'when' b'birds' b'are'
    b'often' b'synthesized' b',' b'glucose' b',' b'other' b'the' b'common' b'Venus' b'magnetic' b'court' b'meant' b'second' b'south' b'<unk>' b'variety' b'where' b'they' b'do' b'be'
    b'outside' b'the' b'ice' b'and' b'other' b'late' b'.' b'Some' b'common' b'starlings' b'only' b'haired' b'native' b',' b'as' b'they' b'were' b'fully' b'prone' b'to'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.6
    loss: 5.168
    elapsed time (seconds): 150.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  15.656 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
