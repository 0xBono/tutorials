.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'19' b'to' b'3' b'@.@' b'5' b'states' b'over' b'1' b'centimetres' b'.' b'Occasionally' b'with' b'Bourdais' b',' b'Irish' b'or' b'jewellery' b'cannot' b'be' b'found'
    b'credible' b'material' b'.' b'<eos>' b'prominent' b'(' b'short' b'name' b'claims' b'such' b'L.A.M.B.' b')' b'from' b'the' b'spawning' b'Palmyrenes' b'.' b'whatever' b'this' b'"'
    b'rhythm' b'formalized' b'"' b',' b'Celtic' b'Les' b'areolatum' b'ran' b',' b'opening' b'under' b'others' b'of' b'the' b'crops' b'to' b'Christina' b'sexpunctatus' b',' b'and'
    b'continued' b'to' b'have' b'block' b'them' b'in' b'harshly' b'the' b'ability' b'to' b'deliver' b'noise' b'.' b'It' b'is' b'also' b'so' b'associated' b'to' b'can'
    b'wanting' b'to' b'be' b'killed' b',' b'but' b'this' b'franchise' b'would' b'not' b'be' b'150' b'ft' b'.' b'Males' b'are' b'able' b'to' b'lose' b'by'
    b'"' b'causing' b'people' b'of' b'adolescence' b'"' b',' b'only' b'yet' b'readily' b'incorrectly' b'charges' b'.' b'Escort' b'exhibit' b'also' b'touch' b'in' b'his' b'proximity'
    b'to' b'death' b'that' b'surface' b'micrometres' b'on' b'or' b'trial' b'them' b'.' b'Once' b'this' b'ending' b'<unk>' b'proposal' b',' b'they' b'would' b'not' b'have'
    b'no' b'neck' b'Maggie' b'and' b'eat' b'warnings' b',' b'while' b'so' b'the' b'<unk>' b'jaguar' b'for' b'food' b',' b'wolf' b',' b'scales' b'have' b'their'
    b'most' b'magnitude' b'.' b'This' b'bird' b'despite' b'the' b'most' b'good' b'effect' b'on' b'his' b'understory' b'by' b'contradicted' b'when' b'this' b'species' b'was' b'it'
    b'to' b'face' b'back' b'for' b'two' b'times' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Architecture' b'recordings' b'=' b'=' b'<eos>' b'<eos>' b'Odyssey' b'starlings' b'are'
    b'known' b'for' b'four' b'inscriptions' b',' b'and' b'injury' b'grey' b'exposure' b'nine' b'by' b'does' b'George' b'primary' b'while' b'"' b'they' b"'ve" b'the' b'function'
    b'of' b'diameter' b',' b'encloses' b'and' b'<unk>' b',' b'open' b'or' b'their' b'romantic' b'wings' b',' b'are' b'consistent' b'from' b',' b'playing' b'orphanage' b'you'
    b'reveals' b',' b'the' b'best' b'<unk>' b'wooden' b',' b"'" b'which' b'greatly' b'am' b'it' b'treats' b',' b'even' b'that' b'needs' b'notoriously' b'nest' b'takes'
    b'trouble' b'so' b'out' b'with' b'Davie' b'.' b'When' b'his' b'moralitas' b'maybe' b'it' b"'s" b'pure' b',' b'Evolution' b'and' b'Orwell' b',' b'Carey' b'may'
    b'conquer' b'I' b'can' b'not' b'drugs' b'him' b'who' b'soon' b'definitely' b'too' b'powerful' b',' b'and' b'come' b'out' b'for' b'an' b'horizontal' b'difference' b'.'
    b'"' b'To' b'be' b'unstable' b',' b'in' b'and' b'their' b'62' b':' b'calculators' b',' b'and' b'Portage' b',' b'along' b'more' b'stability' b'.' b'There'
    b'are' b'just' b'longer' b'studies' b',' b'such' b'as' b'spider' b',' b'and' b'sheep' b'are' b'moving' b'to' b'their' b'black' b',' b'because' b'most' b'birds'
    b'offers' b'<unk>' b'white' b'prior' b'to' b'<unk>' b'.' b'There' b'may' b'be' b'seen' b'by' b'sands' b'at' b'this' b'side' b'.' b'Each' b'fruits' b'of'
    b'Quite' b'behaviour' b'and' b'galaxy' b'are' b'its' b'spore' b'<unk>' b',' b'which' b'stretched' b'from' b'anthems' b',' b'before' b'side' b'of' b'that' b'outer' b'movement'
    b'.' b'Another' b'image' b'directly' b',' b'if' b'jewelled' b',' b'were' b'shooting' b'in' b'<unk>' b'Ceratops' b'around' b'Fort' b'stripes' b',' b'a' b'man' b'named'
    b'compiling' b'immortal' b'they' b'accessed' b'Shaggy' b'atherfieldensis' b'.' b'They' b'otherwise' b'said' b'that' b'they' b'have' b'reversed' b'acids' b'involving' b'a' b'former' b',' b'admirable'
    b'@-@' b'water' b'locks' b'.' b'"' b'The' b'model' b'is' b'profound' b',' b'"' b'be' b'probably' b'introduced' b'of' b'Papa' b'large' b'Anouilh' b',' b'and'
    b'may' b'have' b'been' b'generally' b'known' b'for' b'triumph' b'with' b'female' b',' b'two' b'islands' b'(' b'see' b'rate' b',' b'typically' b'fall' b'.' b'The'
    b'accusation' b'proved' b'to' b'speak' b'primarily' b'and' b'report' b'when' b'NC' b',' b'nothing' b',' b'and' b'other' b'of' b'his' b'feathers' b',' b'where' b'other'
    b',' b'if' b'there' b'are' b'ibotenic' b'Warner' b'describes' b'up' b'warriors' b'behaviour' b'in' b'easy' b'activity' b'.' b'Because' b'the' b'kakapo' b'powerless' b'indicated' b'that'
    b'it' b'is' b'likely' b'by' b'its' b'contradictory' b'beak' b'.' b'It' b'is' b'an' b'Sinai' b'image' b'@-@' b'like' b'now' b'rRNA' b'with' b'long' b'limit'
    b'.' b'It' b'is' b'sometimes' b'distributed' b'to' b'fill' b'their' b'effectiveness' b'by' b'Hurricane' b'Septimius' b'to' b'disperse' b'types' b'of' b'conflict' b',' b'their' b'tips'
    b'\xe2\x80\x94' b'and' b'throughout' b'1216' b'fire' b'look' b'to' b'tactical' b'Surviving' b'electron' b'enzymes' b'has' b'the' b'predator' b'.' b'They' b'called' b'them' b'as' b'front'
    b'of' b'flesh' b'by' b'<unk>' b',' b'degree' b'or' b'<unk>' b'(' b'resulting' b'<unk>' b')' b'and' b'television' b'privy' b'starlings' b':' b'<eos>' b'Hurricane' b'galericulata'
    b';' b'as' b'it' b'may' b'be' b'possibly' b'frequently' b'exposed' b'to' b'the' b'common' b'patch' b'of' b'dignity' b'and' b'eventually' b'pitted' b',' b'the' b'pair'
    b'have' b'come' b'and' b'make' b'yammer' b'and' b'tightly' b'<unk>' b'.' b',' b'said' b'that' b'their' b'head' b'could' b'not' b'desire' b'to' b'be' b'deer'
    b'short' b'.' b'It' b'is' b'believed' b'to' b'be' b'associated' b',' b'but' b'stretched' b'does' b'not' b'have' b'likened' b'wild' b'.' b'<eos>' b'When' b'then'
    b',' b'they' b'may' b'be' b'shortest' b'if' b'they' b'were' b'<unk>' b',' b'they' b'are' b'young' b';' b'"' b'all' b',' b'leg' b',' b'monotheistic'
    b',' b'studies' b'such' b'as' b'Benedictine' b'kings' b'<unk>' b'Poetry' b',' b'affected' b'as' b'societies' b'do' b'.' b'"' b'In' b'1877' b',' b'Kailash' b'still'
    b'has' b'a' b'vision' b'or' b'passes' b'the' b'provincial' b'animals' b'of' b'the' b'most' b'<unk>' b',' b'membrane' b',' b'trees' b'and' b'regulated' b'ones' b'.'
    b'In' b'the' b'beginning' b'of' b'the' b'19th' b'century' b',' b'Cornwallis' b'retained' b'movies' b'up' b',' b'likely' b'and' b'<unk>' b'in' b'the' b'<unk>' b'@-@'
    b'Armor' b'or' b'rear' b'lines' b'.' b'Although' b'learning' b'originated' b'from' b'many' b'birds' b',' b'it' b'becomes' b'dead' b'or' b'blue' b',' b'probably' b'feet'
    b'.' b'Similarly' b',' b'they' b'feature' b'body' b'Scapteriscus' b'dead' b',' b'ribosomal' b'(' b'420' b')' b'bombs' b'with' b'compartments' b',' b'or' b'self' b'@-@'
    b'0' b'@-@' b'cell' b'(' b'player' b')' b'(' b'Le' b'Perrin' b'.' b'This' b'reminder' b'is' b'visible' b'as' b'so' b'special' b'or' b'crash' b'to'
    b'male' b'or' b'blue' b')' b'.' b'<unk>' b'is' b'a' b'red' b'parrot' b'pattern' b',' b'prior' b'to' b'by' b'a' b'<unk>' b'cannon' b'.' b'<eos>'
    b'A' b'number' b'of' b'other' b'dubious' b'habitats' b'wrote' b'that' b'all' b'of' b'these' b'species' b'uses' b'even' b'a' b'dangerous' b'Crash' b'fruits' b'.' b'No'
    b'coloring' b'"' b'ICC' b'"' b'is' b'potentially' b'found' b'and' b'more' b'reserved' b'(' b'like' b'calls' b'with' b'"' b'clear' b'blue' b'"' b';' b'she'
    b'says' b'that' b'"' b'this' b'point' b'to' b'sometimes' b'replicate' b'anything' b')' b'may' b'be' b'<unk>' b'.' b'<eos>' b'"' b'(' b't1' b'base' b'Conduct'
    b')' b'is' b'hawthorn' b'but' b'might' b'be' b'derived' b'to' b'the' b'architects' b'Pals' b'or' b'rows' b'or' b'drink' b'around' b'.' b'"' b'Argentine' b'concentrations'
    b'are' b'reliable' b'it' b'.' b'Yet' b',' b'expense' b'between' b'Arabs' b'and' b'white' b'are' b'common' b',' b'given' b'to' b'virtually' b'turning' b'completely' b'over'
    b'50' b'kilometres' b',' b'one' b'<unk>' b',' b'and' b'the' b'outlet' b',' b'with' b'eight' b'triangles' b'tissue' b'between' b'the' b'atmosphere' b'and' b'three' b'.'
    b'It' b'added' b'that' b'Bennett' b'are' b'an' b'intention' b'to' b'give' b'the' b'ground' b'back' b'in' b'that' b'year' b'due' b'to' b'binding' b'<unk>' b','
    b'which' b'suspected' b'that' b'<unk>' b'could' b'be' b'tall' b'.' b'An' b'turnpike' b'appears' b'on' b'a' b'planet' b'rather' b'than' b'recall' b'them' b',' b'and'
    b'they' b'could' b'be' b'fallen' b'to' b'this' b'other' b'and' b'rather' b'continents' b'.' b'This' b'traditional' b'other' b'growth' b'includes' b'contact' b'behind' b'their' b'one'
    b'under' b'100' b'\xe2\x80\x93' b'70' b'describe' b'(' b'1' b'in' b')' b'or' b'additional' b'snake' b'.' b'Although' b'feeding' b'jobs' b',' b'<unk>' b'is' b'treated'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 227.7
    loss: 5.168
    elapsed time (seconds): 159.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  32.686 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
