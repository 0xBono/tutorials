.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'paths' b'fighting' b'further' b'and' b'indicating' b'land' b'in' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Final' b'century' b'=' b'=' b'=' b'<eos>'
    b'<eos>' b'The' b'common' b'starling' b',' b'both' b'of' b'which' b'are' b'investigating' b'efforts' b',' b'a' b'7' b'@.@' b'36' b'm' b'(' b'4' b'@.@'
    b'1' b'ft' b')' b'ploy' b'above' b'between' b'2' b'@.@' b'8' b'feet' b'(' b'4' b'@.@' b'8' b'm' b')' b'in' b'length' b'long' b'with'
    b'29' b'orbital' b'open' b'to' b'original' b'resources' b'.' b'This' b'Hezbollah' b'may' b'be' b'seen' b'by' b'12' b'sharply' b'Governors' b'miners' b',' b'<unk>' b'<unk>'
    b'(' b'verse' b'Mitchell' b')' b',' b'C.' b'Franklin' b'van' b'<unk>' b',' b'No.' b'G' b'Mission' b',' b'<unk>' b'C.' b'<unk>' b',' b'Blonde' b'('
    b'fingering' b')' b'and' b'in' b'signs' b'<unk>' b'Field' b'(' b'triviality' b')' b'.' b'It' b'is' b'Applicant' b',' b'although' b'after' b'a' b'one' b'@-@'
    b'term' b'record' b'of' b'any' b'of' b'them' b'.' b'A' b'innings' b'to' b'all' b'typically' b',' b'either' b'when' b'Jordan' b'looks' b'into' b'the' b'side'
    b'of' b'a' b'communion' b',' b'Roosevelt' b',' b'further' b'mother' b'and' b'<unk>' b',' b'the' b'development' b'of' b'external' b'correctly' b'Anatolia' b'the' b'stronger' b'Tiber'
    b';' b'much' b'from' b'which' b'rugged' b'it' b'Munsee' b',' b'often' b'as' b'sy\xc4\x81dv\xc4\x81da' b',' b'used' b'to' b'wield' b'<unk>' b',' b'and' b'Resor' b','
    b'they' b'find' b'eminent' b'hits' b'.' b'Several' b'spots' b'were' b'declared' b'they' b'are' b'"' b'happy' b'"' b',' b'which' b'there' b'is' b'considerable' b'common'
    b'starlings' b'such' b'as' b'<unk>' b'.' b'These' b'factors' b'have' b'their' b'highest' b'return' b'to' b'ESPNcricinfo' b'(' b'including' b'John' b'<unk>' b'and' b'Courier' b')'
    b',' b'and' b'as' b'it' b'represent' b'ranging' b'with' b'inverted' b'to' b'Northern' b'or' b'Irish' b',' b'Grenache' b',' b'photographing' b'it' b'for' b'pale' b'Airlines'
    b',' b'which' b'can' b'be' b'so' b'touching' b'.' b'<eos>' b'tapping' b'@-@' b'quality' b'Grade' b'Domnall' b"'" b'main' b',' b'devotion' b'to' b'use' b'accepts'
    b'their' b'release' b'.' b'The' b'second' b'<unk>' b'of' b'keV' b'is' b'unlikely' b'to' b'much' b'parallel' b'shark' b'titles' b'were' b'their' b'longer' b'territories' b'to'
    b'cousins' b'at' b'the' b'New' b'Zealand' b'Truck' b'Islands' b'.' b'Under' b'extensive' b'and' b'distinct' b'populations' b'such' b'as' b'their' b'own' b'subjects' b',' b'often'
    b'ruled' b'part' b'of' b'northern' b'areas' b',' b'ridge' b'and' b'similarly' b'roads' b'.' b'A' b'passage' b'that' b'were' b'completed' b'with' b'pine' b'alike' b'are'
    b'less' b'<unk>' b'.' b'Like' b'his' b'significant' b'performance' b',' b'the' b'Adams' b'has' b'since' b'a' b'type' b'of' b'a' b'distinctive' b'body' b';' b'of'
    b'example' b',' b'the' b'white' b'species' b'are' b'native' b'.' b'<eos>' b'the' b'symbolic' b'earthstar' b'that' b'is' b'so' b'"' b'metallic' b'"' b'and' b'by'
    b'even' b',' b'while' b'it' b'has' b'greater' b'facts' b'of' b'memorable' b'activity' b',' b'in' b'some' b'of' b'those' b'of' b'ten' b',' b'or' b'above'
    b'20' b'%' b'of' b'the' b'collection' b'.' b'In' b'banned' b'apparatus' b',' b'males' b'are' b'found' b'in' b'environment' b',' b'or' b'beyond' b'walk' b'around'
    b'Lombardi' b'.' b'<eos>' b'The' b'kakapo' b'had' b'with' b'an' b'stream' b'of' b'mastering' b'from' b'them' b',' b'though' b'the' b'picture' b'of' b'which' b'<unk>'
    b'it' b'allowed' b'his' b'western' b'step' b'of' b'its' b'em' b'session' b';' b'the' b'prosecutor' b'is' b'still' b'attacked' b'by' b'<unk>' b'Mihai' b'carbonic' b'M.'
    b'<unk>' b',' b'which' b'are' b'probably' b'smaller' b'.' b'It' b'is' b'expected' b'that' b'this' b'would' b'be' b'a' b'planet' b'of' b'broods' b',' b'being'
    b'done' b'as' b'"' b'short' b',' b'unknown' b'and' b'small' b',' b'aged' b'outfitted' b'"' b'.' b'The' b'kakapo' b'claimed' b'in' b'Ireland' b'of' b'"'
    b'kind' b'of' b'sex' b'crops' b'practice' b'of' b'a' b'horizontal' b'game' b',' b'and' b'mainly' b'stands' b'to' b'this' b'sort' b'of' b'threshold' b'or' b'refine'
    b'"' b'.' b'Europium' b'called' b'the' b'puzzle' b'"' b'<unk>' b'"' b',' b'but' b'the' b'desired' b'Bath' b'Mountains' b'from' b'how' b'has' b'a' b'relatively'
    b'modern' b'where' b'one' b'initially' b'headed' b'less' b'widespread' b'than' b'the' b'miracle' b'.' b'By' b'New' b'Zealand' b',' b'range' b'from' b'the' b'kakapo' b'has'
    b'three' b'or' b'adapted' b',' b'having' b'few' b'enduring' b'females' b'and' b'scenes' b',' b'having' b'individual' b'faster' b'<unk>' b'small' b'numbers' b',' b'relied' b'on'
    b'how' b'females' b'indicate' b'it' b'will' b'be' b'represented' b'on' b'converts' b'on' b'a' b'block' b'.' b'This' b'has' b'subsequently' b'gone' b'have' b'introduced' b'married'
    b'species' b'of' b'mitosis' b'furiously' b'each' b'other' b'.' b'There' b'are' b'likely' b'that' b'they' b'can' b'have' b'been' b'used' b'up' b'the' b'<unk>' b'of'
    b'Russian' b'Busy' b'Encouraged' b'.' b'<eos>' b'More' b'moving' b'principal' b',' b'dark' b',' b'engineering' b',' b'many' b'native' b'cells' b'are' b'also' b'somewhat' b'your'
    b'longer' b'than' b'more' b'disposition' b'.' b'Common' b'Christians' b'have' b'evade' b'transcription' b';' b'they' b'form' b'brown' b'senator' b'explains' b'that' b'it' b'makes' b'mammalian'
    b'apparent' b',' b'others' b',' b'and' b'facial' b'gases' b'both' b'enemy' b',' b'they' b'are' b'very' b'exciting' b'.' b'When' b'they' b'are' b'possible' b','
    b'this' b'period' b'may' b'fight' b'up' b'their' b'male' b'rate' b'.' b'It' b'can' b'be' b'Venus' b'well' b'rather' b'present' b'or' b'very' b'male' b'insects'
    b'who' b'have' b'indeed' b'disappeared' b'in' b',' b'and' b'the' b'common' b'Ozploitation' b'architecture' b'of' b'Genetic' b'pores' b'are' b'open' b'up' b'to' b'soft' b'periods'
    b',' b'not' b'rejected' b'by' b'communication' b'.' b'There' b'are' b'subspecies' b'that' b'kakapo' b'upstream' b'influenced' b'there' b',' b'Jeff' b',' b'earth' b',' b'and'
    b'facial' b'lysate' b'with' b'<unk>' b',' b'own' b'structures' b'.' b'bashing' b'@-@' b'<unk>' b'attendants' b',' b'amongst' b'<unk>' b',' b'reservoirs' b'came' b'their' b'male'
    b'or' b'for' b'low' b'.' b'<unk>' b'to' b'have' b'was' b'high' b',' b'the' b'genes' b'on' b'the' b'eastern' b'ground' b'is' b'reduced' b'to' b'yeast'
    b',' b'some' b'attractive' b'factor' b',' b'and' b'holder' b'Ansari' b',' b'Reubens' b',' b'or' b'forbs' b'.' b'T.' b'Lynch' b'and' b'David' b'Lambert' b'beheaded'
    b'Hartington' b"'s" b'<unk>' b'impassable' b'.' b'It' b'presents' b'no' b'eye' b'archipelago' b'type' b'of' b'municipalities' b'and' b'color' b'by' b',' b'rather' b'than' b'attached'
    b'to' b'energy' b',' b'therefore' b'Xu' b'9' b'freely' b'(' b'Spynie' b')' b'at' b'all' b'or' b'white' b',' b'cells' b'its' b'beak' b'.' b'Because'
    b'of' b'the' b'common' b'herds' b',' b'fruit' b'antiquities' b'probably' b'do' b'leaves' b'the' b'islands' b'line' b',' b'he' b'have' b'sampled' b'Nadu' b'Peters' b'with'
    b'an' b'eye' b',' b'being' b'being' b'accompanied' b'by' b'leaves' b'mammalian' b'incendiary' b'seedlings' b',' b'which' b'is' b'its' b'most' b'Metallurgical' b'presence' b'that' b'are'
    b'distinguishable' b'that' b'each' b'species' b'of' b'poor' b'processing' b'them' b'to' b'be' b'by' b'birds' b'.' b'Hammett' b'\xe1\x83\xab' b'Goffman' b'regarding' b'other' b'types' b'of'
    b'attendees' b'of' b'other' b'bird' b',' b'Eurasian' b',' b'exquisitely' b',' b'Kamil' b',' b'or' b'hungry' b'fret' b'habitats' b'and' b'dissolves' b'up' b'breeding' b'elaborate'
    b'motifs' b'.' b'The' b'genus' b'to' b'a' b'temperate' b'season' b'is' b'flying' b'by' b'6B' b'off' b'a' b'mating' b'male' b'or' b'wants' b'to' b'find'
    b'it' b'.' b'As' b'one' b',' b'a' b'common' b'ancestral' b'asteroid' b',' b'with' b'Leslie' b'@-@' b'obligation' b',' b'because' b'they' b'are' b'derived' b'to'
    b'conditions' b'of' b'either' b'scramble' b',' b'they' b'help' b'about' b'resistance' b'to' b'decayed' b'enough' b'until' b'.' b'Common' b'nestling' b'Denmark' b'kicked' b'across' b'her'
    b'consort' b"'s" b'manuscripts' b';' b'Mayo' b'followed' b'with' b'a' b'variety' b'of' b'Chilean' b',' b'warrior' b'with' b'whom' b'one' b'male' b'ship' b'will' b'lead'
    b'.' b'If' b'something' b'this' b'color' b'in' b'<unk>' b'in' b'chicks' b'or' b'striped' b',' b'they' b'commonly' b'are' b'predicted' b'to' b'some' b'male' b'Burchill'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 251.3
    loss: 5.168
    elapsed time (seconds): 155.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  52.070 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
