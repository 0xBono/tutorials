.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'surfaces' b',' b'and' b'give' b'the' b'wasp' b'fell' b'to' b'one' b'year' b'.' b'A' b'well' b'for' b'this' b'case' b'reflected' b'based' b'at' b'<unk>'
    b'near' b'London' b'in' b'Orleans' b'.' b'The' b'only' b'large' b'public' b'structures' b':' b'their' b'solar' b'school' b'rises' b',' b'but' b'an' b'number' b'of'
    b'seemed' b'ending' b'measures' b'and' b'other' b'members' b'take' b';' b'his' b'female' b'may' b'be' b'registered' b';' b'his' b'foundation' b'will' b'be' b'inappropriate' b'competitive'
    b'.' b'The' b'asci' b'remained' b'US' b'footage' b'throughout' b'Secretary' b'Greenwich' b'<unk>' b',' b'with' b'theater' b'such' b'to' b'CPR' b'Venice' b',' b'a' b'joint'
    b'relative' b'delegation' b'known' b'as' b'<unk>' b'and' b'sealed' b'a' b'grapes' b'of' b'financial' b'natural' b'frontier' b',' b'abilities' b'and' b'killing' b'FITs' b'from' b'exceeds'
    b'both' b'dressing' b'.' b'<eos>' b'A' b'lover' b'also' b'notes' b'Curtain' b'glorify' b'Bulls' b'of' b'Palmyra' b'.' b'<eos>' b'The' b'event' b'was' b'itself' b'destroyed'
    b'.' b'The' b'Harwich' b'Age' b'was' b'highly' b'successful' b'to' b'form' b'a' b'half' b'of' b'50' b'%' b'a' b'year' b'each' b'year' b'at' b'a'
    b'short' b'level' b'.' b'<eos>' b'Hartley' b"'s" b'final' b'Danes' b'and' b'security' b'have' b'been' b'led' b'by' b'13' b'to' b'49' b'hours' b'after' b'May'
    b'at' b'this' b'time' b'.' b'By' b'2003' b'onwards' b'came' b'a' b'non' b'@-@' b'defeat' b'but' b'Parslow' b'published' b'by' b'an' b'eight' b'Balb\xc3\xa1s' b'used'
    b'up' b'5' b'%' b'of' b'330' b'@.@' b'19' b'%' b',' b'featuring' b'\xc3\x8dmar' b',' b'Shueisha' b'(' b'sage' b')' b'and' b'sand' b'<unk>' b'('
    b'1989' b')' b'.' b'The' b'final' b'Guide' b'prospects' b'was' b'successfully' b'drawn' b'in' b'Britain' b'(' b'<unk>' b'to' b'play' b')' b',' b'less' b'than'
    b'5' b'%' b'praised' b'serve' b',' b'<unk>' b'<unk>' b'Allen' b'as' b'a' b'planet' b'to' b'a' b'state' b'of' b'level' b'by' b'the' b'crime' b','
    b'and' b'the' b'other' b'confidence' b'paper' b'Eaton' b'and' b'the' b'judges' b'are' b'organised' b'in' b'place' b'.' b'<eos>' b'In' b'the' b'fourth' b'novel' b'from'
    b'<unk>' b',' b'they' b'can' b'fill' b'a' b'event' b'call' b'more' b'than' b'200' b'years' b'later' b'.' b'Dr.' b'impact' b'the' b'boat' b'<unk>' b'stirring'
    b'the' b'way' b'with' b'other' b'of' b'it' b'.' b'town' b'is' b'that' b'in' b'captivity' b'he' b'mentioned' b'up' b'rock' b'true' b'heavily' b'needed' b'to'
    b'tap' b'in' b'"' b'Fauna' b'"' b'than' b'.' b'Sean' b'Johnson' b'was' b'much' b'points' b'affected' b'due' b'to' b'dried' b'successes' b'C.R.U.S.H.' b'added' b'that'
    b'while' b'<unk>' b"'" b'longest' b',' b'the' b'route' b'supportive' b'arrives' b'.' b'The' b'Fathers' b'stated' b'that' b'Porvenir' b',' b'when' b'Army' b'<unk>' b'is'
    b'killed' b',' b'can' b'be' b'distributed' b',' b'and' b'for' b'any' b'other' b'species' b'.' b'As' b'one' b',' b'another' b'account' b'may' b'be' b'classified'
    b'to' b'gain' b'another' b'game' b'outside' b'more' b'time' b'by' b'caring' b'.' b'One' b'idea' b'of' b'his' b'body' b'Shi' b'is' b'being' b'more' b'fine'
    b'.' b'Instead' b',' b'it' b'feels' b'matching' b'these' b'other' b'worship' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Reception' b'=' b'=' b'<eos>' b'<eos>' b'<eos>'
    b'=' b'=' b'=' b'Internal' b'languages' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Certain' b'exceptions' b'affected' b'with' b'a' b'fictional' b'sky' b'animal' b'cells' b','
    b'who' b'associated' b'umpire' b'also' b',' b'attracting' b'the' b'female' b'convection' b'of' b'very' b'tormented' b'115' b'Shirley' b'/' b'1' b'years' b'.' b'<eos>' b'A'
    b'majority' b'of' b'Formula' b'Jose' b'observed' b'the' b'Gallian' b'History' b'development' b'=' b'The' b'review' b'can' b'be' b'collected' b'before' b'adding' b'initially' b',' b'Wind'
    b'or' b'prone' b'not' b'.' b'Mottram' b'does' b'recently' b'do' b'not' b'Jermaine' b',' b'they' b'suffered' b'them' b'around' b'three' b'or' b'10' b'years' b'from'
    b'their' b'underwater' b'disc' b'.' b'If' b'they' b'arrived' b'close' b'without' b'treated' b'.' b'If' b'those' b'eruption' b'for' b'traditional' b'and' b'special' b'events' b'from'
    b'the' b'surface' b',' b'they' b'indicate' b'"' b'I' b'makes' b'people' b'you' b'fall' b'it' b',' b'Zelanti' b'and' b'attractive' b',' b'and' b'tourism' b','
    b'particularly' b'"' b';' b'as' b'they' b'no' b'pronounced' b',' b'a' b'hairy' b'attack' b'union' b'by' b'a' b'perceived' b'strength' b'across' b'their' b'mother' b'.'
    b'Other' b'spines' b'see' b'D.J.' b'odoratus' b'seems' b'for' b'their' b'disciples' b'.' b'This' b'study' b'could' b'be' b'further' b'considered' b'when' b',' b'nuisance' b'substrates'
    b'from' b'one' b'maximum' b'or' b'Ottoman' b'periods' b'have' b'billed' b'them' b',' b'Barbicane' b'"' b'<unk>' b'"' b',' b'which' b'may' b'be' b'technically' b'minimal'
    b'.' b'Plensa' b'that' b'hinder' b'the' b'explosive' b'their' b'straightforward' b'expatriates' b'and' b'should' b'go' b'to' b'meanwhile' b',' b'compared' b'it' b'<unk>' b'to' b'to'
    b'caused' b'well' b'.' b'<eos>' b'Other' b'13' b'Rock' b'-' b'transits' b'may' b'be' b'growth' b',' b'when' b'it' b'367' b'consorts' b'in' b'the' b'periphery'
    b'of' b'putting' b'143' b'%' b'for' b'parietal' b'Greenwich' b',' b'and' b'the' b'eggs' b'of' b'4000' b'numbers' b'libretti' b'was' b'often' b'labeled' b',' b'according'
    b'to' b'one' b'of' b'the' b'rare' b'eye' b'importins' b'.' b'It' b'enhancing' b'that' b'Jews' b'uses' b'that' b'it' b'was' b'surprising' b';' b'there' b'does'
    b'not' b'be' b'tuned' b'so' b',' b'but' b'while' b'they' b'remember' b'bearing' b'much' b'over' b'poets' b'.' b'These' b'common' b'buoys' b'were' b'unlikely' b'by'
    b'one' b'stand' b'carved' b'up' b'to' b'advanced' b'<unk>' b'.' b'<unk>' b'listed' b'abortion' b'speak' b'as' b'a' b'social' b'priest' b'(' b'Swiss' b'sac' b')'
    b'and' b'feel' b'supporting' b'underneath' b'many' b'support' b'sociology' b'of' b'males' b'during' b'the' b'Earth' b'under' b'human' b'women' b'.' b'Though' b'it' b'did' b'not'
    b'find' b'their' b'agricultural' b'nature' b',' b'they' b'are' b',' b'Skye' b'enjoyed' b'a' b'dispute' b'from' b'their' b'planet' b'who' b'is' b'rarely' b'killed' b'for'
    b'antipathy' b'.' b'After' b'this' b'bird' b',' b'there' b'could' b'be' b'cinematographer' b'@-@' b'shaped' b',' b'and' b'means' b'using' b'food' b'.' b'<unk>' b','
    b'the' b'extra' b'best' b'Ihsan' b'starling' b'and' b'lecture' b'leaves' b'(' b'such' b'as' b'the' b'<unk>' b',' b'obliged' b'to' b'hold' b'the' b'death' b'of'
    b'his' b'archaea' b',' b'Guided' b'to' b'become' b'located' b'to' b'invade' b'taste' b')' b'and' b'"' b'restless' b',' b'brassy' b'"' b'(' b'nine' b')'
    b',' b'well' b'species' b'within' b'<unk>' b',' b'in' b'particular' b'.' b'These' b'<unk>' b'dealer' b'Bhai' b'writes' b'that' b'Flying' b'jostling' b':' b'"' b'At'
    b'an' b'very' b'good' b'venom' b'enough' b'to' b'give' b'he' b'is' b'1774' b'of' b'public' b'discovery' b',' b'whatever' b'a' b'good' b'society' b'\xe2\x80\x94' b'being'
    b'capable' b'of' b'proportionally' b'value' b'due' b'to' b'defensive' b',' b'raided' b'by' b'their' b'mutual' b'perfect' b',' b'invisible' b'wings' b'platform' b'and' b'trouble' b','
    b'and' b'the' b'red' b'vibrant' b'for' b'children' b"'s" b'outer' b'form' b'Andy' b'Saux' b',' b'Leonard' b'<unk>' b"'s" b'approximate' b'prehistory' b',' b'and' b'at'
    b'least' b'be' b'forsaken' b'or' b'thus' b'console' b'.' b'"' b'There' b'is' b'evidence' b'that' b'New' b'Zealanders' b'assigned' b'to' b'knees' b'intestines' b'.' b'A'
    b'female' b'called' b'"' b'phalanges' b'"' b'beak' b',' b'which' b'adjustments' b'in' b'his' b'ambiguous' b'Rock' b'(' b'hairpin' b')' b',' b'and' b'the' b'simple'
    b'Kuala' b'(' b'330' b'versus' b'Australia' b')' b'pair' b',' b'influence' b'(' b'also' b'of' b'association' b'to' b'the' b'females' b')' b'and' b'forgiveness' b'.'
    b'The' b'finger' b'is' b'hollow' b',' b'although' b'<unk>' b'holes' b',' b'<unk>' b'fir' b'and' b'their' b'attitude' b'are' b'vaguely' b',' b'positioned' b'line' b'Emirates'
    b'(' b'minutes' b')' b',' b'intense' b'life' b'.' b'<eos>' b'If' b'doing' b'a' b'deal' b'between' b'making' b'time' b',' b'when' b'live' b',' b'they'
    b'suggests' b'that' b'the' b'primary' b'lamina' b'although' b'typical' b'practices' b'noted' b'fewer' b'are' b'government' b'\xe2\x80\x93' b'rebuilding' b'his' b'core' b'.' b'Unlike' b'example' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.2
    loss: 5.168
    elapsed time (seconds): 152.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  16.569 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
