.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'speaks' b'to' b'between' b'1982' b'and' b'1914' b',' b'the' b'fashion' b'of' b'Somerset' b"'s" b'amber' b'thought' b'in' b'October' b'.' b'Before' b'both' b'livestock'
    b'of' b'Hornung' b"'s" b'minor' b'@-@' b'year' b'series' b',' b'Oscar' b'visited' b'a' b'distributor' b'nomination' b'to' b'former' b'time' b',' b'but' b'appeared' b'on'
    b'a' b'number' b'of' b'engineer' b'wading' b'Chris' b'Brown' b'taking' b'time' b'before' b'the' b'birth' b'of' b'gradually' b'rate' b'Salvador' b'.' b'<unk>' b'carbonic' b'operations'
    b'also' b'worked' b'in' b'them' b',' b'his' b'workers' b'on' b'television' b'policies' b'and' b'supplementary' b'poverty' b'.' b'USS' b'learned' b'.' b'<eos>' b'John' b'<unk>'
    b'terror' b'his' b'final' b'term' b'week' b'with' b'Chris' b'Perry' b',' b'in' b'a' b'strange' b'piece' b'of' b'French' b'police' b'sarcastic' b'@-@' b'level' b'game'
    b',' b'and' b'a' b'guitar' b'watered' b',' b'who' b'won' b'the' b'Agust\xc3\xadn' b'Boom' b'Prize' b'with' b'"' b'M\xc3\xa9tis' b'delivered' b'and' b'direct' b'"' b','
    b'making' b'himself' b'a' b'running' b'of' b'000' b'Mayson' b'director' b'Doggett' b'spectrometry' b',' b'established' b'the' b'book' b'of' b'the' b'<unk>' b'Marvel' b'the' b'<unk>'
    b'for' b'volume' b',' b'as' b'a' b'director' b'of' b'officer' b',' b'or' b'Bob' b'DuVall' b'influx' b'as' b'the' b'player' b'take' b'in' b'2002' b'.'
    b'Michael' b'Erik' b'furthered' b'Sylvia' b'looks' b'a' b'one' b'@-@' b'hook' b'Mako' b',' b'and' b'dedicated' b'to' b'a' b'basketball' b'minor' b'centimetres' b'@-@' b'adventure'
    b'year' b'for' b'his' b'intellectual' b'singers' b',' b'set' b'trouble' b'as' b'a' b'assistant' b'leader' b'.' b'On' b'March' b'4' b',' b'2012' b',' b'members'
    b'of' b'Fine' b'Press' b'moved' b'to' b'in' b'Australia' b',' b'a' b'antique' b'in' b'which' b'it' b'were' b'removed' b'from' b'her' b'feature' b'work' b'in'
    b'remembering' b'Repulse' b'as' b'resembling' b'their' b'social' b'tasks' b'.' b'He' b'taught' b'contract' b'a' b'female' b',' b'playing' b'470' b'in' b'seven' b'cases' b','
    b'developed' b'these' b'fervour' b'at' b'a' b'peak' b'@-@' b'ups' b'AD' b',' b'and' b'a' b'moderately' b'extent' b'ago' b'fundraising' b'of' b'Sean' b'proph\xc3\xa8te' b'.'
    b'When' b'Hernia' b'and' b'rest' b'Wooden' b'in' b'Mahesh' b'corrected' b'his' b'lips' b'included' b'West' b'Clothes' b'Jelly' b',' b'he' b'incorporated' b'"' b'Doyle' b'how'
    b'you' b'taught' b'a' b'permit' b'he' b'Me' b'searching' b'fall' b'.' b'"' b'Other' b'generally' b'church' b'vertebrae' b'as' b'tours' b',' b'it' b'apparently' b'mocked'
    b'opposition' b'from' b'future' b'@-@' b'anticipated' b'<unk>' b',' b'and' b'the' b'all' b'@-@' b'third' b'appearance' b'was' b'filmed' b'in' b'the' b'1999' b'GMA' b'Olympics'
    b'(' b'assassin' b')' b'.' b'Frederick' b'Brown' b'was' b'said' b'by' b'the' b'Boston' b'Isles' b'in' b'1913' b'.' b'He' b'did' b'not' b'become' b'not'
    b'late' b'of' b'the' b'Casino' b'on' b'October' b'16' b'.' b'In' b'1947' b',' b'an' b'temporary' b'citizen' b'to' b'remain' b',' b'O' b"'Malley" b','
    b'produced' b'by' b'John' b'Evans' b'Humphrey' b'in' b'1989' b',' b'contributed' b'that' b'the' b'principal' b'system' b'were' b'sent' b'to' b'his' b'wife' b'at' b'the'
    b'Sicily' b'line' b'at' b'the' b'FOCA' b'of' b'spending' b',' b'based' b'the' b'game' b'.' b'The' b'shared' b'proposed' b'networks' b'had' b'instalment' b'of' b'Japan'
    b"'s" b'stories' b'on' b'a' b'short' b'dry' b',' b'spontaneous' b'distances' b',' b'and' b'a' b'<unk>' b'<unk>' b'song' b'"' b'intervening' b'"' b'.' b'<eos>'
    b'The' b'book' b'is' b'a' b'side' b'of' b'relative' b'game' b',' b'with' b'the' b'fifth' b'level' b'from' b'a' b'Latin' b'University' b'input' b'by' b'Politburo'
    b'with' b'many' b'musical' b'copies' b'of' b'a' b'team' b'.' b'According' b'to' b'another' b'introduction' b'to' b'a' b'fellow' b'review' b'on' b'the' b'next' b'day'
    b'they' b'was' b'given' b'planet' b'recordings' b'<unk>' b'pest' b',' b'influenced' b'contraceptives' b'.' b'In' b'1895' b',' b'they' b'were' b'not' b'a' b'tile' b'from'
    b'Judith' b',' b'and' b'around' b'called' b'their' b'classic' b'hands' b',' b'touchdowns' b',' b'Fresh' b'creative' b',' b'and' b'emotions' b'of' b'department' b'priorities' b'.'
    b'<eos>' b'Before' b'its' b'conclusion' b'with' b'Wynne' b',' b'Head' b'recorded' b'the' b'race' b'down' b'in' b'the' b'United' b'States' b'in' b'educational' b'empire' b'('
    b'a' b'"' b'1919' b'strength' b'which' b'I' b'could' b'be' b'represented' b'at' b'a' b'back' b'ancestor' b'in' b'every' b'2004' b'pond' b'of' b'unity' b'in'
    b'<unk>' b',' b'Dublin' b')' b',' b'attempts' b'budget' b'here' b'is' b'presented' b'that' b'is' b'or' b'affiliated' b'to' b'that' b'resolution' b'.' b'"' b'Another'
    b'version' b'is' b'contacted' b'as' b'power' b'at' b'one' b'ideas' b'cooler' b'ability' b'for' b'winds' b'during' b'the' b'weekend' b'of' b'an' b'separate' b'quest' b','
    b'and' b'greatly' b'might' b'be' b'given' b'formerly' b'studies' b'and' b'ideas' b',' b'Lovell' b',' b'as' b'violence' b',' b'<unk>' b'readings' b'and' b'poorer' b'fresh'
    b'stories' b'respectively' b'.' b'The' b'<unk>' b',' b'science' b',' b'Titanic' b',' b'<unk>' b'and' b'business' b'to' b'be' b'found' b',' b'resurrected' b'numerous' b'treatments'
    b'that' b'heated' b'causes' b',' b'on' b'23' b'May' b'1997' b'.' b'His' b'duration' b'following' b'candidates' b'"' b'Omar' b'"' b'became' b'proposed' b'to' b'be'
    b'suggested' b'in' b'a' b'special' b'setting' b'of' b'brown' b'linking' b'some' b'of' b'his' b'poems' b'was' b'"' b'something' b'"' b'.' b'Robert' b'Taylor' b'writes'
    b'that' b'their' b'"' b'power' b'school' b'is' b'largely' b'frightening' b'"' b',' b'and' b'the' b'player' b'"' b'persuaded' b'that' b'pursuers' b'"' b'bearing' b'the'
    b'evidence' b'of' b'"' b'families' b'of' b'fewer' b'nature' b"'" b'character' b',' b'and' b'boring' b':' b'.' b'I' b'ain' b"'t" b'meet' b'all' b'one'
    b'of' b'that' b'thought' b'that' b'now' b'a' b'big' b'lawsuit' b'results' b'why' b'this' b'portrayal' b'destroyed' b'in' b'her' b'large' b'neck' b'and' b'the' b'show'
    b'Vasa' b'additional' b',' b'today' b'Leone' b'out' b'of' b'feeling' b'and' b'not' b'a' b'figure' b'of' b'registers' b'only' b'love' b'.' b'"' b'In' b'1838'
    b',' b'"' b'Addicted' b'Witch' b'"' b',' b'The' b'"' b'Astounding' b'Que' b'novelist' b'"' b'(' b'2012' b')' b',' b'Tell' b'Christgau' b'(' b'also'
    b'known' b'much' b'as' b'it' b'was' b'kneeling' b'is' b'correct' b')' b'.' b'Gibson' b'is' b'once' b'known' b'on' b'remake' b'several' b'minor' b'sitcoms' b':'
    b'<unk>' b'de' b'Benjamin' b',' b'writing' b'of' b'Henstridge' b',' b'and' b'newspapers' b'has' b'replaced' b'in' b'the' b'numerous' b'reviews' b',' b'Thomas' b'Whedon' b','
    b'and' b'Super' b'Lindelof' b'into' b'Tennyson' b'in' b'unless' b'they' b'are' b'being' b'a' b'hit' b'night' b'.' b'However' b',' b'since' b'it' b'gave' b'the'
    b'six' b'stages' b'of' b'sophomore' b'multiplayer' b'over' b'a' b'season' b',' b'he' b'is' b'unable' b'to' b'earn' b'a' b'recurring' b'amount' b'of' b'Scientists' b'.'
    b'The' b'game' b'has' b'also' b'led' b'a' b'vinyl' b'sound' b'it' b'horror' b'into' b'highlight' b'philosophy' b',' b'Ann' b'(' b'767' b')' b'in' b'death'
    b'and' b'festivals' b'and' b'unconscious' b'Brown' b'to' b'be' b'emphasised' b',' b'and' b'in' b'2001' b'to' b'its' b'achievements' b'for' b'Mars' b'works' b'.' b'Different'
    b'arts' b'populations' b'to' b'forensic' b'release' b'are' b'grazed' b'for' b'both' b'sip' b'and' b'out' b',' b'during' b'some' b'"' b'<unk>' b'"' b',' b'Ruwan'
    b',' b'discussing' b'episodes' b'of' b'<unk>' b'that' b'included' b'Coniston' b'principles' b'against' b'Steve' b'(' b'thriller' b'<unk>' b')' b'.' b'The' b'Kakapo' b'budget' b'was'
    b'recorded' b'at' b'Hyderabad' b',' b'when' b'the' b'Trouble' b',' b'Loch' b'Arrested' b'vying' b'<unk>' b'tests' b'signed' b'him' b'world' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Character' b'life' b'=' b'=' b'<eos>' b'<eos>' b'The' b'annual' b'song' b'during' b'this' b'family' b'had' b'good' b'mixes' b'against' b'their' b'original' b'website'
    b'feature' b'.' b'When' b'the' b'player' b'obtained' b'in' b'the' b'second' b'century' b',' b'he' b'is' b'responsible' b'for' b'her' b'grandfather' b'Rome' b',' b'indicating'
    b'his' b'<unk>' b',' b'responsibility' b'"' b'laws' b'a' b'Inmates' b'that' b'has' b'a' b'opportunity' b'to' b'reuse' b'herself' b'like' b'.' b'"' b'The' b'Hoysala'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 244.1
    loss: 5.168
    elapsed time (seconds): 164.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  52.799 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
