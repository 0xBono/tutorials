.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'of' b'<unk>' b'Picture' b'<unk>' b'together' b'poisoning' b'in' b'flight' b',' b'including' b'a' b'modified' b'other' b'cases' b'of' b'Kamil' b'.' b'The' b'design' b'of'
    b'a' b'boyfriend' b'playing' b'a' b'imitation' b'based' b'on' b'eastern' b'maids' b'.' b'The' b'victory' b'would' b'be' b'authorized' b',' b'no' b'massive' b'extraordinary' b'relatives'
    b'(' b'1978' b')' b',' b'total' b'publisher' b'"' b'<unk>' b'of' b'the' b'<unk>' b'"' b'<unk>' b',' b'a' b'species' b'of' b'until' b'overgrown' b'after'
    b'the' b'clerical' b'@-@' b'language' b'definition' b';' b'Jews' b'happened' b'as' b'mathematician' b'Catherine' b'on' b'a' b'grave' b'with' b'"' b'argument' b'<unk>' b'"' b','
    b'and' b'was' b'found' b'in' b'100' b'games' b',' b'Bass' b',' b'and' b'<unk>' b',' b'which' b'was' b'a' b'allegory' b'in' b'science' b'.' b'<eos>'
    b'<eos>' b'<eos>' b'=' b'22nd' b'Hornung' b'(' b'spring' b'state' b')' b'=' b'<eos>' b'<eos>' b'Tauti\xc5\xa1ka' b'Shyam' b'<eos>' b'<eos>' b'10' b'Omar' b'(' b'powered'
    b'two' b'ladies' b')' b'or' b'his' b'songwriting' b'was' b'a' b'<unk>' b'known' b'to' b'fix' b'the' b'mini' b'@-@' b'Irish' b'peat' b'(' b'Gloucestershire' b'Much'
    b'game' b')' b'in' b'a' b'planet' b'and' b'manages' b'much' b'to' b'visible' b'for' b'sex' b'control' b'.' b'The' b'territory' b'identified' b'buildings' b'with' b'Bowie'
    b'by' b'Museum' b',' b'Spiegelman' b',' b'master' b'<unk>' b'<unk>' b',' b'The' b'FISA' b"'s" b'Worlds' b'for' b'Stalin' b',' b'preparing' b'Michael' b'Smith' b','
    b'HitFix' b'Mueller' b'and' b'Fiji' b',' b'<unk>' b'O' b"'Malley" b',' b'several' b'apex' b'.' b'With' b'commissioned' b'believed' b'that' b'the' b'old' b'brethren' b'may'
    b'be' b'written' b'without' b',' b'and' b'fixed' b'success' b'of' b'children' b',' b'in' b'a' b'prisoner' b'.' b'<eos>' b'Black' b'Shadow' b'recognized' b'a' b'informal'
    b'range' b'to' b'the' b'Sun' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Capital' b'=' b'=' b'<eos>' b'<eos>' b'reviewing' b'the' b'East' b'Man' b'(' b'1754'
    b')' b'may' b'undergo' b'place' b'on' b'compression' b'with' b'two' b'shaft' b'Christian' b'topics' b',' b'Democrats' b',' b'extinct' b'atom' b',' b'pupils' b',' b'<unk>'
    b',' b'earthworms' b',' b'<unk>' b',' b'brutally' b',' b'<unk>' b',' b'Core' b',' b'winged' b',' b'and' b'business' b'to' b'write' b'that' b'eventually' b'<unk>'
    b'relatives' b'and' b'fuel' b'<unk>' b'.' b'By' b'this' b'time' b'he' b'do' b'not' b'feel' b'any' b'other' b'when' b'they' b'put' b'its' b'lot' b'to'
    b'fifteen' b'or' b'seven' b'.' b'For' b'the' b'<unk>' b'<unk>' b'They' b'of' b'the' b'keeping' b'to' b'blow' b'up' b'or' b'merge' b'beyond' b'these' b'tissues'
    b',' b'reluctant' b',' b'<unk>' b'put' b'<unk>' b'variations' b'.' b'Mosley' b'\xe2\x80\x99' b'Through' b'Merit' b'stood' b'on' b'the' b'CE' b'majority' b'on' b'apart' b','
    b'and' b'they' b'were' b'upgraded' b'into' b'conviction' b'.' b'<eos>' b'Early' b'to' b'butyl' b',' b'Llosa' b"'s" b'games' b'sees' b'a' b'highly' b'<unk>' b'edge'
    b'of' b'Metallica' b'.' b'<eos>' b'blackmails' b'her' b'success' b',' b'native' b'@-@' b'suited' b'had' b'speculated' b'only' b'his' b'consensus' b'with' b'North' b'Korean' b','
    b'while' b'Bernissart' b'would' b're' b'@-@' b'lovely' b'of' b'Kamaludiningrat' b'(' b'although' b'they' b'won' b'them' b',' b'as' b'not' b'in' b'my' b'<unk>' b')'
    b'may' b'first' b'be' b'violent' b'.' b'However' b',' b'Patrick' b'Verne' b'causes' b'helium' b'a' b'resident' b'Enterprise' b'religiously' b'that' b'of' b'the' b'regions' b'are'
    b'published' b'contradicted' b'by' b'observatory' b'"' b'food' b'degrees' b'mean' b'and' b'Super' b"'t" b'distance' b'and' b'you' b'gave' b'to' b'me' b'explorers' b'that' b'come'
    b'into' b'you' b',' b'they' b'really' b'dishes' b'his' b'up' b'by' b'shattered' b',' b'opportunistic' b',' b'adult' b',' b'and' b'everything' b"'" b'rigged' b'challenge'
    b'"' b'.' b'<eos>' b'chalet' b',' b'was' b'a' b'Viscount' b'of' b'The' b'Baseball' b'TV' b'post' b'@-@' b'riot' b'to' b'become' b'based' b'on' b'the'
    b'Palmyrene' b'File' b'.' b'Crassweller' b'continued' b'"' b'I' b"'m" b'Always' b'<unk>' b'<unk>' b'?' b'"' b'To' b'make' b'it' b'one' b'of' b'the' b'game'
    b"'s" b'technical' b'candidacy' b'as' b'daughter' b'"' b'academic' b'.' b'"' b'<eos>' b'<eos>' b'<eos>' b'=' b'Fernando' b'Hugh' b'!' b'(' b'Homeland' b'Vic' b')'
    b'=' b'<eos>' b'<eos>' b'The' b'Augustan' b'Byrds' b'is' b'a' b'script' b'to' b'visit' b'known' b'an' b'public' b'film' b',' b'created' b'to' b'be' b'part'
    b'of' b'the' b'NHL' b'family' b'nymphs' b'with' b'not' b'information' b'@-@' b'player' b'.' b'This' b'maintained' b'an' b'small' b'line' b'at' b'around' b'Online' b'in'
    b'New' b'York' b',' b'named' b'it' b'with' b'a' b'mixed' b'astronomers' b'from' b'a' b'facility' b'called' b'assays' b'.' b'The' b'Muscat' b'is' b'threatened' b'a'
    b'spoof' b'of' b'observations' b'who' b'will' b'also' b'settle' b'over' b'exerted' b'they' b'should' b'be' b'killed' b'.' b'The' b'Lancashire' b'Mode' b'is' b'first' b'found'
    b'by' b'ailing' b'@-@' b'based' b'lips' b'cloud' b'protein' b',' b'so' b'in' b'the' b'ground' b',' b'higher' b',' b'human' b',' b'and' b'eye' b'.'
    b'It' b'purchased' b'its' b'first' b'season' b',' b'although' b'he' b'is' b'being' b'unlike' b'repetitive' b'order' b'each' b'vacation' b'.' b'The' b'writers' b'Quentin' b','
    b'then' b'in' b'"' b'Private' b'Feel' b'No' b'gardens' b'for' b'small' b'television' b'as' b'this' b'star' b'hectare' b'...' b'however' b'.' b"'" b'The' b'Poetry'
    b'of' b'<unk>' b'as' b'one' b'of' b'Basic' b'creator' b'.' b'"' b'Crisis' b"'" b'execution' b'from' b'sixteen' b'amateur' b'ideas' b'walls' b'and' b'the' b'leader'
    b'of' b'about' b'100' b'@.@' b'8' b'%' b'of' b'varying' b',' b'could' b'have' b'belonged' b'to' b'those' b'who' b'would' b'perform' b'a' b'decline' b'with'
    b'at' b'least' b'from' b'by' b'the' b'strength' b'of' b'the' b'Jews' b'.' b'"' b'<unk>' b'"' b'novel' b'and' b'<unk>' b'(' b'2000' b')' b'found'
    b'<eos>' b'"' b'If' b'terrible' b'"' b',' b'differ' b'in' b'the' b'Stars' b'in' b'the' b'1996' b'China' b',' b'Sandwich' b'wishes' b'pageant' b'Gibson' b'('
    b'NHC' b')' b',' b'is' b'a' b'irregular' b'version' b'of' b'the' b'orbital' b'center' b'of' b'funeral' b'natural' b'culture' b';' b'it' b'is' b'also' b'going'
    b'to' b'exist' b'<unk>' b'services' b'and' b'Jews' b'by' b'the' b'male' b'chemistry' b'from' b'.' b'Hero' b'incorporates' b'other' b'attempts' b'and' b'damaging' b'"' b'significant'
    b'<unk>' b'electricity' b'"' b'of' b'example' b'1767' b'a' b'music' b'with' b'an' b'"' b'hand' b',' b'rich' b',' b'branch' b'destruction' b'"' b'committee' b','
    b'eventually' b'published' b'accordingly' b',' b'to' b'have' b'joined' b'it' b'largely' b'charge' b'of' b'insomnia' b'.' b'Ida' b'or' b'imagination' b'relation' b'to' b'462' b'Basin'
    b'called' b'as' b'molecular' b'scholar' b'75th' b',' b'teenage' b'or' b'thick' b',' b'there' b'are' b'the' b'letters' b'among' b'the' b'typhoon' b"'" b'loyalty' b'how'
    b'bored' b'.' b'In' b'particular' b',' b'it' b'is' b'narrow' b'from' b'Hairan' b'Van' b'Forward' b',' b'Brown' b'probably' b'(' b'but' b'Philip' b'refers' b'together'
    b'.' b'They' b'<unk>' b'right' b'describe' b'in' b'minimize' b'Hebrew' b',' b'and' b'even' b'fly' b',' b'on' b'the' b'Tracey' b'Lakes' b',' b'in' b'venture'
    b'with' b'pumping' b'nature' b'reduction' b'.' b'It' b'was' b'recorded' b'by' b'a' b'two' b'@-@' b'species' b'that' b'became' b'faithful' b'that' b'partnered' b',' b'with'
    b'briefly' b'holes' b'without' b'the' b'B-' b'rather' b'than' b'pray' b'.' b'According' b'to' b'pale' b'treeguh' b',' b'brick' b',' b'application' b'Crane' b'of' b'London'
    b'have' b'moved' b'to' b'preparation' b'after' b'clients' b'.' b'<eos>' b'The' b'such' b'names' b'of' b'one' b'reaching' b'the' b'court' b',' b'juveniles' b'breaks' b'a'
    b'very' b'common' b'waste' b'on' b'its' b'head' b'such' b'as' b'the' b'<unk>' b'states' b'is' b'a' b'small' b'slot' b'of' b'view' b',' b'and' b'its'
    b'arms' b'is' b'not' b'Artificial' b'@-@' b'overly' b'.' b'According' b'to' b'Kalyani' b'Burleigh' b'Miyamoto' b'cutscenes' b',' b'the' b'Boat' b'Boat' b'Darkness' b'is' b'as'
    b'"' b'quite' b'deeply' b'sufficient' b'and' b'quite' b'very' b'underway' b'as' b'it' b'is' b'unknown' b'"' b'while' b'the' b'included' b'"' b'original' b'fruit' b'"'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 240.8
    loss: 5.168
    elapsed time (seconds): 164.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  50.011 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
