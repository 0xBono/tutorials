.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'therefore' b'after' b'the' b'@-@' b'antique' b'governance' b'opens' b'\xc2\xa3' b'2' b'million' b'in' b'(' b'1986' b')' b',' b'John' b'Colton' b'and' b'Banksia'
    b'1268' b'at' b'a' b'Feature' b'song' b',' b'West' b'Affairs' b'prior' b'to' b'York' b'.' b'An' b'physicist' b'It' b'has' b'already' b'been' b'a' b'species'
    b'from' b'the' b'1987' b'Union' b'Norman' b'sandstone' b'by' b'female' b'politicians' b'.' b'The' b'Metro' b'also' b'Ardan' b'role' b'as' b'"' b'true' b'with' b'Liberals'
    b'force' b'"' b'.' b'DuVall' b'also' b'experience' b'at' b'a' b'section' b'of' b'approximately' b'50' b'meters' b'(' b'100' b'mph' b')' b'west' b'of' b'incorporation'
    b'for' b'the' b'night' b',' b'with' b'a' b'excavation' b'of' b'high' b'grout' b'(' b'30' b'\xc2\xb0' b'individuals' b')' b'and' b'two' b'smaller' b'narrower' b'kingdoms'
    b'and' b'vines' b'or' b'concrete' b'.' b'It' b'has' b'Sam' b'recovered' b'in' b'system' b',' b'in' b'which' b'they' b'were' b'complicating' b'.' b'The' b'key'
    b'population' b'of' b'this' b'title' b'is' b'reminiscent' b'of' b'fresh' b',' b'F' b',' b'and' b'Mead' b'of' b'Commons' b';' b'merely' b'bromide' b',' b'the'
    b'ice' b'benefited' b'distributed' b'techniques' b'from' b'Vulcans' b'.' b'It' b'is' b'plays' b'that' b'all' b'@-@' b'Dance' b'spores' b'from' b'Ducks' b'which' b'has' b'little'
    b'invaded' b',' b'becoming' b'possibly' b'clear' b'a' b'construction' b'rather' b'than' b'registration' b',' b'well' b'as' b'exempt' b'Grande' b'<unk>' b',' b'Azure' b'<unk>' b'in'
    b'Zankou' b'and' b'Western' b'Pradesh' b',' b'Lithuania' b',' b'and' b'Northwest' b',' b'when' b'an' b'large' b'Owasco' b'<unk>' b'refinery' b'has' b'led' b'elite' b'techniques'
    b'of' b'their' b'major' b'species' b'.' b'"' b'<unk>' b'expressions' b'in' b'experimenting' b'"' b'is' b'the' b'aim' b'of' b'economic' b'giant' b'rufipes' b',' b'while'
    b'interior' b'areas' b'sits' b'and' b'criminal' b'circles' b'throughout' b'this' b'way' b'he' b'favored' b'sonic' b'energy' b',' b'representing' b'yellow' b'yields' b'orbit' b'ion' b'artwork'
    b'levels' b',' b'and' b'have' b'no' b'crop' b'items' b'.' b'<eos>' b'Since' b'either' b',' b'Ceres' b'crosses' b'lines' b'for' b'common' b'average' b',' b'on'
    b'her' b'animal' b'structure' b'as' b'food' b',' b'in' b'Old' b'cities' b',' b'from' b'50' b'Ducks' b'and' b'2003' b',' b'officially' b'805' b'by' b'3'
    b'million' b'heaviest' b',' b'4' b')' b',' b'hospitality' b',' b'and' b'kings' b'of' b'the' b'same' b'age' b'.' b'<eos>' b'Public' b'starlings' b'can' b'be'
    b'found' b'.' b'<eos>' b'Sometimes' b'attributes' b'with' b'white' b'over' b'remnant' b'transmission' b',' b'such' b'eat' b',' b'therefore' b'<unk>' b',' b'and' b'prefrontal' b'ridges'
    b',' b'are' b'<unk>' b'.' b'Other' b'deer' b'areas' b'take' b'with' b'two' b'others' b':' b'an' b'very' b'Irish' b'or' b'<unk>' b'introduction' b'from' b'the'
    b'caves' b'to' b'speak' b'.' b'showed' b'these' b'structures' b',' b'it' b'Koan' b'has' b'high' b'Lithuania' b',' b'with' b'which' b'England' b'will' b'enjoy' b'22'
    b'\xe2\x80\x93' b'5' b'in' b'(' b'eastern' b'below' b'3' b'@.@' b'4' b'\xc2\xb0' b')' b')' b',' b'which' b'results' b'on' b'mammals' b'to' b'actively' b'be'
    b'related' b'for' b'the' b'HIV' b'Mother' b'Period' b'.' b'"' b'leather' b'"' b'written' b'vary' b'in' b'their' b'elevations' b'is' b'precisely' b'offerings' b'[' b'of'
    b'<unk>' b'II' b'.' b'<unk>' b'of' b'other' b'Midlands' b'gleba' b'including' b'frequent' b'equilibrium' b'with' b'Muslims' b'using' b'endangered' b'leaves' b'(' b'having' b'spelled' b'attached'
    b'pink' b'seem' b',' b'blue' b'cross' b'dependent' b'outside' b'the' b'venomous' b'state' b'and' b'by' b'eye' b',' b'and' b'in' b'includes' b'red' b'nostrils' b')'
    b'rarely' b'mobility' b'.' b'<eos>' b'The' b'kakapo' b"'s" b'culture' b'is' b'relieved' b'to' b'evolve' b'only' b'linear' b'<unk>' b',' b'sugar' b',' b'sulfide' b','
    b'<unk>' b',' b'retorts' b',' b'<unk>' b',' b'wonderful' b'comprising' b'sport' b';' b'cats' b'<unk>' b'Freeman' b'affixed' b'concerts' b'in' b'their' b'<unk>' b'(' b'"'
    b'secluded' b'food' b'"' b')' b'and' b'"' b'waste' b'"' b',' b'on' b'a' b'protein' b'head' b'.' b'Two' b'two' b'species' b'minded' b'to' b'form'
    b'dried' b',' b'14' b',' b'70' b'minutes' b'of' b'178' b'@.@' b'9' b'%' b'from' b'an' b'mass' b'installed' b',' b'to' b'speak' b'with' b'motorists'
    b'of' b'diseases' b',' b'smooth' b',' b'Greek' b',' b'and' b'remote' b'male' b'figures' b',' b'and' b'Bread' b'for' b'afflicted' b'.' b'consensus' b',' b'there'
    b'were' b'no' b'dispersal' b'to' b'form' b'the' b'skyscraper' b',' b'which' b'contains' b'its' b'distinctive' b'breeding' b'or' b'isotope' b'tracks' b'.' b'The' b'crystalline' b'will'
    b'be' b'rare' b',' b'or' b'a' b"'" b'membrane' b'or' b'reality' b'Feet' b'.' b'<eos>' b'Tech' b'described' b'romance' b'with' b'wind' b'fruits' b'in' b'pre'
    b'@-@' b'forested' b'infections' b',' b'along' b'fragments' b'up' b'where' b'they' b'do' b'not' b'occur' b'for' b'other' b'<unk>' b'or' b'wetlands' b'.' b'Later' b','
    b'it' b'can' b'have' b'pointed' b'proteins' b'by' b'a' b'year' b'at' b'<unk>' b',' b'occasionally' b'more' b'nuts' b'.' b'When' b'they' b'do' b'about' b'all'
    b'specialized' b',' b'they' b'holds' b'activists' b'if' b'they' b'act' b'prey' b'.' b'<eos>' b'The' b'kakapo' b'Tamaulipas' b'is' b'often' b'brown' b',' b'and' b'being'
    b'an' b'elaborate' b'tool' b',' b'induced' b'a' b'civilian' b'membrane' b'that' b'can' b'impose' b'a' b'small' b'crescent' b'recovers' b'.' b'It' b'is' b'hypothesized' b'that'
    b'they' b'are' b'believed' b'to' b'have' b'an' b'native' b'eye' b',' b'or' b'who' b'suggested' b':' b'"' b'A' b'best' b'numerically' b'step' b',' b's'
    b',' b'or' b'hunt' b'with' b'a' b'underparts' b'"' b'(' b'the' b'only' b'ibis' b'song' b'for' b'Old' b'One' b'.' b')' b'may' b'be' b'described'
    b'as' b'Fake' b'and' b'the' b'band' b"'s" b'impact' b'.' b'Traditional' b'diseases' b'closely' b'have' b'zero' b'in' b'inside' b'them' b',' b'more' b'than' b'enhance'
    b'many' b'strongly' b',' b'although' b'they' b'are' b'also' b'always' b'arms' b'.' b'Also' b',' b'they' b'reduced' b'18' b'\xe2\x80\x93' b'5' b'cm' b'(' b'32'
    b'\xe2\x80\x93' b'4' b'in' b')' b'tall' b'.' b'The' b'diet' b'are' b'a' b'true' b'parrot' b'of' b'the' b'red' b'153Eu' b',' b'with' b'18' b'or'
    b'grey' b',' b'habitats' b',' b'and' b'the' b'steep' b'sex' b'raw' b'components' b'of' b'food' b'.' b'A' b'dimer' b'graph' b'witnessed' b'oars' b'in' b'some'
    b'shafts' b'than' b'that' b'slope' b',' b'although' b'bird' b'have' b'<unk>' b',' b'such' b'as' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b','
    b'and' b'terminate' b'like' b'like' b'in' b'biological' b'colored' b'than' b'them' b'.' b'If' b'they' b'typically' b'feed' b'around' b'twenty' b'or' b'up' b',' b'when'
    b'the' b'enzyme' b'around' b'about' b'10' b'km' b'(' b'12' b'@.@' b'3' b'km' b')' b'wide' b'lupus' b',' b'it' b'detectives' b'strongly' b'9' b'\xc2\xb0'
    b'barrels' b',' b'he' b'sings' b',' b'its' b'devil' b'being' b'modified' b'out' b'.' b'<eos>' b'The' b'couple' b'Ferdinand' b'Mariposans' b'@-@' b'muscular' b'(' b'Most'
    b'flashback' b'can' b'become' b'slowed' b'dead' b',' b'literature' b'and' b'bands' b')' b'.' b'Some' b'crystals' b'use' b'that' b'<unk>' b'is' b'most' b'unlikely' b'back'
    b'as' b'sing' b'as' b'they' b'may' b'be' b'pillars' b',' b'while' b'their' b'promise' b'cause' b'an' b'14' b'or' b'100' b'm' b'(' b'20' b'ft'
    b')' b'up' b'.' b'The' b'low' b'pattern' b'was' b'also' b'conveyed' b'at' b'the' b'bottom' b'of' b'a' b'dual' b'and' b'four' b'of' b'Gofraid' b"'s"
    b'food' b'colour' b'.' b'The' b'warrant' b',' b'likely' b'lit' b',' b'and' b'more' b'dense' b'shapes' b'(' b'bear' b'it' b'poorly' b'blade' b'are' b'shared'
    b',' b'easy' b'some' b'solar' b'birds' b',' b'and' b'measuring' b'devoted' b'to' b'native' b'.' b'A' b'intelligence' b'odor' b'includes' b'two' b'prey' b',' b'ditch'
    b'@-@' b'shaped' b'Tahiti' b',' b'educators' b',' b'and' b'grey' b'socks' b';' b'<unk>' b'are' b'a' b'few' b'star' b'spores' b'on' b'both' b'proteins' b'in'
    b'Wales' b',' b'and' b'into' b'the' b'Eastern' b'United' b'States' b'.' b'Kyle' b'M.' b'ancillary' b'describes' b'power' b'numbers' b'and' b'bone' b'waking' b'.' b'When'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 226.3
    loss: 5.164
    elapsed time (seconds): 154.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  25.212 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
