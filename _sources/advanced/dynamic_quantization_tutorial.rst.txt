.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Moon' b'(' b'teamed' b'for' b'eighteen' b'subspecies' b'on' b'its' b'paid' b'head' b'Croatian' b'1898' b',' b'which' b'driven' b'the' b'away' b'monsters' b';' b'"'
    b'scaled' b'from' b'Otherwise' b'@-@' b'Law' b'Herodianus' b',' b'/' b'old' b"'" b'1874' b'girl' b"'" b'has' b"'" b'"' b')' b'for' b'Tri' b'millibars'
    b'in' b'feline' b'.' b'of' b'twelve' b'more' b'sporting' b'application' b',' b'Venus' b',' b'the' b'other' b'characters' b'in' b'America' b',' b'bought' b'80' b'assists'
    b'of' b'Japanese' b'pistols' b'and' b'confusion' b'to' b'take' b'many' b'major' b'issues' b'\xe2\x80\x94' b'unlocked' b'Bell' b'over' b'August' b'22' b',' b'1910' b',' b'a'
    b'campus' b'time' b'to' b'<unk>' b'power' b'around' b'the' b'<unk>' b',' b'and' b'will' b'be' b'held' b'in' b'pursuit' b'of' b'the' b'<unk>' b'to' b'enlist'
    b'55' b'%' b'.' b'By' b'a' b'industry' b',' b'each' b'closing' b'the' b'forces' b'on' b'the' b'plates' b'include' b'it' b'Until' b'guineas' b'about' b'any'
    b'other' b'other' b'difficulty' b'time' b'.' b'The' b'documentary' b'sales' b'and' b'one' b'from' b'many' b'other' b'Jima' b'are' b'excited' b'to' b'attract' b'their' b'heads'
    b'in' b'settlers' b'.' b'The' b'ball' b'is' b'larger' b'enough' b'to' b'create' b'to' b'<unk>' b'\xe2\x80\x94' b'likely' b'deer' b',' b'Incident' b',' b'and' b'cavalry'
    b'LED' b'.' b'The' b'smallest' b'Indian' b'Youth' b',' b'where' b'the' b'Unicode' b'voluntarily' b'reversed' b'Daniels' b'between' b'Mars' b'and' b'13400' b'solitary' b'men' b','
    b'the' b'all' b'@-@' b'lived' b'rate' b'of' b'service' b'and' b'<unk>' b'led' b'a' b'54th' b'planet' b"'s" b'virtual' b'school' b'.' b'In' b'this' b'period'
    b'Show' b'kakapo' b'people' b'involved' b'from' b',' b'in' b'Highlander' b'des' b'Rodman' b'\xe2\x80\x94' b'based' b'in' b'Australia' b'will' b'be' b'like' b'the' b'cornerstone' b'of'
    b'Manders' b',' b'set' b',' b'and' b'gems' b'three' b'months' b'old' b'.' b'One' b'major' b'lots' b'of' b'his' b'own' b'or' b'desktop' b'buoy' b'can'
    b'be' b'used' b'.' b'The' b'final' b'half' b'was' b'eaten' b'after' b'Chicago' b',' b'and' b'as' b'in' b'1954' b',' b'the' b'Ring' b'"' b'sagebrush'
    b'"' b'is' b'theatrical' b',' b'untrained' b'food' b'or' b'allocation' b'.' b'This' b'bird' b'is' b'present' b',' b'and' b'the' b'majority' b'of' b'old' b'salmon'
    b',' b'with' b'their' b'adult' b',' b'is' b'much' b'intimately' b',' b'and' b'other' b'factors' b'<unk>' b'around' b'Gambit' b'.' b'The' b'basic' b'species' b'such'
    b'as' b'<unk>' b',' b'old' b',' b'Catholic' b',' b'<unk>' b',' b'<unk>' b'and' b'Whitman' b',' b'athletics' b'through' b'<unk>' b'as' b'part' b'of' b'inducing'
    b'itself' b'between' b'decline' b'.' b'Over' b'three' b'years' b'of' b'one' b'New' b'Zealand' b',' b'a' b'partial' b'diabolus' b'such' b'as' b'<unk>' b'Stegosaurus' b','
    b'revenue' b',' b'McDonald' b',' b'Chopra' b'and' b'beetles' b',' b'distinguish' b'how' b'batting' b'from' b'monasteries' b',' b'affordable' b',' b'cheaper' b',' b'it' b'appears'
    b'impossible' b'when' b'"' b'7' b'million' b'you' b'is' b'often' b'compared' b'to' b'native' b'or' b'athletic' b'rivers' b'.' b'But' b'I' b'could' b'be' b'loved'
    b'.' b'"' b'Several' b'birds' b'Jr.' b'members' b'more' b'word' b'that' b'manufacturing' b'of' b'Michigan' b"'s" b'planet' b'is' b'being' b'to' b'have' b'gathered' b','
    b'but' b'do' b'not' b'imposing' b'or' b'nest' b'of' b'several' b'birds' b'or' b'even' b'adults' b'as' b'feeding' b'.' b'<eos>' b'complimented' b'European' b'starlings' b','
    b'North' b'Ireland' b'may' b'have' b'raiders' b'used' b'as' b'they' b'could' b'be' b'transmitted' b'more' b'than' b'one' b'spun' b'.' b'<unk>' b'was' b'put' b'by'
    b'convective' b'occur' b'programming' b'from' b'other' b'coastal' b'birds' b',' b'except' b'million' b'parts' b'of' b'roosts' b'.' b'The' b'spread' b'of' b'them' b'began' b'only'
    b'parallel' b'to' b'c' b'and' b'then' b'are' b'recent' b'using' b'long' b',' b'including' b'the' b'female' b'crops' b'.' b'In' b'February' b'and' b'in' b'the'
    b'sea' b'it' b'Lukis' b'combines' b'soil' b',' b'the' b'red' b'movement' b'rates' b'of' b'more' b'pleasant' b'.' b'It' b'is' b'portrayed' b'around' b'within' b'hearing'
    b'abundant' b':' b'14' b'years' b'in' b'monastic' b'areas' b'as' b'well' b',' b'mainly' b'high' b'conflicts' b'to' b'the' b'Irish' b'criteria' b'of' b'250' b':'
    b'28' b'.' b'(' b'which' b'some' b'are' b'less' b'unlikely' b',' b'being' b'best' b'in' b'any' b'or' b'so' b'one' b'another' b',' b'is' b'decayed'
    b'no' b'once' b'27th' b')' b'.' b'<unk>' b'spots' b'usually' b'became' b'widely' b'Gamboa' b'.' b'Common' b'scores' b'include' b'steps' b'from' b'air' b'soil' b'that'
    b'may' b'not' b'be' b'further' b'.' b'It' b'is' b'driven' b'to' b'open' b'for' b'some' b'sort' b'.' b'Instead' b',' b'it' b'is' b'one' b'of'
    b'many' b'birds' b'converted' b'to' b'the' b'Adams' b'seaward' b'<unk>' b'.' b'The' b'common' b'starling' b'is' b'the' b'Nxf2' b'Party' b',' b'snout' b',' b'<unk>'
    b',' b'UCI' b',' b'G' b'bullet' b',' b'flashback' b'Holl' b',' b'<unk>' b',' b'scope' b',' b'Kazakhstan' b',' b'photography' b',' b'and' b'other' b'complex'
    b'shapes' b'.' b'A' b'powerful' b'undergraduate' b'print' b'is' b'unknown' b'.' b'One' b'of' b'these' b'struggled' b',' b'lactone' b',' b'and' b'remnants' b'of' b'7'
    b'@.@' b'4' b'in' b'(' b'122' b')' b',' b'is' b'being' b'(' b'some' b'break' b',' b'and' b'they' b'infest' b'through' b'them' b'\xe2\x80\x94' b'copulation'
    b'when' b'males' b'activated' b'low' b'or' b'settings' b'inside' b'bird' b')' b',' b'can' b'be' b'put' b'calling' b'that' b'this' b'Homarus' b'is' b'active' b'.'
    b'<eos>' b'<unk>' b'Run' b'in' b'its' b'thirteen' b'sexual' b'areas' b'and' b'the' b'violence' b'on' b'their' b'breeding' b'base' b',' b'criticizes' b'195' b'holsters' b'on'
    b'battering' b'they' b'are' b'uncommon' b'that' b'some' b'birds' b'very' b'found' b'needed' b'beyond' b'once' b'.' b'Allenton' b'Virchow' b'has' b'submitted' b'into' b'an' b'minimal'
    b'number' b'of' b'contraception' b'while' b'populations' b'of' b'Montenegro' b'writes' b'recast' b'Grade' b"'s" b'"' b'Member' b'of' b'<unk>' b'"' b'with' b'common' b'species' b'of'
    b'visitors' b',' b'or' b'greater' b'starling' b'.' b'The' b'population' b'of' b'Ceres' b'was' b'treated' b'for' b'urban' b'isolation' b',' b'poisoning' b',' b'and' b'mainstream'
    b'concern' b'.' b'<unk>' b',' b'they' b'were' b'probably' b'found' b'by' b'United' b',' b'but' b'can' b'indicate' b'be' b'brought' b'off' b'sprawling' b'into' b'her'
    b'muscle' b'markets' b'.' b'Rutherford' b'measure' b'that' b'a' b'thriving' b'variety' b'of' b'parodies' b'tend' b'to' b'have' b'spread' b'comprise' b'many' b'or' b'prevent' b'criteria'
    b'of' b'pyramidal' b',' b'heavier' b',' b'or' b'rural' b'blood' b'.' b'Juveniles' b'do' b'not' b'occur' b'through' b'higher' b'predators' b'for' b'a' b'season' b'with'
    b'breeding' b'formation' b'.' b'Ceres' b'often' b'<unk>' b'a' b'Ydll' b'owned' b'ventral' b'starlings' b',' b'referencing' b'nearly' b'one' b'hand' b'to' b'Northern' b'Ireland' b':'
    b'28' b'mi' b'.' b'Between' b'century' b',' b'or' b'plentiful' b'burns' b'involved' b',' b'some' b'over' b'this' b"'s" b'population' b'or' b'viral' b'mention' b'and'
    b'polished' b'fertiliser' b'may' b'not' b'be' b'briefly' b'eaten' b'in' b'for' b'their' b'breeding' b'sole' b'starling' b'towards' b'sea' b',' b'with' b'them' b'for' b'a'
    b'suitable' b'mammalian' b'variety' b'of' b'high' b'factors' b'.' b'<eos>' b'As' b'not' b'the' b'kakapo' b"'s" b'zero' b'abundance' b'(' b'Flemington' b',' b'its' b'male'
    b',' b'abbreviations' b',' b'they' b'is' b'flanked' b',' b'and' b'only' b'ticks' b')' b'flow' b'resourceful' b'towards' b'every' b'nest' b'.' b'Males' b'expect' b'into'
    b'another' b'cavalry' b',' b'unlike' b'those' b',' b'introductions' b',' b'<unk>' b',' b'beetles' b'and' b'ligand' b'are' b'may' b'be' b'culling' b'with' b'affluent' b'fluorescent'
    b'prey' b'.' b'Juveniles' b'gradually' b'carry' b'increased' b'hands' b',' b'when' b'them' b'were' b'reduced' b'for' b'high' b',' b'a' b'other' b'and' b'slightly' b'presentation'
    b'having' b'been' b'different' b'without' b'Razorback' b'.' b'As' b'they' b'are' b'shielding' b',' b'embodied' b'fly' b',' b'they' b'were' b'more' b'characteristic' b'of' b'their'
    b'<unk>' b'.' b'She' b'also' b'don' b'uncontrollable' b'locations' b'immediately' b'<unk>' b'them' b'after' b'they' b'do' b'efforts' b'to' b'be' b'their' b'head' b'off' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.1
    loss: 5.168
    elapsed time (seconds): 153.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  16.508 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
