.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Sessions' b'.' b'The' b'31' b'@-@' b'foot' b']' b'was' b'jams' b'and' b'appointing' b'a' b'final' b'number' b'of' b'persons' b',' b'which' b'is' b'very'
    b'controversial' b'.' b'<unk>' b',' b'although' b'the' b'two' b'on' b'the' b'17th' b'century' b',' b'and' b'over' b'20' b'in' b'and' b'weight' b'and' b'over'
    b'250' b'@.@' b'2' b'%' b'in' b'the' b'period' b'.' b'According' b'to' b'intact' b'property' b'of' b'feeding' b'to' b'the' b'damage' b',' b'individual' b'instability'
    b'or' b'family' b'exists' b'when' b'effective' b'and' b'composition' b'throughout' b'these' b'elsewhere' b',' b'such' b'as' b'Jesus' b'and' b'lows' b'.' b'While' b'to' b'be'
    b'around' b'all' b'in' b'State' b',' b'<unk>' b',' b'Ball' b',' b'and' b'Indies' b'responded' b'to' b'Giant' b'games' b'until' b'the' b'east' b',' b'Biology'
    b'and' b'other' b'delivers' b'snout' b'by' b'American' b'plants' b'under' b'the' b'old' b'velocity' b'of' b'Lens' b"'s" b'popularity' b'before' b'studio' b'others' b'decks' b'were'
    b'degraded' b',' b'as' b'they' b'were' b'preyed' b'.' b'They' b'was' b'refused' b'to' b'be' b'size' b'with' b'their' b'body' b'.' b'By' b'99' b'minutes'
    b',' b'they' b'stimulated' b'eye' b',' b'each' b'other' b'refer' b'to' b'Ireland' b'and' b'other' b'other' b'age' b'individuals' b',' b'or' b'also' b'groups' b'had'
    b'artists' b'in' b'over' b'1' b'years' b'afterwards' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Overall' b'=' b'=' b'<eos>' b'<eos>' b'On' b'December' b'5' b','
    b'2012' b',' b'it' b'was' b'as' b'delivered' b'whether' b'it' b'lived' b'from' b'a' b'sudden' b'reception' b'.' b'son' b'escorted' b'widespread' b'resources' b'include' b'the'
    b'Orchid' b'generated' b'with' b'probe' b',' b'or' b'their' b'number' b'@-@' b'known' b'teams' b'and' b'had' b'entrusted' b'salt' b'Gregorian' b'with' b'some' b'Mexican' b'birds'
    b'(' b'i.e.' b'began' b'to' b'be' b'upgraded' b'by' b'sternum' b')' b'and' b'from' b'common' b'instruments' b'living' b'on' b'size' b'.' b'For' b'example' b','
    b'stain' b'considered' b'that' b'Criss' b'may' b'be' b'performed' b'through' b'effect' b',' b'Temples' b'or' b'<unk>' b',' b'and' b'some' b'worldwide' b'frigates' b'is' b'mostly'
    b'merely' b'noted' b'.' b'Construction' b'hears' b'<unk>' b'redeployed' b'has' b'controlled' b'perfectly' b'existing' b'discovery' b'.' b'Many' b'birds' b'is' b'stationed' b'after' b'invertebrate' b'about'
    b'store' b',' b'goods' b',' b'<unk>' b',' b'reptile' b',' b'organise' b'besides' b'ammunition' b'marks' b',' b'being' b'SMN' b'reforms' b'.' b'In' b'City' b','
    b'<unk>' b',' b'1925' b',' b'fell' b'for' b'WWII' b',' b'<unk>' b',' b'<unk>' b',' b'previous' b',' b'breakfast' b',' b'Ecological' b',' b'Greek' b'and'
    b'international' b'police' b'distribution' b',' b'<unk>' b',' b'many' b'of' b'the' b'feathers' b',' b'such' b'as' b'<unk>' b'<unk>' b',' b'and' b'Seaforth' b'Gives' b'Age'
    b'condemned' b'splicing' b',' b'which' b'<unk>' b'that' b'they' b'were' b'too' b'difficult' b'to' b'procure' b'he' b"'s" b'forced' b',' b'higher' b'forests' b',' b'and'
    b'invertebrates' b'.' b'Synopsis' b'are' b'also' b'incorrectly' b'later' b'.' b'Out' b',' b'they' b'are' b'large' b'@-@' b'Deacon' b',' b'sometimes' b'forms' b'carved' b'as'
    b'they' b'have' b'multiple' b'high' b'forced' b'derivatives' b'extending' b'to' b'males' b',' b'but' b'also' b'at' b'a' b'quest' b'or' b'outs' b',' b'where' b'others'
    b'do' b'not' b'characteristic' b'perform' b'eggs' b'.' b'They' b'introduced' b'the' b'dominant' b'circumstances' b'to' b'be' b'large' b'in' b'the' b'brightness' b'until' b'.' b'Around'
    b'these' b'spots' b'the' b'Irish' b'state' b',' b'a' b'larger' b'bird' b'is' b'<unk>' b'with' b'some' b'booms' b'in' b'room' b'@-@' b'scale' b',' b'such'
    b'as' b'<unk>' b',' b'129' b'and' b'field' b'.' b'All' b'spots' b'reported' b';' b'Vargas' b'new' b'Hanks' b'Timeline' b'<unk>' b'for' b'greater' b'mammal' b'species'
    b'.' b'Each' b'evening' b'could' b'be' b'transformed' b',' b'although' b'anatomical' b'visitors' b'by' b'the' b'lack' b'of' b'proteins' b'were' b'arranged' b'to' b'obtain' b'agricultural'
    b'and' b'anecdotes' b'along' b'across' b'native' b'species' b'.' b'<eos>' b'A' b'fields' b'known' b'as' b'large' b',' b'girls' b'dark' b'launches' b',' b'a' b'offenders'
    b'for' b'old' b'active' b',' b'other' b'forms' b'in' b'Freeville' b'which' b'is' b'older' b'.' b'Another' b'characteristic' b'of' b'these' b'pressure' b'has' b'been' b'desperate'
    b'.' b'Over' b'example' b'to' b'the' b'sky' b',' b'when' b'Ceres' b'extended' b'its' b'nurse' b'from' b'another' b'standard' b'length' b',' b'this' b'of' b'which'
    b'would' b'have' b'<unk>' b'it' b'.' b'The' b'transits' b'are' b'attested' b'by' b'dwelling' b'to' b'select' b'muscular' b'so' b'so' b'reduced' b'.' b'Like' b'they'
    b'be' b'exoperidium' b'@-@' b'like' b'with' b'<unk>' b',' b'feeding' b',' b'with' b'one' b'definitely' b'itself' b'by' b'their' b'they' b'only' b'inflict' b'.' b'<eos>'
    b'The' b'kakapo' b'is' b'dominant' b'on' b'rats' b'as' b'England' b"'s" b'Sirex' b':' b'kitchen' b'(' b'anthropomorphic' b')' b'parks' b'(' b'87' b'\xe2\x80\x93' b'2010'
    b')' b'that' b'can' b'hitting' b'all' b'the' b'bird' b"'s" b'dogs' b'in' b'this' b'bird' b'.' b'Another' b'other' b'signs' b'of' b'associations' b',' b'protection'
    b'Leeds' b',' b'yellow' b'(' b'<unk>' b')' b'the' b'common' b'positional' b'Audacious' b'(' b'thought' b',' b'or' b'includes' b'had' b'"' b'since' b'Road' b')'
    b'"' b'has' b'no' b'reflecting' b'shaped' b'gain' b'all' b'terminates' b'and' b'appears' b'through' b'several' b'ways' b'.' b'A' b'decentralization' b'can' b'be' b'very' b'short'
    b'than' b'a' b'very' b'lek' b'structure' b',' b'with' b'its' b'length' b'only' b'to' b'serve' b'theft' b'movement' b'in' b'2' b'years' b',' b'which' b'required'
    b'not' b'up' b'mining' b'to' b'Australia' b'so' b'common' b'birds' b'across' b'those' b'without' b'some' b'ceratopsians' b',' b'their' b'distinctive' b'witches' b'inserted' b'to' b'Australia'
    b',' b'based' b'on' b'several' b'degree' b'\xe2\x80\x94' b'at' b'numbers' b'.' b'Damage' b'and' b'pestilence' b'have' b'their' b'average' b',' b'because' b'females' b'are' b'flattened'
    b'.' b'When' b'they' b'indicate' b',' b'they' b'also' b'do' b'"' b'plaintive' b'detach' b'and' b'live' b'them' b'.' b'but' b'they' b'are' b'left' b'by'
    b'that' b',' b'to' b'have' b'a' b'good' b'road' b',' b'and' b'is' b'entering' b'even' b'a' b'<unk>' b'<unk>' b'Wives' b'(' b'nests' b'atmospheric' b'BTEC'
    b')' b'limit' b'causes' b'Shastri' b'girls' b'too' b'creative' b'and' b'Burbank' b'.' b'"' b'Western' b'branches' b',' b'such' b'as' b'Fair' b'claw' b',' b'"'
    b'the' b'One' b'Structures' b'of' b'carry' b'"' b'and' b'"' b'The' b'abdomen' b',' b'poisons' b',' b'NRR' b'<unk>' b'representing' b'Haitian' b'participants' b'and' b'other'
    b'Papal' b'fat' b'history' b'"' b'.' b'Baker' b"'s" b'name' b'states' b'to' b'give' b'weather' b'these' b'hunting' b',' b'so' b'even' b'as' b'they' b'could'
    b'be' b'absorbed' b'towards' b'the' b'species' b'.' b'In' b'his' b'development' b',' b'it' b'interpreted' b'several' b'rock' b'planets' b'for' b'expression' b',' b'nor' b'has'
    b'high' b'pairs' b'of' b'females' b'.' b'In' b'the' b'guise' b'of' b'glasses' b',' b'it' b'has' b'generally' b'forms' b'relied' b'in' b'long' b'attributes' b'or'
    b'can' b'be' b'found' b'square' b'as' b'"' b'distinct' b'approach' b'with' b'it' b'"' b'.' b'This' b'is' b'node' b'interactions' b'as' b'anek\xc4\x81ntav\xc4\x81da' b'enshrined' b'in'
    b'nesting' b',' b'and' b'so' b'especially' b'it' b'has' b'limited' b'sealed' b'current' b'deterioration' b',' b'bearing' b'slight' b'mating' b'.' b'abundant' b'<unk>' b'is' b'probably'
    b'intensified' b',' b'but' b'may' b'even' b'be' b'Herodotus' b'acted' b'as' b"'" b'other' b'805' b'or' b'curfew' b'.' b'1107' b'shape' b'can' b'be' b'recognises'
    b'inside' b'specific' b'trees' b',' b'so' b'they' b'just' b'alternatively' b'techniques' b'.' b'<eos>' b'Many' b'storylines' b'take' b'on' b'to' b'have' b'more' b'Eu' b'isotopes'
    b',' b'with' b'their' b'type' b'up' b'to' b'the' b'wind' b',' b'clearing' b'breezes' b'to' b'the' b'south' b',' b'<unk>' b'people' b',' b'the' b'limit'
    b'of' b'packaging' b',' b'are' b'distinguished' b'by' b'it' b'.' b'Thus' b',' b'it' b'obtained' b'mainly' b'tough' b'crime' b'.' b'A' b'younger' b'fin' b'man'
    b'considers' b'and' b'resembles' b'for' b'14' b'\xe2\x80\x93' b'2' b'to' b'3' b'trillion' b'6' b'or' b'6' b'\xe2\x80\x93' b'64' b'years' b'(' b'60' b'ft' b')'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 223.5
    loss: 5.168
    elapsed time (seconds): 155.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  24.474 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
