.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'of' b'provision' b'put' b'songs' b'.' b'The' b'term' b'was' b'briefly' b'trained' b'to' b'help' b'its' b'foreshore' b'.' b'<eos>' b'that' b'\xc3\x8dmar' b'Tito' b'Live'
    b'wrote' b'that' b'he' b'Kusanagi' b'struck' b'considerably' b'it' b'and' b'the' b'vast' b'poverty' b',' b'and' b'they' b'are' b'forced' b'it' b'for' b'this' b'.'
    b'To' b'say' b'he' b'had' b'suggested' b'that' b'necrophilia' b'first' b'accepted' b'Cabinet' b'as' b'a' b'definitive' b',' b'explicitly' b'mechanism' b'lists' b'these' b'African' b'studies'
    b'in' b'Australia' b'and' b'the' b'turnover' b'of' b'Influences' b'.' b'In' b'<unk>' b',' b'another' b'Red' b'Mountain' b'video' b'is' b'a' b'considerable' b'economic' b'multi'
    b'@-@' b'series' b'of' b'television' b'risks' b',' b'especially' b'in' b'autumn' b',' b'New' b'York' b'.' b'It' b'was' b'collected' b'out' b'whether' b'it' b'was'
    b'bore' b'by' b'an' b'game' b'Sundance' b'<unk>' b'Wolf' b',' b'The' b'formation' b'of' b'information' b'with' b'any' b'H' b'@-@' b'provincial' b'astronomers' b'.' b'Due'
    b'to' b'it' b'in' b'1859' b',' b'Phrygian' b'inscriptions' b'have' b'never' b'had' b'confused' b',' b'with' b'the' b'Writers' b'Viking' b'constructed' b'by' b'El' b'Abraham'
    b'and' b'sculptures' b'home' b'in' b'its' b'inscription' b'of' b'the' b'<unk>' b'beetle' b'morphology' b'for' b'"' b'control' b'of' b'St.' b'Feel' b'and' b'hospital' b'"'
    b'.' b'In' b'the' b'eleventh' b'1980s' b',' b'"' b'Black' b'Pine' b'Boat' b'"' b'is' b'recorded' b'by' b'All\xc4\x81h' b'Halmahera' b',' b'of' b'the' b'Montreal'
    b'state' b'of' b'John' b'Obama' b'Bolivia' b'.' b'<unk>' b'is' b'referred' b'to' b'as' b'commissions' b'.' b'In' b'corporation' b'flood' b',' b'a' b'contemporary' b'compound'
    b'of' b'natural' b'outtakes' b'was' b'Hairan' b'Olivier' b':' b'"' b'I' b"'re" b'quite' b'universally' b',' b'many' b'[' b'Dell' b'is' b'a' b'means' b'of'
    b'battle' b',' b'to' b'fill' b'...' b'vulnerability' b',' b'and' b'return' b'its' b'sprites' b',' b'if' b'he' b'does' b'so' b'like' b'the' b'<unk>' b'out'
    b'of' b'all' b'children' b',' b'was' b';' b'hour' b'things' b'do' b'not' b'have' b'anything' b'.' b'I' b"'ve" b'one' b'situation' b'complicated' b'glee' b','
    b'more' b'hot' b'or' b'have' b'your' b'eyes' b'of' b'first' b',' b'are' b'understood' b'to' b'sell' b"'t" b'say' b'others' b'like' b'the' b'reality' b'of'
    b'the' b'Z.' b'Trigger' b"'s" b'fall' b',' b'...' b'I' b"'m" b',' b'Rangers' b'regions' b'so' b'more' b'hard' b'opinion' b'adversaries' b'.' b'"' b'<eos>'
    b'The' b'critic' b'Transcontinental' b'Bang' b'Preserve' b'has' b'short' b'taxon' b'at' b'home' b',' b'his' b'skull' b'translation' b'is' b'that' b'of' b'the' b'African' b'Circuit'
    b'"' b'<unk>' b'de' b'la' b'rebellious' b'!' b'!' b'"' b'(' b'"' b'FIA' b'"' b')' b',' b'he' b'is' b'credited' b'in' b'worked' b'in'
    b'helping' b'the' b'quality' b'of' b'Corbet' b"'" b'old' b'reactors' b'of' b'butterfly' b'propaganda' b'.' b'"' b'The' b'Man' b'"' b'\xe2\x80\x93' b'one' b'of' b'the'
    b'story' b"'s" b'intro' b'led' b'to' b'Ultimately' b'Ross' b"'s" b'two' b'individuals' b':' b'Mecca' b'and' b'about' b'some' b'critics' b'on' b'a' b'<unk>' b'victim'
    b'Americans' b'.' b'The' b'most' b'recent' b'book' b'was' b'allowed' b'to' b'be' b'played' b'as' b',' b'and' b'was' b'positively' b'heavily' b'ordered' b'of' b'media'
    b'gains' b',' b'and' b'from' b'a' b'nearby' b'decisive' b'book' b'\xe2\x80\x94' b'hostage' b'in' b'a' b'rhythm' b'contest' b'of' b'both' b'David' b'Z' b'\xe2\x80\x99' b's'
    b'certain' b',' b'Would' b',' b'later' b'recently' b'bad' b'.' b'"' b'flax' b'"' b'was' b'played' b'on' b'16' b'August' b'2008' b',' b'a' b'novel'
    b'of' b'solo' b'science' b'United' b'dollar' b'American' b'Navy' b'charts' b':' b'The' b'1819' b'Kings' b"'s" b'neurons' b'of' b'the' b'a' b'UHF' b'posterior' b'regret'
    b'including' b'Jesus' b'.' b'The' b'footage' b'were' b'published' b'on' b'firefight' b'containing' b'12' b':' b'12' b'Christian' b'or' b'several' b'consist' b'in' b'Thutmose' b'Jackson'
    b'.' b'Two' b'elements' b'promised' b'a' b'crack' b'that' b'inspired' b'.' b'In' b'the' b'second' b'hand' b',' b'Stevens' b'received' b'a' b'$' b'1' b'million'
    b'\xc2\xa3' b'5' b'million' b',' b'$' b'150' b'million' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Happy' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Hornung'
    b'recorded' b'his' b'work' b'of' b'minus' b'Raffles' b',' b'Isabella' b',' b'Tammy' b',' b'Thatgamecompany' b',' b'and' b'the' b'Crime' b'recruiting' b'into' b'Women' b'.'
    b'It' b'started' b'plans' b'for' b'appearance' b'at' b'different' b'times' b',' b'having' b'led' b'the' b'<unk>' b'of' b'St' b'One' b'"' b'and' b'Day' b'"'
    b',' b'which' b'inspired' b'games' b'in' b'Neck' b'and' b'Norway' b'Long' b'.' b'Unfortunately' b',' b'only' b'oribi' b'Makeba' b'would' b'be' b'introduced' b'to' b'voting'
    b'Simone' b'.' b'<eos>' b'Lyrically' b',' b'a' b'reports' b'on' b'critical' b'prosperity' b'occurred' b'in' b'Heine' b"'s" b"'an" b'!' b'<unk>' b'in' b'2008' b','
    b'and' b'said' b';' b'where' b'unlike' b'2006' b'Walpole' b"'s" b'Holmes' b'"' b'Domnall' b'<unk>' b'Bad' b'"' b'first' b'first' b'paid' b'2004' b',' b'a'
    b'idea' b'to' b'write' b'<unk>' b'themed' b'cars' b'at' b'his' b'hunt' b'.' b'Hornung' b'locked' b'his' b'next' b'album' b'in' b'a' b'attempt' b'to' b'make'
    b'.' b'<eos>' b'Meanwhile' b',' b'a' b'edition' b'of' b'Casting' b'State' b'in' b'Chains' b'commented' b'The' b'<unk>' b'<unk>' b'(' b'Bowl' b'inviting' b')' b'from'
    b'underdog' b'vision' b'.' b'While' b'they' b'did' b'making' b'up' b'after' b'a' b'character' b',' b'Hornung' b'raised' b'Paul' b'in' b'<unk>' b',' b'EMI' b'from'
    b'Popular' b"'s" b'good' b'computer' b'albums' b'carrying' b'a' b'Diana' b'and' b'Montgomery' b'who' b'cut' b'that' b'killed' b'words' b'and' b'Cobain' b'.' b'"' b'Ezra'
    b'Hornung' b'"' b'is' b'different' b'@-@' b'released' b'on' b'her' b'side' b',' b'saying' b'to' b'film' b'.' b'Harry' b'Scott' b'felt' b'his' b'name' b'.'
    b'Another' b'stories' b',' b'writing' b'in' b'Hollywood' b'writes' b'"' b'It' b'was' b'<unk>' b'to' b'begin' b'like' b'<unk>' b'From' b'an' b'story' b'.' b'"'
    b'<eos>' b'Hornung' b'took' b'several' b'further' b'at' b'The' b'Games' b'Awards' b'in' b'Director' b'America' b'before' b'role' b'Irish' b'actress' b'Keith' b'<unk>' b'to' b'Bayeux'
    b'<unk>' b'to' b'rejoin' b'the' b'head' b'books' b'a' b'reference' b'that' b'Peshkin' b'played' b'them' b',' b'saying' b'that' b'his' b'band' b'announced' b'his' b'major'
    b'companions' b',' b'but' b'was' b'<unk>' b'upon' b'Illinois' b'to' b'constable' b',' b'I' b'recognised' b'rose' b'with' b'ethics' b',' b'Tor' b'On' b'<unk>' b'criminal'
    b'notebook' b'at' b'<unk>' b'temperature' b'.' b'On' b'the' b'lyric' b'of' b'all' b'time' b',' b'Jerry' b'odoratus' b'began' b'on' b'to' b'visit' b'his' b'American'
    b'Hockey' b'inventions' b'before' b'a' b'orbit' b'and' b'counter' b'offensive' b'speech' b'without' b'in' b'2006' b'.' b'She' b'shut' b'on' b'a' b'McLaren' b'project' b','
    b'Doyle' b'sidelines' b'for' b'Tennessee' b'and' b'keen' b'work' b'in' b'Foreign' b'Britain' b':' b'The' b'Was' b'Executive' b',' b'<unk>' b"'s" b'Power' b'Building' b'('
    b'writing' b'.' b'<eos>' b'Crash' b"'" b'Brian' b'Tuff' b'I' b'ACE' b'-' b'Jr' b')' b',' b'as' b'well' b'as' b'Youth' b',' b'organising' b'Danish'
    b'producer' b'Millais' b'of' b'Chicago' b'.' b'He' b'suggested' b'that' b'the' b'book' b'got' b'her' b'best' b'to' b'a' b'two' b'@-@' b'year' b'story' b'in'
    b'1913' b'but' b'Doyle' b'would' b'have' b'stayed' b'performers' b'to' b'choose' b'up' b'.' b'He' b'could' b'have' b'collaborated' b'into' b'<unk>' b':' b'"' b'Against'
    b'[' b'i' b']' b',' b'sourced' b',' b'dangerous' b'and' b'parity' b'"' b'.' b'The' b'robed' b'version' b'had' b'been' b'been' b'affirmed' b'in' b'explains'
    b'.' b'He' b'sang' b'tribute' b'to' b'Raffles' b"'s" b'Choice' b'Film' b'II' b'for' b'the' b'next' b'year' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Television'
    b'=' b'=' b'<eos>' b'<eos>' b'The' b'series' b"'" b'first' b'novel' b',' b'magnetic' b'film' b',' b'Monty' b',' b'was' b'released' b'that' b'in' b'1913'
    b',' b'he' b'included' b'each' b'of' b'its' b'musical' b'time' b',' b'Adelaide' b'and' b'starring' b',' b'from' b'a' b'considerable' b'phenomenon' b',' b'though' b'in'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 231.8
    loss: 5.168
    elapsed time (seconds): 163.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  39.734 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
