.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Chasuble' b'.' b'<eos>' b'In' b'1919' b',' b'the' b'majority' b'of' b'Bedell' b'was' b'closed' b'at' b'about' b'10' b'%' b'of' b'drainage' b',' b'The'
    b'Associated' b'Elliott' b'Cast' b'with' b'his' b'party' b',' b'which' b'merge' b'a' b'direct' b'state' b'in' b'which' b'Today' b'.' b'The' b'paternal' b'colour' b'comes'
    b'on' b'"' b'a' b'illegal' b'island' b'of' b'genetic' b'"' b'off' b'that' b'the' b'cold' b'gravity' b'was' b'greatly' b'not' b'and' b'by' b'a' b'modified'
    b'licence' b'to' b'reduce' b'the' b'<unk>' b'and' b'Graphic' b'Sac' b'diable' b';' b'the' b'dates' b'they' b'sent' b'out' b'to' b'pay' b'to' b'war' b'to'
    b'take' b'down' b'longer' b'.' b'They' b'are' b'able' b'to' b'have' b'deep' b'funding' b'to' b'parent' b'when' b'they' b'are' b'so' b'after' b'banned' b'for'
    b'portions' b'.' b'The' b'Thanhouser' b'Fairfield' b'which' b',' b'including' b'a' b'tie' b'around' b'<unk>' b',' b'are' b'seen' b'by' b'orchestra' b'and' b'his' b'discovery'
    b'.' b'In' b'the' b'assassination' b'levels' b'dated' b'contracting' b'populations' b'of' b'disuse' b'following' b'other' b'sea' b'maximum' b'airlines' b'(' b'Mid' b'4' b'Days' b','
    b'present' b',' b'<unk>' b'magnets' b',' b'<unk>' b';' b'burial' b',' b'definitive' b'wing' b'Airlines' b',' b'<unk>' b'Rossi' b',' b'<unk>' b'<unk>' b',' b'Data'
    b',' b'Basketball' b',' b'drums' b';' b'and' b'<unk>' b',' b'<unk>' b'Air' b'Bang' b',' b'and' b'Molina' b'bonded' b'50' b'<unk>' b';' b'33' b'contracts'
    b'.' b'There' b'are' b'few' b'Houston' b'toll' b'@-@' b'color' b'training' b'(' b'43' b'mm' b')' b'.' b'Another' b'artifact' b'is' b'primarily' b'likened' b'by'
    b'"' b'small' b'or' b'different' b',' b'as' b'there' b'transatlantic' b'references' b'"' b'and' b'its' b'most' b'competitive' b'mistress' b'<unk>' b'segment' b'after' b'stadiums' b'from'
    b'Europe' b'.' b'More' b'was' b'friary' b'.' b'Liberties' b'wooden' b'documents' b'.' b'<eos>' b'Virginia' b'University' b',' b'after' b'convey' b',' b'Labrosaurus' b'al' b'apartments'
    b'was' b'recorded' b'as' b'being' b'so' b'draining' b'puppets' b'in' b'1824' b'known' b'as' b'<unk>' b',' b'and' b'the' b'task' b'of' b'garnered' b'@-@' b'executive'
    b'could' b'be' b'possible' b'from' b'59' b'April' b'@-@' b'century' b'with' b'live' b'to' b'increase' b'.' b'Both' b'of' b'his' b'interruptions' b'in' b'Vision' b'eight'
    b'=' b'<eos>' b'The' b'cooperation' b'in' b'his' b'behaviour' b'of' b'Austin' b'(' b'October' b'20' b',' b'1893' b')' b'<eos>' b'The' b'supervision' b'of' b'mobile'
    b'legal' b'starlings' b'in' b'reports' b'for' b'increased' b'maturity' b'or' b':' b'Square' b'starling' b',' b'master' b'Padukone' b',' b'and' b'cheaper' b'melting' b'.' b'The'
    b'race' b'motor' b'commercial' b'first' b'firm' b'Ledge' b'earthstar' b'omitted' b'Christine' b"'s" b'fortress' b',' b'perhaps' b'striking' b'it' b'a' b'school' b'Oswald' b'from' b'2012'
    b'until' b'1916' b'.' b'For' b'this' b'other' b'success' b',' b'there' b'is' b'more' b'childhood' b'jockey' b'versions' b'of' b'essentially' b'very' b'distinct' b',' b'making'
    b'the' b'average' b'maybe' b'of' b'common' b'natural' b'flora' b'or' b'single' b'species' b',' b'including' b'multiple' b'more' b'millennium' b'status' b',' b'barley' b'Modern' b'fiction'
    b',' b'Greenaway' b'asking' b',' b'side' b',' b'and' b'Laws' b'under' b'classical' b'attribute' b'.' b'Any' b'of' b'the' b'occupational' b'plantations' b'was' b'an' b'Airbus'
    b'red' b'based' b'under' b'the' b'areas' b'on' b'white' b',' b'but' b'banned' b'as' b'soon' b'All\xc4\x81h' b'expression' b'.' b'However' b',' b'Thiele' b'exhibited' b'them'
    b'after' b'he' b'was' b'preferred' b'in' b'Ireland' b'and' b'then' b'into' b'the' b'buried' b'dates' b'to' b'Elizabeth' b'Robert' b'Haynes' b'and' b'Dana' b'Morgan' b','
    b'creating' b'the' b'colonists' b'and' b'its' b'grandfather' b',' b'Knight' b'was' b'awarded' b'a' b'novel' b'who' b'considered' b'.' b'He' b'biographer' b'authority' b'of' b'AIDS'
    b'midway' b'on' b'each' b'other' b'as' b'resupply' b'applicable' b'Infantry' b'Ireland' b'were' b'invited' b'to' b'balance' b'on' b'satellite' b'power' b',' b'such' b'as' b'in'
    b'1909' b'.' b'In' b'273' b',' b'the' b'king' b'head' b'receives' b'more' b'of' b'sixteen' b'four' b'sources' b'in' b'Independence' b'II' b'.' b'Indeed' b','
    b'they' b'were' b'unable' b'to' b'pass' b'padded' b'with' b'see' b'seeking' b'The' b'city' b'.' b'They' b'are' b'babies' b'to' b'arrive' b'in' b'mountainous' b'nature'
    b'and' b'"' b'<unk>' b'"' b',' b'which' b'diversified' b'it' b'from' b'Sea' b'.' b'The' b'criminal' b'city' b'end' b'in' b'c' b'function' b'is' b'added'
    b'to' b'others' b',' b'such' b'as' b'dense' b'candidates' b'and' b'thermal' b'languages' b'.' b'They' b'are' b'caught' b'by' b'the' b'beginning' b'of' b'they' b'do'
    b'between' b'the' b'whole' b'site' b'and' b'in' b'a' b'Wichita' b'campaign' b'for' b'most' b'.' b'The' b'death' b'of' b'trees' b'in' b'this' b'area' b'is'
    b'to' b'be' b'under' b'this' b'planet' b'and' b'may' b'show' b'discretion' b'.' b'The' b'basement' b'was' b'sourced' b'after' b'the' b'war' b'was' b'discovered' b'by'
    b'rats' b'.' b'The' b'smallest' b'evidence' b'in' b'50' b'or' b'8' b'%' b'of' b'55' b'species' b'has' b'no' b'"' b'Guiry' b'"' b'and' b'spans'
    b'attracts' b'to' b'correspond' b'to' b'closer' b'palm' b'flooding' b'.' b'<eos>' b'When' b'known' b'to' b'be' b'particularly' b'unjustly' b'prominently' b',' b'when' b'they' b'are'
    b'freely' b'dramatically' b'on' b'a' b'means' b'of' b'99' b'(' b'5' b'by' b'3' b'@.@' b'8' b'in' b')' b',' b'but' b'in' b'increasing' b'their'
    b'Crimean' b'population' b'to' b'humanitarian' b'portion' b',' b'they' b'are' b'prevalent' b'.' b'Many' b'flocks' b'like' b'drained' b'or' b'Vingti\xc3\xa8me' b'<unk>' b'destroying' b'males' b'on'
    b'both' b'they' b'are' b'closed' b'.' b'An' b'microtubules' b'were' b'Saint' b'miner' b',' b'W\xc5\x82adys\xc5\x82aw' b'Sonatine' b'and' b'St' b'McCarthy' b'.' b'Later' b',' b'the'
    b'common' b'researchers' b'like' b'which' b'form' b'Cenozoic' b'challenges' b'were' b'led' b'by' b'<unk>' b'but' b'argued' b'similarly' b'might' b'have' b'become' b'chestnut' b'or' b'wolves'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Synthesis' b'=' b'=' b'<eos>' b'<eos>' b'At' b'this' b'date' b',' b'officially' b'observations' b'of' b'prey' b'1947' b'at'
    b'<unk>' b',' b'corn' b',' b'1390' b',' b'they' b'are' b'plagued' b'by' b'insects' b':' b'as' b'a' b'cruzi' b'of' b'parasites' b'(' b'May' b'11'
    b',' b'2006' b')' b',' b'Britain' b'as' b'the' b'Claimed' b'(' b'her' b'longest' b'accomplice' b'were' b'introduced' b'to' b'sea' b'with' b'very' b'than' b'3'
    b'%' b',' b'and' b'Polish' b'females' b'was' b'perceived' b'to' b'grow' b'its' b'mourning' b'in' b'the' b'registration' b',' b'leading' b'Louise' b')' b'than' b'to'
    b'"' b'do' b'surplus' b'<unk>' b'"' b'.' b'Their' b'reputation' b'of' b'sufficiently' b'successful' b'on' b'television' b',' b'spread' b',' b'or' b'Australia' b',' b'was'
    b'now' b'differentiated' b',' b'leading' b'to' b'Esperance' b',' b'the' b'court' b'of' b'queries' b'on' b'the' b'forces' b'Nick' b'de' b'Traill' b',' b'which' b'is'
    b'moderately' b'found' b'to' b'proceed' b'his' b'investigation' b',' b'which' b'can' b'be' b'neighbourhood' b'by' b'cell' b'or' b'Guiry' b'.' b'These' b'forms' b'miscarriages' b'are'
    b'seen' b'representing' b'them' b'.' b'The' b'first' b'potential' b'layer' b'as' b'they' b'begin' b'to' b'have' b'be' b'wider' b'or' b'heavily' b'used' b'to' b'have'
    b',' b'on' b'this' b'play' b'for' b'Australia' b',' b'a' b'wheel' b'shown' b'particularly' b'across' b'food' b',' b'which' b'were' b'omitted' b'by' b'512' b'flowers'
    b'.' b'both' b'manager' b'retained' b'buildings' b'Sciences' b'on' b'other' b'regions' b',' b'passing' b'them' b'to' b'do' b'that' b'a' b'DNA' b'Llanilltern' b'or' b'fir'
    b'calls' b'a' b'male' b'for' b'time' b'.' b'Within' b'example' b',' b'bird' b'gives' b'hydrolysis' b'affected' b'in' b'Paris' b',' b'the' b'country' b'of' b'largest'
    b'colonies' b'in' b'regions' b'of' b'the' b'creatures' b';' b'Surgeon' b'yielding' b'jaguar' b'.' b'At' b'the' b'end' b'of' b'its' b'territories' b'wrought' b'a' b'food'
    b'mechanism' b'that' b'is' b'necessary' b'to' b',' b'after' b'every' b'width' b'of' b'<unk>' b'competitively' b'.' b'She' b'asks' b'some' b'kind' b'of' b'attention' b','
    b'their' b'wives' b'being' b'greatly' b'a' b'luminous' b'influx' b'of' b'planets' b'.' b'A' b'luminosity' b'called' b'for' b'more' b'large' b'noblemen' b'and' b'other' b'black'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 223.2
    loss: 5.164
    elapsed time (seconds): 154.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  21.817 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
