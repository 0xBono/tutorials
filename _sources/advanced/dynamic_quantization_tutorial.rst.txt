.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - _dynamic quantization_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'soil' b'"' b'Always' b'Brown' b'punish' b'Miley' b'!' b'"' b',' b'in' b'earlier' b'places' b'.' b'The' b'5th' b'Division' b'department' b'mounds' b'was' b'the'
    b'real' b'<unk>' b'with' b'the' b'Traffic' b'Air' b'Force' b'cruiser' b'difluoride' b',' b'a' b'Cambridge' b'nomination' b'Sexton' b')' b'conducted' b'"' b'universal' b'Love' b','
    b'Dissenters' b',' b'<unk>' b'[' b'Zapata' b']' b'Dog' b'"' b',' b'along' b'in' b'English' b'!' b'\xe2\x80\x94' b'but' b'in' b'which' b'they' b'worked' b'just'
    b'solely' b'<unk>' b'festival' b'roll' b'gun' b'.' b'"' b'They' b'"' b'were' b'sometimes' b'taken' b'to' b'be' b'the' b'first' b'choice' b'in' b'events' b','
    b'including' b'some' b'places' b'715' b'\xe2\x80\x93' b'7' b',' b'joining' b'it' b'as' b'one' b'of' b'the' b'producers' b"'s" b'votes' b',' b'which' b'was' b'included'
    b'with' b'monthly' b'historians' b'.' b'Ron' b'R.' b'Tufaro' b'mentioned' b'all' b'of' b'his' b'car' b'writing' b'also' b',' b'describing' b'as' b'"' b'amazing' b'studios'
    b'"' b'were' b'also' b'found' b'for' b'these' b'frozen' b'styles' b'.' b'At' b'the' b'box' b',' b'the' b'deal' b'ran' b'in' b'many' b'ways' b','
    b'leaving' b'a' b'letter' b'of' b'<unk>' b',' b'making' b'financial' b'Assistant' b'@-@' b'Sciences' b',' b'with' b'has' b'Raffles' b'Alonso' b'fruit' b'side' b'minigames' b'fancy'
    b'areas' b',' b'pink' b'acclaimed' b'and' b'implies' b'them' b'that' b'both' b'Crash' b'Mary' b'I' b'formed' b'bonus' b'criticism' b',' b'were' b'placed' b'as' b'up'
    b'about' b'650' b'%' b'of' b'the' b'series' b',' b'known' b'as' b'the' b'"' b'ovary' b'Direction' b'"' b'anniversary' b'.' b'It' b'also' b'intended' b'to'
    b'perform' b'3' b'@.@' b'4' b'<unk>' b',' b'refer' b'to' b'a' b'image' b'of' b'2000' b'and' b'Kiev' b'Dhawan' b'<unk>' b'<unk>' b'\xe2\x80\x93' b'Primetime' b'television'
    b'technologically' b',' b'over' b'10' b'%' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Streets' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'<eos>' b'=' b'Baltimore' b'Race'
    b'had' b'in' b'Ireland' b'seems' b'as' b'emphasising' b',' b'awards' b'=' b'<eos>' b'<eos>' b'Note' b',' b'Assistant' b'Slam' b',' b'Student' b'Correa' b',' b'is'
    b'a' b'woman' b'that' b'represents' b'more' b'than' b'ten' b'children' b'have' b'tied' b'censorship' b',' b'such' b'as' b'specimens' b',' b'and' b'ABC' b'.' b'<eos>'
    b'This' b'is' b'a' b'large' b'financially' b'with' b'over' b'12' b'\xc2\xb0' b'years' b',' b'though' b'as' b'is' b'<unk>' b'"' b'lived' b'"' b'.' b'These'
    b'evidence' b'is' b'greatly' b'"' b'slower' b'and' b'thin' b'"' b',' b'but' b'can' b'be' b'found' b'Vermeer' b'in' b'the' b'bugs' b'of' b'interaction' b'before'
    b'they' b'had' b'little' b',' b'before' b'it' b'is' b'being' b'Indonesia' b'.' b'A' b'arts' b'tract' b'emperor' b'noted' b'found' b'stories' b'that' b'saw' b'over'
    b'76' b'hours' b'old' b',' b'and' b'was' b'thought' b'that' b'their' b'old' b'pressure' b'of' b'DNA' b'is' b'famous' b'as' b'schoolboy' b':' b'"' b'It'
    b'is' b'moderately' b'good' b'about' b'these' b'times' b'three' b'ships' b'"' b'of' b'[' b'happen' b']' b'is' b'found' b',' b'writing' b'the' b'"' b'most'
    b'inadequate' b'"' b'length' b'of' b'ode' b':' b'"' b'It' b'was' b'best' b'Biomech' b'from' b'admired' b'watching' b'<unk>' b',' b'so' b'there' b'is' b'an'
    b'video' b'consists' b'of' b'empires' b',' b'and' b'his' b'all' b'@-@' b'metre' b'examination' b'in' b'Seminoles' b'or' b'violence' b'to' b'be' b'represented' b'back' b'from'
    b'her' b'best' b'side' b';' b'The' b'disappears' b'in' b'popular' b'VII' b',' b'which' b'is' b'moves' b'about' b'no' b'heart' b'accompanied' b'on' b'24' b'Indonesian'
    b'<unk>' b'of' b'possessions' b',' b'other' b'<unk>' b',' b'middle' b'average' b',' b'and' b'Perth' b"'s" b'cutter' b'considering' b'a' b'Jupiter' b'degree' b'where' b'('
    b'<eos>' b'is' b'also' b'little' b'known' b'as' b'at' b'his' b'<unk>' b')' b'Biographer' b'snurposomes' b'who' b'is' b'very' b'small' b'to' b'sleep' b'where' b'so'
    b',' b'of' b'a' b'bones' b',' b'tell' b',' b'steadily' b'sport' b',' b'changing' b'and' b'the' b'faced' b'sentence' b',' b'because' b'they' b'are' b'rarely'
    b'in' b'a' b'rounded' b'Cai' b'homage' b'.' b'"' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Cameo' b'=' b'=' b'=' b'<eos>' b'<eos>' b'overwhelmingly' b'languages'
    b'were' b'developed' b',' b'<unk>' b',' b'exhausted' b',' b'and' b'prefect' b';' b'its' b'comparison' b'involved' b'in' b'the' b'Dawn' b'Experience' b'is' b'fundamentally' b'known'
    b'as' b'death' b',' b'a' b'hand' b'organization' b',' b'Verdi' b',' b'induced' b'unfold' b',' b'the' b'Orion' b'scholars' b'and' b'image' b',' b'Hemlock' b'accustomed'
    b'for' b'the' b'false' b'head' b',' b'modern' b',' b'and' b'<unk>' b'.' b'McCarthy' b'<unk>' b'wasps' b'are' b'even' b'derived' b',' b'as' b'they' b'cannot'
    b'be' b'seen' b'out' b'of' b'Amylostereum' b'.' b'Public' b'techniques' b'tail' b'toward' b'a' b'thick' b'tree' b'leave' b',' b'Fruit' b';' b'<unk>' b',' b'some'
    b'ways' b'and' b'French' b'popularisation' b',' b'and' b'the' b'Crimson' b'astronomer' b'tribal' b'identity' b',' b'leads' b'her' b'true' b'bulb' b'memory' b',' b'freedom' b'that'
    b'the' b'males' b'should' b'be' b'sealed' b'so' b'.' b'The' b'Halpert' b'of' b'Inverness' b'are' b'often' b'a' b'little' b'planet' b',' b'around' b'which' b'showered'
    b'light' b',' b'so' b'however' b',' b'especially' b'when' b'the' b'head' b'returns' b'to' b'the' b'hunter' b',' b'her' b'spots' b'goes' b'north' b'into' b'Deluxe'
    b'tombs' b'feed' b'.' b'As' b'that' b',' b'at' b'a' b'moment' b'and' b'move' b',' b'the' b'participants' b'were' b'more' b'<unk>' b'enough' b'for' b'that'
    b'wing' b'and' b'sometimes' b',' b'as' b'well' b'as' b'or' b'tough' b'framed' b'factors' b'and' b'thus' b'filled' b'.' b'Males' b'primarily' b'support' b'around' b'34'
    b':' b'00' b'.' b'(' b'<unk>' b'@.@' b'<unk>' b'\xe2\x80\x93' b'47' b'\xe2\x80\x93' b'10' b'in' b')' b'.' b'V.' b'Weyden' b'entering' b'a' b'volume' b'state'
    b'a' b'"' b'seat' b'"' b',' b'but' b'may' b'call' b'testing' b'by' b'delicate' b'ledges' b'at' b'least' b'18' b'mph' b'(' b'91' b'ft' b')'
    b'.' b'In' b'same' b'way' b',' b'vegetation' b'depends' b'as' b'Livingston' b'.' b'Only' b'benefited' b'screens' b'and' b'employ' b'them' b'to' b'ambivalent' b'over' b'the'
    b'hills' b',' b'are' b'primarily' b'if' b'many' b'he' b'may' b'cure' b'"' b'hunt' b'"' b'or' b'taste' b'that' b'their' b'contraceptive' b'are' b'bluish' b';'
    b'it' b'will' b'be' b'Secretary' b'of' b'their' b'bare' b'location' b'.' b'Its' b'same' b'male' b'does' b'exist' b'into' b'relative' b';' b'it' b'meets' b'whereas'
    b'she' b'"' b'try' b'to' b'accept' b'down' b'on' b'the' b'same' b'side' b',' b'take' b'for' b'planning' b'latex' b'"' b'in' b'bone' b'.' b'<unk>'
    b'Progress' b'the' b'sequence' b'matter' b',' b'both' b'containing' b'primitive' b'genes' b'years' b'including' b'studies' b'that' b'have' b'an' b'distinctive' b'length' b'for' b'Preston' b'@-@'
    b'E' b'(' b'simply' b'available' b')' b'.' b'Within' b'this' b'song' b',' b'Professor' b"'Africaine" b'(' b'OH' b')' b'are' b'great' b'within' b'on' b'the'
    b'surface' b'of' b'39' b'to' b'8' b'cm' b'(' b'4' b'@.@' b'0' b'to' b'2' b'@.@' b'4' b'km' b'/' b'h' b')' b',' b'since'
    b'at' b'conjunction' b'they' b'feed' b'from' b'water' b':' b'this' b'season' b'will' b'explain' b'to' b'be' b'possible' b'with' b'being' b'at' b'a' b'angle' b'and'
    b'more' b'dying' b'.' b'By' b'this' b'source' b',' b'booms' b'are' b'now' b'acts' b'of' b'binary' b',' b'FAB' b',' b'and' b'cool' b'.' b'Archaeological'
    b'eggs' b'equivalents' b'Services' b'driving' b'poorly' b'distance' b'line' b'during' b'the' b'<unk>' b'or' b'warmer' b'translation' b'of' b'Bat' b'plasma' b'.' b'Because' b'they' b'are'
    b'transported' b'with' b'food' b',' b'they' b'are' b'<unk>' b'<unk>' b'.' b'Several' b'male' b'aspect' b'of' b'grants' b'and' b'prey' b'(' b'most' b'victim' b'for'
    b'completion' b'may' b'be' b'ready' b'to' b'be' b'intermediate' b',' b'by' b'switching' b'from' b'other' b'birds' b'to' b'pick' b'its' b'planet' b')' b'.' b'As'
    b'she' b'fires' b'out' b',' b'they' b'examined' b'<unk>' b'intact' b'into' b'the' b'feeding' b'cell' b'and' b'Formation' b'tornadoes' b'nearby' b'.' b'Currently' b',' b'it'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 253.5
    loss: 5.168
    elapsed time (seconds): 176.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  14.634 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
