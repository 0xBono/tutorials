.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'of' b'Valentin' b'Berardi' b'and' b'and' b'some' b'Hairan' b',' b'binaries' b',' b'and' b'Brown' b"'s" b'output' b'<unk>' b'by' b'post' b'@-@' b'controlled' b'Damages'
    b'@-@' b'<unk>' b'and' b'Iron' b'Famicom' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Controversy' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'journeyed' b',' b'in' b'the'
    b'score' b'a' b'veteran' b'release' b',' b'NC' b'Race' b'is' b'a' b'planet' b'@-@' b'spoken' b'.' b'His' b'wife' b'Institute' b'explained' b'that' b'it' b'is'
    b'generally' b'possible' b'in' b'his' b'final' b'riff' b'of' b'subseries' b'about' b'a' b'seventeenth' b'century' b',' b'particularly' b'in' b'which' b'"' b'few' b'male' b'scenes'
    b'do' b'not' b'have' b'something' b'argues' b'and' b'still' b'said' b',' b'"' b'Buddhism' b'described' b'the' b'shared' b'term' b'set' b'to' b'include' b'Baltimore' b"'s"
    b'longer' b'hammer' b'claim' b'compared' b'distance' b'\xe2\x80\x94' b'possibly' b'or' b'marks' b'to' b'tie' b'a' b'paper' b'.' b'Halladay' b'were' b'also' b'gold' b',' b'withdrawn'
    b'Wheeler' b'\xe2\x80\x94' b'attaining' b'his' b'belly' b'to' b'drain' b'the' b'police' b',' b'but' b'a' b'five' b'@-@' b'foot' b'series' b'was' b'made' b'out' b'in'
    b'nursery' b'England' b',' b'which' b'Australians' b'argues' b'and' b'the' b'A.V.' b'Trophy' b'"' b'to' b'Rogers' b'"' b'Mosley' b',' b'with' b'the' b'subsequent' b'score'
    b'being' b'seen' b'as' b'a' b'breeding' b'of' b'generosity' b'.' b'The' b'title' b'is' b'also' b'estimated' b'to' b'be' b'long' b'by' b'Ceres' b',' b'thanks'
    b'to' b'the' b'issue' b'of' b'paint' b'bowling' b'.' b'The' b'developers' b'required' b'it' b'number' b'for' b'worsening' b'cars' b'of' b'Mortal' b'Korean' b'improvements' b'('
    b'NHL' b'Rashida' b')' b'and' b'behalf' b'\xe2\x80\x93' b'trapped' b'transcription' b',' b'promote' b'Crash' b'Sridhar' b'III' b',' b'anybody' b'to' b'Laxa' b'and' b'for' b'organization'
    b',' b'running' b'to' b'1652' b'for' b'Ne' b'during' b'a' b'statement' b'.' b'<eos>' b'sports' b'and' b'grants' b'producers' b'in' b'Vienna' b',' b'The' b'number'
    b'for' b'evidence' b'from' b'the' b'2008' b'series' b"'s" b'extravagance' b',' b'represent' b'other' b'militaries' b',' b'and' b'his' b'subject' b'and' b'Ukrainian' b'players' b'are'
    b'"' b'reassigned' b'and' b'different' b'<unk>' b',' b'affection' b',' b'and' b'trouble' b'man' b'.' b'It' b'is' b'suspect' b'to' b'be' b'all' b'<unk>' b'caused'
    b'it' b'to' b'work' b',' b'and' b'many' b'passion' b'were' b'pockets' b'of' b'doing' b'marginally' b'.' b'"' b'The' b'Church' b'of' b'Ireland' b'was' b'still'
    b'in' b'special' b'television' b'jazz' b'symbol' b',' b'which' b'allows' b'them' b'its' b'formal' b'authority' b',' b'lances' b',' b'but' b'they' b'ask' b'at' b'birth'
    b'.' b'The' b'concentration' b'of' b'chin' b'is' b'definitive' b'as' b'they' b'show' b'nations' b'led' b'in' b'testing' b'in' b'two' b'of' b'Baltimore' b"'s" b'Gladstone'
    b"'s" b'early' b'satellites' b'.' b'In' b'days' b'they' b'required' b'field' b'art' b'about' b'the' b'ending' b'rather' b'blue' b'definition' b',' b'the' b'theory' b'appears'
    b'to' b'bear' b'sales' b'of' b'themselves' b'.' b'<eos>' b'Later' b'it' b'was' b'only' b'found' b'in' b'the' b'underground' b'objects' b':' b'<eos>' b'A' b'Oklahoma'
    b'tradition' b',' b'literally' b'well' b'@-@' b'subject' b'as' b'<unk>' b'by' b'for' b'a' b'white' b'multi' b'@-@' b'professional' b'swimming' b'large' b'face' b'(' b'goaltender'
    b'at' b'a' b'center' b'to' b'keep' b'fans' b'of' b'<unk>' b')' b'.' b'Danny' b"'" b'is' b'self' b'@-@' b'marrying' b'until' b'that' b'one' b'player'
    b'of' b'over' b'600' b'<eos>' b'His' b'final' b'will' b'be' b'Trollope' b'appears' b'as' b'the' b'most' b'good' b',' b'the' b'adult' b'a' b'variety' b'of'
    b'stay' b',' b'at' b'a' b'certain' b'Moscow' b'competition' b'after' b'shirtless' b'standard' b'from' b'a' b'Lithuanians' b',' b'three' b'or' b'one' b'trading' b',' b'a'
    b'basic' b'line' b'on' b'needles' b'which' b'are' b'slowly' b'getting' b'.' b'<eos>' b'The' b'convict' b'agreed' b'into' b'Leinster' b',' b'a' b'person' b'species' b'premiere'
    b'to' b'suppress' b'it' b'back' b'to' b'a' b'wife' b'and' b'<unk>' b'with' b'a' b'sharp' b'planet' b'.' b'Several' b'viewing' b'stories' b'are' b'even' b'verified'
    b'or' b',' b'when' b'as' b'riding' b'to' b'prevent' b'it' b',' b'when' b'he' b'does' b'instead' b'together' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Legacy'
    b'=' b'=' b'<eos>' b'<eos>' b'Crash' b'Boom' b'Bang' b'!' b'is' b'a' b'species' b'III' b'summoned' b'a' b'cover' b'failure' b'to' b'take' b'on' b'19'
    b'September' b'1892' b',' b'following' b'English' b'African' b'Grass' b'Hall' b'.' b'It' b'money' b'from' b'a' b'council' b'when' b'<unk>' b'Square' b'remained' b',' b'they'
    b'did' b'not' b'use' b'to' b'the' b'antagonist' b'.' b'The' b'team' b'may' b'be' b'a' b'same' b'abstract' b'archbishops' b'in' b'the' b'pre' b'@-@' b'year'
    b'season' b'propagandist' b'view' b'of' b'the' b'mountains' b'out' b'.' b'<eos>' b'duplicity' b')' b'retired' b'up' b'exactly' b'1233' b'and' b'of' b'eye' b'genetic' b'Hawaiian'
    b'or' b'other' b'prey' b'and' b'heat' b'snake' b'.' b'<eos>' b'<unk>' b',' b'meld' b',' b'and' b'Broom' b'are' b'tied' b'into' b'reform' b'by' b'streets'
    b'such' b'as' b'1072' b',' b'and' b'layer' b'or' b'exceptional' b'most' b'battalions' b'.' b'He' b'declined' b'generally' b'to' b'be' b'physically' b'found' b'by' b'Benson'
    b',' b'despite' b'or' b'then' b'require' b'down' b'exist' b'.' b'<eos>' b'Two' b'years' b'after' b'the' b'air' b'of' b'impact' b',' b'they' b'are' b'<unk>'
    b'uterus' b'.' b'The' b'most' b'common' b'this' b',' b'which' b'is' b'pointed' b'to' b'the' b'conversations' b'of' b'Maceo' b'.' b'obviously' b',' b'rarely' b'@-@'
    b'rich' b'behavior' b'on' b'or' b'gills' b',' b'the' b'rear' b'mating' b'on' b'the' b'map' b'shifts' b',' b'also' b'accepted' b'very' b'low' b',' b'not'
    b'the' b'water' b'of' b'<unk>' b',' b'forcing' b'Nandi' b'<unk>' b'his' b'suggestion' b'up' b'their' b'number' b'is' b'more' b'likely' b'from' b'individuals' b',' b'but'
    b'thus' b',' b'by' b'these' b',' b'attribute' b'them' b'forward' b'to' b'continue' b'melodrama' b'.' b'white' b'sexpunctatus' b'makes' b'that' b'there' b'are' b'no' b'first'
    b'absurd' b'tolerance' b',' b'when' b'males' b'are' b'by' b'beach' b'diseases' b'for' b'less' b'than' b'it' b'are' b'their' b'population' b',' b'and' b'they' b'think'
    b'broods' b'it' b'has' b'no' b'Cluj' b'and' b'just' b'induced' b'when' b'they' b'were' b'liable' b'to' b'be' b'accurate' b'.' b'Numbers' b'<unk>' b'may' b'be'
    b'killed' b'by' b'carbon' b',' b'fully' b'at' b'a' b'old' b'level' b',' b'and' b'/' b'traveling' b'chiefly' b'the' b'worst' b'of' b'them' b',' b'6'
    b'hours' b'has' b'been' b'reported' b'to' b'be' b'killed' b'in' b'sexual' b',' b'or' b'since' b'Amun' b'<unk>' b'enough' b'to' b'be' b'<unk>' b'.' b'<eos>'
    b'Giovanni' b',' b'his' b'convection' b'on' b'a' b'transfer' b',' b'must' b'end' b'of' b'any' b'eye' b'Orne' b'(' b'such' b'as' b'poke' b'kakapo' b')'
    b',' b'giant' b'twigs' b',' b'and' b'sensation' b'(' b'"' b'a' b'toll' b'measure' b'"' b')' b'.' b'Common' b'synthpop' b'<unk>' b',' b'"' b'motifs'
    b'"' b',' b'are' b'dedicated' b'by' b'an' b'rocky' b'light' b'empties' b'for' b'fox' b'burning' b'as' b'inspiration' b'a' b'planet' b',' b'and' b'overgrown' b'the'
    b'naked' b'relative' b',' b'the' b'<unk>' b'of' b'Ceres' b';' b'brutal' b'can' b'help' b'2003' b',' b'so' b'others' b'do' b'not' b'stay' b'on' b'humans'
    b'by' b'mere' b'sailing' b'patterns' b'.' b'<unk>' b'had' b'well' b'only' b'providing' b',' b'so' b'many' b'posturing' b'<unk>' b'the' b'nestling' b'in' b'<unk>' b'their'
    b'jurisdiction' b',' b'they' b'realize' b'it' b'has' b'come' b'in' b'New' b'Zealand' b'.' b'Baker' b'tackle' b'Estate' b'(' b'<unk>' b')' b'Tjoet' b'acids' b':'
    b'He' b'is' b'only' b'a' b'smaller' b'nestling' b'of' b'disseminated' b'in' b'single' b',' b'a' b'creature' b'that' b'called' b'If' b'so' b'not' b'see' b'a'
    b'cruel' b'portion' b'"' b'simulated' b'X' b'with' b'their' b'father' b'transfer' b'subject' b'"' b'.' b'The' b'city' b"'s" b'with' b'vocal' b'ocean' b'cell' b'has'
    b'found' b'some' b'of' b'their' b'tolerance' b',' b'Osiris' b'else' b'and' b'linear' b'significant' b'control' b'.' b'Kate' b'a' b'daughter' b'called' b'it' b'"' b'deviate'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 259.4
    loss: 5.168
    elapsed time (seconds): 178.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  22.106 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
