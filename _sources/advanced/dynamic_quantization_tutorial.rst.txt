.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'maximus' b'.' b'The' b'American' b'authorities' b'occurred' b'in' b'commentary' b'with' b'the' b'collector' b'recalls' b'<unk>' b'(' b'1984' b')' b',' b'but' b'.' b'Communal'
    b'reaction' b'upon' b'many' b'islands' b'have' b'more' b'primacy' b'than' b'firms' b'and' b"'" b'<unk>' b"'" b'as' b'the' b'"' b'forbade' b'TA' b'known' b'as'
    b'13' b'centres' b';' b'arrival' b',' b'some' b'excluded' b',' b'compared' b'killing' b'by' b'175' b'%' b'of' b'his' b'<unk>' b'within' b'that' b'country' b'...'
    b'effective' b'in' b'the' b'death' b'of' b'all' b'such' b'weapons' b'he' b'will' b'control' b'what' b'couldn' b"'t" b'need' b'to' b'be' b'nervous' b',' b'while'
    b'counterattacks' b'out' b'is' b'changing' b'by' b'respect' b'.' b'Initially' b'to' b'previous' b'War' b'I' b'declined' b'we' b'don' b"'t" b'<unk>' b'.' b"'" b'The'
    b'company' b"'s" b'soldier' b'of' b'justice' b'are' b'unable' b'a' b'uniform' b'down' b'by' b'a' b'attack' b'of' b'itself' b'.' b'"' b'A' b'article' b'had'
    b'from' b'freight' b'with' b'him' b'both' b'one' b',' b'a' b'planet' b'that' b'would' b'fight' b'spend' b'to' b'take' b'celebrity' b'relevant' b'.' b'The' b'challenge'
    b'grade' b'are' b'their' b'growing' b'turn' b'for' b'the' b'ages' b'of' b'all' b'of' b'their' b'six' b'children' b',' b'causes' b',' b'fundamental' b'Andalee' b'.'
    b'The' b'local' b'smell' b'by' b'young' b'large' b',' b'public' b',' b'and' b'nutrient' b'gradually' b'comes' b'standing' b'.' b'According' b'to' b'O' b"'Malley" b','
    b'users' b'was' b'appointed' b'for' b'Gulf' b'uploaded' b'that' b'happened' b'in' b'comparison' b'to' b'H' b'.' b'Numerous' b'feathers' b'on' b'the' b'recent' b'theme' b'of'
    b'series' b',' b'names' b',' b'corpse' b'and' b'contraception' b',' b'set' b'collection' b'defense' b'.' b'Therefore' b',' b'similar' b'are' b'good' b',' b'a' b'immature'
    b'<unk>' b'usually' b'developed' b',' b'during' b'The' b'mid' b'@-@' b'cent' b'known' b'assassinate' b'Astr\xc3\xa9e' b',' b'wartime' b',' b'and' b'<unk>' b'.' b'The' b'second'
    b'strength' b'of' b'the' b'betrayal' b'(' b'roof' b')' b'is' b'the' b'longest' b'practice' b'of' b'subfossil' b'stories' b'and' b'rarely' b'require' b'RNA' b'prevailed' b'at'
    b'Gun' b'Palace' b',' b'which' b'means' b'that' b'their' b'large' b'head' b'translated' b'in' b'1880' b'to' b'1220' b'.' b'muck' b'an' b'widespread' b'review' b'of'
    b'quasi' b'is' b'limited' b'into' b'Ramon' b'College' b',' b'then' b'on' b'each' b'official' b'nestlings' b',' b'divided' b'up' b',' b'and' b'to' b'be' b'especially'
    b'very' b'bronze' b'(' b'57' b'%' b')' b'.' b'All' b'are' b'to' b'incorporate' b'your' b'degree' b'and' b'is' b'electricity' b'at' b'pottery' b'.' b'Some'
    b'ingredient' b'are' b'precisely' b',' b'but' b'their' b'particularly' b'the' b'world' b'can' b'be' b'altered' b'supply' b'of' b'all' b'.' b'When' b'to' b'confront' b'they'
    b'that' b'from' b'1850' b'for' b'rule' b'it' b'attempted' b'to' b'be' b'so' b'fanned' b'for' b'its' b'scheme' b'.' b'Many' b'dent' b'followed' b'at' b'the'
    b'other' b'point' b'and' b'simpler' b'plant' b'is' b'associated' b'from' b'the' b'Romans' b'.' b'Napoleon' b'has' b'four' b'years' b'(' b'4' b'to' b'28' b'cm'
    b')' b'wide' b'(' b'escaping' b'to' b'dealing' b'with' b'1' b'@.@' b'2' b'm' b')' b'(' b'roughly' b'10' b'Award' b')' b',' b'but' b'is'
    b'split' b'up' b'with' b'its' b'<unk>' b',' b'having' b'killed' b'direction' b'.' b'As' b'hundreds' b'of' b'their' b'ambition' b',' b'violet' b'feeding' b'one' b'punishment'
    b'and' b'two' b'female' b'stars' b'.' b'terraced' b',' b'which' b'have' b'been' b'arises' b'ago' b'until' b'this' b'other' b'city' b',' b'is' b'it' b"'s"
    b'longer' b',' b'and' b'case' b'the' b'past' b'coverts' b'.' b'In' b'the' b'ring' b',' b'they' b'were' b'uncommon' b'forward' b'with' b'a' b'strong' b'source'
    b'of' b'14' b'from' b'.' b'The' b'breeding' b'rotation' b'can' b'be' b'didn' b'rates' b'of' b'common' b'variables' b'.' b'67' b'lamins' b'somewhat' b'less' b'birds'
    b';' b'in' b'particular' b',' b'individual' b'starling' b'is' b'gradually' b'erroneously' b':' b'one' b'powerful' b'vehicle' b',' b'including' b'635' b',' b'most' b'otherwise' b'to'
    b'rocks' b'for' b'breast' b'white' b'.' b'The' b'eggs' b'are' b'4' b'@-@' b'pounders' b'that' b'are' b'<unk>' b',' b'including' b'night' b'than' b'touchdowns' b'.'
    b'Wally' b'have' b'recited' b'version' b',' b'and' b'by' b'double' b',' b'it' b'gets' b'around' b'4' b'@.@' b'5' b'in' b'(' b'grass' b'?' b'/'
    b'm3' b')' b';' b'while' b'they' b'are' b'equally' b'completely' b'unclear' b'and' b'fly' b'.' b'The' b'eggs' b'typically' b'conclude' b'Permanent' b'Player' b'wagons' b'\xe2\x80\x94'
    b'other' b'drilling' b'of' b'common' b'smell' b'mobbing' b'their' b'plumage' b'at' b'a' b'occasional' b'start' b'.' b'Its' b'male' b'behaviour' b'are' b'frequent' b'in' b'four'
    b'clusters' b',' b'2' b'%' b'of' b'rounded' b'past' b'teeth' b',' b'throughout' b'other' b'Dad' b'and' b'other' b',' b'early' b'with' b'21' b'men' b','
    b'while' b'85' b'seconds' b'such' b'as' b'trash' b'(' b'flintlock' b'prey' b'or' b'surroundings' b')' b'as' b'effect' b'@-@' b'caesium' b',' b'and' b'only' b'<unk>'
    b'or' b'grasses' b'(' b'including' b'only' b'31' b'%' b'and' b'eight' b'or' b'40' b'years' b'ago' b')' b',' b'together' b'throughout' b'their' b'facial' b'main'
    b',' b'and' b'<unk>' b'<unk>' b'(' b'school' b')' b',' b'eating' b'adults' b'of' b'small' b',' b'or' b'level' b'.' b'Additionally' b',' b'it' b'is'
    b'only' b'skeletal' b'Atherstone' b'or' b'<unk>' b'without' b'physical' b'.' b'Many' b'non' b'@-@' b'female' b'species' b'(' b'typically' b'centered' b'by' b'bone' b'(' b'known'
    b'as' b'white' b'or' b'other' b'blood' b')' b'are' b'freely' b'or' b'heavy' b';' b'they' b'can' b'do' b'occasionally' b'exist' b'in' b'<unk>' b'.' b'Around'
    b'this' b'other' b'age' b',' b'they' b'stemmed' b'alone' b'when' b'adults' b'do' b'become' b'a' b'side' b'of' b'the' b'eggs' b'.' b'If' b'it' b'occurs'
    b',' b'some' b'walks' b'after' b'it' b'will' b'be' b'night' b'.' b'Moored' b'kakapo' b'are' b'consumed' b'individuals' b'on' b'introduction' b'from' b'an' b'female' b'bearing'
    b'himself' b'part' b',' b'on' b'General' b'<unk>' b',' b'depicting' b'<unk>' b'the' b'Viscount' b'then' b'on' b'his' b'head' b'.' b'Zenobia' b'Ann' b'crazy' b','
    b'who' b'introduced' b'her' b'role' b'despite' b'two' b'longitudinal' b'influences' b'and' b'wooden' b'breakdown' b',' b'<unk>' b'membrane' b'@-@' b'eared' b'viewpoints' b',' b'Royalist' b'matters'
    b',' b'and' b'canal' b'officers' b'.' b'There' b'are' b'no' b'setback' b'who' b'is' b'also' b'show' b'to' b'have' b'been' b'one' b'of' b'the' b'salsa'
    b'purposes' b'in' b'which' b'they' b'were' b'slower' b'behavior' b'.' b'They' b'are' b'rarely' b'caused' b'by' b'breast' b'bird' b'across' b'feral' b',' b'Portuguese' b','
    b'and' b'warts' b'they' b'are' b'known' b'more' b'known' b'and' b'<unk>' b',' b'they' b'are' b'a' b'rapid' b'leaks' b'of' b'plumage' b'.' b'The' b'first'
    b'fifteen' b'holy' b'churches' b'the' b'need' b'to' b'be' b'particularly' b'intact' b'for' b'a' b'fusion' b'that' b'means' b'much' b'formula' b'.' b'With' b'Thai' b'derivatives'
    b',' b'"' b'palisade' b'"' b'or' b'the' b'<unk>' b'(' b'sometimes' b'formulated' b'by' b'Crunch' b'projections' b')' b',' b'the' b'first' b'independent' b'towers' b'above'
    b'these' b'other' b'than' b'ne' b',' b'were' b'capable' b'of' b'seller' b'containing' b'over' b'90' b'centimeters' b'.' b'The' b'cap' b'managed' b'a' b'maximum' b'diagram'
    b'in' b'green' b',' b'respectively' b'.' b'The' b'delusional' b',' b'slender' b',' b'is' b'high' b'to' b'forest' b'lead' b',' b'6' b'\xe2\x80\x93' b'46' b'or'
    b'8' b'@.@' b'5' b'in' b'(' b'2' b'@.@' b'8' b'in' b')' b'thick' b'\xe2\x80\x93' b'use' b'by' b'food' b',' b'and' b'the' b'woods' b'corridor'
    b'can' b'be' b'(' b'<unk>' b')' b'.' b'It' b'was' b'boss' b'with' b'2' b'or' b'3' b'Fighter' b')' b',' b'with' b'high' b'plants' b','
    b'white' b'people' b'and' b'<unk>' b'turrets' b'(' b'<unk>' b')' b'and' b'<unk>' b'(' b'snakes' b')' b'.' b'Following' b'several' b'are' b'found' b'in' b'clusters'
    b',' b'the' b'one' b'species' b'rises' b'under' b'Io' b',' b'either' b'forms' b'present' b'when' b'this' b'mushroom' b'is' b'falling' b'.' b'Also' b'(' b'<unk>'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.1
    loss: 5.168
    elapsed time (seconds): 150.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  14.093 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
