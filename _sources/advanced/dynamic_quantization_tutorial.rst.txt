.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Richard' b'<unk>' b'(' b'"' b'The' b'No\xc3\xabl' b'[' b'cannot' b']' b'Need' b')' b'"' b',' b'a' b'possible' b'unit' b'as' b'a' b'planet' b','
    b'that' b'will' b'be' b'discovered' b'.' b'The' b'other' b'@-@' b'known' b'high' b'recruits' b'came' b'out' b'of' b'various' b'buildings' b'.' b'A' b'body' b'to'
    b'be' b'converted' b'to' b'showering' b',' b'which' b'then' b'opens' b'a' b'surface' b',' b'be' b'also' b'too' b'easy' b',' b'allowing' b'connected' b'away' b'to'
    b'other' b'post' b'@-@' b'year' b'Persian' b',' b'meant' b'that' b'by' b'some' b'games' b'over' b'amusing' b'procedures' b',' b'\xc5\x81aszcz' b'<unk>' b'thinks' b'that' b'smoke'
    b'also' b'supports' b'.' b'These' b'measures' b'when' b'Noted' b'occurs' b',' b'they' b'were' b'exported' b'to' b'them' b'.' b'They' b'draws' b'seven' b'units' b'of'
    b'common' b'areas' b'.' b'The' b'female' b'remained' b'every' b'14' b':' b'1' b'race' b'store' b'(' b'visitor' b'and' b'the' b'color' b'hilarious' b')' b'into'
    b'the' b'Roche' b'Teams' b'"' b'sedimentation' b'"' b'character' b'one' b'live' b'\xe2\x80\x93' b'79' b':' b'Black' b'Nxf2' b'!' b'"' b'Indonesia' b'"' b'.' b'Oxford'
    b'Obama' b'describes' b'this' b'as' b'"' b'the' b'deeper' b'Army' b'of' b'Scunthorpe' b"'s" b'video' b'coast' b',' b'and' b'the' b'clock' b'cannot' b'be' b'used'
    b'while' b'modifications' b'on' b'how' b'such' b'it' b"'ve" b'long' b'matured' b'continuous' b'timing' b'.' b'Conservation' b'I' b"'ve" b'to' b'be' b'portrayed' b'or' b'makes'
    b"'t" b'be' b'because' b'sic' b'can' b'be' b'incredibly' b'shelled' b'or' b'at' b'two' b'.' b'He' b'[' b'though' b'you' b'kept' b'an' b'good' b'bass'
    b'at' b'all' b',' b'I' b'shall' b"'t" b'get' b'them' b'by' b'find' b'working' b'.' b'"' b'He' b'then' b'founded' b'violence' b'for' b'their' b'bat'
    b'because' b'his' b'house' b'guitarist' b'James' b'C.' b'Gandhi' b'criticised' b'the' b'Don' b'porters' b'in' b'the' b'U.S.' b'.' b'The' b'primary' b'Episodes' b'is' b'performed'
    b'blending' b'and' b'movie' b'as' b'the' b'bat' b'on' b'the' b'event' b'.' b'compete' b',' b'Cramer' b'wrote' b'"' b'polls' b'especially' b'"' b'that' b'"'
    b'party' b'"' b'has' b'professor' b'Pfaster' b'.' b'The' b'same' b'story' b',' b'shipments' b'of' b'his' b'American' b'content' b',' b'was' b'intended' b'in' b'2011'
    b'.' b'Despite' b'this' b'period' b'in' b'1992' b',' b'participated' b'in' b'a' b'prominent' b'manner' b'for' b'teaching' b'altered' b'burden' b'to' b'be' b'collected' b'back'
    b'up' b'again' b',' b'prompting' b'eggs' b'of' b'gaps' b'mentions' b'that' b'when' b'his' b'uncle' b'is' b'able' b'to' b'understand' b'across' b'amusing' b'enough' b'verse'
    b'.' b'He' b'also' b'begins' b'its' b'involvement' b'on' b'his' b'planet' b'\xe2\x80\x93' b'played' b'to' b'the' b'Board' b',' b'the' b'murder' b'of' b'<unk>' b'stirring'
    b'in' b'wealthy' b'mummies' b'.' b'He' b':' b'<unk>' b'Lawson' b'(' b'Fall' b'Johnston' b')' b'was' b'built' b'in' b'the' b'second' b'.' b'sizable' b'<unk>'
    b'or' b'Capcom' b'in' b'Mrs' b'Lee' b'le' b'Northumberland' b'(' b'1994' b')' b'being' b'the' b'second' b'planet' b'having' b'been' b'replaced' b'by' b'(' b'Species'
    b')' b'on' b'March' b'8' b',' b'1987' b'.' b'The' b'novel' b"'" b'w' b'Regiment' b':' b'The' b'One' b'sides' b'of' b'10' b'Seasons' b'is'
    b'not' b'taken' b'.' b'Episode' b'For' b'Ceres' b',' b'a' b'few' b'concert' b',' b'a' b'Cambridge' b'Dictionary' b'of' b'8' b':' b'assassination' b'in' b'Cardinal'
    b'Bang' b'Control' b',' b'has' b'sold' b'more' b'than' b'16' b'%' b',' b'because' b'of' b'Muslim' b'dots' b',' b'poor' b'females' b',' b'puzzles' b'and'
    b'socks' b'.' b'Relations' b',' b'which' b'follow' b'near' b'versions' b'of' b'income' b',' b'is' b'among' b'at' b'least' b'10' b'%' b'of' b'siblings' b'on'
    b'three' b'other' b'Star' b'Two' b',' b'dated' b'written' b'to' b'be' b'distinctive' b'in' b'Great' b'Republic' b'AD' b',' b'<unk>' b'for' b'hindering' b'the' b'season'
    b'regular' b'because' b'they' b'were' b'kept' b'for' b'a' b'young' b'finish' b'and' b'Hebrew' b'.' b'Gauls' b'<unk>' b'as' b'John' b'californicus' b',' b'she' b'is'
    b'probably' b'spelled' b'to' b'reach' b'away' b'to' b'the' b'string' b'of' b'the' b'claims' b'Six' b'main' b',' b'God' b'was' b'his' b'final' b'points' b'in'
    b'1917' b'.' b'The' b'words' b'are' b'strong' b'in' b'a' b'breakfast' b'and' b'lacking' b'through' b'to' b'challenge' b'other' b'remaining' b'police' b',' b'which' b'dig'
    b'during' b'the' b'family' b'Christmas' b'.' b'<unk>' b',' b'hay' b',' b'hygroscopic' b'@-@' b'veins' b',' b'easily' b'Lens' b',' b'particularly' b'almost' b'a' b'hit'
    b'or' b'24' b'.' b'Inside' b'abilities' b'on' b'school' b',' b'and' b'stellar' b',' b'infraction' b'practices' b'on' b'chest' b'and' b'striking' b',' b'before' b'McElroy'
    b'has' b'a' b'range' b'of' b'mud' b'.' b'[' b'about' b'bright' b'chicks' b',' b'stress' b',' b'attacks' b'and' b'partially' b'tool' b'or' b'maturity' b','
    b'added' b'that' b'males' b'128' b'\xe2\x80\x93' b'four' b'times' b'develop' b'it' b'by' b'another' b'job' b'and' b'unable' b'to' b'pass' b'it' b'.' b'<unk>' b','
    b'Oriana' b'und' b'(' b'"' b'Published' b'luck' b'"' b')' b'was' b'inscriptions' b'himself' b'@-@' b'Semitic' b'others' b'on' b'the' b'Divide' b'drop' b'of' b'<unk>'
    b':' b'The' b'more' b'small' b'patch' b'of' b'Indigenous' b'people' b':' b'in' b'1865' b'the' b'part' b'closed' b'up' b'to' b'out' b'funds' b',' b'containing'
    b'the' b'worst' b'release' b'by' b'Korea' b'.' b'Within' b'these' b'specimens' b',' b'computational' b'starling' b'grass' b'starlings' b'were' b'shown' b'at' b'feasibility' b'within' b'text'
    b'despite' b'the' b'show' b'.' b'<eos>' b'According' b'to' b'Mark' b'Smith' b'and' b'cream' b'Operations' b',' b'the' b'ornament' b'is' b'also' b'poured' b'when' b'the'
    b'R\xc3\xa9union' b'energy' b'will' b'acknowledged' b'Portuguese' b'or' b'<unk>' b',' b'everywhere' b',' b'and' b'grey' b'young' b',' b'<unk>' b'the' b'exchange' b'at' b'which' b'they'
    b'end' b'for' b'.' b'As' b'many' b'other' b'species' b'goes' b',' b'they' b'find' b'players' b'into' b'a' b'<unk>' b'export' b'.' b'Some' b'minor' b'starlings'
    b'have' b'depicting' b'nanobot' b'parts' b'6' b'%' b'of' b'its' b'high' b'wood' b'conformational' b'wood' b'elements' b';' b'captured' b'as' b'too' b'greater' b'are' b'continuous'
    b'.' b'<eos>' b'The' b'supernatural' b'jaw' b',' b'supported' b'by' b'$' b'5' b'ft' b'(' b'memories' b'of' b'the' b'tackling' b'or' b'NHA' b')' b','
    b'is' b'more' b'successful' b'to' b'extend' b'a' b'person' b'across' b'it' b'.' b'The' b'male' b'devoted' b'into' b'pants' b'to' b'become' b'large' b',' b'one'
    b'of' b'its' b'large' b'gender' b'ship' b',' b'which' b'was' b'actually' b'successful' b',' b'and' b'the' b'rules' b'of' b'handled' b'under' b'a' b'specimen' b'of'
    b'violence' b'between' b'them' b',' b'or' b'changed' b'on' b',' b'with' b'many' b'smaller' b'main' b'observations' b',' b'during' b'every' b'attempt' b'to' b'spend' b'mainly'
    b'points' b'.' b'Despite' b'some' b',' b'directed' b'birds' b'are' b'possible' b'as' b'their' b'model' b',' b'with' b'landslides' b'on' b'the' b'performance' b'of' b'the'
    b'U2' b'.' b'Similarly' b'reasons' b'the' b'parody' b',' b'they' b'do' b'given' b'RNA' b'magical' b'elements' b'.' b'The' b'tone' b'of' b'chicks' b',' b'which'
    b'are' b'resolutions' b':' b'Such' b'polymers' b'(' b'especially' b'legs' b')' b'sections' b'of' b'third' b'trillion' b'moves' b',' b'since' b'I' b'Mostar' b';' b'their'
    b'motions' b'takes' b'less' b'wives' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Ceres' b'makes' b'<unk>' b'on' b'Piedras' b'Prince'
    b'using' b'their' b'large' b'and' b'affection' b'locations' b',' b'at' b'various' b'reasons' b'and' b'are' b'found' b'.' b'In' b'these' b'cases' b',' b'additional' b'starlings'
    b'microscopically' b'shortly' b'.' b'An' b'range' b'in' b'the' b'refinement' b'of' b'momentum' b'is' b'known' b'for' b'absence' b'.' b'He' b'speakers' b'with' b'maximum' b'eggs'
    b'such' b'as' b'entertaining' b',' b'open' b'or' b'inevitable' b'room' b'.' b'Thus' b',' b'they' b'have' b'typically' b'nothing' b'as' b'they' b'do' b'experiment' b'as'
    b'a' b'eye' b'where' b'they' b'bring' b'long' b'most' b'frequently' b'from' b'state' b',' b"'" b'lighter' b'or' b'<unk>' b'speak' b'looking' b'into' b'food' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 238.9
    loss: 5.168
    elapsed time (seconds): 164.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  47.601 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
