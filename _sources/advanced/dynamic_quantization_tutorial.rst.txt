.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'unrest' b'.' b'Noted' b'request' b',' b'there' b'is' b'various' b'complex' b'eggs' b',' b'including' b'several' b'<unk>' b'@-@' b'Nigeria' b',' b'an' b'sword' b'reminiscent'
    b'of' b'tree' b'pressure' b',' b'a' b'large' b'glossy' b'start' b'and' b'short' b'bones' b'(' b'drums' b')' b'he' b',' b'newest' b',' b'Our' b','
    b'and' b'<unk>' b',' b'had' b'struck' b'"' b'The' b'magical' b'saints' b'of' b'a' b'sharp' b'screen' b'"' b'but' b'just' b'to' b'accompany' b'nests' b'as'
    b'bird' b'Bishop' b'\xe2\x80\x9d' b'to' b'travel' b'to' b'the' b'town' b'.' b'A' b'eyes' b'from' b'wash' b'only' b'air' b'density' b'around' b'in' b'other' b'historical'
    b'definition' b'were' b'among' b'other' b'years' b'.' b'The' b'bright' b'starling' b'was' b'optical' b'by' b'an' b'average' b'Protestant' b'paper' b',' b'furthermore' b',' b'a'
    b'devout' b'post' b'due' b'to' b'the' b'water' b'specimen' b'by' b'<unk>' b'@-@' b'known' b',' b'when' b'while' b'king' b'buried' b'down' b'for' b'Critic' b'Selma'
    b'Fleming' b'Omar' b',' b'remains' b'old' b'expedition' b'in' b'Mogadishu' b',' b'and' b'Cheboygan' b'deprecation' b'design' b',' b'by' b'this' b'year' b'he' b'readily' b'disturbed'
    b'via' b'the' b'psychological' b'footing' b',' b'leading' b',' b'and' b'had' b'Gruffudd' b'stiffened' b'with' b'their' b'achieving' b'<unk>' b'The' b'bird' b'.' b'Flocks' b'from'
    b'Lower' b',' b'luck' b',' b'and' b'Candidature' b',' b'Sachs' b',' b'<unk>' b',' b'bread' b'and' b'South' b'Australia' b'were' b'sent' b'into' b'<unk>' b','
    b'<unk>' b',' b'Appeals' b',' b'the' b'work' b'of' b'two' b'trees' b',' b'stabbing' b'a' b'large' b'setting' b'of' b'1877' b'.' b'The' b'next' b'month'
    b'another' b'it' b'are' b'titled' b'"' b'Ceres' b'of' b'Loyola' b'"' b'fondly' b'as' b'a' b'"' b'very' b'secretive' b'discovery' b'"' b',' b'while' b'the'
    b'storm' b'gives' b'them' b'its' b'design' b'.' b'the' b'ahi\xe1\xb9\x83s\xc4\x81' b'were' b'ranked' b'by' b'the' b'Little' b'Party' b'partial' b'fauna' b',' b'which' b'has' b'a'
    b'early' b'unidentified' b'figure' b'of' b'view' b'about' b'an' b'update' b'it' b'too' b'up' b'.' b'Ecclestone' b'is' b'estimated' b'on' b'a' b'boarding' b'high' b'family'
    b'officer' b'that' b'is' b'shown' b'behind' b'her' b'label' b'(' b'<unk>' b',' b'pesos' b')' b',' b'and' b'also' b',' b'on' b'Jifna' b"'s" b'large'
    b'burning' b',' b'Finn' b'Wilson' b'(' b'c' b')' b'about' b'the' b'burrows' b'of' b'Song' b'Mann' b'.' b'He' b'pitched' b'their' b'plans' b'in' b'late'
    b'1918' b',' b'but' b'learning' b'that' b'Karaoke' b'Gallienus' b'more' b'members' b'have' b'"' b'shaped' b'a' b'message' b'to' b'Japanese' b'attention' b'"' b'.' b'The'
    b'Australian' b'state' b'Walker' b'responded' b'away' b'with' b'Beethoven' b'so' b'S.' b'Bird' b',' b'Mike' b'McDonald' b',' b'<unk>' b'Williams' b',' b'Gy' b',' b'<unk>'
    b'Forbes' b',' b'Hollis' b',' b'respectability' b'(' b'Hall' b'of' b'<unk>' b')' b',' b'and' b'Burleigh' b'chailletii' b'(' b'legate' b')' b'.' b'<unk>' b'lineman'
    b'Another' b'intention' b'for' b'the' b'book' b'during' b'the' b'Polish' b'language' b'and' b'the' b'Horse' b'planet' b'.' b'Their' b'works' b'also' b'took' b'up' b'to'
    b'43' b'%' b'of' b'its' b'son' b"'s" b'most' b'song' b'overall' b':' b'"' b'The' b'<unk>' b'we' b"'ve" b'"' b'since' b'civilians' b'for' b'trouble'
    b'instead' b'of' b'several' b'different' b'pad' b'stories' b',' b'"' b'Crash' b'of' b'Surrender' b'"' b'following' b'<unk>' b',' b'to' b'portray' b'a' b'opponent' b'city'
    b'has' b'hit' b'brought' b'the' b'<unk>' b'or' b'Sergio' b'O.' b'Young' b'armies' b'to' b'assumed' b'himself' b'full' b'drivers' b'over' b'them' b'and' b'few' b'others'
    b'such' b'as' b'<unk>' b'Bernstein' b',' b'Jesus' b"'s" b'observation' b':' b'"' b'good' b'shame' b',' b'it' b'is' b'often' b'<unk>' b'Che' b';' b'go'
    b'just' b'to' b'other' b'<unk>' b'villages' b'over' b'a' b'very' b'blacks' b'and' b'the' b'years' b'from' b'the' b'mythology' b'of' b'their' b'predominate' b',' b'albeit'
    b'in' b'vicious' b'life' b',' b'Johann' b'sight' b'to' b'give' b'a' b'sort' b'of' b'Godsmack' b'on' b'the' b'hand' b'.' b'It' b"'s" b'also' b'<unk>'
    b',' b'but' b'means' b'down' b'how' b'there' b'are' b'no' b'houses' b'ever' b'in' b'the' b'early' b'village' b'(' b'2005' b'to' b'love' b'Babu' b','
    b'not' b'most' b'flightless' b'Bell' b')' b',' b'smaller' b'and' b'Joseph' b'takes' b'renderings' b'(' b'not' b'dead' b')' b'and' b'dragged' b'as' b'it' b'In'
    b'numbering' b'a' b'average' b'woman' b'when' b'he' b'is' b'the' b'same' b'net' b'.' b'It' b'is' b'<unk>' b'on' b'all' b'@-@' b'Star' b'mysterious' b','
    b'<unk>' b'and' b'synth' b'organisations' b'from' b'Monthly' b'galericulata' b'during' b'the' b'early' b'century' b'.' b'But' b'his' b'kingdom' b'is' b'like' b'just' b'friction' b'.'
    b'The' b'nightclub' b'are' b'a' b'struggle' b'we' b'to' b'be' b'probably' b'only' b'all' b'an' b'figure' b',' b'nor' b'not' b'and' b'a' b'young' b'pursuers'
    b'will' b'be' b'occupies' b'to' b'defeat' b'4' b'merchants' b',' b'referring' b'to' b'a' b'seeds' b'\xe2\x80\x94' b'this' b'was' b'visible' b'remains' b',' b'and' b'they'
    b'do' b'.' b'Now' b'ritualistic' b'functions' b'will' b'also' b'be' b'they' b'to' b'be' b'detailed' b',' b'"' b'it' b'wasn' b"'t" b'a' b'accompaniment' b'of'
    b'track' b'.' b'Little' b'<unk>' b'was' b'one' b'of' b'a' b'deep' b'gang' b'to' b'make' b'sense' b'the' b'fungi' b'were' b'able' b'to' b'Bulls' b'they'
    b';' b'great' b',' b'it' b'has' b'.' b'There' b'arises' b'<unk>' b'There' b'is' b'some' b'tenuous' b'previous' b'writer' b'lives' b'in' b'potentially' b'on' b'around'
    b'me' b'might' b'be' b'teaching' b'.' b'The' b'two' b'exoperidium' b'were' b'<unk>' b'clean' b'Commons' b'and' b'Qedar' b'at' b'<unk>' b'in' b'FBI' b'1879' b'.'
    b'Instead' b',' b'when' b'is' b'known' b',' b'there' b'have' b'been' b'generally' b'facts' b'and' b'other' b'new' b'trees' b'who' b'thus' b'develops' b'<unk>' b','
    b'so' b'it' b'cannot' b'be' b'high' b'.' b'While' b'the' b'images' b'of' b'miners' b'(' b'480' b')' b'would' b'be' b'as' b'"' b'quarrel' b'a'
    b'planet' b'@-@' b'eye' b'"' b',' b'they' b'were' b'reduced' b'to' b'function' b'so' b'occurring' b'from' b'racial' b'items' b'.' b'One' b'records' b',' b'<unk>'
    b'and' b'criminal' b'<unk>' b',' b'will' b'have' b'to' b'be' b'green' b',' b'children' b',' b'and' b'denying' b'lighter' b'for' b'individuals' b'such' b'as' b'<unk>'
    b'.' b'<eos>' b'chimneys' b'as' b'"' b'million' b'"' b',' b'were' b'commonly' b'regarded' b'as' b'fledglings' b'.' b'The' b'subject' b'of' b'Greek' b'Crowns' b'discussed'
    b'their' b'research' b',' b'or' b'being' b'viewed' b'by' b'Spirits' b'of' b'<unk>' b'.' b'<unk>' b'is' b'sometimes' b'mechanized' b'.' b'Cool' b',' b'or' b'known'
    b',' b'but' b'even' b'the' b'same' b'or' b'right' b'better' b'theory' b'in' b'various' b'kinds' b'of' b'hawk' b'.' b'<unk>' b'usually' b'seem' b',' b'775'
    b',' b'<unk>' b'on' b'a' b'bucket' b',' b'with' b'its' b'body' b'journey' b'in' b'a' b'Pirelli' b'<unk>' b'than' b'Beyonc\xc3\xa9' b'.' b'This' b'father' b'is'
    b'second' b'little' b'.' b'The' b'specific' b'well' b'struck' b'molecules' b"'s" b'<unk>' b'Cao' b'"' b'<unk>' b'of' b'the' b'judge' b'<unk>' b'moralitas' b'"' b'('
    b'Ulster' b')' b',' b'an' b'planet' b'that' b'stuck' b'into' b'the' b'growth' b'of' b'this' b'exception' b'.' b'Various' b'insects' b'and' b'a' b'specially' b'logo'
    b'solutions' b'are' b'hostage' b'by' b'Sting' b'such' b'as' b'proper' b'cottonwood' b'from' b'their' b'<unk>' b'.' b'<unk>' b'Tales' b'predators' b'are' b'normally' b'<unk>' b'voicing'
    b'.' b'<eos>' b'unclear' b'is' b'that' b'bone' b'jam' b'becomes' b'The' b'partner' b'.' b'A' b'one' b'of' b'12' b'aggressor' b',' b'cell' b'or' b'black'
    b'or' b'grayish' b'ends' b',' b'most' b'of' b'which' b'are' b'common' b'24' b'or' b'fame' b'tracks' b'.' b'For' b'60' b'specimens' b',' b'females' b'occur'
    b'when' b'they' b'are' b'educated' b'for' b'transcribes' b'shook' b'and' b'not' b'letting' b'literature' b',' b'A' b'Troubles' b',' b'while' b'he' b'continues' b'once' b'to'
    b'do' b'so' b'.' b'The' b'word' b'halves' b'is' b'probably' b'well' b'@-@' b'written' b';' b'according' b'to' b'some' b'proteins' b',' b'it' b'is' b'only'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 240.6
    loss: 5.168
    elapsed time (seconds): 168.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  54.215 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
