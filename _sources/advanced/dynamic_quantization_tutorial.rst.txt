.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'that' b'would' b'supposed' b'any' b'more' b'than' b'Riela' b'utterances' b'as' b'"' b'subjected' b'towards' b'25' b'%' b'of' b'every' b'decision' b'.' b'"' b'<eos>'
    b'The' b'data' b'Bluffs' b'to' b'Franchi' b'was' b'transferred' b'to' b'a' b'wide' b'size' b'that' b'could' b'effectively' b'be' b'prepared' b'and' b'now' b'meant' b'as'
    b'a' b'large' b'could' b'forum' b'away' b'.' b'They' b'were' b'Protestant' b'II' b'by' b'the' b'air' b'itself' b'left' b'the' b'now' b'persons' b'of' b'Perry'
    b'by' b'Mid' b'2008' b'.' b'<unk>' b',' b'governed' b'by' b'deep' b'Edinburgh' b'to' b'keep' b'egg' b'or' b'occupies' b'to' b'either' b'install' b'an' b'conflict'
    b'both' b'reduced' b'the' b'struggle' b',' b'were' b'the' b'same' b'most' b'best' b'Premiership' b'candidate' b'.' b'The' b'Lucius' b'writes' b'"' b'of' b'the' b'harassed'
    b'dollar' b'are' b'thrilled' b'"' b'.' b'The' b'development' b'of' b'his' b'prerogative' b'travels' b'supporting' b'this' b'finding' b'to' b'make' b'statement' b',' b'either' b'when'
    b'their' b'attendant' b'could' b'be' b'less' b'235' b',' b'stationed' b'at' b'one' b'million' b'habitats' b',' b'and' b'the' b'other' b'classes' b'are' b'temporarily' b'Palmyrene'
    b'.' b'When' b'that' b'this' b'makes' b'specific' b'artillery' b'administration' b',' b'the' b'quite' b'planet' b'is' b'not' b'found' b',' b'even' b'<unk>' b'control' b'.'
    b'They' b'rivalries' b'standing' b'as' b'slightly' b'consistency' b',' b'averaging' b'them' b'study' b'of' b'improved' b'.' b'As' b'constantly' b'concluded' b',' b'"' b'or' b'uniqueness'
    b'[' b'...' b'may' b'be' b'isolated' b'at' b'a' b'thirty' b'@-@' b'planet' b'Joseph' b'<unk>' b'and' b'quite' b'to' b'the' b'planet' b',' b"'" b'they'
    b'always' b'moved' b',' b'to' b'conduct' b'me' b'of' b'three' b'wish' b'"' b'.' b'Ernest' b'takes' b'the' b'year' b'the' b'539' b'telescope' b'<unk>' b'with'
    b'simplicity' b'of' b'Malaysia' b'with' b'civilian' b'profitability' b',' b'and' b'grey' b'rates' b'such' b'as' b'Simon' b'reissued' b'by' b'<unk>' b'unpublished' b',' b'flow' b'crafted'
    b'and' b'bind' b'them' b'clear' b'it' b'to' b'goods' b'dead' b'.' b'The' b'mixing' b'used' b'their' b'parallels' b'on' b'bird' b'mtDNA' b',' b'which' b'saved'
    b'the' b'field' b'of' b'their' b'Hindu' b'<unk>' b'is' b',' b'the' b'capture' b'of' b'their' b'family' b'was' b'reforms' b'.' b'The' b'Keyblade' b',' b'by'
    b'a' b'dismay' b'which' b'have' b'died' b',' b'Jeremi' b'chose' b'nothing' b'in' b'the' b'studio' b'and' b'<unk>' b'to' b'control' b'of' b'the' b'finding' b'with'
    b'nature' b'.' b'Thus' b'on' b'feathers' b',' b'before' b'opening' b'into' b'water' b',' b'it' b'appears' b'to' b'be' b'blamed' b'listen' b',' b'overt' b'<unk>'
    b',' b'<unk>' b',' b'fiesta' b',' b'and' b'magical' b'@-@' b'decorative' b'threads' b'.' b'Within' b'mass' b'attacks' b'centers' b',' b'the' b'kakapo' b'failed' b'to'
    b'be' b'too' b'related' b'to' b'<unk>' b',' b'which' b'have' b'to' b'withdraw' b'Excavation' b'using' b'being' b'designed' b'to' b'develop' b'.' b'In' b'response' b','
    b'they' b'cannot' b'have' b'structural' b'ability' b'.' b'Because' b'of' b'particular' b',' b'morphological' b'tortoise' b'by' b'S' b'than' b'formulae' b',' b'they' b'first' b'distracted'
    b'through' b'them' b'.' b'As' b'they' b'meet' b'@-@' b'<unk>' b',' b'they' b"'re" b'likewise' b'Culver' b'.' b'This' b'is' b'not' b'receptive' b'to' b'eat'
    b',' b'but' b'require' b'it' b'on' b'lap' b'contracts' b'.' b'<eos>' b'Crash' b'flies' b'a' b'series' b'of' b'large' b'epidemic' b'with' b'<unk>' b',' b'gems'
    b',' b'common' b'birds' b',' b'and' b'wives' b'pole' b'into' b'multiple' b'broods' b'around' b'the' b'mating' b'or' b'marital' b'Jurassic' b',' b'wider' b'urine' b'as'
    b'they' b'are' b'encourages' b'future' b'.' b'Many' b'subspecies' b'were' b'certainly' b'killed' b'to' b'taking' b'on' b'costly' b',' b'they' b'were' b'not' b'moving' b'into'
    b'plumes' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Publication' b'with' b'case' b'=' b'=' b'<eos>' b'<eos>' b'According' b'to' b'chromatin' b',' b'many' b'garbage' b'females'
    b'make' b'breeding' b'support' b';' b'this' b'may' b'be' b'blame' b'and' b'was' b'<unk>' b'to' b'<unk>' b',' b'sea' b',' b'Costa' b'<unk>' b'stays' b'geographic'
    b'their' b'presence' b'to' b'his' b'male' b'net' b';' b'<unk>' b'they' b'were' b'also' b'twist' b'.' b'Because' b'they' b'do' b'was' b'recognised' b',' b'they'
    b'were' b'fully' b'completely' b'put' b'as' b'they' b'come' b'away' b',' b'either' b'in' b'Cleveland' b'.' b'This' b'midst' b'determined' b'that' b'their' b'size' b'in'
    b'day' b',' b'they' b'declared' b'predictable' b'or' b'prostitutes' b'.' b'In' b'this' b'analysis' b',' b'it' b'is' b'able' b'to' b'be' b'a' b'member' b'of'
    b'them' b'that' b'are' b'good' b',' b'or' b'out' b'but' b'it' b'is' b'<unk>' b'down' b'on' b'a' b'bird' b'.' b'booty' b'is' b'heaviest' b'in'
    b'sculpted' b'with' b'useful' b'attitude' b',' b'but' b'that' b'Notting' b'starling' b'(' b'172' b'Fires' b')' b'writes' b'that' b'their' b'avaktavya\xe1\xb8\xa5' b'exist' b'in' b'great'
    b'countries' b'.' b'A' b'small' b'layer' b'of' b'common' b'lamina' b'in' b'central' b'@-@' b'satire' b',' b'birds' b'do' b'not' b'be' b'greatly' b'complicated' b'.'
    b'It' b'also' b'usually' b'usually' b'blew' b'from' b'two' b'different' b'islands' b'at' b'eight' b'investors' b',' b'created' b'by' b'1855' b'\xe2\x80\x93' b'196' b'.' b'<eos>'
    b'hand' b',' b'<unk>' b',' b'Operations' b',' b'little' b',' b'and' b'GPU' b',' b'have' b'short' b'varieties' b'.' b'H.' b'<unk>' b'has' b'died' b'36'
    b'million' b'from' b'a' b'cousin' b'in' b'13' b'%' b'(' b'March' b'17' b',' b'1968' b')' b'.' b'She' b'is' b'known' b'for' b'inner' b'XeF'
    b'Max' b'Niven' b"'s" b'sound' b'indicates' b'the' b'works' b'of' b'anion' b'considered' b'them' b',' b'or' b'assisting' b'the' b'raiding' b'siblings' b'in' b'commemoration' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'Ceres' b'common' b'national' b'motor' b'specimens' b'typically' b'characterised' b'food' b',' b'possibly' b'collected'
    b'.' b'In' b'Microsoft' b',' b'non' b'@-@' b'Islamic' b'inhalation' b'kakapo' b'over' b'a' b'planet' b',' b'Muhammad' b'disk' b'Junior' b'as' b'III' b',' b'drinking'
    b',' b'kings' b'.' b'The' b'bird' b'also' b'received' b'much' b'DNA' b',' b'black' b',' b'or' b'the' b'age' b'of' b'Japan' b'Formation' b'.' b'It'
    b'pressed' b'down' b'central' b'and' b'<unk>' b',' b'but' b'rarely' b'Michel' b'Guest' b'put' b'so' b'a' b'<unk>' b',' b'as' b'has' b'displayed' b'so' b'being'
    b'recorded' b'by' b'finding' b'a' b'long' b'ha' b'as' b'a' b'alternative' b'monk' b',' b'another' b'BMW' b'in' b'Dinosaur' b'County' b',' b'during' b'this' b'colour'
    b'years' b'twenty' b'@-@' b'long' b'exported' b',' b'and' b'Enbom' b'time' b'the' b'population' b'.' b'When' b'either' b'differentiation' b'the' b'associated' b'starling' b',' b'it'
    b"'s" b'the' b'access' b'to' b'Limantour' b',' b'Ed' b'whatever' b'S.' b'M.' b'Weyden' b'average' b'several' b'similar' b'growth' b',' b'with' b'<unk>' b'.' b'Father'
    b'Curator' b'begin' b'prospects' b'in' b'the' b'Somme' b'and' b'this' b'moves' b'for' b'the' b'proximity' b'of' b'<unk>' b'to' b'reside' b',' b'although' b'fully' b'without'
    b'their' b'runners' b'on' b'the' b'identifiable' b',' b'and' b'therefore' b'otherwise' b'elaborate' b'it' b'.' b'They' b'implemented' b'the' b'masses' b'Washington' b'=' b'<eos>' b'More'
    b'pulled' b'with' b'American' b'plants' b'a' b'combination' b'of' b'spelling' b'attending' b'no' b'circulation' b'for' b'each' b'generation' b'by' b'tend' b'to' b'get' b'collapsed' b'.'
    b'However' b',' b'when' b',' b'they' b'sustained' b',' b'<unk>' b',' b'branching' b'sq' b'meters' b',' b'eligible' b'.' b'Flooding' b'tracery' b'looks' b'only' b'over'
    b'columns' b'and' b'are' b'very' b'angry' b'.' b'<unk>' b'reports' b'gave' b'the' b'reign' b'of' b'the' b'Irish' b'activity' b'.' b'Common' b'starlings' b'are' b'commonly'
    b'rarely' b'growing' b'.' b'If' b'they' b'distinguish' b'<unk>' b',' b'they' b'become' b'also' b'an' b'very' b'heroic' b',' b'attendant' b',' b'nuclei' b'and' b'Preparation'
    b'Fausto' b'called' b'that' b',' b'literate' b'tides' b'may' b'be' b'regret' b'by' b'their' b'head' b'.' b'He' b'can' b'then' b'let' b'a' b'telegram' b'activity'
    b'or' b'rest' b'into' b'them' b',' b'the' b'tactic' b'was' b'distinguished' b'.' b'<eos>' b'Ireland' b'believed' b'that' b'although' b'this' b'"' b'several' b'large' b'players'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 241.6
    loss: 5.168
    elapsed time (seconds): 167.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  53.772 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
