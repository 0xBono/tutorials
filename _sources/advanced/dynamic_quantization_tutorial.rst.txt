.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b';' b'compared' b',' b'compared' b'to' b'split' b'a' b'dwarf' b'decrease' b'every' b';' b'ultimately' b'<unk>' b'blocks' b'.' b'A' b'car' b'of' b'residing' b'is'
    b'rarely' b'hybrid' b'game' b',' b'or' b'Tsubame' b'was' b'not' b'as' b'his' b'major' b'head' b'.' b'To' b'establish' b'the' b'end' b'of' b'the' b'fall'
    b',' b'the' b'Annals' b'of' b'compiled' b'the' b'kakapo' b'or' b'back' b'enough' b'to' b'lose' b'dollars' b';' b'however' b',' b'these' b'Burnu' b'vehicles' b','
    b'especially' b'<unk>' b'Kaj' b',' b'480' b',' b'1422' b',' b'<unk>' b',' b'throwing' b'sewage' b',' b'audio' b',' b'<unk>' b'and' b'plums' b'for' b'Body'
    b'partly' b'Twilight' b'sponsors' b'of' b'their' b'part' b'.' b'The' b'<unk>' b'(' b'8' b'dating' b'hand' b'stories' b')' b'is' b'a' b'much' b'sculpted' b'power'
    b',' b'and' b'are' b'mainly' b'made' b'by' b'"' b'regimentarz' b'"' b'and' b'"' b'<unk>' b'"' b'.' b'The' b'ornate' b'stages' b'of' b'flightless' b'relation'
    b'from' b'a' b'studio' b'species' b'is' b'particularly' b'<unk>' b',' b'technique' b',' b'and' b'atoms' b'on' b'contests' b'.' b'<eos>' b'In' b'the' b'1930s' b','
    b'their' b'number' b'of' b'control' b'nearly' b'pictured' b'in' b'a' b'black' b'population' b'when' b'the' b'kakapo' b'should' b'have' b'part' b'of' b'their' b'motion' b','
    b'even' b'though' b'birds' b'are' b'virtually' b'obtained' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Demographics' b'=' b'=' b'<eos>' b'<eos>' b'A' b'common' b'character' b'dubbed'
    b'shot' b',' b'in' b'1819' b',' b'and' b'Ceres' b',' b'the' b'foot' b'for' b'native' b',' b'which' b'are' b'substantial' b'knowledge' b'of' b'sentences' b'.'
    b'They' b'made' b'History' b'mundane' b'standpoints' b'and' b'wings' b';' b'the' b'km' b'designation' b'is' b'moving' b'to' b'attack' b'.' b'In' b'preparation' b',' b'animals'
    b'and' b'filament' b'would' b'be' b'handled' b'as' b'extract' b'species' b',' b'their' b'features' b'to' b'smaller' b'movements' b',' b'repeats' b'changing' b'such' b'as' b'Vega'
    b'counseling' b',' b'in' b'the' b'area' b'and' b'declined' b'on' b'its' b'past' b'@-@' b'coloured' b'Pondicherry' b'ending' b'with' b'various' b'massive' b'ways' b'.' b'Several'
    b'other' b'reasons' b'are' b'taken' b'in' b'her' b'overcrowding' b',' b'and' b'the' b'coffee' b'floor' b'<unk>' b'only' b'a' b'tracks' b',' b'such' b'as' b'how'
    b'"' b'facility' b'"' b'is' b'of' b'million' b',' b'accompanied' b'by' b'two' b'sons' b',' b'Waterfall' b'adjacent' b'futile' b'and' b'classical' b'nests' b'\xe2\x80\x94' b'entering'
    b'the' b'Data' b',' b'often' b'to' b'receive' b'food' b',' b'disadvantages' b'of' b'dark' b'scholarly' b',' b'<unk>' b',' b'and' b'twin' b'earth' b'rains' b'('
    b'Leptoceratopsidae' b')' b'.' b'They' b'induction' b'in' b'video' b'abuse' b',' b'and' b'any' b'intensity' b'are' b'combined' b',' b'under' b'either' b'locks' b'or' b'abundance'
    b'as' b'they' b'do' b'one' b'<unk>' b'appear' b'.' b'One' b'birds' b'are' b'<unk>' b',' b'or' b'in' b'the' b'gems' b'for' b'resources' b'to' b'eat'
    b'an' b'molecule' b'before' b'.' b'This' b'rules' b'usually' b'weigh' b'a' b'particular' b'eye' b',' b'but' b'some' b',' b'earthworms' b',' b'precipitation' b',' b'and'
    b'feathers' b'in' b'late' b'@-@' b'America' b';' b'they' b'are' b'sung' b'by' b'dozens' b'difficult' b'on' b'it' b';' b'a' b'brood' b'find' b'that' b'year'
    b'cemented' b'by' b'the' b'Lexington' b'and' b'Wings' b'.' b'Because' b'Brown' b'can' b'hold' b'30' b'\xe2\x80\x93' b'30' b'bird' b',' b'including' b'them' b',' b'the'
    b'frequency' b'of' b'the' b'booms' b'of' b'perfect' b'underlying' b'red' b'expression' b',' b'as' b'winter' b'indication' b'.' b'Similar' b'eggs' b'have' b'a' b'lighter' b'range'
    b'to' b'bear' b'them' b'at' b',' b'and' b'there' b'should' b'be' b'ended' b'on' b'a' b'ring' b',' b'whereas' b'other' b'or' b'issued' b'while' b'Are'
    b'it' b'egg' b'.' b'solitaire' b'fence' b'were' b'Maceo' b'.' b'<unk>' b'are' b'quite' b'probably' b'branched' b',' b'and' b'the' b'common' b'starling' b'was' b'trees'
    b'and' b'sometimes' b'allowing' b'some' b'on' b'the' b'50' b'Codfish' b',' b'changing' b'13' b'hours' b'near' b'each' b'other' b',' b'and' b'and' b'their' b'maximum'
    b'work' b'flying' b'undoubtedly' b'them' b'to' b'host' b'reagent' b'even' b'.' b'123' b'tend' b'studies' b'or' b'into' b'any' b'other' b'males' b',' b'they' b'are'
    b'falcon' b'<unk>' b'.' b'While' b'in' b'(' b'71' b'\xe2\x80\x93' b'4' b'1979' b')' b'collect' b'either' b',' b'they' b'need' b'to' b'be' b'heard' b'when'
    b'they' b'will' b'be' b'barrier' b'with' b'their' b'wings' b'.' b'For' b'example' b',' b'this' b'Fatality' b'is' b'split' b'to' b'pain' b'.' b'The' b'ancient'
    b'climate' b'have' b'seen' b'more' b'than' b'100' b'%' b'of' b'its' b'body' b'.' b'muscarine' b',' b'since' b'a' b'powerful' b'wings' b',' b'high' b'view'
    b'from' b'their' b'own' b'isotopes' b',' b'including' b'fifteen' b'or' b'roads' b',' b'most' b'of' b'its' b'significant' b'observation' b'by' b'Flocks' b',' b'and' b'veterans'
    b'of' b'the' b'kakapo' b"'s" b'gills' b'up' b'by' b'normal' b'or' b'way' b',' b'even' b'and' b'enhancing' b'abnormalities' b'for' b'increased' b'gills' b'and' b'<unk>'
    b'in' b'the' b'species' b'.' b'Main' b'guns' b'present' b'Project' b'but' b'bright' b'left' b'waste' b'on' b'birds' b'in' b'Rennes' b',' b'and' b'may' b'be'
    b'very' b'more' b'likely' b'on' b'all' b'throughout' b'they' b'bird' b'account' b'.' b'<unk>' b'(' b'Allah' b')' b'outside' b'present' b'females' b'tell' b'400' b'@-@'
    b'specific' b'<unk>' b'optional' b'birds' b'to' b'prevent' b'food' b'around' b'increasing' b'birds' b'directly' b'and' b'as' b"'" b'toxicity' b'faces' b'their' b'surface' b'as' b'other'
    b'.' b'Then' b',' b'two' b'<unk>' b'courtship' b'people' b'are' b'.' b'<eos>' b'Crash' b'resuming' b'marrow' b'distinguishes' b'formed' b'Wolves' b'around' b'one' b'across' b'the'
    b'same' b'two' b'shrine' b',' b'when' b'it' b'tends' b'to' b'be' b'flanked' b'by' b'92' b'.' b'According' b'to' b'\xce\xb2' b'Schilling' b'(' b'a' b'short'
    b'sites' b'of' b'some' b'parrot' b'species' b',' b'mold' b'below' b'over' b'2' b'am' b')' b'to' b'either' b'repair' b'.' b'keys' b'explicitly' b'watches' b','
    b'but' b'has' b'also' b'headquarters' b',' b'Geastrum' b'forming' b',' b'populations' b'causing' b'a' b'variety' b'of' b'at' b'Bir' b'males' b'to' b'rebuild' b'the' b'nestling'
    b'.' b'Once' b'diagram' b'kit' b'transcendent' b'version' b',' b'males' b'can' b'appear' b'eSports' b'into' b'these' b'types' b'of' b'enemy' b'legislation' b'.' b'Also' b'.'
    b'Despite' b'food' b'force' b',' b'the' b'eye' b'wings' b'will' b'have' b'made' b'their' b'own' b'name' b'for' b'age' b',' b'though' b'it' b'would' b'eat'
    b'up' b'on' b'down' b',' b'or' b'with' b'up' b'.' b'For' b'a' b'million' b'average' b',' b'it' b'may' b'only' b'determine' b'<unk>' b',' b'<unk>'
    b',' b'<unk>' b',' b'assistants' b',' b'giant' b',' b'choices' b'and' b'Uttar' b'dogs' b'.' b'A' b'necklace' b'of' b'eggs' b'about' b'her' b'outing' b'is'
    b'Bah\xc3\xada' b'grey' b',' b'so' b'electron' b'indicate' b'that' b'they' b',' b'occasionally' b'up' b'into' b'distinct' b'victims' b'are' b'even' b'much' b'straight' b',' b'often'
    b'puts' b'as' b'eyewall' b'investors' b'.' b'Salvador' b',' b'G.' b',' b'which' b'may' b'be' b'allowed' b'to' b'compete' b'personified' b'to' b'one' b'@-@' b'eye'
    b'need' b'to' b'choose' b'from' b'humans' b',' b'members' b'will' b'participate' b'in' b'the' b'post' b',' b'assumed' b'many' b'by' b'the' b'eggs' b'are' b'known'
    b'or' b'therefore' b'.' b'If' b'they' b'do' b'when' b'they' b'do' b',' b'however' b',' b'attempts' b'to' b'reach' b'Mann' b',' b'relying' b'on' b'to'
    b'make' b'associated' b'Delta' b"'s" b'nest' b'activity' b'.' b'More' b'Catholic' b',' b'one' b'Stabilization' b'are' b'ingredient' b',' b'and' b'in' b'the' b'mountains' b'of'
    b'availability' b'can' b'prepare' b'to' b'help' b',' b'a' b'related' b'gift' b'to' b'their' b'male' b'system' b'.' b'<unk>' b'by' b'one' b'billion' b'or' b'spaced'
    b'or' b'even' b'collapse' b'expressed' b'Stanley' b'(' b'individual' b'prohibit' b'forests' b')' b',' b'as' b'necessary' b'to' b'have' b'it' b'van' b'Z.' b'Vingti\xc3\xa8me' b'once'
    b'seen' b'each' b'unlocked' b'.' b'To' b'be' b'so' b'so' b'a' b'eye' b',' b'it' b'cannot' b'be' b'slightly' b'Ronald' b'accounting' b',' b'they' b'allowed'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 240.5
    loss: 5.168
    elapsed time (seconds): 166.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  52.391 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
