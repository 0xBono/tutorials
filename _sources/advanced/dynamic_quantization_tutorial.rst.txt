.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'At' b'beginning' b'to' b'preview' b'for' b'the' b'foundation' b'was' b'the' b'folktales' b'to' b'Roberts' b',' b'Dean' b'thousands' b'suggests' b'that' b'"' b'we'
    b"'m" b'exhausted' b'on' b'that' b'companion' b'damage' b',' b'"' b'and' b'silly' b'himself' b'his' b'mortality' b'as' b'there' b'has' b'signed' b'APF' b'charges' b'neglected'
    b'.' b'The' b'manufacturer' b'has' b'been' b'first' b'impressed' b'prior' b'to' b'an' b'undivided' b'bluebunch' b'Magazine' b'<unk>' b',' b'a' b'product' b'that' b'salute' b'on'
    b'to' b'suffer' b'dead' b'parrot' b',' b'continually' b',' b'The' b'capitulation' b'of' b'a' b'race' b'.' b'The' b'novel' b'has' b'some' b'other' b'voters' b'and'
    b'Lim' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Mothers' b'documentary' b'=' b'=' b'<eos>' b'<eos>' b'Then' b'on' b'#' b'23' b',' b'2009' b',' b'it'
    b'was' b'supported' b'by' b'2012' b'in' b'the' b'United' b'Kingdom' b'of' b'their' b'retirement' b'featured' b'the' b'<unk>' b'organization' b'in' b'shaping' b'.' b'It' b'was'
    b'initially' b'described' b'as' b'the' b'first' b'track' b'in' b'the' b'world' b'.' b'overwhelming' b'sales' b'in' b'Madison' b',' b'a' b'arsenal' b'of' b'ranking' b'video'
    b'with' b'clinch' b'in' b'a' b'similar' b'triple' b'survey' b',' b'and' b'praising' b'his' b'better' b'lucrative' b',' b'remaining' b',' b'side' b'of' b'Yokohama' b'.'
    b'At' b'a' b'2010' b'interpretation' b'conference' b'patch' b'of' b'a' b'year' b'where' b'Quite' b'writer' b'Pittsfield' b'a' b'dark' b'star' b'<unk>' b'process' b',' b'the'
    b'most' b'hurricanes' b'with' b'the' b'Cuillin' b'is' b'based' b'on' b'history' b'.' b'This' b'names' b'is' b'unknown' b',' b'killing' b'dirty' b'specialists' b'on' b'the'
    b'issues' b'.' b'But' b'this' b'and' b'black' b'connections' b'who' b'"' b'spiritual' b'[' b'I' b']' b'<unk>' b'superhuman' b'flowers' b'today' b',' b'calling' b'Brown'
    b'"' b'.' b'However' b',' b'or' b'it' b'Wilder' b'came' b'into' b'down' b'with' b'other' b'compilations' b'in' b'the' b'modern' b'<unk>' b'.' b'Throughout' b'the'
    b'game' b',' b'the' b'final' b'negative' b'Armies' b'and' b'its' b'will' b'were' b'FIES' b',' b'although' b'diversionary' b',' b'the' b'Languedoc' b'lay' b',' b'they'
    b'slowed' b'a' b'different' b'or' b'comfortable' b'epithet' b'Jones' b',' b'but' b'well' b'out' b'Kean' b'into' b'suffering' b'all' b'when' b'they' b'allowed' b'how' b'they'
    b'can' b'wish' b'to' b'narrate' b'a' b'large' b'enemies' b'.' b'Despite' b'its' b'support' b',' b'fortress' b'urgency' b'have' b'tombstone' b'been' b'completed' b'along' b'an'
    b'nearby' b'snake' b'.' b'<eos>' b'To' b'be' b'so' b'available' b'toward' b'Michigan' b',' b'weighed' b'the' b'song' b'for' b'an' b'hour' b'and' b'it' b'is'
    b'equally' b'fully' b'two' b',' b'but' b'12' b'\xe2\x80\x93' b'27' b'million' b'years' b'a' b'first' b'team' b'planet' b'is' b'5' b'@.@' b'8' b'years' b'per'
    b'hour' b'.' b'<eos>' b'Like' b'the' b'18' b'Rock' b'nervous' b',' b'it' b'has' b'divorced' b'every' b'specific' b'colours' b'for' b'26' b'minutes' b'before' b'winning'
    b'24' b'@.@' b'5' b'points' b'per' b'hour' b',' b'and' b'calls' b'generally' b'there' b'are' b'much' b'.' b'The' b'score' b'can' b'occur' b'heavy' b'control'
    b',' b'sometimes' b'with' b'one' b'longer' b'or' b'pairs' b'when' b'it' b'is' b'a' b'dark' b'shook' b'licence' b'rate' b'of' b'head' b'.' b'The' b'more'
    b'obvious' b'overall' b'Greek' b'transit' b'make' b'50' b'%' b'or' b'ordinary' b'of' b'7' b'@.@' b'4' b'rebounds' b',' b'indicating' b'more' b',' b'by' b'Snow'
    b',' b'6' b'\xe2\x80\x93' b'5' b'birds' b'per' b'game' b'which' b'have' b'mosquitoes' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Diet' b'=' b'=' b'<eos>' b'<eos>'
    b'Little' b'starlings' b'have' b'largely' b'considerable' b',' b'wings' b',' b'or' b'\xce\xb2' b',' b'ranging' b'the' b'southern' b'evening' b'\xe2\x80\x94' b'produce' b'them' b'of' b'a'
    b'one' b'movement' b'outside' b'on' b'his' b'fishers' b'.' b'Females' b'do' b'not' b'carry' b'the' b'physical' b'closest' b'of' b'all' b'other' b'ground' b'system' b','
    b'and' b',' b'the' b'male' b'is' b'close' b'to' b'leave' b'up' b'to' b'low' b'.' b'Tessa' b'Rivers' b'in' b'the' b'surrounding' b'Armed' b'segment' b'corporate'
    b'device' b'males' b'lifespan' b'other' b'establishing' b'tRNA' b'characters' b'of' b'mind' b'or' b'extinct' b'sins' b'for' b'the' b'village' b'of' b'bird' b',' b'they' b'became'
    b'depicted' b'until' b'the' b'same' b'.' b'It' b'is' b'constantly' b'used' b'by' b'2' b'@.@' b'5' b'to' b'18' b'by' b'<unk>' b'densities' b'.' b'These'
    b'chicks' b'shorter' b'specific' b'these' b'activity' b'dating' b'throughout' b'his' b'<unk>' b'.' b'Draftees' b',' b'on' b'22' b'31' b'shared' b',' b'leaving' b'a' b'activity'
    b'money' b'.' b'For' b'this' b'period' b',' b'it' b'usually' b'cannot' b'be' b'subjected' b'to' b'less' b'nest' b'up' b'after' b'so' b'.' b'When' b'when'
    b'they' b'are' b'connected' b'to' b'her' b'bird' b'(' b'they' b',' b'the' b'tied' b'@-@' b'grey' b'legs' b'ago' b'mouth' b')' b'is' b',' b'it'
    b'will' b'be' b'48th' b'in' b'time' b'that' b'even' b',' b'this' b'Writers' b'has' b'meant' b'This' b'so' b'step' b'short' b'and' b'going' b'out' b'.'
    b'The' b'looks' b'to' b'be' b'impossible' b'to' b'be' b'popular' b'known' b'.' b'<eos>' b'For' b'southern' b'probability' b'Foster' b'exist' b'in' b'avian' b'areas' b'from'
    b'<unk>' b'(' b'lateral' b'regions' b',' b'calcium' b'are' b'except' b')' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Hi' b'Leonard' b'=' b'<eos>' b'<eos>' b'noitulovE'
    b'(' b'Lima' b')' b'realized' b'Fish' b'from' b'this' b'other' b'range' b'from' b'trees' b',' b'putting' b'by' b'Version' b"'" b'Law' b'A' b'Christian' b'Army'
    b'over' b'1887' b',' b'near' b'a' b'ancient' b'@-@' b'frequency' b'couples' b'.' b'The' b'latter' b'is' b'Tharp' b"'s" b'best' b'schedule' b'in' b'the' b'criteria'
    b'of' b'running' b'down' b'high' b'confusion' b'.' b'Peshkin' b'is' b'mature' b'to' b'welcome' b'a' b'maximum' b',' b'Gryposaurus' b'block' b',' b'a' b'box' b'jet'
    b'(' b'grab' b';' b'they' b'acts' b',' b'or' b'691' b')' b'further' b'down' b'any' b'face' b'@-@' b'thread' b',' b'driving' b'clay' b'subjects' b','
    b'an' b'lethal' b'belt' b'sector' b'of' b'females' b',' b'a' b'barrier' b'Wayne' b'of' b'trees' b'.' b'It' b'may' b'also' b'simply' b'gather' b'<unk>' b'source'
    b'on' b'the' b'Portree' b'giant' b',' b'a' b'Nursery' b',' b'<unk>' b'Strait' b',' b'<unk>' b',' b'acknowledged' b'healthcare' b',' b'and' b'iron' b'blood' b'.'
    b'Perhaps' b'both' b'little' b'distribution' b'of' b'organic' b'flocks' b',' b'powerful' b',' b'detonation' b'and' b'Smokey' b'paper' b'feature' b'chest' b'and' b'<unk>' b'.' b'Intravenous'
    b'the' b'Persian' b'but' b'privileges' b'frequently' b'will' b'lose' b'in' b'the' b'DNA' b'"' b'decent' b'for' b'patients' b'"' b'.' b'Tonga' b'experienced' b'pale' b'spots'
    b',' b'with' b'three' b'dark' b'policing' b'Astraeus' b',' b'redesigned' b'high' b'and' b'<unk>' b'small' b'horns' b'and' b'brownish' b'educational' b'.' b'Many' b'of' b'these'
    b'are' b'found' b'mainly' b'to' b'be' b'dated' b',' b'while' b'when' b'they' b'reporters' b'for' b'no' b'conservation' b'or' b'penannular' b',' b'it' b'fringed' b'a'
    b'adults' b'of' b'combat' b'.' b'Wives' b'wish' b'to' b'do' b'so' b'companions' b'in' b'amendments' b'amounts' b'among' b'their' b'practice' b'are' b'carnivorous' b'enough' b'when'
    b'should' b'says' b'.' b'They' b'are' b'the' b'twigs' b"'s" b'last' b'@-@' b'most' b'blocks' b'.' b'It' b'is' b'found' b'that' b'the' b'Annals' b'might'
    b'eat' b'depths' b'of' b'this' b'side' b'though' b'the' b'<unk>' b'Vin' b'twist' b'them' b'to' b'employ' b'a' b'host' b'.' b'Recent' b'character' b'are' b'flattened'
    b'anarchy' b',' b'while' b'there' b'are' b'21' b'asiaticus' b'external' b',' b'reversed' b'their' b'return' b'to' b'arrests' b',' b'are' b'ecology' b'that' b'they' b'most'
    b'spots' b'devices' b'to' b'females' b'in' b'star' b'.' b'Within' b'example' b',' b'1100' b'Bypass' b'Lastly' b'in' b'translation' b',' b'most' b'a' b'island' b'Monsen'
    b'is' b'13th' b'to' b'have' b'a' b'stems' b',' b'with' b'moving' b'away' b'on' b'11' b'arrows' b'such' b'as' b'the' b'corresponding' b'plumage' b'.' b'The'
    b'parrot' b'apparently' b'resembles' b'Collaboration' b'long' b'consisting' b'of' b'black' b'birds' b'each' b'to' b'both' b'avoid' b'when' b'it' b'means' b'her' b'martial' b'boyfriend' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 245.7
    loss: 5.168
    elapsed time (seconds): 168.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  0.509 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
