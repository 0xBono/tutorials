.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'vulgaris' b'tied' b'by' b'<unk>' b',' b'a' b'guerrilla' b'allegory' b'from' b'publishing' b'opportunity' b',' b'who' b'voiced' b'his' b'turn' b'on' b'the' b'YouTube' b','
    b'bringing' b'it' b'a' b'hard' b'@-@' b'page' b'appearance' b'afterwards' b'from' b'Scandinavia' b'who' b'"' b'only' b'obtained' b'between' b'manufacturing' b'stump' b'in' b'his' b'planet'
    b'period' b'and' b'revolution' b',' b'with' b'gold' b'proven' b',' b'Unwilling' b"'s" b'flawed' b'intentions' b'with' b'a' b'end' b'of' b'Gareth' b'Pound' b'(' b'also'
    b'much' b'known' b')' b'and' b'special' b'advancing' b'of' b'him' b'of' b'assistance' b',' b'before' b'being' b'denied' b'a' b'military' b'pitcher' b'around' b'this' b'date'
    b'.' b'"' b'Some' b'<eos>' b'Surface' b';' b'this' b'biography' b'Strange' b'Joey' b'lawyer' b'commented' b'that' b'"' b'there' b'is' b'two' b'of' b'their' b'scrutiny'
    b'on' b'concepts' b',' b'nothing' b'\xe2\x80\x94' b'know' b'and' b'an' b'natural' b'relationship' b',' b'custom' b'cm' b',' b'physical' b',' b'requiring' b'when' b'Tel' b'Carlyle'
    b'may' b'have' b'wrapped' b'his' b'body' b'for' b'theorem' b'.' b'No' b'was' b'discovered' b'"' b'.' b'For' b'example' b',' b'the' b'1656' b'de' b'Harold'
    b'Sebastian' b':' b'"' b'If' b'just' b'<unk>' b'"' b'.' b'Research' b'said' b'that' b'"' b'we' b'think' b'that' b'they' b'are' b'not' b'<unk>' b'.'
    b'His' b'wives' b'who' b'wished' b'this' b'hope' b'with' b'a' b'major' b'celebrity' b'in' b'the' b'Shoop' b'Boom' b'Race' b',' b'Brahma' b'.' b'<eos>' b'<eos>'
    b'<eos>' b'=' b'Constantine' b'of' b'Baltimore' b'=' b'<eos>' b'<eos>' b'The' b'building' b'Mariana' b'is' b'a' b'pair' b'of' b'types' b'on' b'the' b'ground' b','
    b'mtDNA' b'the' b'Republic' b'of' b'Ceres' b',' b'which' b'acts' b'there' b'to' b'be' b'<unk>' b',' b'<unk>' b',' b'and' b'over' b'the' b'light' b'.'
    b'Other' b'critics' b'who' b'may' b'continue' b'to' b'remain' b'with' b'Palmer' b',' b'drawing' b'common' b'or' b'cultural' b'areas' b'on' b'a' b'borough' b'.' b'A'
    b'temporary' b'area' b'of' b'<unk>' b',' b'demolished' b'again' b',' b'and' b'trees' b'were' b'still' b'mentioned' b'as' b'they' b'are' b'traced' b'in' b'dad' b'.'
    b'When' b'sodium' b',' b'principals' b'in' b'pointless' b',' b'others' b'Iron' b"'t" b'cargo' b'<unk>' b'.' b'Perhaps' b',' b'they' b'are' b'thus' b'found' b','
    b'<unk>' b',' b'they' b'saw' b'by' b'some' b'intention' b'France' b',' b'affect' b'models' b'<unk>' b',' b'motion' b'split' b'(' b'Religious' b'complex' b',' b'/'
    b'Ottomans' b')' b'.' b'In' b'this' b'case' b',' b'O' b'One' b'is' b'considered' b'the' b'<unk>' b'doughboy' b'for' b'more' b'twelve' b'characters' b'such' b'as'
    b'137' b'years' b'wedge' b',' b'with' b'narrow' b'disdain' b'taking' b'four' b'days' b'each' b'.' b'Until' b'this' b'time' b'they' b'failed' b'to' b'be' b'Pollard'
    b'for' b'Robinson' b',' b'which' b'will' b'be' b'as' b'seen' b'by' b'<unk>' b'running' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Modern' b'Warsaw' b'='
    b'=' b'=' b'<eos>' b'<eos>' b'Significant' b'starling' b'versions' b'of' b'variation' b',' b'the' b'maternal' b'Mode' b',' b'is' b'over' b'2' b'%' b'of' b'insular'
    b',' b'including' b'claws' b'on' b'its' b'fruit' b'<unk>' b'as' b'part' b'of' b'both' b'over' b'in' b'high' b'regions' b'in' b'Ireland' b'.' b'His' b'male'
    b'size' b'has' b'synonymized' b'with' b'one' b'in' b'their' b'range' b'to' b'other' b'spaces' b'.' b'It' b'is' b'now' b'prey' b',' b'although' b'not' b'Greek'
    b',' b'good' b',' b'Ni' b'increases' b'and' b'<unk>' b'.' b'They' b'may' b'help' b'interaction' b'by' b'French' b',' b'erupt' b',' b'<unk>' b',' b'<unk>'
    b',' b'<unk>' b',' b'besiegers' b',' b'Manning' b',' b'<unk>' b',' b'Hightower' b',' b'and' b'across' b'tipped' b',' b'Africans' b'too' b'solved' b'.' b'Another'
    b'predators' b'is' b'distinguished' b'after' b'the' b'eggs' b'have' b'a' b'tool' b',' b'which' b'is' b'simply' b'a' b'combination' b'of' b'dimensions' b'shorter' b'towards' b'a'
    b'physical' b'white' b'or' b'clinch' b'power' b'so' b'getting' b'.' b'<eos>' b'During' b'the' b'most' b'prominent' b',' b'quarters' b'Taunton' b',' b'mainly' b'as' b'the'
    b'islands' b'layouts' b',' b"'" b'travels' b'them' b'into' b'upstream' b'a' b'hundred' b'Calisto' b'cycle' b',' b'that' b'occurs' b'in' b'every' b'<unk>' b',' b'which'
    b'were' b'Morley' b'<unk>' b'(' b'blocks' b'.' b'broader' b'individuals' b')' b'owned' b'Native' b'starlings' b'and' b'have' b'appearance' b'action' b'.' b'In' b'honor' b','
    b'it' b'has' b'prevented' b'a' b'range' b'by' b'boxes' b'that' b'island' b'rate' b'appear' b'for' b'sea' b'agaric' b'camps' b'from' b'their' b'body' b'.' b'Irish'
    b'often' b'<unk>' b'when' b'it' b'is' b'connected' b'difficult' b'very' b'tall' b'.' b'As' b'they' b'find' b'Heaney' b',' b'legend' b'<unk>' b'even' b'inhabit' b'.'
    b'It' b'is' b'Avery' b'named' b'for' b'the' b'solution' b'near' b'"' b'Moment' b'"' b'and' b'"' b'The' b'big' b'writer' b'"' b'.' b'There' b'is'
    b'many' b'tales' b'of' b'revolt' b'conquered' b'terrifying' b',' b'pagan' b'or' b'even' b'@-@' b'brown' b'source' b'and' b'Bath' b'plants' b',' b'which' b'were' b'elliptical'
    b'.' b'Mulder' b'considers' b'more' b'suitable' b'when' b'he' b'often' b'regrets' b'it' b':' b'that' b'a' b'asteroid' b'signs' b'in' b'the' b'Welsh' b'Recovery' b'is'
    b'normally' b'celebrated' b'her' b'behavior' b'.' b'<eos>' b'Ceres' b"'" b'name' b'regions' b'220' b'm' b'(' b'2' b'minute' b')' b'per' b'iron' b',' b'the'
    b'behavior' b'of' b'<unk>' b',' b'and' b'two' b'acts' b'and' b'works' b',' b'with' b'their' b'left' b'wings' b'.' b'There' b'are' b'adults' b'that' b'would'
    b'not' b'catch' b'something' b'with' b'a' b'cycle' b'to' b'be' b'killed' b'or' b'directly' b'saint' b',' b'which' b'may' b'seem' b'to' b'be' b'strongly' b'regarded'
    b'by' b'any' b'other' b'eyes' b'of' b'global' b'item' b'.' b'From' b'the' b'16th' b'century' b',' b'common' b'females' b'indicate' b'that' b'eSport' b',' b'markers'
    b',' b'and' b'oak' b'are' b'applied' b'to' b'have' b'an' b'worse' b'surface' b'to' b'refer' b'.' b'Since' b'as' b'they' b'are' b'not' b'until' b'they'
    b'are' b'always' b'short' b',' b'they' b'do' b'often' b'know' b'<unk>' b'or' b'other' b'bird' b'sex' b'.' b'Also' b',' b'architectural' b'internal' b'gust' b'geared'
    b'influences' b'are' b'Muhammad' b'alarm' b'synthesis' b',' b'While' b'Edgar' b',' b'however' b',' b'did' b'not' b'identify' b'good' b'trees' b'.' b'One' b'non' b'@-@'
    b'level' b'veil' b"'s" b'wings' b'indicates' b'they' b'are' b'treated' b'opined' b'that' b'the' b'kakapo' b'may' b'be' b'long' b'.' b'They' b'Wippleman' b'his' b'son'
    b'in' b'maturity' b'against' b'their' b'personality' b',' b'so' b'is' b'likely' b'being' b'arrested' b'that' b'other' b'<unk>' b'complexes' b'are' b'also' b'light' b'requirement' b'.'
    b'"' b'A' b'definition' b'to' b'power' b'"' b'is' b'giant' b'duets' b'or' b'understanding' b'even' b'many' b'screens' b'and' b'require' b'many' b'1831' b'distorted' b'terrestrial'
    b'structures' b',' b'which' b'are' b'Virgin' b'green' b',' b'such' b'that' b'in' b'older' b'countries' b',' b'is' b'<unk>' b'@-@' b'free' b',' b'and' b'even'
    b'is' b'commercially' b'recitation' b'.' b'Once' b'they' b'are' b'at' b'a' b'different' b'level' b'of' b'about' b'4' b'million' b'minutes' b',' b'the' b'inner' b'advances'
    b'by' b'CBs' b',' b'<unk>' b'\xe2\x80\x94' b'especially' b'permit' b',' b'they' b'begin' b'where' b',' b'when' b',' b'and' b'may' b'consist' b'of' b'their' b'loss'
    b',' b'bonds' b'did' b'not' b'contribute' b'him' b'.' b'Then' b',' b'can' b'become' b'a' b'result' b'in' b'Northumbria' b'.' b'In' b'roughly' b'medical' b'sex'
    b',' b'they' b'have' b'been' b'cubs' b'by' b'ibotenic' b'Vanya' b'.' b'When' b'they' b'Boom' b'increases' b'for' b'<unk>' b',' b'it' b'may' b'be' b'at'
    b'any' b'other' b'no' b'dying' b'or' b'<unk>' b',' b'pure' b'foxes' b'or' b'derivation' b'diseases' b',' b'but' b'subsequently' b',' b'often' b'even' b'die' b'as'
    b'it' b'makes' b'<unk>' b'exposing' b'to' b'Australia' b',' b'establish' b'a' b'container' b'near' b'the' b'expense' b'of' b'a' b'predator' b'.' b'Her' b'thumb' b'in'
    b'salts' b'is' b'greatly' b'hatching' b'on' b'their' b'breeding' b'study' b'and' b'its' b'lead' b'display' b'or' b'<unk>' b'back' b'.' b'One' b'receptors' b'found' b'small'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 238.2
    loss: 5.168
    elapsed time (seconds): 167.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  50.947 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
