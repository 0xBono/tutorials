.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'that' b'are' b'the' b'right' b'person' b'to' b'be' b'its' b'hard' b'amount' b'of' b'prey' b'in' b'them' b',' b'in' b'the' b'Adventure' b'Power' b'Universe'
    b'through' b'Montreal' b'and' b'<unk>' b',' b'coalition' b'for' b'fraction' b'of' b'jet' b',' b'kilometers' b'[' b'it' b'was' b'screened' b'...' b'in' b'Scarlett' b','
    b'it' b'is' b'no' b'competitors' b',' b'only' b'body' b'cars' b',' b'and' b'west' b'structures' b'.' b'As' b'of' b'winter' b',' b'they' b'run' b'well'
    b'as' b'that' b'appearance' b',' b'and' b'<unk>' b'is' b'their' b'true' b'hair' b'.' b'The' b'soft' b'nest' b'Divisions' b'.' b'Some' b'of' b'these' b'Native'
    b'cultures' b'are' b'the' b'only' b'language' b'@-@' b'predominant' b'paid' b'of' b'black' b'history' b',' b'yellow' b'or' b'other' b'popular' b'Babyface' b'.' b'The' b'closely'
    b'effective' b'open' b'Mountain' b'body' b'of' b'Olympics' b'in' b'the' b'mode' b'of' b'<unk>' b'Belle' b',' b'a' b'gill' b'state' b',' b'the' b'Kentrosaurus' b'coast'
    b',' b'and' b'Council' b'jackrabbits' b'.' b'These' b'items' b'have' b'sought' b'to' b'be' b'lasting' b'in' b'some' b'Celtic' b'sequence' b'trees' b'similar' b'to' b'('
    b'Thoroughbred' b'mining' b')' b',' b'such' b'as' b'is' b'the' b'choreography' b'for' b'Venus' b'.' b'<eos>' b'a' b'long' b'species' b',' b'that' b'of' b'Dawn'
    b'without' b'Ceres' b',' b'have' b'named' b'pine' b'Austen' b'are' b'a' b'"' b'Mogila' b'record' b'"' b',' b'according' b'to' b'it' b'that' b'may' b'be'
    b'visible' b'with' b'large' b'starling' b'clinically' b',' b'named' b'<unk>' b'red' b'school' b',' b'number' b'<unk>' b'<unk>' b',' b'wine' b'@-@' b'<unk>' b',' b'<unk>'
    b',' b'<unk>' b',' b'masters' b'and' b'soil' b',' b'especially' b'climate' b'.' b'In' b'Mackinac' b'Africa' b',' b'Bush' b',' b'imagining' b',' b'logic' b','
    b'Destruction' b',' b'Mkhedruli' b'and' b'<unk>' b',' b'useful' b'with' b'one' b'or' b'word' b'rivers' b',' b'are' b'non' b'@-@' b'precious' b'sites' b',' b'known'
    b'as' b'"' b'fraction' b'"' b',' b'primarily' b'like' b'"' b'traditional' b'faith' b'"' b',' b'in' b'human' b'reservoirs' b',' b'his' b'ice' b'or' b'eternal'
    b'traditional' b'eye' b'(' b'<unk>' b')' b'from' b'frustrated' b',' b'Highland' b',' b'and' b'others' b'during' b'the' b'season' b'to' b'the' b'east' b'of' b'lower'
    b',' b'beginning' b'to' b'achieve' b'how' b'the' b'planet' b'leaves' b'their' b'homes' b'to' b'have' b'long' b'"' b'employment' b'"' b'and' b'religious' b'records' b'of'
    b'scholastic' b',' b'green' b',' b'and' b'cultural' b'life' b'and' b'next' b'Guy' b'hygrometricus' b'.' b'Ben' b'fallen' b'by' b'II' b'and' b'<unk>' b'recognized' b'approximately'
    b'8' b'%' b'of' b'the' b'two' b'.' b'The' b'closest' b'Hydnum' b'is' b'rocks' b'for' b'the' b'species' b'at' b'their' b'07' b'@-@' b'year' b','
    b'breeding' b'Winchell' b',' b'without' b'a' b'average' b'of' b'10' b'cm' b'(' b'55' b'mi' b')' b'to' b'her' b'<unk>' b'and' b'blue' b'by' b'police'
    b'.' b'In' b'a' b'large' b'season' b',' b'an' b'morphology' b'of' b'Ohio' b'waves' b'in' b'the' b'first' b'gully' b'weakening' b'a' b'simple' b'season' b'eye'
    b'in' b'years' b'.' b'The' b'team' b'has' b'a' b'rich' b'relative' b'effort' b'which' b'was' b'moved' b'into' b'state' b',' b'but' b'Brown' b'could' b'unnecessary'
    b'there' b'.' b'Two' b'emit' b'crowds' b'\xe5\xa4\xa7\xe7\xa9\xba' b'Hadji' b'<unk>' b'of' b'six' b'plays' b'.' b'Babyface' b'at' b'one' b'of' b'Derry' b'oldest' b'more' b'shortly'
    b'and' b'the' b'lakes' b'a' b'male' b'breeding' b'@-@' b'headed' b'language' b'sound' b'(' b'posthumously' b')' b',' b'long' b'energy' b'(' b'which' b'they' b'is'
    b'common' b',' b'and' b'<unk>' b',' b'/' b'22' b'\xc2\xb0' b'F' b')' b'high' b'.' b'This' b'leads' b'reptile' b'males' b'.' b'The' b'nestlings' b'may'
    b'be' b'partially' b'augmented' b',' b'and' b'images' b'can' b'be' b'somewhat' b'seen' b'as' b'oblivious' b'before' b'they' b'could' b'be' b'found' b'by' b'irregular' b'disciple'
    b',' b'making' b'only' b'nonetheless' b'and' b'small' b'digest' b',' b'like' b'seated' b'to' b'their' b'color' b',' b'and' b'their' b'chromosomes' b'measure' b'by' b'their'
    b'large' b'male' b',' b'southern' b'or' b'Joseph' b'aeroplane' b'(' b'Z.' b'Pradesh' b')' b',' b'are' b'certain' b'or' b'then' b'instruction' b'.' b'<eos>' b'One'
    b'Ireland' b'may' b'have' b'do' b'only' b'eat' b'their' b'<unk>' b'so' b'goes' b'.' b'For' b'example' b',' b'it' b'was' b'expected' b'that' b'they' b'do'
    b'not' b'and' b'be' b'found' b'into' b'mushroom' b'linear' b'S.28' b'element' b'sightings' b'.' b'There' b'are' b'structural' b'fossil' b'BCE' b',' b'especially' b'to' b'stop'
    b'its' b'eggs' b'at' b'once' b'to' b'protecting' b'its' b'eggs' b'through' b'surreal' b'.' b'This' b'addition' b'they' b'ever' b'spoke' b'just' b'.' b'<eos>' b'The'
    b'threads' b'cemented' b'in' b'Australia' b',' b'when' b'their' b'early' b'works' b'in' b'of' b'general' b'technique' b'itself' b'were' b'brought' b'in' b'small' b'areas' b'.'
    b'LEDs' b'lies' b'during' b'the' b'bird' b'until' b'much' b'evening' b'each' b'after' b'this' b'other' b'anek\xc4\x81nta' b'.' b'<eos>' b'Other' b'females' b'are' b'one' b'of'
    b'the' b'nest' b'at' b'England' b'and' b'later' b'occur' b'.' b'There' b'are' b'no' b'very' b'large' b'@-@' b'dimensional' b'genes' b',' b'especially' b'of' b'complemented'
    b',' b'their' b'magnetic' b'layer' b'was' b'bound' b';' b'and' b'not' b'very' b'different' b'ones' b',' b'high' b'styles' b'Zachary' b'occurring' b'30' b'\xe2\x80\x93' b'3'
    b'their' b'woo' b'beam' b'(' b'30' b'in' b')' b'.' b'<eos>' b'Each' b'kakapo' b'can' b'be' b'limited' b'to' b'regard' b'to' b'their' b'dark' b'deity'
    b'and' b'their' b'Response' b',' b'a' b'male' b'Antilles' b',' b'a' b'woman' b',' b'flies' b'into' b'Michigan' b',' b'and' b'when' b'the' b'pot' b'of'
    b'facing' b'@-@' b'planet' b'areas' b'should' b'be' b'made' b'to' b'teach' b'well' b'water' b'.' b'Men' b'from' b'Australia' b'may' b'be' b'meant' b'that' b'primarily'
    b'do' b'not' b'mean' b'these' b'<unk>' b'(' b'see' b'<unk>' b',' b'<unk>' b'to' b'raise' b'intact' b'women' b')' b',' b'and' b'Halo' b'(' b'mainly'
    b'gravity' b')' b'.' b'It' b'seems' b'also' b'as' b'to' b'be' b'most' b'distinct' b'.' b'They' b'are' b'outdated' b'by' b'woodlands' b',' b'as' b'well'
    b'as' b'food' b'.' b'Further' b'endemic' b',' b'<unk>' b',' b'descended' b',' b'field' b'with' b'rare' b'food' b'Bee' b'moves' b'to' b'America' b'.' b'<eos>'
    b'There' b'are' b'very' b'template' b'of' b'human' b'accustomed' b'to' b'the' b'heat' b'being' b'not' b'fond' b'of' b'.' b'seawater' b',' b'it' b'also' b'identify'
    b'an' b'human' b'method' b'of' b'eat' b'alarm' b'Obo' b'throughout' b'her' b'actual' b'areas' b'.' b'If' b'a' b'male' b'victim' b',' b'which' b'are' b'mainly'
    b'technically' b'accepting' b'.' b'No' b'problems' b'are' b'heavily' b'translated' b'Buddhist' b'louder' b'forests' b'.' b'Before' b'the' b'attractive' b'agaric' b'various' b'jets' b',' b'tend'
    b'to' b'be' b'<unk>' b'.' b'In' b'the' b'marble' b'X' b',' b'the' b'kakapo' b'is' b'reduced' b',' b'only' b'as' b'to' b'ensure' b'it' b'can'
    b'be' b'way' b',' b'not' b'Nava' b'brownish' b',' b'if' b'their' b'highest' b'were' b'short' b'.' b'That' b'resembles' b'a' b'topological' b'empire' b'on' b'woodland'
    b',' b'while' b'their' b'other' b'earlier' b'use' b'of' b'solution' b'(' b'literally' b'referred' b'to' b'as' b'those' b')' b'is' b'wrong' b'from' b'red' b'nourished'
    b':' b'they' b'may' b'not' b'exist' b'them' b'down' b'nesting' b'governor' b'.' b'A' b'small' b'age' b'have' b'saved' b'various' b'changes' b'crested' b'muscle' b','
    b'concentrates' b',' b'and' b'Linnaeus' b'.' b'Also' b'they' b'have' b'image' b'face' b',' b'negation' b'by' b'nuclei' b',' b'and' b'lamps' b'fade' b'over' b'the'
    b'eye' b'of' b'its' b'abdomen' b'.' b'As' b'a' b'separate' b',' b'it' b'may' b'be' b'begins' b'east' b'caesarea' b':' b'are' b'6' b'\xe2\x80\x93' b'1'
    b'years' b'and' b'coming' b'agree' b'a' b'large' b'able' b'.' b'These' b'aliens' b'show' b'well' b'@-@' b'duty' b',' b'waiting' b',' b'and' b'then' b'@.@'
    b'3' b'%' b',' b'usually' b'europium' b'habitat' b'substance' b'.' b'The' b'males' b'bipedal' b'if' b'females' b'may' b'indicate' b'to' b'observe' b'their' b'particles' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 250.8
    loss: 5.168
    elapsed time (seconds): 176.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  11.719 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
