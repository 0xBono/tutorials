.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b':' b'"' b'I' b'<unk>' b'Trafalgar' b'is' b'a' b'mysterious' b'conservative' b'star' b',' b'heard' b'@-@' b'keyboard' b'string' b'.' b'"' b'<eos>' b'The' b'passage'
    b'of' b'most' b'critics' b'have' b'196' b'estate' b'texts' b'.' b'All' b'three' b'@-@' b'term' b'characters' b'migrate' b'in' b'advance' b',' b'they' b'began' b'to'
    b'rehearsals' b'and' b'produce' b'them' b'.' b'After' b'one' b'greater' b'birds' b'Hill' b'shot' b'in' b'general' b',' b'and' b'if' b'the' b'electronics' b'are' b'lumber'
    b'and' b'remedial' b'.' b'While' b'they' b',' b'there' b'are' b'no' b'pattern' b'in' b'the' b'province' b'to' b'other' b'other' b'birds' b'then' b'beat' b'the'
    b'sea' b'itself' b',' b'can' b'be' b'seen' b'to' b'have' b'lost' b'Wihtred' b'.' b'They' b'involving' b'to' b'push' b'heart' b'males' b',' b'that' b'help'
    b'his' b'range' b'and' b'Coty' b'asteroids' b'fewest' b'to' b'find' b'transits' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Roads' b'=' b'=' b'<eos>' b'<eos>' b'The'
    b'story' b'of' b'Crash' b'Insane' b'Bang' b'!' b"'" b'the' b'Commonwealth' b'were' b'of' b'strengths' b'(' b'died' b'<unk>' b')' b',' b'two' b'of' b'whom'
    b'were' b'published' b'.' b'<eos>' b'In' b'2006' b'was' b'shut' b'in' b'London' b'for' b'a' b'curtailed' b'lead' b'of' b'scarf' b'.' b'An' b'<unk>' b'have'
    b'declined' b'also' b',' b'with' b'a' b'still' b'widely' b'greater' b'UN' b'planet' b',' b'for' b'Neversoft' b'or' b'<unk>' b'@-@' b'horror' b'character' b'.' b'It'
    b'also' b'seems' b'to' b'be' b'post' b'plastic' b'.' b'<eos>' b'In' b'the' b'United' b'States' b',' b'members' b'of' b'the' b'Valkyria' b'Society' b'avoided' b'@-@'
    b'Charter' b'in' b'his' b'early' b'2006' b'career' b'.' b'Before' b'finding' b'<unk>' b'in' b'protector' b',' b'the' b'acceptance' b'of' b'those' b'might' b'open' b'in'
    b'place' b'so' b'as' b'considerable' b'over' b'there' b',' b'especially' b'true' b',' b'and' b'Striker' b'Haitians' b'are' b'attached' b'to' b'prey' b'.' b'As' b'they'
    b'are' b'religious' b'when' b'they' b'are' b'probably' b'a' b'Eu' b'in' b'North' b'Ireland' b',' b'they' b'can' b'be' b'Copacabana' b'swallowed' b',' b'his' b'diet'
    b'led' b'some' b'Natural' b'Americans' b'on' b'victim' b',' b'which' b'Mantell' b'underwent' b'at' b'a' b'short' b'rate' b'of' b'visiting' b'there' b'.' b'It' b'is'
    b'also' b'known' b'in' b'Dante' b'as' b'through' b'Santa' b'2004' b'.' b'In' b'<unk>' b',' b'as' b'a' b'result' b'that' b'Gilbert' b'carried' b'cavalry' b'or'
    b'from' b'a' b'star' b',' b'the' b'<unk>' b'and' b'Bassin' b'Scarlet' b'were' b'a' b'PlayStation' b'94' b'of' b'a' b'slow' b'cinema' b'library' b'.' b'<eos>'
    b'Light' b'Mfume' b'(' b'including' b'augmented' b'the' b'planet' b"'" b'second' b')' b'is' b'the' b'planet' b'of' b'Final' b'Ireland' b'.' b'One' b'species' b'are'
    b'disparaged' b'by' b'g' b'(' b'"' b'<unk>' b'"' b')' b'.' b'For' b'example' b',' b'at' b'this' b'time' b'the' b'first' b'extinct' b'text' b'today'
    b'.' b'In' b'cooler' b'eight' b'to' b'one' b'half' b'rushing' b'individuals' b',' b'which' b'restored' b'its' b'(' b'lungs' b')' b',' b'owl' b',' b'branched'
    b',' b'grey' b',' b'Sang' b'sur' b'<unk>' b',' b'2' b'%' b'of' b'equilibrium' b'Piper' b',' b'and' b'X' b'vizier' b'I' b'(' b'2002' b')'
    b'.' b'The' b'battery' b'of' b'Ireland' b'threw' b'regularly' b'helicopters' b'that' b'Mary' b'"' b'Hightower' b'"' b'techniques' b'by' b'a' b'few' b'lights' b'of' b'period'
    b'.' b'This' b'probable' b'or' b'brick' b'has' b'been' b'larger' b'species' b'of' b'apartments' b'in' b'April' b'1885' b'.' b'The' b'Jain' b'starling' b'then' b'moved'
    b'into' b'many' b'more' b'than' b'150' b'years' b'between' b'Northern' b'117' b'and' b'30' b'AD' b',' b'before' b'being' b'found' b'a' b'score' b'by' b'Karamoko'
    b'resident' b')' b'.' b'Ultimately' b',' b'indicate' b'in' b'the' b'Caribbean' b'<unk>' b'gave' b'part' b'of' b'the' b'non' b'@-@' b'war' b'trading' b'genus' b','
    b'and' b'the' b'Ancient' b'large' b'sexually' b'organized' b'moss' b'species' b',' b'as' b'well' b'as' b'<unk>' b'<unk>' b',' b'probably' b'blocked' b'by' b'tap' b'.'
    b'Hoover' b'schools' b'also' b'compete' b'in' b'national' b'endemic' b'areas' b',' b'offering' b'them' b'three' b'value' b'in' b'ocean' b'periodicals' b',' b'and' b'large' b'liver'
    b',' b'some' b'other' b'sufficient' b'islands' b',' b'close' b',' b'as' b'well' b'as' b'cultural' b'panels' b'(' b'specialized' b'<unk>' b',' b'free' b'stability' b'in'
    b'1880' b')' b',' b'"' b'is' b'unstable' b',' b'and' b'one' b'picked' b'apart' b'with' b'in' b'pets' b'"' b'.' b'<eos>' b'Numerous' b'impregnated' b'scenes'
    b'are' b'located' b'with' b'five' b'decent' b'names' b'and' b'breed' b'since' b'determining' b'it' b'.' b'In' b'the' b'hospitals' b',' b'it' b'runs' b'into' b'a'
    b'eastern' b'selectivity' b'.' b'There' b'is' b'residents' b'for' b'various' b'earth' b',' b'detailed' b'species' b',' b'and' b'\xe1\x83\x9d' b'by' b'a' b'common' b'amount' b'of'
    b'network' b'came' b'for' b'the' b'guitar' b',' b'maintenance' b'being' b'for' b'narrowed' b',' b'or' b'young' b'male' b',' b'such' b'as' b'<unk>' b',' b'freshman'
    b',' b'Galway' b',' b'<unk>' b',' b'and' b'his' b'structural' b'partner' b'.' b'A' b'number' b'of' b'birds' b',' b'of' b'mass' b'granules' b',' b'are'
    b'deposited' b',' b'<unk>' b'by' b'Troy' b'<unk>' b'as' b',' b'the' b'resulting' b'a' b'young' b'however' b'Limited' b',' b'holding' b'that' b'annually' b'magical' b'starlings'
    b'from' b'common' b'sites' b'and' b'<unk>' b',' b'and' b'MacLeod' b'<unk>' b'the' b'common' b'body' b'of' b'<unk>' b'<unk>' b'.' b'He' b'is' b'rarely' b'known'
    b'for' b'repatriation' b'.' b'Where' b'bacteria' b'such' b'as' b'metallicity' b'to' b'consider' b'food' b'in' b'necrophiliac' b',' b'understated' b'<unk>' b'begun' b'in' b'the' b'spring'
    b'of' b'Africa' b',' b'also' b'thought' b'that' b'the' b'kakapo' b'Turnpike' b'occurs' b'to' b'a' b'island' b'that' b'may' b'be' b'too' b'associated' b'as' b'in'
    b'roadblocks' b'and' b'Stereum' b'.' b'<eos>' b'The' b'belly' b'is' b'often' b'unique' b'to' b'the' b'state' b'of' b'<unk>' b',' b'and' b'some' b'historians' b'helpers'
    b'stemming' b'from' b'<unk>' b'.' b'Migration' b'may' b'be' b'mistaken' b'into' b'<unk>' b'.' b'In' b'006' b',' b'many' b'Altman' b'are' b'slightly' b'complicated' b'.'
    b'In' b'jail' b'this' b'definition' b'involves' b'167' b'years' b',' b'mainly' b'of' b'chicks' b',' b'do' b'not' b'eat' b'viper' b'.' b'They' b'may' b'be'
    b'dismissed' b'by' b'<unk>' b',' b'nests' b'rates' b'of' b'southern' b'Ireland' b',' b'by' b'1000' b'kilometres' b'(' b'4' b'@.@' b'7' b'mi' b')' b'and'
    b'has' b'wetland' b'soil' b'or' b'in' b'the' b'most' b'luminous' b'studded' b'movement' b'.' b'The' b'first' b'is' b'four' b'or' b'different' b'hunt' b'from' b'Ceres'
    b',' b'occasionally' b'by' b'increased' b'coat' b'.' b'males' b',' b'such' b'as' b'through' b'whistle' b',' b'destruction' b',' b'friction' b'assemblies' b'and' b'food' b'.'
    b'There' b'were' b'no' b'absolute' b'soil' b'at' b'least' b'a' b'male' b'mining' b'that' b'he' b'promised' b'too' b'feet' b',' b'so' b'also' b'pertaining' b'to'
    b'a' b'Tracys' b'to' b'can' b'be' b'tossed' b'with' b'flowering' b',' b'believing' b'that' b'they' b'are' b'expected' b'Courant' b',' b'as' b'to' b'largely' b'be'
    b'administered' b'by' b'II' b'under' b'their' b'bright' b'judgement' b'to' b'vegetation' b'the' b'savage' b'stem' b'.' b'Most' b'birds' b'run' b'them' b',' b'but' b'by'
    b'this' b'reason' b'they' b'were' b'akin' b'to' b'bring' b'the' b'unseen' b'clean' b',' b'especially' b'by' b'<unk>' b'long' b',' b'so' b'it' b'has' b'often'
    b'retained' b'more' b'than' b'one' b'more' b'good' b'organized' b'(' b'no' b'chicks' b'per' b'second' b'moving' b')' b'.' b'During' b'this' b',' b'it' b'has'
    b'differed' b'the' b'legend' b'of' b'oribi' b'cards' b',' b'dense' b',' b'and' b'even' b'lacking' b'aspects' b'of' b'<unk>' b',' b'by' b'U' b'Arabia' b'.'
    b')' b'have' b'been' b'shown' b'them' b'in' b'1843' b'.' b'They' b'have' b'a' b'DNA' b'intellectuals' b'of' b'<unk>' b'branches' b',' b'though' b'complexes' b'were'
    b'less' b'tolerant' b'from' b'that' b'cellular' b'fragment' b'.' b'"' b'<unk>' b'"' b'(' b'also' b'booms' b')' b'which' b'may' b'spare' b'trees' b'are' b'unclear'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 237.1
    loss: 5.168
    elapsed time (seconds): 163.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  45.192 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
