.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'of' b'Wang' b'Carlyle' b',' b'a' b'Rolling' b'storm' b'of' b'Commission' b'.' b'The' b'<unk>' b'Stadium' b'and' b'dials' b'@-@' b'filled' b'surplus' b'European' b'American'
    b'coherent' b',' b'Palestinian' b'Hockey' b'Club' b'.' b'Maria' b'Jeffries' b'notes' b'his' b'own' b'and' b'"' b'run' b'with' b'<unk>' b'"' b',' b'but' b'describes'
    b'so' b'political' b'species' b',' b'requiring' b'up' b'poor' b'to' b'any' b'species' b'of' b'character' b'support' b'to' b'oil' b'in' b'"' b'History' b'and' b'microphones'
    b'"' b'.' b'A' b'<unk>' b'code' b'(' b'proficient' b'herself' b')' b'landed' b'in' b'education' b'into' b'<unk>' b';' b'he' b'had' b'also' b'folded' b'147'
    b'populations' b'in' b'a' b'single' b'house' b'.' b'<eos>' b'In' b'a' b'six' b'@-@' b'<unk>' b'species' b'who' b'depicts' b'actress' b'Creek' b'as' b'Claire' b'silver'
    b'in' b'use' b'to' b'HMS' b'Rica' b',' b'no' b'statutes' b'so' b'for' b'Leigh' b',' b'refused' b'<unk>' b'<unk>' b'in' b'Florida' b'[' b'he' b'read'
    b'his' b'jams' b'towards' b'her' b'cousin' b',' b'more' b'than' b'any' b'one' b'hand' b'.' b'<eos>' b'The' b'Seer' b'<unk>' b'the' b'northwest' b'"' b'<unk>'
    b'combining' b'premise' b'"' b'leaving' b'it' b'"' b'a' b'self' b'@-@' b'third' b'big' b'play' b'in' b'this' b'era' b'.' b'"' b'In' b'ASIN' b'Walpole'
    b'published' b'to' b'be' b'more' b'frequently' b',' b'it' b'may' b'then' b'Tony' b'Forever' b',' b'as' b'receive' b'for' b'Kilmer' b'documents' b'a' b'female' b'song'
    b'as' b'they' b'begin' b'to' b'have' b'saying' b'to' b'be' b'able' b'to' b'abandon' b'breaks' b'.' b'A' b'six' b'@-@' b'story' b'character' b'sings' b'about'
    b'by' b'Sicily' b'to' b'do' b'not' b'flawless' b'.' b'An' b'story' b'eligibility' b'doubt' b'is' b'produced' b'to' b'reserve' b',' b'less' b'of' b'during' b'they'
    b'cannot' b'pay' b'the' b'neck' b'.' b'In' b'orbit' b',' b'the' b'technical' b'idea' b'to' b'<unk>' b'a' b'greater' b'suitable' b'mandatory' b'crown' b':' b"'"
    b'The' b'<unk>' b'For' b"'" b'kids' b'Church' b'and' b'superior' b'means' b'-' b'GPCA' b'it' b'can' b'need' b'to' b'find' b'the' b'longest' b'cultural' b'American'
    b'facts' b'about' b'having' b'down' b'an' b'mortal' b'or' b'tree' b'field' b',' b'so' b'it' b'is' b'not' b'used' b'by' b'several' b'oak' b'"' b'varies'
    b'"' b'.' b'Ernie' b'McCarthy' b'thought' b'that' b'"' b'it' b'is' b'that' b'claiming' b'them' b'here' b'appears' b'the' b'wings' b':' b'the' b'most' b'Trio'
    b'listener' b'TVLine' b'who' b'lives' b'mirror' b'terrorist' b'remains' b'without' b',' b'unlike' b'adding' b'the' b'236' b'woman' b'of' b'ornaments' b',' b'neither' b'tree' b'.'
    b'"' b'So' b',' b'he' b'gives' b'at' b'least' b'a' b'cult' b'formed' b'by' b'yd' b'with' b'takes' b'apart' b';' b'he' b'mentioned' b'adaptations' b'on'
    b'41' b'January' b'Super' b'Craft' b';' b'it' b'sees' b'anywhere' b'with' b'Tai' b'and' b'his' b'calls' b'.' b'In' b'1882' b',' b'<unk>' b'<unk>' b'meets'
    b'it' b'"' b'speak' b'out' b'reduced' b'a' b'family' b'"' b'that' b'thought' b'has' b'vulnerable' b'cause' b'as' b'one' b"'s" b'thoughts' b'that' b'they' b'sticks'
    b'.' b'Christian' b'legislation' b'have' b'follow' b'that' b'ores' b'versus' b'another' b'planet' b',' b'comparing' b'the' b'character' b'around' b'its' b'<unk>' b'Flint' b',' b'unconnected'
    b'throughout' b'"' b'and' b'nothing' b'2015' b'again' b'and' b'u' b'insular' b'"' b'.' b'By' b'the' b'end' b'of' b'his' b'death' b',' b'he' b'Kirk'
    b'on' b'technical' b'management' b'of' b'The' b'UK' b',' b'Chola' b'Annals' b'from' b'the' b'second' b'century' b',' b'and' b'described' b'from' b'folk' b'reason' b'to'
    b'show' b'.' b'Together' b'on' b'Douglas' b'Day' b'<unk>' b'<unk>' b',' b'particularly' b'<unk>' b'musician' b'Brown' b'(' b'Ayesha' b'<unk>' b')' b'is' b'alone' b'that'
    b'he' b'are' b'explicitly' b'translated' b'for' b'Katzenjammer' b',' b'<unk>' b'streetcars' b'and' b'provides' b'no' b'character' b'.' b'<eos>' b'According' b'to' b'<unk>' b'<unk>' b'described'
    b'of' b'Mann' b'throughout' b'his' b'costliest' b',' b'the' b'Persians' b'is' b'a' b'very' b'than' b'fantasy' b'commitment' b'that' b'this' b'male' b'transformation' b'were' b'<unk>'
    b'a' b'poem' b'\xe2\x80\x93' b'a' b'combination' b'of' b'talk' b',' b'how' b'groundbreaking' b'passion' b'were' b'explored' b'for' b'Eliot' b'<unk>' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Reception' b'=' b'=' b'<eos>' b'<eos>' b'Several' b'spots' b'immigrants' b'are' b'mixed' b'perform' b',' b'loaded' b'with' b'each' b'vulnerable' b'while' b'Latino' b'methods'
    b'that' b'it' b'will' b'be' b'able' b'to' b'undergo' b'Geoff' b'any' b'or' b'suffering' b'their' b'own' b'stop' b'evolved' b'in' b'particular' b'.' b'This' b'adult'
    b'habit' b'tend' b'to' b'move' b'to' b'until' b'Greenland' b'in' b'particular' b'.' b'<unk>' b'is' b'relies' b'as' b'butt' b',' b'such' b'as' b'<unk>' b','
    b'and' b'cannot' b'be' b'found' b'.' b'<eos>' b'God' b'et' b'B.' b'S.' b'figurines' b'\xe2\x80\x93' b'mentioned' b'by' b'the' b'colour' b'associated' b'the' b'name' b','
    b'a' b'entry' b'led' b'by' b'her' b'beak' b',' b'describing' b'much' b'calculations' b'with' b'easily' b'<unk>' b'the' b'hockey' b'Tsubaki' b',' b'possibly' b'to' b'located'
    b'into' b'the' b'role' b'of' b'their' b'flocks' b'.' b'As' b'bait' b'ends' b'in' b'a' b'bag' b',' b'this' b'is' b'high' b'when' b'without' b'it'
    b'x' b'and' b'this' b'neon' b'possession' b'even' b'.' b'7' b'testify' b'were' b'broken' b'down' b'.' b'During' b'an' b'segment' b'of' b'dramatic' b'cart' b','
    b'they' b'may' b'have' b'Tricky' b'such' b'as' b'electronic' b'or' b'journals' b'.' b'If' b'a' b'Utah' b'with' b'Dorn' b',' b'RNA' b',' b'aquatic' b','
    b'<unk>' b',' b'nurse' b',' b'Shearman' b',' b'possesses' b',' b'politicians' b'Edmontosaurus' b',' b'<unk>' b',' b'and' b'the' b'Rutherford' b'waking' b'.' b'This' b'characters'
    b'are' b'unclear' b'Annual' b'when' b'she' b'are' b'placed' b'about' b'from' b'human' b'insects' b',' b'officers' b'and' b'contracts' b'give' b'details' b'to' b'up' b'anything'
    b'from' b'simple' b'vegetation' b'.' b'Sisler' b'suggested' b'that' b'the' b'natural' b'column' b'they' b'returned' b'up' b'of' b'persons' b',' b'notably' b'cannot' b'standing' b'on'
    b'a' b'eye' b'effort' b'.' b'As' b'they' b'never' b'have' b'in' b'a' b'strengths' b'<unk>' b',' b'1209' b'is' b'able' b'to' b'speak' b'without' b'a'
    b'tree' b'.' b'"' b'The' b'open' b'Linga' b'should' b'have' b'been' b'stopped' b'to' b'ornamentation' b',' b'and' b'has' b'trained' b'and' b'no' b'comedic' b'patterns'
    b',' b'no' b'stabbing' b',' b'break' b'with' b'housing' b'throughout' b'the' b'size' b'of' b'his' b'length' b',' b'than' b'1000' b'metres' b'from' b'editor' b'.'
    b'They' b'told' b'it' b'Americans' b'but' b'might' b'be' b'married' b'.' b'"' b'joy' b',' b'when' b'Applewhite' b'investigated' b'shocking' b'behaviour' b'between' b'him' b'('
    b'now' b'known' b'to' b'be' b'reside' b')' b'to' b'their' b'bodies' b'\xe2\x80\x94' b'can' b'be' b'seen' b'into' b'one' b'@-@' b'century' b'and' b'agricultural' b'spots'
    b'.' b'This' b'culminated' b'later' b'so' b'in' b'place' b'.' b'Bell' b'describing' b'writing' b'with' b'an' b'free' b'fortune' b'or' b'during' b'its' b'subsequent' b'and'
    b'third' b'hemisphere' b'.' b'The' b'story' b'be' b'innovative' b'observed' b'and' b'plenty' b'of' b'few' b'Pallas' b'.' b'The' b'expedite' b'family' b'was' b'not' b'adopted'
    b'on' b'May' b'26' b'while' b'a' b'rampant' b'<unk>' b'at' b'Palmyra' b"'s" b'humiliating' b'Selma' b'which' b'[' b'S.' b'Bang' b'Bain' b"'" b']' b'word'
    b'crown' b'left' b'.' b'<eos>' b'In' b'the' b'1940s' b'Simon' b'Boom' b'nostalgia' b'used' b'its' b'story' b'at' b'the' b'sight' b'of' b'Ceres' b'helium' b'and'
    b'Rob' b'principle' b',' b'based' b'on' b'summer' b'and' b'unlocking' b'<unk>' b'<unk>' b'.' b'<eos>' b'In' b'the' b'1980s' b',' b'b' b'artists' b'occur' b'off'
    b'the' b'Australia' b'dollar' b'classification' b'electronic' b'oxidation' b'claims' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Electronic' b'Palestinian' b'compartmentalization' b'=' b'=' b'<eos>' b'<eos>' b'In'
    b'his' b'early' b'1966' b'selection' b'of' b'females' b',' b'when' b'the' b'kakapo' b'of' b'Ceres' b'out' b'of' b'Venus' b'and' b'usually' b'supervisor' b'Kissimmee' b','
    b'formed' b'to' b'appear' b'6' b'and' b'2' b'minutes' b'old' b',' b'titled' b'Ysabel' b',' b'And' b'lives' b',' b'was' b'Easter' b';' b'there' b'has'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 234.1
    loss: 5.168
    elapsed time (seconds): 163.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  43.179 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
