.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'five' b'was' b'done' b'.' b'At' b'their' b'memory' b'of' b'his' b'directorial' b'influence' b'from' b'school' b'when' b'it' b'agrees' b'very' b'much' b'left'
    b'a' b'time' b'45' b'@-@' b'season' b',' b'<unk>' b'saxophonist' b'calculated' b'that' b',' b'up' b'a' b'disastrous' b'ingredients' b'of' b'natural' b'water' b'or' b'soul'
    b',' b'can' b'be' b'observed' b'in' b'to' b'make' b'by' b'their' b'sword' b'waving' b'on' b'that' b'role' b'.' b'Two' b'gills' b'do' b'not' b'turn'
    b'far' b'since' b'<unk>' b',' b'and' b'at' b'the' b'service' b'of' b'a' b'male' b'relations' b'to' b'sex' b'parents' b',' b'the' b'presence' b'of' b'likewise'
    b'snakes' b'removed' b'by' b'each' b'other' b',' b'so' b'even' b'another' b'layer' b'can' b'be' b'"' b'certainly' b'because' b'strong' b'the' b'flower' b'[' b','
    b']' b'and' b'Elrane' b'sector' b']' b'has' b'a' b'very' b'bad' b'side' b'where' b'where' b'I' b'"' b'<unk>' b'it' b'.' b'Another' b'average' b'Berry'
    b'Crow' b'stated' b'that' b'food' b'is' b'similar' b'for' b'a' b'bag' b'on' b'the' b'second' b'floor' b'of' b'sling' b'.' b'Also' b',' b'"' b'pluralism'
    b'"' b'strange' b'were' b'at' b'non' b'@-@' b'three' b'years' b',' b'with' b'Slovenia' b'researchers' b'and' b'<unk>' b'movement' b'.' b'The' b'longer' b'colour' b'for'
    b'out' b'height' b'is' b'a' b'whole' b'dorsal' b'or' b'sometimes' b'black' b'<unk>' b'for' b'observed' b'.' b'These' b'information' b',' b'greatly' b'by' b'by' b'radial'
    b'computer' b',' b'sometimes' b'Llangaffo' b';' b'if' b'their' b'interior' b',' b'when' b'red' b'birds' b'is' b'given' b',' b'Eu' b'dealt' b'up' b'to' b'Tyla'
    b'.' b'The' b'female' b'is' b'Bassline' b';' b'if' b'most' b'affection' b'are' b'forming' b'to' b'roots' b',' b'can' b'have' b'additional' b'<unk>' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Distribution' b'=' b'=' b'<eos>' b'<eos>' b'In' b'his' b'first' b'six' b'World' b'@-@' b'century' b'algorithm' b',' b'fusion' b'Film' b'bonding'
    b'placed' b'the' b'ceremonies' b',' b'therefore' b',' b'Donegal' b'and' b'the' b'excess' b'of' b'hypothetical' b'plumage' b'ground' b',' b'the' b'basidia' b'seem' b'to' b'be'
    b'considered' b'Stevens' b"'s" b'well' b'light' b'and' b'flight' b',' b'with' b'1681' b',' b'<unk>' b',' b'owls' b',' b'and' b'spermicide' b',' b'shopping' b'as'
    b'they' b'treat' b'.' b'They' b'Sixteen' b'Selma' b'bodies' b'also' b'serves' b'as' b'abduction' b',' b'<unk>' b',' b'<unk>' b',' b'munitions' b',' b'infertility' b','
    b'<unk>' b'and' b'stylistic' b',' b'the' b'lovers' b',' b'and' b'other' b'cricketers' b'.' b'As' b'their' b'lead' b',' b'this' b'was' b'less' b'Defamation' b'rather'
    b'than' b'by' b'as' b'down' b'.' b'<eos>' b'Like' b'the' b'first' b',' b'he' b'endured' b'briefly' b'overall' b',' b'saying' b'that' b'"' b'it' b'is'
    b'unsure' b'(' b'entirely' b'Labour' b',' b'twice' b',' b'included' b'offspring' b')' b'trouble' b'to' b'plea' b'my' b'life' b'"' b'.' b'As' b'a' b'attempt'
    b'to' b'likely' b'mean' b'this' b'bird' b'is' b'located' b',' b'"' b'If' b'you' b'must' b'taught' b'this' b'catchy' b'defeat' b',' b'he' b'replied' b':'
    b'"' b"'s" b'eyes' b'into' b'his' b':' b"'" b'Vettel' b',' b'and' b'nor' b'never' b'\xe2\x80\x93' b'Wang' b'yields' b'grasses' b',' b'I' b'reading' b'that'
    b'an' b'black' b'likely' b'look' b'Markgraf' b'that' b'sustained' b'refused' b'true' b'colloquially' b'.' b'Everything' b'considers' b'other' b'hundred' b'expression' b'strength' b'came' b'down' b'by'
    b'them' b'after' b'very' b'fun' b'his' b'object' b'that' b'firms' b'forces' b'\xe2\x80\x94' b'when' b'asteroid' b'come' b'with' b'their' b'enemies' b',' b'one' b'or' b'sent'
    b'a' b'no' b'border' b'to' b'be' b'Caddick' b'@-@' b'lived' b'.' b'"' b'The' b'first' b'finishing' b'factors' b'in' b'the' b'<unk>' b'and' b'a' b'storyboard'
    b'which' b'consists' b'of' b'these' b'sewage' b',' b'such' b'as' b'Concerning' b'Victor' b'Pandu' b'.' b'M.' b'Deakin' b'forage' b'on' b'the' b'Republic' b'of' b'pronunciation'
    b',' b'where' b'remaining' b'similarities' b'to' b'trade' b'spines' b'.' b'<eos>' b'Some' b'of' b'these' b'games' b'thought' b'toward' b'Egyptian' b'Traditional' b'spores' b'Hawk' b'di'
    b'Vatatzes' b'but' b'used' b'selects' b'due' b'to' b'the' b'original' b'Dahlen' b'to' b'collect' b'Sandwich' b'Taylor' b'loudspeaker' b',' b'one' b'of' b'them' b',' b'a'
    b'unfinished' b'agitation' b'who' b'also' b'makes' b'no' b'focus' b'on' b'Sweetums' b';' b'though' b'"' b'merengue' b'four' b'steps' b'would' b'be' b'gone' b',' b'they'
    b'critique' b'bringing' b'Cambridge' b'who' b'support' b'that' b'I' b'don' b"'t" b'stop' b'or' b'up' b'the' b'find' b'into' b'a' b'alarm' b'down' b'.' b'"'
    b'Perrin' b'<unk>' b',' b'Still' b'with' b'Twentieth' b'funds' b'as' b'MM' b'Dayton' b'.' b'Because' b'"' b'It' b'had' b'a' b'seating' b'and' b'comedy' b'note'
    b'"' b'.' b'Although' b'while' b'the' b'predatory' b'planet' b'pursued' b'guilty' b',' b'women' b'threatened' b'the' b'amount' b'of' b'one' b'in' b'several' b'gallon' b','
    b'India' b'\xe2\x80\x94' b'and' b'<unk>' b'in' b'general' b'.' b'Another' b'male' b'transept' b'refers' b'to' b'<unk>' b'today' b'format' b',' b'which' b'there' b'is' b'them'
    b'a' b'degree' b'of' b'empire' b'to' b'remake' b'its' b'size' b'in' b'their' b'existence' b'.' b'Odaenathus' b'proposes' b'the' b'state' b'Numbering' b'@-@' b'female' b'at'
    b'least' b'24' b'seconds' b'.' b'One' b'alarm' b'passages' b'are' b'found' b'or' b'containing' b'behavior' b'Fei' b'.' b'If' b'claimed' b'when' b'they' b'work' b'by'
    b'gas' b',' b'they' b'acknowledged' b'under' b'other' b'different' b'crime' b',' b'such' b'as' b'den' b'<unk>' b',' b'and' b'monks' b'(' b'<unk>' b'cyclones' b')'
    b'.' b'The' b'Dutch' b'circle' b'on' b'\xe2\x80\x93' b'15' b'(' b'for' b'example' b'is' b'sometimes' b'spelled' b'to' b'<unk>' b'around' b'6' b'females' b',' b'and'
    b'the' b'400' b'feet' b'although' b'Ceres' b'fame' b'55' b'%' b'million' b'times' b')' b',' b'the' b'other' b'ecclesiastical' b'Mesolithic' b'title' b'.' b'Then' b','
    b'muscimol' b'available' b'by' b'both' b'the' b'same' b'female' b'to' b'deep' b')' b'but' b'<unk>' b'several' b'@-@' b'spored' b'great' b'conformity' b'well' b'as' b'other'
    b'surface' b'or' b'features' b'nor' b'<unk>' b'or' b'stealing' b'the' b'beak' b'by' b'her' b'head' b"'" b'when' b'introductory' b'.' b'<unk>' b',' b'other' b'pores'
    b'gave' b'place' b'on' b'various' b'or' b'two' b'starts' b',' b'on' b'a' b'more' b'unique' b'source' b',' b'which' b'has' b'no' b'longer' b'water' b'@-@'
    b'1' b'<unk>' b',' b'which' b'caught' b'it' b'up' b'<unk>' b'estate' b'relations' b'.' b'However' b',' b'Ashbee' b'whereas' b'landscape' b'Beattie' b'lifespan' b'the' b'first'
    b'boat' b',' b'it' b'makes' b'<unk>' b',' b'so' b'his' b'adversaries' b'might' b'be' b'rated' b'.' b'Once' b'they' b'driver' b'the' b'Peace' b'Shinto' b','
    b'whereby' b'it' b'domestically' b',' b'sheep' b',' b'Harrison' b'and' b'some' b'electrical' b'.' b'turmoil' b'hope' b',' b'when' b'their' b'most' b'fierce' b'domains' b'are'
    b'lip' b'before' b'they' b'try' b'to' b'combine' b',' b'for' b'weak' b'magnitude' b',' b'dull' b'@-@' b'taking' b'things' b'miner' b',' b'the' b'sites' b'and'
    b'elements' b'recorded' b'for' b'difficulty' b'.' b'That' b'forgotten' b'tail' b'might' b'be' b'obtained' b'in' b'its' b'existence' b'with' b'a' b'homosexual' b'rather' b'secrets' b'.'
    b'In' b'early' b'that' b'chorus' b',' b'males' b'<unk>' b'into' b'his' b'"' b'kinds' b'of' b'cloth' b'"' b'and' b'that' b'that' b'the' b'"' b'Towns'
    b'"' b'are' b'he' b'prediction' b'.' b'The' b'second' b'majority' b'accounted' b'only' b'includes' b'books' b'from' b'diseases' b'.' b'Once' b'most' b'same' b'torso' b'countries'
    b'galericulata' b'between' b'two' b'time' b'preventing' b'their' b'Alaska' b'experience' b'he' b'used' b'cyclic' b'barrels' b'together' b'up' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History'
    b'(' b'terms' b'=' b'=' b'<eos>' b'<eos>' b'The' b'body' b'is' b'usually' b'connected' b'for' b'a' b'translation' b'of' b'overall' b'to' b'night' b'.' b'Arriving'
    b',' b'other' b'they' b'do' b'not' b'hold' b'any' b'other' b'example' b'many' b'species' b'develops' b',' b'when' b'they' b'are' b'different' b'away' b'to' b'grazing'
    b'Reasons' b'.' b'This' b'would' b'be' b'later' b'used' b'she' b'needed' b'a' b'game' b'or' b'<unk>' b'free' b'.' b'His' b'first' b'major' b'press' b'may'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 231.9
    loss: 5.168
    elapsed time (seconds): 161.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  38.675 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
