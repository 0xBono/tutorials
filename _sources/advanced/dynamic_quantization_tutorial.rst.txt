.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'while' b'the' b'storm' b',' b'targeting' b',' b'<unk>' b'@-@' b'long' b'Companion' b',' b'was' b'Gui' b'messages' b'in' b'the' b'state' b'of' b'the'
    b'age' b'of' b'fountains' b'and' b'traditionally' b'minerals' b'was' b'transferred' b'to' b'the' b'mid' b'@-@' b'year' b'number' b',' b'which' b'of' b'a' b'world' b'was'
    b'kept' b'in' b'2015' b'(' b'1898' b')' b'where' b'giving' b'it' b'had' b'a' b'slightly' b'minimal' b'Ring' b',' b'while' b'string' b'it' b'male' b'and'
    b'has' b'not' b'actually' b'induce' b'being' b'Senegal' b'in' b'the' b'desired' b'world' b'.' b'This' b'changes' b'for' b'which' b'they' b'were' b'making' b'stop' b'from'
    b'Cathedral' b"'s" b'grave' b',' b'and' b'commence' b'up' b'with' b'the' b'warrior' b'Prize' b'inspired' b'of' b'participation' b'of' b'<unk>' b'.' b'Various' b'six' b'other'
    b'depressions' b'methods' b'attempts' b',' b"'" b'McKay' b"'" b',' b'were' b'\xe2\x80\x94' b'described' b'by' b'writings' b'and' b'entrepreneurs' b'.' b'imaging' b'and' b'sailors' b'were'
    b'insufficient' b',' b'and' b'those' b',' b'like' b'their' b'wives' b'income' b',' b'intended' b'adopted' b'its' b'empire' b',' b'spending' b'\xe2\x80\x93' b'over' b'8' b'years'
    b',' b'to' b'its' b'flat' b'temperatures' b'.' b'You' b'accounts' b'takes' b'the' b'target' b'have' b'down' b'this' b'definition' b',' b'but' b'there' b'are' b'no'
    b'reports' b'that' b'"' b'they' b'gave' b'intense' b'and' b'argue' b'as' b'a' b'novel' b'.' b'[' b'...' b']' b'their' b'Taj' b'like' b'you' b'will'
    b'traditional' b'children' b'from' b'our' b'loss' b'.' b'"' b'<unk>' b':' b'"' b'The' b'Egyptologist' b'valens' b'!' b'Now' b'seems' b'to' b'be' b'difficult' b'to'
    b'be' b'loved' b',' b'thereby' b'that' b'I' b'do' b'anything' b'every' b'cool' b'light' b'deep' b'break' b'up' b'\xe2\x80\xa6' b'?' b'"' b'<eos>' b'The' b'carvings'
    b'then' b'changed' b'her' b'own' b'lifestyle' b'at' b'from' b'the' b'night' b',' b'which' b'"' b'viewers' b'have' b'widows' b'<unk>' b'leaves' b'and' b'<unk>' b'150'
    b'\xe2\x80\x93' b'13' b'minutes' b'to' b'be' b'rather' b'obvious' b'.' b'"' b'Several' b'later' b'of' b'these' b'new' b'speakers' b'are' b'submitted' b'to' b'Mars' b':'
    b'Finally' b'prevent' b'the' b'interiors' b'two' b'in' b'the' b'races' b'of' b'Hartley' b'his' b'coup' b',' b'this' b'earlier' b'parents' b'.' b'<unk>' b'proper' b'into'
    b'the' b'first' b'two' b'games' b'of' b'governing' b'Davenport' b',' b'network' b',' b'and' b'\xe3\x82\xb9\xe3\x83\x88\xe3\x83\x83\xe3\x83\x97' b'music' b'of' b'light' b',' b'and' b'above' b'them' b','
    b'on' b'line' b'he' b'suitable' b'citing' b'enough' b'to' b'run' b'during' b'a' b'career' b'.' b'At' b'a' b'very' b'database' b'early' b',' b'<unk>' b'of'
    b'Demons' b'Silver' b'(' b'empire' b')' b'take' b'a' b'negotiated' b'viper' b'by' b'<unk>' b';' b'it' b'has' b'all' b'speed' b'positive' b'thin' b'reader' b'b'
    b'unclear' b'.' b'As' b'they' b'demands' b'the' b'player' b'who' b'Primary' b'supernatural' b'reality' b'altogether' b'considers' b'the' b'event' b',' b'make' b'it' b'the' b'name'
    b'to' b'rescue' b'cougars' b'to' b'illnesses' b'when' b'they' b'enzymatic' b'flies' b'.' b'exploded' b',' b'or' b'even' b'selects' b'to' b'their' b'<unk>' b',' b'they'
    b'return' b'to' b'adults' b',' b'bringing' b'a' b'charge' b'on' b'behalf' b'of' b'a' b'calibre' b'they' b'<unk>' b'Ellie' b'in' b'alleged' b'.' b'For' b'example'
    b'a' b'Strathaird' b'Birds' b'<unk>' b'applicants' b'was' b'sent' b'to' b'air' b',' b'<unk>' b'to' b'fund' b'or' b'lived' b'.' b'The' b'first' b'Cadets' b','
    b'another' b'decade' b'that' b'and' b'approaches' b'out' b'for' b'bird' b'family' b'items' b'in' b'films' b'cannot' b'be' b'somehow' b'before' b'they' b'will' b'be' b'transformed'
    b'to' b'their' b'unity' b'.' b'<unk>' b',' b'as' b'bugs' b',' b'or' b'us' b',' b'or' b'for' b'mountings' b',' b'often' b'food' b'and' b'ice'
    b',' b'pea' b'swamphen' b'is' b'isotopes' b'.' b'Pretty' b'that' b'require' b'further' b'moisture' b'with' b'sea' b'nuclei' b'and' b'even' b'dealt' b'Conservation' b'algebra' b'reconcile'
    b'him' b'.' b'<eos>' b'In' b'the' b'absence' b'of' b'apparatus' b',' b'they' b'have' b'reached' b'one' b'point' b'for' b'a' b'grade' b'.' b'The' b'breath'
    b'resembles' b'headed' b'and' b'U2' b'put' b'several' b'vandalism' b'as' b'of' b'1852' b',' b'fire' b',' b'but' b'tips' b'nominating' b'it' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'The' b'kakapo' b'of' b'448' b'(' b'consisting' b'sports' b',' b'around' b'160' b'million' b'remains' b')'
    b'increased' b"'s" b'well' b'council' b'who' b'sang' b'into' b'the' b'year' b'and' b'used' b'1693' b'.' b'There' b'is' b'short' b'natural' b'starlings' b',' b'sir'
    b',' b'and' b'hours' b',' b'very' b'young' b'\xc4\x81' b'.' b'Females' b'may' b'engages' b'for' b'example' b',' b'leaving' b'coal' b'or' b'clamp' b'living' b'.'
    b'Moreover' b',' b'on' b'nerves' b',' b'there' b'are' b'reports' b'to' b'be' b'spreading' b'with' b'either' b'if' b'establish' b'negative' b'<unk>' b'such' b'as' b'chromosomes'
    b'.' b'These' b'of' b'these' b'roots' b'are' b'about' b'clear' b'airspace' b'throughout' b'the' b'island' b'.' b'According' b'to' b'Patrick' b'<unk>' b',' b'discussions' b'of'
    b'his' b'origin' b'called' b'sixty' b'@-@' b'simply' b'spores' b'in' b'environments' b'such' b'as' b'theory' b',' b'<unk>' b',' b'<unk>' b',' b'Rama' b',' b'<unk>'
    b',' b'fir' b',' b'hosts' b',' b'and' b'settle' b',' b'and' b'recreated' b'.' b'Irish' b'spiders' b'require' b'adapted' b'tall' b',' b'they' b'upon' b'Analytical'
    b'because' b'he' b'was' b'gonna' b'to' b'pose' b'O' b'Adult' b',' b'hopefully' b'"' b'Cooke' b'"' b'all' b'of' b'display' b'by' b'the' b'Adventures' b'of'
    b'his' b'father' b',' b'to' b'buy' b'Machel' b'on' b'the' b'use' b'of' b'Weevil' b'.' b'The' b'female' b'is' b'fitzJohn' b'for' b'thousand' b'to' b'weekend'
    b',' b'especially' b'a' b'two' b'@-@' b'yard' b'gap' b'(' b'diabetes' b')' b',' b'with' b'a' b'"' b'Celtic' b'eye' b'"' b'of' b'female' b'fraction'
    b'binds' b'allowing' b'"' b'Reef' b'"' b';' b'to' b'set' b'up' b'six' b'or' b'eighteen' b'out' b'of' b'the' b'four' b'excluded' b',' b'All\xc4\x81h' b'Sleaford'
    b',' b'California' b',' b'and' b'Central' b'(' b'Paul' b'played' b')' b'.' b'In' b'a' b'effort' b'to' b'arrest' b'the' b'eye' b',' b'this' b'will'
    b'be' b'seen' b'throughout' b'Southern' b'Ireland' b'but' b'storm' b',' b'the' b'gammarus' b'<unk>' b'(' b'<unk>' b')' b',' b'wrote' b'native' b'in' b'1850' b','
    b'and' b'increasingly' b'housed' b'Gentleman' b',' b'highlight' b'by' b'RNA' b',' b'chicks' b'and' b'respectability' b'of' b'existence' b',' b'who' b'remained' b'in' b'<unk>' b'Rosey'
    b'.' b'The' b'mining' b'local' b'success' b'members' b'can' b'be' b'outside' b'laughs' b',' b'and' b'are' b'discovered' b'to' b'often' b'black' b'morphology' b'with' b'different'
    b'chicks' b'.' b'<eos>' b'permits' b'of' b'varying' b'Associated' b'Bernard' b'James' b'Chapman' b',' b'the' b'seven' b'councils' b'via' b'her' b'outer' b'throat' b'Tauri' b'years'
    b'to' b'measure' b'the' b'DNL' b',' b'Sanford' b'brought' b'as' b'organization' b',' b'gods' b'and' b'Bob' b'<unk>' b'Inc' b',' b'while' b'where' b'they' b'do'
    b'not' b'be' b'preferred' b':' b'Risa' b'fingers' b'included' b'that' b'are' b'interesting' b'in' b'the' b'reality' b'of' b'destruction' b'every' b'death' b',' b'where' b'several'
    b'<unk>' b'@-@' b'birds' b',' b'<unk>' b',' b'Sioux' b',' b'discarding' b'happiness' b',' b'and' b'feed' b',' b'formed' b'before' b'running' b'to' b'over' b'20'
    b'minutes' b',' b'much' b'leave' b'it' b'throughout' b'the' b'Toronto' b'sense' b'.' b'<eos>' b'Although' b'it' b'is' b'not' b'been' b'found' b'ambassadors' b',' b'they'
    b'can' b'have' b'reopened' b'among' b'three' b'other' b'speed' b',' b'misunderstanding' b'around' b'1955' b'.' b'Males' b'lies' b'in' b'the' b'numbers' b'at' b'M4' b','
    b'in' b'the' b'mid' b'@-@' b'yard' b'Sea' b',' b'which' b'still' b'chased' b'numbering' b'to' b'putsch' b'.' b'Assuming' b',' b'there' b'are' b'electric' b'coalitions'
    b'record' b'under' b'food' b',' b'withdrawing' b'by' b'11' b'million' b'per' b'denser' b'studies' b'(' b'which' b'is' b'ubiquitous' b',' b'which' b'has' b'Enterprise' b'even'
    b'necessary' b'in' b'blotched' b'<unk>' b')' b',' b'number' b'is' b'approximately' b'2' b'million' b'(' b'2' b'@.@' b'22' b'in' b')' b'.' b'At' b'a'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 228.4
    loss: 5.168
    elapsed time (seconds): 156.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  30.170 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
