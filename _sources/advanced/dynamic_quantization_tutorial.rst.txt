.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Learned' b',' b'and' b'Florida' b'reported' b'to' b'20' b'of' b'Hornung' b"'s" b'doorway' b'and' b'love' b'for' b'negative' b'New' b'York' b'.' b'<unk>' b'in'
    b'this' b'story' b'was' b'peers' b'in' b'as' b'better' b'as' b'central' b'as' b'he' b'was' b'undercut' b'a' b'grave' b'output' b'.' b'The' b'biggest' b'fact'
    b'of' b'<unk>' b'recipients' b'moved' b'down' b'all' b'a' b'wine' b'job' b'from' b'South' b'Africa' b'and' b'$' b'portion' b'for' b'first' b'\xe2\x82\xb9' b'20' b'@,@'
    b'000' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Gameplay' b'=' b'=' b'<eos>' b'<eos>' b'On' b'8' b'January' b'1974' b',' b'Jordan' b'introduced' b'a' b'address'
    b'from' b'Mithravinda' b'that' b'officially' b'emerged' b'on' b'more' b'powerful' b'settlements' b',' b'and' b'thus' b'his' b'body' b'supply' b'of' b'size' b'.' b'letting' b'his'
    b'early' b'novel' b'individuals' b',' b'the' b'discovery' b'of' b'the' b'Madres' b'in' b'Kh\xe1\xba\xafc' b'jewels' b'might' b'be' b'taught' b'.' b'Crossing' b'time' b'were' b'scattered'
    b'in' b'late' b'this' b'time' b'due' b'.' b'Only' b'marines' b'feature' b'him' b'available' b'.' b'Live' b',' b'the' b'Reds' b'like' b'"' b'stepson' b'"'
    b'and' b'"' b'Russian' b'"' b',' b'"' b'Y' b'Pulaski' b'"' b',' b'and' b'"' b'Ua' b'Monty' b'"' b'for' b'337' b'Coke' b'(' b'2005'
    b')' b',' b'apparent' b'as' b'Grog' b',' b'(' b'1999' b')' b',' b'is' b'interrupted' b'by' b'the' b'nucleoplasm' b'soaked' b'in' b'1991' b'.' b'Also'
    b',' b'they' b'were' b'15' b'weapons' b'old' b',' b'depth' b'one' b'of' b'a' b'non' b'@-@' b'meter' b'location' b'to' b'overwhelm' b'a' b'head' b'.'
    b'The' b'tone' b'of' b'eight' b'spots' b'upstaged' b'troopship' b'Garrod' b'that' b'even' b'covers' b'resident' b'respectively' b'.' b'At' b'about' b'24' b'times' b',' b'Berkley'
    b'is' b'divided' b'for' b'an' b'migration' b'from' b'the' b'jaguar' b'from' b'John' b'W.' b'midway' b'in' b'Adventure' b'Elisabeth' b',' b'in' b'the' b'Studio' b'('
    b'1999' b')' b'and' b'producers' b'(' b'ASCAP' b')' b',' b'as' b'protect' b'Girdwood' b'.' b'Meanwhile' b',' b'have' b'developed' b'the' b'13th' b'Irish' b','
    b'and' b'by' b'140' b'points' b'in' b'a' b'attempt' b'to' b'win' b'computers' b'attached' b'to' b'the' b'fruit' b',' b'with' b'it' b'Plantagenet' b',' b'especially'
    b'a' b'element' b'for' b'27' b'\xc2\xb0' b'worldwide' b'to' b'illumination' b'a' b'reptile' b'.' b'lame' b'charges' b'and' b'thick' b'roles' b'are' b'mostly' b'certain' b','
    b'and' b'the' b'estimated' b'lower' b'today' b'are' b'somewhat' b'defeating' b'.' b'A' b'writer' b'goes' b'in' b'an' b'small' b'display' b'by' b'one' b'of' b'different'
    b'caves' b',' b'has' b'the' b'skin' b'of' b'other' b'.' b'Changes' b'Scientists' b'were' b'a' b'modified' b'guide' b'and' b'its' b'deeply' b'nautical' b'^' b'be'
    b'depicted' b'in' b'Islamic' b'VII' b',' b'New' b'Zealand' b'.' b'Geologists' b'on' b'a' b'diagram' b'was' b'supported' b'by' b'Ellington' b'actress' b'Thompson' b',' b'a'
    b'duel' b'<unk>' b',' b'and' b'a' b'other' b'@-@' b'star' b'invasion' b'a' b'television' b'Ceratopsia' b'assembly' b',' b'a' b'family' b'which' b'needed' b'to' b'alter'
    b'those' b'of' b'the' b'sword' b'.' b'<eos>' b'moist' b'European' b'American' b'groups' b',' b'such' b'as' b'the' b'runaway' b'feathers' b'and' b'features' b'louder' b'himself'
    b',' b'often' b'forms' b'adopting' b'by' b'multiple' b'arms' b'star' b'frigate' b',' b'which' b'has' b'operates' b'them' b'a' b'3' b'@.@' b'5' b'record' b'on'
    b'the' b'Crex' b'windows' b'with' b'a' b'single' b'edition' b'.' b'By' b'2009' b',' b'his' b'initial' b'height' b'is' b'rectangular' b'when' b'grape' b',' b'<unk>'
    b'on' b'its' b'form' b',' b'are' b'<unk>' b';' b'they' b'have' b'different' b'artists' b'.' b'<eos>' b'It' b'lacked' b'daughter' b'<unk>' b'(' b'William' b'Rapids'
    b')' b'is' b'called' b'edible' b'for' b'Wu' b',' b'Herzegovina' b',' b'Berlin' b',' b'which' b'is' b'1137' b'.' b'In' b'1944' b',' b'males' b'accepts'
    b'competing' b'biomolecules' b',' b'and' b'only' b'one' b'million' b'Catholic' b'people' b'have' b'been' b'known' b'in' b'mainly' b'@-@' b'silence' b',' b'but' b'six' b'of'
    b'them' b'were' b'the' b'common' b'starling' b'of' b'his' b'observation' b'.' b'The' b'3rd' b'states' b'of' b'Ireland' b'(' b'2004' b')' b'and' b'puck' b'('
    b'linking' b'Ireland' b')' b'is' b'derived' b'.' b'It' b'was' b'the' b'only' b'cold' b'student' b'dating' b'from' b'a' b'male' b'"' b'The' b'rays' b'"'
    b',' b'"' b'The' b'<unk>' b'planet' b'"' b'that' b'God' b'covers' b'secretary' b'of' b'The' b'earth' b',' b'an' b'North' b'Key' b',' b'a' b'attempt'
    b'to' b'upward' b'@-@' b'folded' b'species' b',' b'a' b'small' b'body' b',' b'a' b'very' b'adverse' b'and' b'British' b'symbol' b',' b'which' b'is' b'often'
    b'seen' b'as' b'species' b'of' b'minor' b'sites' b',' b'use' b'members' b',' b'<unk>' b',' b'and' b'potential' b'ranges' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Development' b'=' b'=' b'<eos>' b'<eos>' b'The' b'common' b'starling' b'of' b'Ulster' b'is' b'continental' b',' b'with' b'a' b'fifth' b'pattern' b'across' b'his' b'Memories'
    b'.' b'The' b'northern' b'god' b',' b'Stratford' b',' b'is' b'introduced' b'to' b'Canada' b',' b'emetic' b',' b'and' b'Fiji' b'.' b'<eos>' b'southwestern' b'species'
    b'among' b'the' b'populations' b'of' b'the' b'<unk>' b'kakapo' b'are' b'native' b'in' b'Ireland' b',' b'so' b'a' b'common' b'Bunder' b'of' b'zinc' b',' b'deposited'
    b'at' b'Tin' b'Heritage' b'are' b'known' b'for' b'Banai' b',' b'frequented' b'by' b'extracellular' b'Monks' b'as' b'cattle' b'.' b'One' b'musical' b'populations' b'comprised' b'cargo'
    b'Buckland' b',' b'apparently' b'only' b'considered' b'their' b'size' b'due' b'to' b'faint' b'@-@' b'standards' b',' b'written' b'as' b'they' b'barrier' b',' b'bathing' b'<unk>'
    b',' b'risks' b'and' b'widows' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Race' b'Pittsburgh' b'=' b'<eos>' b'<eos>' b'The' b'Seer' b'are' b'pelts' b'(' b'typically'
    b'known' b'as' b'<unk>' b',' b'off' b'to' b'ibotenic' b'Gacy' b',' b'Liberty' b',' b'perspectives' b',' b'e' b',' b'Hepburn' b',' b'Puri' b',' b'and'
    b'<unk>' b'and' b'handsome' b'stimulus' b',' b'as' b'a' b'female' b')' b'.' b'Further' b'forests' b'are' b'relatively' b'protected' b'for' b'greater' b'speakers' b'.' b'It'
    b'is' b'a' b'source' b'of' b'this' b'generation' b'dancing' b',' b'producing' b'the' b'Swamp' b'Family' b'God' b'(' b'courtyard' b')' b',' b'which' b'is' b'introduced'
    b'by' b'progenitor' b'saw' b';' b'"' b'The' b'same' b'people' b'"' b'used' b'when' b'he' b'moved' b',' b'in' b'her' b'way' b'when' b'he' b'was'
    b'tough' b'.' b'These' b'mothers' b'are' b'mocking' b'as' b'of' b'similar' b',' b'loss' b'and' b',' b'they' b'were' b'noticed' b'to' b'be' b'<unk>' b'.'
    b'Other' b'poisoning' b'are' b'divided' b'in' b'both' b'inscriptions' b',' b'so' b'others' b'had' b'seen' b'sightings' b'on' b'the' b'broadside' b'that' b'they' b'strike' b'.'
    b'However' b',' b'on' b'preparing' b'ground' b'cells' b',' b'the' b'other' b'starling' b',' b'green' b'forwards' b',' b'and' b'<unk>' b'members' b'of' b'so' b'proteins'
    b'.' b'<eos>' b'A' b'known' b'species' b'typically' b'invaded' b'their' b'function' b'occasionally' b'short' b'a' b'call' b'components' b'to' b'be' b'a' b'common' b'emperor' b'.'
    b'The' b'underparts' b'is' b'made' b'from' b'ruined' b'safety' b'.' b'In' b'"' b'New' b'Zealand' b'"' b',' b'with' b'the' b'original' b'expulsion' b'consul' b'from'
    b'continental' b'countries' b'is' b'a' b'kakapo' b'.' b'Their' b'head' b'occurs' b'with' b'her' b'friend' b'is' b'once' b'mixed' b'by' b'The' b'Solar' b'All\xc4\x81h' b'.'
    b'Those' b'rain' b'grows' b'with' b'woody' b'on' b'manufacturers' b'of' b'anger' b'without' b'50' b'\xe2\x80\x93' b'8' b'\xe2\x80\x93' b'6' b'kilometres' b'(' b'7' b'@.@' b'14'
    b'km' b')' b'at' b'50' b'suited' b',' b'and' b'about' b'8' b',' b'months' b',' b'and' b'an' b'total' b'of' b'120' b':' b'00' b'.'
    b'A' b'successful' b'number' b'of' b'13' b'@.@' b'45' b'million' b'years' b'later' b'can' b'be' b'@-@' b'disagreement' b'.' b'This' b'weapon' b'is' b'at' b'about'
    b'least' b'5' b'@.@' b'5' b'centimetres' b'(' b'6' b'@.@' b'5' b'in' b')' b'just' b'overall' b'.' b'This' b'phosphate' b'possesses' b'the' b'court' b'of'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.4
    loss: 5.168
    elapsed time (seconds): 154.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  25.353 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
