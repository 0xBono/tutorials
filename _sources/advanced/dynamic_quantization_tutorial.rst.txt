.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'the' b'valid' b'permissible' b'to' b'incorporate' b'a' b'active' b'broadcasts' b'.' b'In' b'this' b'distance' b',' b'fewer' b'other' b'abilities' b'compiled' b'a' b'associate' b'of'
    b'"' b'To' b'have' b'Palestine' b'<unk>' b'properly' b"'" b'or' b'proximity' b'it' b'of' b'fraud' b'who' b'have' b'surprisingly' b'salvaged' b'effects' b'by' b'it' b','
    b'which' b'is' b'profoundly' b'what' b'this' b'is' b'adopted' b'replacement' b'.' b'"' b'The' b'Oxford' b'church' b'is' b'that' b'of' b'American' b'use' b'when' b'the'
    b'planet' b'takes' b'<unk>' b',' b'considered' b',' b'and' b'is' b'people' b'finding' b'by' b'also' b'be' b'kept' b'after' b'they' b'wanted' b',' b'and' b'there'
    b'were' b'indeed' b'subdivided' b'that' b'he' b'will' b'<unk>' b'over' b'.' b'<eos>' b'A' b'fairy' b'temperature' b'is' b'outlining' b'in' b'chicks' b',' b'when' b'City'
    b'depicts' b'relatively' b'during' b'there' b'every' b'comfortable' b'dry' b'birds' b'to' b'infiltrate' b'water' b'.' b'<unk>' b'has' b'been' b'able' b'to' b'help' b'in' b'two'
    b'games' b'of' b'Applegate' b'.' b'According' b'to' b'his' b'flocks' b'or' b'Cornic' b',' b'the' b'pattern' b'of' b'processing' b',' b'knowledge' b',' b'and' b'independently'
    b'from' b'guitar' b'along' b'which' b'show' b'Set' b'in' b'1921' b'.' b'Brown' b'mentioned' b'fewer' b'different' b'pieces' b'of' b'underparts' b'after' b'the' b'jetport' b'Graves'
    b'Mosque' b'(' b'who' b'does' b'not' b'text' b')' b'.' b'In' b'1928' b',' b'she' b'gives' b'uniquely' b'two' b'flying' b'flocks' b'in' b'hymenium' b'by'
    b'cap' b'spruces' b';' b'a' b'appearance' b'when' b'a' b'large' b'passage' b'they' b'dismissed' b'the' b'planet' b'could' b'be' b'always' b'so' b'in' b'fact' b'.'
    b'<eos>' b'Crash' b'relates' b'it' b'to' b'a' b'462' b'TA' b'involving' b'resources' b'to' b'break' b'on' b'a' b'patrol' b'.' b'A' b'Indonesian' b'Canatara' b'of'
    b'attracting' b'three' b'other' b'female' b'designations' b'to' b'the' b'factory' b'under' b'disease' b'as' b'a' b'malignant' b'spread' b'on' b'Earth' b'.' b'A' b'female' b'may'
    b'have' b'taking' b'from' b'100' b'@.@' b'5' b'%' b'by' b'a' b'mature' b'@-@' b'planet' b'level' b'@-@' b'like' b'effects' b'in' b'Ceres' b',' b'but'
    b'by' b'the' b'Immortal' b',' b'the' b'female' b'sometimes' b'feeds' b'at' b'Bay' b'enantiomeric' b',' b'which' b'four' b'wording' b'that' b'fraud' b'were' b'Bengali' b'.'
    b'<unk>' b':' b'<eos>' b'examination' b'technique' b')' b'are' b'less' b'appropriate' b'from' b'more' b'massive' b'wings' b',' b'along' b'by' b'Netflix' b'on' b'a' b'skull'
    b'side' b'.' b'It' b'is' b'very' b'worried' b'that' b'it' b"'ll" b'be' b'originated' b'so' b'.' b'While' b'other' b'God' b'of' b'310' b':' b'33'
    b'elevation' b'do' b'be' b'killed' b'down' b'.' b'They' b'have' b'killed' b'its' b'surface' b'<unk>' b'to' b'them' b'from' b'Stupa' b'and' b'my' b'Coty' b'experienced'
    b'distortions' b'on' b'Vicarious' b'pursuers' b',' b'and' b'may' b'be' b'distinguished' b'.' b'<eos>' b'As' b'one' b'of' b'the' b'best' b'tendency' b'on' b'comments' b','
    b'it' b'has' b'many' b'architectural' b'storms' b'time' b'by' b'Malaya' b';' b'smashes' b'is' b'irregular' b'for' b'over' b'20' b'sq' b'years' b'.' b'<eos>' b'Pernick'
    b'can' b'be' b'thought' b'to' b'be' b'luminous' b'in' b'a' b'corporate' b'colony' b'inside' b'Bungie' b',' b'for' b'example' b'.' b'They' b'can' b'35mm' b'cross'
    b'proportional' b'and' b'improve' b'calls' b'to' b'prepare' b'or' b'banks' b',' b'thus' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>'
    b'<eos>' b'<eos>' b'=' b'=' b'=' b'Conservation' b'low' b'=' b'=' b'=' b'<eos>' b'<eos>' b'At' b'home' b'of' b'the' b'<unk>' b'breeding' b'font' b'visible'
    b',' b'segmental' b'monster' b'were' b'digitally' b',' b'venomous' b',' b'<unk>' b',' b'monuments' b',' b'<unk>' b',' b'Cover' b',' b'and' b'molluscs' b'.' b'The'
    b'relatively' b'powerful' b'windows' b'are' b'infamous' b'white' b'.' b'Feeling' b'it' b',' b'it' b'is' b'surrounded' b'by' b'old' b'data' b',' b'with' b'SunPass' b'vertically'
    b'option' b'and' b'head' b'equipped' b',' b'or' b'move' b'into' b'eukaryotic' b'animal' b'or' b'terrestrial' b'.' b'The' b'treatments' b'Lietuva' b'left' b'an' b'mild' b'layer'
    b'until' b'that' b'aerodromes' b'relating' b'to' b'their' b'cores' b'.' b'Common' b'feathers' b'such' b'as' b'Inquiry' b',' b'resisted' b',' b'<unk>' b',' b'wings' b'or'
    b'give' b'scripture' b'of' b'fire' b'.' b'They' b'had' b'long' b'intermittently' b'studies' b'base' b'from' b'clothing' b',' b'then' b'on' b'<unk>' b'find' b'stars' b'that'
    b'recent' b'people' b'have' b'reworked' b'they' b'gives' b'eggs' b'and' b'<unk>' b'or' b'lead' b'.' b'<eos>' b'At' b'19' b':' b'five' b'races' b'of' b'29'
    b'minutes' b'TBSA' b'are' b'a' b'ostrich' b',' b'which' b'represents' b'his' b'velocity' b'by' b'DAGs' b'\xe2\x80\x93' b'Gaboon' b'planets' b'.' b'As' b'the' b'mating' b'gems'
    b',' b'such' b',' b'it' b'can' b'be' b'highly' b'<unk>' b'in' b'search' b',' b'usually' b'clarify' b'by' b'rounded' b',' b'distinguished' b'by' b'Ceres' b'each'
    b'filled' b'to' b'gills' b',' b'are' b'developing' b'throughout' b'<unk>' b'.' b'<eos>' b'For' b'male' b'males' b',' b'authors' b'song' b'from' b'its' b'colony' b'<unk>'
    b'and' b'<unk>' b'that' b'maintain' b'trees' b',' b'primarily' b'supplemented' b'by' b'<unk>' b'leverage' b'made' b'specifically' b',' b'open' b',' b'<unk>' b',' b'or' b'RNA'
    b';' b'they' b"'m" b'usually' b'Kadokawa' b'microscope' b'.' b'However' b',' b'rituals' b'are' b'<unk>' b'for' b'smell' b'of' b'foraging' b',' b'while' b'Protoceratops' b'disciplinary'
    b'way' b'typically' b'.' b'As' b'weak' b',' b'they' b'faced' b'so' b'alone' b'for' b'vision' b',' b'the' b'Wolfpack' b'of' b'which' b'typically' b'require' b'being'
    b'new' b',' b'and' b'less' b'@-@' b'or' b'to' b'keep' b'it' b'a' b'godly' b'variety' b'of' b'mere' b'administrative' b'populations' b'.' b'These' b'season' b'were'
    b'present' b'by' b'each' b'other' b'.' b'Two' b'of' b'the' b'chicks' b'discusses' b'various' b'color' b'kakapo' b'in' b'their' b'by' b'<unk>' b',' b'socially' b'when'
    b'they' b'handles' b',' b'and' b'may' b'be' b'closely' b'treated' b'to' b'crush' b'large' b'seed' b'starlings' b'.' b'They' b'holds' b'players' b',' b'many' b'starling'
    b'who' b'are' b'involved' b'like' b'even' b'<unk>' b'even' b'.' b'misunderstanding' b'the' b'records' b'remnants' b'only' b'prove' b'during' b'the' b'country' b',' b'playing' b'e.g.'
    b'environments' b',' b'<unk>' b',' b'Assault' b',' b'<unk>' b',' b'natural' b',' b'and' b'even' b'referenced' b'paint' b'takes' b'to' b'women' b',' b'so' b'nectar'
    b'were' b'not' b'flanked' b'.' b'"' b'no' b'sabotage' b':' b'<eos>' b'Bowen' b'(' b'after' b'cleaning' b'as' b'food' b'.' b'<unk>' b')' b'who' b'has'
    b'made' b'on' b'a' b'12' b'to' b'nuclei' b'of' b'a' b'planet' b'has' b'been' b'.' b'Patterson' b'again' b'gets' b'to' b'enter' b'the' b'entire' b'offensive'
    b'wounded' b'on' b'Bonga' b'nest' b'of' b'their' b'light' b'step' b'.' b'Although' b'nobody' b'won' b'reports' b'in' b'a' b'very' b'close' b'racing' b'starling' b','
    b'the' b'most' b'observation' b'do' b'not' b'go' b'across' b'a' b'flock' b'.' b'The' b'male' b'on' b'each' b'time' b'across' b'oasis' b'can' b'be' b'meant'
    b'to' b'fund' b'and' b'internal' b'it' b'to' b'two' b'females' b',' b'the' b'including' b'that' b',' b'with' b'intermediate' b'white' b'@-@' b'offspring' b'sorts' b','
    b'lacking' b'ago' b'its' b'bodies' b'in' b'95' b'years' b'between' b'<eos>' b'speculation' b'and' b'the' b'fed' b'caused' b'Ceres' b',' b'with' b'fewer' b'other' b'varying'
    b'starlings' b'.' b'It' b'is' b'particularly' b'suggesting' b'that' b'he' b'wished' b'to' b'be' b'another' b'to' b'attempt' b'to' b'be' b'greater' b'when' b'Banai' b'Castro'
    b'introduces' b'cognition' b'to' b'create' b'<unk>' b',' b'and' b'it' b'can' b'be' b'Walker' b'(' b'except' b')' b'and' b'he' b'must' b'second' b'standards' b'it'
    b'search' b';' b'they' b'were' b'also' b'able' b'to' b'be' b'so' b'found' b'.' b'One' b'were' b'rarely' b'<unk>' b'on' b'revelation' b'to' b'protect' b'why'
    b'this' b'observation' b'of' b'female' b'scent' b'Shum' b',' b'turning' b'specially' b'(' b'D.' b'<unk>' b'husband' b')' b',' b'the' b'more' b'green' b'factors' b'normally'
    b'in' b'that' b'previous' b'angle' b'with' b'"' b'since' b'"' b'illusion' b'up' b'by' b'affordable' b'practices' b'of' b'the' b'male' b'in' b'the' b'birds' b'but'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 243.5
    loss: 5.168
    elapsed time (seconds): 163.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  51.741 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
