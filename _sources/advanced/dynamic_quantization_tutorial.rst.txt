.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'(' b'152' b'nmi' b')' b'in' b'his' b'<unk>' b'.' b'It' b'was' b'expected' b'by' b'other' b'lesser' b'spots' b'positioned' b'by' b'<unk>' b',' b'then'
    b'represented' b'by' b'FIA' b'end' b'on' b'23' b'February' b'1866' b'.' b'To' b'nothing' b'such' b'as' b'Applying' b'Cyrus' b',' b'boreal' b'players' b'included' b'2'
    b'works' b'a' b'total' b'of' b'<unk>' b',' b'at' b'decree' b'University' b',' b'three' b'Winston' b'pretext' b',' b'scored' b'Ceres' b'in' b'the' b'15th' b'century'
    b'.' b'Nadine' b'bohemica' b'and' b'Butch' b'Worthington' b'would' b'be' b'viewed' b'as' b'the' b'first' b'lead' b'found' b'to' b'produce' b'legislative' b'removing' b'portion' b'of'
    b'its' b'will' b'.' b'Australia' b'also' b'fallen' b'successful' b'tickets' b'from' b'other' b'emperors' b'to' b'begin' b'back' b'starting' b'in' b'an' b'poll' b'to' b'a'
    b'regular' b'date' b',' b'and' b'the' b'four' b'evidence' b'staring' b'at' b'you' b'of' b'the' b'cost' b'of' b'lifestyle' b'he' b'was' b'Ban' b'<unk>' b','
    b'<unk>' b'of' b'<unk>' b',' b"'" b'philosophical' b'school' b'teams' b'in' b'1851' b',' b'and' b'King' b'Ahmed' b'were' b'once' b'proposed' b'only' b'as' b'better'
    b'as' b'one' b'scenario' b'.' b'In' b'a' b'subsequent' b'survey' b'a' b'<unk>' b'attempt' b'to' b'be' b"'s" b'circulate' b',' b'and' b'drummer' b'Fraser' b'of'
    b'the' b'<unk>' b'ceremony' b'introduced' b'<unk>' b';' b'this' b'expanded' b'percentage' b'necessary' b'618' b'policy' b'by' b'providing' b'further' b'control' b'of' b'Ceres' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'The' b'city' b'began' b'into' b'briefly' b'considered' b'of' b'J\xc3\xbcrgen' b'Limoux' b',' b'6' b'@,@'
    b'<unk>' b'fans' b',' b'taking' b'over' b'400' b'million' b'years' b',' b'and' b'urged' b'working' b'on' b'other' b'records' b'.' b'All' b'major' b'amounts' b'of'
    b'ideas' b'were' b'used' b'to' b'work' b'to' b'support' b'Faith' b',' b'<unk>' b',' b'Official' b',' b'and' b'making' b'eleven' b',' b'at' b'the' b'time'
    b',' b'being' b'disappointed' b'to' b'have' b'reached' b'older' b'times' b'.' b'One' b'such' b'Banai' b'of' b'Katie' b'was' b'very' b'efficient' b'after' b'the' b'developer'
    b'travel' b'against' b'"' b'care' b'of' b'his' b'freedom' b'and' b'tail' b'"' b'.' b'In' b'December' b'2006' b',' b'a' b'combined' b'stay' b'in' b'Ireland'
    b'prevented' b'fresh' b'WSDOT' b'who' b'control' b'1422' b'player' b'songs' b'to' b'be' b'dressed' b'(' b'mostly' b'bounded' b'in' b'his' b'efforts' b'between' b'Basketball' b'school'
    b'and' b'folk' b'Planck' b'coastline' b',' b'as' b'he' b'used' b'many' b'towns' b'at' b'a' b'penis' b'thematically' b'from' b'binomial' b'professionals' b'at' b'<unk>' b'and'
    b'<unk>' b'was' b'"' b'in' b'a' b'attempt' b'to' b'fill' b'us' b'and' b'<unk>' b'of' b'the' b'offseason' b'"' b',' b'and' b'became' b'<unk>' b'for'
    b'topics' b'winning' b'by' b'monomers' b',' b'so' b'there' b'are' b'no' b'palaces' b'to' b'composition' b'pause' b'.' b'<eos>' b'In' b'his' b'Greek' b'article' b'with'
    b'the' b'academy' b',' b'"' b'Clement' b'descriptions' b'valley' b'concerned' b'limbs' b'"' b'(' b'incarcerated' b'<unk>' b')' b'"' b'Suffering' b'winter' b'in' b'species' b'"'
    b')' b'the' b'object' b'\xe2\x80\x94' b'and' b'learning' b',' b'.' b'Also' b'that' b'year' b',' b'their' b'brother' b'named' b'Liu' b"'Malley" b'devoted' b'to' b'13'
    b'%' b'of' b'its' b'full' b'crew' b'.' b'Overall' b',' b'it' b'was' b'mixed' b'in' b'1887' b',' b'and' b'succeeded' b'the' b'shrunk' b'desired' b'at'
    b'a' b'half' b'officially' b'far' b'in' b'his' b'speech' b'.' b'Although' b'new' b'records' b',' b'the' b'kakapo' b'correspondent' b'is' b'thought' b'to' b'be' b'active'
    b'in' b'the' b'Republic' b'of' b'funny' b'.' b'This' b'value' b'has' b'accidentally' b'served' b'an' b'west' b'T30s' b'in' b'their' b'career' b',' b'two' b'subspecies'
    b'collected' b'it' b'resolution' b',' b'before' b'they' b'are' b'paved' b'in' b'multiple' b'different' b'stories' b',' b'but' b'in' b'particular' b'they' b'were' b'spy' b'.'
    b'When' b'the' b'game' b'is' b'a' b'alto' b'interchange' b'to' b'develop' b',' b'they' b'angry' b'their' b'eyes' b'for' b'genres' b',' b'improve' b'it' b'with'
    b'their' b'head' b'being' b'handled' b'.' b'A' b'lined' b'rests' b'element' b'was' b'more' b'substantially' b'best' b',' b'much' b'of' b'which' b'away' b'into' b'debated'
    b'that' b'he' b'gets' b',' b'along' b'in' b'a' b'composite' b'note' b'Subhash' b'because' b'they' b'shall' b'be' b'Gwendolen' b'and' b'Caesar' b'made' b'one' b'or'
    b'him' b'.' b'As' b'slave' b'suit' b'production' b'it' b'are' b'being' b'more' b'successful' b',' b'they' b'would' b'be' b'distinguished' b'by' b'a' b'second' b'marriage'
    b'"' b'that' b'seem' b'or' b'far' b'natural' b'water' b'with' b'it' b'for' b'their' b'258' b'"' b'.' b'The' b'American' b'inscription' b'was' b'praised' b'by'
    b'the' b'distinct' b'class' b'contractor' b'particularly' b'elsewhere' b'.' b'Recent' b'American' b'deals' b'have' b'great' b'random' b'under' b'each' b'minutes' b',' b'during' b'the' b'other'
    b'and' b'therefore' b'mild' b'networks' b'.' b'<eos>' b'The' b'planet' b'was' b'usually' b'discovered' b'in' b'North' b'America' b'on' b'the' b'comfortable' b'country' b'concert' b'on'
    b'26' b'October' b'(' b'27' b'@.@' b'3' b'in' b')' b',' b'though' b'Asomtavruli' b'is' b'most' b'aggressive' b',' b'appearing' b'at' b'2' b'million' b'in'
    b'that' b'year' b'.' b'<unk>' b',' b'the' b'feathers' b'Field' b"'s" b'17th' b'singles' b'(' b'1115' b')' b'have' b'a' b'involvement' b'in' b'quantum' b'equivalent'
    b',' b'features' b'with' b'13' b'%' b'of' b'50' b'feet' b'(' b'160' b'ft' b')' b',' b'and' b'praised' b'a' b'female' b'increase' b'post' b'@-@'
    b'third' b'2' b'seconds' b',' b'in' b'which' b'females' b'are' b'and' b'base' b"'" b'heroism' b'soon' b'distributed' b'in' b'a' b'fight' b'around' b'Perrin' b'.'
    b'<eos>' b'bay' b':' b'Campers' b',' b'Been' b',' b'gas' b',' b'a' b'Mesolithic' b'low' b'starlings' b'controversy' b',' b'was' b'dead' b'plane' b',' b'high'
    b'@-@' b'lived' b',' b'unpopular' b',' b'pathetic' b',' b'detachment' b',' b'The' b'Magdalena' b'energy' b',' b'<unk>' b'or' b'wives' b'have' b'feature' b'eye' b'membrane'
    b'(' b'may' b'reinforce' b'@-@' b'Parliamentary' b'count' b')' b',' b'secret' b'or' b'another' b'flame' b'fresh' b'swings' b'over' b'the' b'other' b'space' b'Airport' b'.'
    b'The' b'black' b'colour' b'previously' b'<unk>' b'and' b'long' b'occurs' b'to' b'europium' b',' b'75' b'or' b'slightly' b'more' b'so' b'stallion' b',' b'Disston' b'they'
    b'only' b'always' b'forced' b'where' b'they' b'are' b'similar' b'to' b'.' b'Sennacherib' b',' b'context' b',' b'dry' b',' b'worms' b',' b'or' b'feeding' b'bodies'
    b'misleading' b'Especially' b'.' b'When' b'it' b'is' b'narrow' b',' b'they' b'are' b'fourth' b'bound' b'.' b'It' b'also' b'makes' b'three' b'an' b'number' b'of'
    b'apparent' b'times' b',' b'worse' b'or' b'spectral' b',' b'more' b'waist' b'loaned' b'such' b'for' b'their' b'wife' b'salt' b'.' b'Likewise' b',' b'it' b'does'
    b'not' b'do' b'so' b'more' b'paved' b',' b'and' b'every' b'similarly' b'head' b'can' b'be' b'able' b'to' b'protect' b'his' b'caps' b'.' b'The' b'kakapo'
    b'Pune' b'grows' b'to' b'the' b'plot' b'as' b'they' b'are' b'introduced' b'to' b'win' b',' b'so' b'when' b',' b'it' b'appears' b'to' b'parallel' b'to'
    b'nearby' b'when' b'they' b'will' b'have' b'actually' b'go' b'to' b'views' b'.' b'The' b'function' b'of' b'the' b'allows' b'structure' b'include' b'the' b'primary' b'mid'
    b'@-@' b'planet' b'.' b'<eos>' b'Dublin' b'precluded' b'all' b'of' b'females' b"'" b'eldest' b'declining' b'studies' b'\xe2\x80\x94' b'explaining' b'that' b'if' b'it' b'also' b'hit'
    b'4' b'.' b'It' b'is' b'no' b'dominant' b'location' b'that' b'there' b'may' b'be' b'a' b'bird' b'@-@' b'like' b'female' b',' b'Rabbi' b'segregation' b'<unk>'
    b',' b'which' b'are' b'not' b'small' b'in' b'primarily' b'genetic' b'lines' b'and' b'manufacture' b'.' b'As' b'either' b'types' b'into' b'themselves' b'where' b'they' b'were'
    b'established' b'on' b'public' b',' b'Felicia' b'they' b'would' b'bid' b'all' b'they' b'in' b'that' b'male' b',' b'it' b'picked' b'.' b'In' b'1940' b'the'
    b'gills' b'exist' b'throughout' b'a' b'pair' b'of' b'northern' b'<unk>' b',' b'usually' b'on' b'Geastrum' b',' b'and' b'lieutenants' b'even' b'alter' b'following' b'striving' b'one'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 236.0
    loss: 5.168
    elapsed time (seconds): 164.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  45.737 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
