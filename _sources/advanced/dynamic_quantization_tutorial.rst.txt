.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b"'s" b'third' b'linear' b'season' b',' b'developed' b'by' b'Jordan' b',' b'who' b'was' b'a' b'highly' b'upset' b'complex' b'school' b'known' b'to' b'pit' b'entirely'
    b'.' b'<eos>' b'Following' b'his' b'unsuccessful' b'novel' b',' b'Shigeru' b'Rush' b'admitted' b'for' b'summer' b'minor' b'party' b'in' b'the' b'region' b'to' b'apply' b'my'
    b'medium' b'@-@' b'season' b'support' b'for' b'<unk>' b'of' b'Geography' b'.' b'This' b'hope' b'was' b'received' b'by' b'Captain' b'<unk>' b'realised' b'that' b'"' b'It'
    b'was' b']' b'there' b'to' b'be' b'so' b'<unk>' b'and' b'uttered' b'.' b'"' b'Despite' b'the' b'acronym' b'Jagannadh' b'struck' b'a' b'week' b'and' b'<unk>'
    b'work' b'from' b'Enix' b'.' b'Ryan' b'Maria' b'on' b'the' b'Four' b'floor' b'started' b'his' b'works' b'to' b'long' b'maximum' b'support' b'.' b'underdog' b'a'
    b'author' b'such' b'as' b'My' b'Experience' b'initiative' b',' b'Keith' b'Evans' b',' b'and' b'their' b'response' b'to' b'stumbled' b'developed' b'from' b'intelligence' b'with' b'Stupnitsky'
    b'.' b'When' b'new' b'political' b'reactions' b'first' b'held' b'indeed' b'exam' b',' b'the' b'Western' b'Light' b'Division' b'are' b'also' b'stated' b'of' b'his' b'finest'
    b'request' b'for' b'his' b'treatment' b',' b'or' b'the' b'two' b'more' b'powerful' b'male' b'adaptation' b'.' b'<eos>' b'As' b'idle' b',' b'playoffs' b',' b'critics'
    b'and' b'Zimbabwe' b'indicate' b'to' b'Washington' b"'" b'cases' b'.' b'Some' b'of' b'G.' b'Wonder' b"'s" b'role' b'won' b'stories' b'"' b'cleaning' b'<unk>' b'"'
    b'operations' b'made' b'to' b'manage' b'relying' b'an' b'seventy' b'@-@' b'year' b'Cemetery' b'to' b'film' b'it' b'.' b'The' b'U2' b'discovery' b'sensitive' b'that' b'it'
    b'is' b'now' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'First' b'Zygoballus' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Ceres' b'traditionally' b'bequeathed' b'remixes' b'of'
    b'the' b'heart' b'of' b'a' b'rapid' b'incident' b'to' b'the' b'Clash' b'popularity' b'.' b'When' b'the' b'planet' b'were' b'second' b'@-@' b'star' b',' b'Democratic'
    b'City' b'is' b'a' b'actual' b'item' b'facilitated' b'to' b'be' b'turned' b'to' b'several' b'major' b'<unk>' b'.' b'fianc\xc3\xa9e' b'3D' b'expansions' b'are' b'custom' b','
    b'notably' b'whether' b'people' b'and' b'mannerisms' b'are' b'considered' b'to' b'be' b'acceptable' b',' b'which' b'included' b'Nielsen' b'Part' b'in' b'both' b'Songs' b'horses' b','
    b'within' b'example' b'by' b'Hayhurst' b',' b'can' b'be' b'able' b'to' b'produce' b'the' b'noir' b'common' b'Ministry' b'of' b'Javed' b'.' b'O' b'One' b'<unk>'
    b'is' b'now' b'considered' b'to' b'be' b'their' b'best' b'.' b'However' b',' b'cool' b'steps' b'for' b'phosphate' b'studios' b'also' b'used' b'about' b'a' b'few'
    b'points' b'and' b'per' b'tube' b'of' b'their' b'third' b'body' b';' b'they' b'arise' b'by' b'unpopularity' b',' b'is' b'so' b'equally' b'poorly' b'making' b'23'
    b'months' b',' b'or' b'of' b'ibotenic' b'gallons' b'.' b'A' b'strong' b'<unk>' b'reaction' b'with' b'finds' b'a' b'flock' b'or' b'phrase' b',' b'sir' b','
    b'and' b'muscarine' b"'s" b'focus' b'with' b'when' b'not' b',' b'are' b'presumed' b'good' b'.' b'The' b'chief' b'claim' b'also' b'is' b'thereafter' b'drinking' b'and'
    b'whether' b'the' b'heat' b'starts' b'and' b'the' b'poor' b'proposed' b'the' b'female' b'.' b'He' b'then' b'developed' b'central' b',' b'and' b'it' b'calls' b'them'
    b',' b'he' b'reached' b'decline' b'work' b'and' b'allow' b'it' b"'s" b'trouble' b'.' b'When' b'filming' b',' b'they' b"'ll" b'hand' b'interpreted' b'alone' b','
    b'and' b'windows' b'forage' b'up' b'a' b'substantial' b'pursuers' b'for' b'caste' b'<unk>' b'.' b'This' b'explosive' b'colour' b'intends' b'to' b'have' b'his' b'thoughts' b','
    b'which' b'he' b'went' b',' b'because' b'food' b'social' b'clouds' b'comes' b'the' b'day' b'away' b'.' b'On' b'vocals' b',' b'they' b'operate' b'contact' b'as'
    b'the' b'case' b'beaver' b',' b'albeit' b'well' b'as' b'"' b'acids' b'"' b'most' b'of' b'them' b'.' b'<unk>' b'classified' b'to' b'strike' b'<unk>' b','
    b'a' b'young' b'eukaryotic' b'typical' b'angle' b'of' b'them' b';' b'the' b'Oxford' b'word' b'the' b'genus' b'naked' b'School' b',' b'after' b'a' b'mixture' b'of'
    b'<unk>' b'.' b'Instead' b',' b'<unk>' b'D.J.' b'Ward' b'is' b'also' b'featured' b'shovel' b'in' b'2008' b',' b'until' b'recent' b'five' b'plays' b'Villiers' b','
    b'a' b'compact' b'fundamentalist' b'cycle' b'can' b'be' b'involved' b'by' b'pretend' b',' b'not' b'more' b'lies' b'to' b'that' b'same' b'they' b'we' b'attend' b'before'
    b'he' b'would' b'be' b'close' b'to' b'death' b'.' b'It' b'may' b'hold' b'ppm' b'and' b'sell' b'into' b'short' b'animals' b'sister' b',' b'who' b'possessed'
    b'central' b"'s" b'fate' b'.' b'The' b'teller' b'Societies' b'survivor' b'Louise' b'S.' b'<unk>' b'(' b'The' b'death' b'of' b'Ceres' b')' b'is' b'a' b'passenger'
    b'hovers' b'for' b'centerline' b'botanist' b'@-@' b'Gracie' b',' b'after' b'<unk>' b'Edmond' b'singly' b'(' b'who' b'<unk>' b'other' b'<unk>' b'39' b')' b',' b'being'
    b'leaves' b'upon' b'alone' b'on' b'behalf' b'on' b'his' b'hand' b'.' b'<unk>' b'<unk>' b'on' b'Arab' b'times' b',' b'a' b'unusually' b'Petersburg' b'handle' b'concentrates'
    b'in' b'exchange' b'by' b'Wica' b',' b'even' b'light' b'Macbeth' b'.' b'The' b'player' b'discovers' b'means' b'to' b'a' b'doubt' b'on' b'whom' b'"' b'everyone'
    b'can' b'understand' b'small' b'recovery' b'"' b'.' b'Christopher' b'<unk>' b'this' b'is' b'depends' b'in' b'compounded' b'their' b'own' b',' b'a' b'nest' b'that' b'are'
    b'Odaenathus' b'gets' b'by' b'amphibians' b'.' b'Another' b'taste' b'shared' b'requirements' b'as' b'they' b'they' b'Hurley' b'understand' b'guilty' b';' b'the' b'boy' b"'s" b'four'
    b'<unk>' b'loss' b'will' b'be' b'expressed' b'or' b'consequently' b'reads' b'a' b'account' b'to' b'keep' b'the' b'desired' b'effect' b'arenas' b'they' b'dies' b'apart' b'.'
    b'Such' b'for' b'this' b'goes' b'is' b'possibly' b'an' b'boss' b'by' b'134' b'to' b'investigate' b'memory' b'of' b'AML' b',' b'which' b'are' b'full' b','
    b'possibly' b'still' b'even' b'katra' b',' b'before' b'the' b'location' b'described' b'in' b'the' b'mean' b'process' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Meteorological' b'descriptions'
    b'=' b'=' b'<eos>' b'<eos>' b'The' b'validity' b'of' b'some' b'games' b',' b'which' b'dialogue' b'folds' b'9000' b'tall' b',' b'may' b'help' b'when' b'the'
    b'creates' b'components' b'she' b'opted' b'to' b'convey' b'the' b'object' b'of' b'silk' b'.' b'The' b'advanced' b'eye' b'is' b'fine' b',' b'and' b'not' b'from'
    b'the' b'other' b'concern' b'together' b',' b'soon' b'when' b'they' b'may' b'wicked' b'the' b'better' b'flavour' b'.' b'They' b'claim' b'that' b',' b'they' b'may'
    b'eat' b'one' b'if' b'manuscripts' b'are' b'Gofraid' b'variation' b'by' b'other' b'nations' b'are' b'frequent' b'depending' b'on' b'their' b'favor' b'at' b'lamin' b'these' b'times'
    b',' b'although' b'<unk>' b'willingness' b'to' b'cancel' b'options' b'.' b'The' b'version' b'between' b'these' b'characters' b'is' b'usually' b'criticised' b'by' b'objects' b'.' b'Further'
    b',' b'they' b'may' b'be' b'tourist' b',' b'making' b'them' b'from' b'<unk>' b'by' b'all' b'triangle' b'and' b'cautious' b'trees' b'.' b'<eos>' b'In' b'Measuring'
    b'(' b'lasers' b')' b'two' b'conversations' b'appear' b'agriculture' b'near' b'happening' b'and' b'<unk>' b'on' b'all' b'regions' b'.' b'Males' b'taught' b'other' b'quality' b'of'
    b'other' b'Barbarian' b'Brown' b'as' b'they' b'reduce' b'themselves' b'at' b'night' b'(' b'as' b'heat' b'when' b'also' b',' b'some' b'sectarian' b'starlings' b'use' b'from'
    b'ecosystems' b')' b'in' b'causing' b'die' b'when' b'they' b'"' b'mature' b'"' b')' b',' b'and' b'add' b'them' b'the' b'divine' b'deal' b'borrowed' b'before'
    b'.' b'Since' b'they' b'have' b'no' b'<unk>' b'process' b',' b'they' b'can' b'have' b'able' b'to' b'prevent' b'their' b'room' b'-' b'generates' b'they' b'offer'
    b'to' b'be' b'overlooked' b'to' b'find' b'around' b'mutual' b'consequences' b'.' b'Among' b'people' b'are' b'responsible' b'between' b'and' b'they' b'always' b'<unk>' b'<unk>' b'.'
    b'<eos>' b'Because' b'Ceres' b'directive' b',' b'state' b'by' b'Yeats' b'came' b'directly' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'and'
    b'a' b'eucalypts' b'especially' b'troopship' b',' b'but' b'does' b'learned' b'of' b'them' b'.' b'They' b'typically' b'depict' b'organisms' b'in' b'some' b'ways' b'plant' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 228.0
    loss: 5.164
    elapsed time (seconds): 158.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  30.457 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
