.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'pew' b'and' b'laying' b'plans' b'forced' b'them' b'to' b'theorized' b'northwest' b'hacking' b'to' b'the' b'Ice' b'Hill' b',' b'producing' b'it' b'back' b'to' b'Delaborde'
    b'.' b'<eos>' b'Proteins' b'introduced' b'poorly' b'Kang' b'jurisdictions' b',' b'dissolve' b'six' b'months' b',' b'in' b'than' b'the' b'islands' b'cheating' b'in' b'its' b'story'
    b'.' b'Over' b'either' b'critics' b'and' b'bat' b'stumps' b'do' b'not' b'spread' b'the' b'imposition' b'.' b'According' b'to' b'Sylvia' b'Levy' b',' b'merchant' b'mycologist'
    b'Burt' b'dismissed' b'<unk>' b'for' b'a' b'interest' b'to' b'The' b'year' b'.' b'As' b'he' b'wrote' b'twice' b'Liberal' b'Field' b'Banksia' b'clarified' b'that' b'supportive'
    b'bus' b'co' b'@-@' b'Lithuanian' b'benefits' b'several' b'pictures' b'primarily' b'they' b'triangles' b'to' b'make' b'this' b'opportunity' b',' b'and' b'to' b'explore' b'that' b'too'
    b'perfect' b'.' b'But' b'they' b'have' b'wanted' b'to' b'displace' b'his' b'comparable' b'motive' b'and' b'their' b'help' b',' b'all' b'characters' b'in' b'trying' b'to'
    b'catch' b'after' b'Perugia' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Culture' b'=' b'=' b'<eos>' b'<eos>' b'Mosley' b'signed' b'3' b'in' b'(' b'full' b'Quebec'
    b')' b'Kansas' b'in' b'2015' b',' b'until' b'the' b'Portree' b'Years' b'of' b'The' b'Chicago' b'295' b'year' b'(' b'2006' b'and' b'August' b')' b'could'
    b'be' b'separately' b'to' b'the' b'"' b'mad' b'supply' b'"' b'.' b'Larwood' b'sent' b'incorporate' b'a' b'BMW' b'overall' b'and' b'became' b'two' b'short' b'<unk>'
    b'from' b'the' b'twentieth' b'Division' b',' b'and' b'connected' b'under' b'the' b'Soviet' b'Union' b',' b'and' b'to' b'protect' b'the' b'issue' b'of' b'<unk>' b'.'
    b'Ronald' b'di' b'<unk>' b'handled' b'its' b'degree' b'in' b'Segontium' b'throughout' b'a' b'00' b'years' b'a' b'game' b'in' b'diameter' b'after' b'Elements' b',' b'when'
    b'scarring' b'could' b'be' b'patrolling' b'.' b'The' b'FISA' b"'s" b'game' b'moved' b'in' b'to' b'run' b',' b'ending' b'his' b'crime' b'his' b'<unk>' b'('
    b'1125' b')' b',' b'which' b'numerically' b'equally' b'referred' b'to' b'German' b'visions' b'for' b'hierarchical' b'books' b'.' b'The' b'official' b'Jews' b'pulled' b'Waterfall' b'surprisingly'
    b'awards' b'countries' b'and' b'his' b'ability' b'.' b'Initial' b'critics' b'<unk>' b'over' b'commercial' b'prisoners' b'in' b'scheduling' b',' b'and' b'at' b'least' b'of' b'16'
    b'years' b'before' b'he' b"'s" b'interests' b',' b'bring' b'one' b'good' b'@-@' b'lived' b'.' b'The' b'departure' b'of' b'bunch' b'closed' b'by' b'better' b'direction'
    b'in' b'the' b'strength' b'of' b'Polish' b'basketball' b'or' b'in' b'the' b'Greek' b'islands' b',' b'known' b'as' b'lives' b',' b'model' b',' b'elsewhere' b','
    b'irrelevant' b',' b'<unk>' b'<unk>' b',' b'kind' b'of' b'prevailing' b'Farber' b',' b'<unk>' b'A' b'paintings' b',' b'Gardens' b'tapes' b'and' b'Rowson' b',' b'including'
    b'oncoming' b'Bow' b',' b'they' b'are' b'widespread' b'attempts' b'to' b'345' b'his' b'tomb' b'.' b'Sal' b'Boom' b'Bang' b'Wood' b'published' b'sales' b'substances' b'by'
    b'things' b'under' b'I.' b'Graham' b'has' b'set' b'Officially' b':' b'a' b'good' b'population' b'in' b'his' b'database' b'by' b'Broadhurst' b',' b'a' b'period' b','
    b'and' b'late' b'characteristics' b'as' b'King' b'James' b'd' b'Lee' b'who' b'taught' b'his' b'son' b'Wilson' b'<unk>' b'in' b'population' b'of' b'these' b'states' b'of'
    b'Venus' b'.' b'By' b'manuscripts' b',' b'Marlborough' b'cut' b'Mexico' b',' b'a' b'successful' b'conflict' b'fell' b'in' b'June' b';' b'it' b'was' b'influential' b'as'
    b'a' b'actual' b'secular' b'sphere' b'of' b'Georgetown' b',' b'Social' b'B' b'Racing' b'on' b'October' b'7' b',' b'1994' b'.' b'As' b'of' b'2012' b','
    b'the' b'Crosby' b'District' b'Constitution' b'wore' b'an' b'coastal' b'academic' b'performance' b',' b'which' b'allowed' b'over' b'one' b'determination' b'of' b'the' b'design' b'of' b'worship'
    b'may' b'be' b'chosen' b'to' b'persuade' b'a' b'hat' b',' b'like' b'a' b'year' b'meant' b'to' b'take' b'it' b'to' b'the' b'game' b'.' b'Nevertheless'
    b',' b'the' b'Yuan' b'family' b"'s" b'affiliates' b'and' b'"' b'though' b'the' b'<unk>' b'held' b'the' b'way' b'of' b'scary' b',' b'religious' b'hopes' b'in'
    b'the' b'year' b'...' b'in' b'last' b'place' b'It' b'perhaps' b'.' b'"' b'<eos>' b'At' b'Hibari' b"'s" b'major' b'computers' b',' b'Mosley' b'was' b'heavily'
    b'<unk>' b',' b'though' b'frequently' b'now' b'spent' b'over' b'12' b'%' b'of' b'5' b'while' b'moving' b'to' b'Chelsea' b"'s" b'editorial' b'position' b'.' b'The'
    b'serials' b'series' b'would' b'be' b'found' b'by' b'Governor' b'James' b'ESA' b'for' b'a' b'horizontal' b',' b'similar' b'that' b'Brooks' b'had' b'appealed' b'to' b'kept'
    b'fall' b'.' b'<eos>' b'By' b'June' b'31' b',' b'2010' b',' b'four' b'men' b'observed' b'the' b'175' b'Independent' b'letters' b'in' b'November' b'and' b'February'
    b'1907' b'.' b'Quite' b'two' b'percent' b'of' b'Stamford' b'was' b'expected' b'for' b'localities' b',' b'including' b'Semaphore' b'150' b'percent' b'(' b'thick' b')' b','
    b'a' b'network' b'process' b',' b'(' b'same' b'only' b'by' b'1' b'%' b')' b',' b'equipment' b'to' b'speak' b'with' b'Slovenes' b',' b'man' b'pregnant'
    b',' b'and' b'flotation' b'(' b'Peterson' b')' b'.' b'It' b'also' b'begins' b'under' b'NC' b'State' b"'s" b'origin' b'.' b'In' b'December' b'he' b'sent'
    b'"' b'The' b'imminent' b'soul' b'to' b'Activision' b'...' b'food' b'in' b'%' b'north' b'too' b'<unk>' b',' b'this' b'simple' b'country' b'will' b'be' b'short'
    b'and' b'land' b'.' b"'" b'<eos>' b'"' b'The' b'Norse' b'@-@' b'crisis' b'commissioned' b'into' b'the' b'Griffin' b'District' b'at' b'Gerald' b'Political' b'Source' b"'s"
    b'Old' b'978' b'Relief' b'cable' b'playoffs' b',' b'and' b'restrained' b'concurrent' b'rate' b'to' b'remain' b'on' b'a' b'8' b'minute' b'May' b'ending' b'to' b'\xc2\xa3'
    b'640' b'million' b'and' b'relied' b'.' b'Tufaro' b'later' b'has' b'deep' b'paid' b'significant' b'damage' b',' b'the' b'new' b'Following' b'<unk>' b'for' b'pesos' b'engines'
    b',' b'<unk>' b'979' b',' b'<unk>' b',' b'<unk>' b',' b'Fiji' b',' b'policies' b',' b'Edmund' b',' b'<unk>' b',' b'<unk>' b',' b'and' b'<unk>'
    b',' b'After' b'1958' b'.' b'<eos>' b'However' b',' b'<unk>' b'was' b'capped' b'by' b'"' b'a' b'hamlet' b'of' b'traffic' b'"' b',' b'though' b'this'
    b'application' b'of' b'<unk>' b'has' b'no' b'illustrations' b'.' b'This' b'explorer' b'takes' b'six' b'years' b'to' b'hold' b'possible' b'himself' b'in' b'the' b'Gallup' b'community'
    b',' b'which' b'circulated' b'water' b',' b'bringing' b'handling' b'famously' b',' b'and' b'devastating' b'pieces' b',' b'in' b'Rocket' b'v.' b'de' b'Janeiro' b'.' b'A'
    b'name' b'that' b'infect' b'winter' b'behaviour' b',' b'of' b'Exploration' b',' b'1075' b',' b'hoping' b'to' b'escape' b'by' b'Tamaulipas' b',' b'and' b'allow' b'an'
    b'solution' b'that' b'the' b'R\xc3\xa9union' b'KPA' b"'s" b'executive' b'would' b'be' b'seen' b'by' b'<unk>' b'.' b'O' b"'t" b'have' b'by' b'the' b'public' b'and'
    b':' b'"' b'[' b'...' b']' b'we' b"'ll" b'handed' b'up' b'he' b'is' b'<unk>' b'or' b'policies' b',' b'there' b'has' b'been' b'one' b'of'
    b'his' b'third' b'choice' b'to' b'boost' b'for' b'both' b'life' b'.' b'"' b'After' b'he' b'left' b'this' b'conservative' b'offensive' b',' b'seizing' b'puzzles' b'in'
    b'general' b'career' b',' b'said' b'the' b'world' b'should' b'be' b'neglected' b'.' b'The' b'sudden' b'assessment' b'that' b'Echmarcach' b'averaged' b'his' b'sword' b'towards' b'an'
    b'planet' b'for' b'the' b'Non' b'@-@' b'election' b',' b'because' b'Brown' b'died' b'the' b'<unk>' b'.' b'In' b'helmets' b',' b'the' b'convict' b'rejected' b'the'
    b'largest' b'candidates' b'No.' b'72' b'@-@' b'sell' b',' b'as' b'he' b'called' b'it' b'as' b'"' b'pain' b'in' b'the' b'area' b'"' b'.' b'He'
    b'also' b'stated' b'that' b'under' b'oath' b',' b'many' b'of' b'35' b'games' b'of' b'absorbs' b'delegates' b'for' b'hiatus' b'in' b'his' b'course' b'.' b'The'
    b'behest' b'of' b'the' b'city' b'in' b'1958' b'is' b'the' b'<unk>' b'Ron' b'Project' b'<unk>' b'in' b'Karnataka' b'.' b'When' b'he' b'members' b'pointed' b'about'
    b'the' b'IIFA' b'Cricket' b'Union' b',' b'Ross' b'felt' b'using' b'Walpole' b"'s" b'personal' b'cause' b',' b'and' b'expenses' b'on' b'Roman' b'tolerance' b'could' b'produce'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 249.5
    loss: 5.168
    elapsed time (seconds): 174.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  8.685 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
