.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'at' b'a' b'number' b'of' b'Cd' b'and' b'summers' b'to' b'make' b'effect' b'football' b',' b'though' b'World' b'War' b'punishment' b'wrote' b'they' b'run' b'again'
    b'than' b'a' b'proposed' b'eye' b'ignoring' b'in' b'red' b'@-@' b'way' b',' b'such' b'as' b'<unk>' b'wider' b',' b'Mayor' b'Technology' b',' b'Duke' b'Powell'
    b'<unk>' b',' b'Madame' b'gusts' b',' b'Republicans' b'representative' b'and' b'Franz' b'Norwich' b'spectra' b'.' b'The' b'2015' b'theme' b'of' b'language' b'(' b'O' b"'t"
    b'Have' b'wreckage' b')' b'established' b'from' b'Jacmel' b'but' b're' b'@-@' b'<unk>' b'beds' b'from' b'Foreign' b'Europe' b'.' b'Ulster' b'1974' b'is' b'mostly' b'Notts'
    b'County' b',' b'although' b'two' b'years' b'after' b'ride' b'of' b'1890' b',' b'Ireland' b'inserted' b'<unk>' b'in' b'late' b'1939' b'argued' b'for' b'smugglers' b'.'
    b'<eos>' b'The' b'depression' b'of' b'inducing' b'two' b'savage' b'teams' b',' b'including' b'other' b'Christian' b'Services' b'(' b'being' b'over' b'stamped' b'as' b'Sun' b')'
    b',' b'the' b'astronomical' b'and' b'cultural' b'afforded' b'reelection' b'sees' b'as' b'this' b'means' b'Xuande' b'"' b'health' b'"' b'.' b'A' b'record' b'playing' b','
    b'only' b'from' b'Dandenong' b'and' b'47338' b'from' b'assembly' b'particular' b',' b'led' b'indication' b'on' b'the' b'basis' b'of' b'branches' b'.' b'In' b'1891' b','
    b'scientists' b'have' b'been' b'known' b'to' b'have' b'only' b'causes' b'less' b'than' b'one' b'long' b'and' b'limiting' b'when' b'that' b'is' b'referred' b'to' b'to'
    b'be' b'native' b',' b'by' b'the' b'Royal' b'Government' b'level' b'.' b'The' b'Rhine' b'Protector' b'@-@' b'bearing' b'genre' b"'" b'quotes' b'was' b'recognized' b'and'
    b'burned' b'to' b'the' b'First' b'Amateur' b'craft' b'and' b'the' b'village' b'of' b'Ulster' b'(' b'Sultan' b'of' b'<unk>' b')' b'.' b'<eos>' b'surpass' b'that'
    b'year' b',' b'Secretary' b'Hairan' b'Earl' b'(' b'bedrock' b'evidence' b')' b'is' b'remembered' b'the' b'first' b'church' b'.' b'In' b'the' b'same' b'year' b','
    b'it' b'was' b'largely' b'well' b'@-@' b'chairman' b'by' b'Australia' b'.' b'In' b'<unk>' b',' b'the' b'Irish' b'family' b'was' b'achieved' b'to' b'explorer' b'State'
    b',' b'although' b'in' b'addition' b'to' b'ruins' b'the' b'United' b'States' b'@-@' b'speaking' b'silver' b',' b'there' b'is' b'many' b'18' b'@-@' b'gun' b'solar'
    b'character' b'that' b'are' b'found' b'to' b'be' b'identified' b'.' b'The' b'only' b'steamboat' b'of' b'each' b'first' b'in' b'\xc3\x8dmar' b"'s" b'breeding' b'book' b'was'
    b'financed' b'by' b'Governor' b'spends' b'the' b'way' b'of' b'the' b'CGW' b'by' b'<unk>' b',' b'offences' b',' b'and' b'eastern' b'friction' b'thereafter' b'<unk>' b'.'
    b'<eos>' b'cluster' b'does' b'live' b'not' b'after' b'scale' b',' b'and' b'more' b'than' b'Cecil' b'years' b'.' b'<eos>' b'<unk>' b'Scleroderma' b'(' b'by' b'due'
    b'to' b',' b'Polish' b'at' b'least' b'two' b'years' b';' b'alpha' b'lands' b'spoof' b')' b',' b'the' b'Lower' b'second' b'on' b'the' b'50' b'%'
    b'was' b'today' b'awarded' b'the' b'formation' b'.' b'1911' b'become' b'probably' b'regarded' b'on' b'the' b'Republic' b'of' b'<unk>' b'location' b'west' b'of' b'Shah' b'.'
    b'After' b'Bol\xc3\xadvar' b"'s" b'tribe' b'of' b'home' b',' b'the' b'pews' b'were' b'performed' b'in' b'the' b'presence' b'of' b'the' b'general' b'planet' b'of' b'Ireland'
    b',' b'which' b'it' b'has' b'(' b'18' b'@.@' b'8' b')' b'.' b'Prior' b'to' b'not' b'destroys' b'<unk>' b'are' b'the' b'interest' b'of' b'comets'
    b'development' b',' b'<unk>' b'Rowley' b'.' b'A' b'unusual' b'prefrontal' b'is' b'wide' b'discovered' b'on' b'the' b'side' b'of' b'each' b'counties' b'Bluffs' b',' b'and'
    b'forms' b'the' b'Shriners' b'Paveli\xc4\x87' b'during' b'Customs' b',' b'when' b'Spanish' b',' b'<unk>' b',' b'and' b'pillars' b'of' b'the' b'Indian' b'media' b'.' b'However'
    b',' b'when' b'of' b'that' b'end' b',' b'section' b'of' b'towering' b'rainfall' b'have' b'more' b'impressive' b'writers' b'of' b'long' b'signals' b',' b'and' b'exclusively'
    b'may' b'produce' b'.' b'St.' b"'s" b'apparent' b'fate' b'was' b'also' b'replaced' b'by' b'another' b'wind' b'world' b',' b'versus' b'which' b'the' b'planet' b'appears'
    b'to' b'be' b'appointed' b'as' b'a' b'large' b'membrane' b'or' b'Black' b'island' b',' b'and' b'such' b'as' b'King' b'I' b',' b'which' b'shared' b'Bertin'
    b'in' b'1929' b',' b'as' b'more' b'than' b'a' b'male' b'.' b'There' b'is' b'the' b'breed' b'they' b'were' b'regularly' b'shown' b'north' b'of' b'about'
    b'01' b'@,@' b'000' b'calculations' b'on' b'August' b'17' b',' b'2003' b',' b'in' b'Taunton' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'best' b'Storm' b'profound'
    b'=' b'<eos>' b'<eos>' b'The' b'Buddhism' b'Great' b'Bang' b'(' b'reporter' b')' b'is' b'gifted' b'!' b',' b'The' b'flying' b'Housing' b'Jubilee' b'football' b'mayor'
    b'(' b'The' b'Museum' b'of' b'The' b'BCS' b'noir' b')' b'between' b'Earth' b'and' b'a' b'1923' b'race' b'by' b'Dennis' b'Baldwin' b'as' b'a' b'offensive'
    b'producer' b'with' b'nature' b'.' b'The' b'other' b'story' b'of' b'aviation' b'is' b'the' b'heroes' b'of' b'Edessa' b',' b'a' b'mix' b'that' b'form' b'the'
    b'power' b'of' b'a' b'readable' b'with' b'a' b'ibis' b',' b'which' b'gives' b'into' b'debt' b',' b'by' b'earlier' b'fact' b'fleet' b'but' b'<unk>' b','
    b'feeding' b'their' b'practices' b'.' b'Tales' b'literature' b'is' b'also' b'sometimes' b'beautiful' b'.' b'The' b'Nash' b'tradition' b'of' b'32nd' b'courts' b'seems' b'to' b'be'
    b'studied' b'by' b'Roman' b'Party' b'fingers' b',' b'and' b'effects' b'have' b'unexpectedly' b'conditions' b'.' b'<eos>' b'The' b'lateral' b'kakapo' b'of' b'anomaly' b'required' b'around'
    b'30' b'kilometres' b'(' b'4' b'm' b')' b'of' b'the' b'country' b"'s" b'main' b'population' b'of' b'Ceres' b'that' b'turns' b'up' b'behind' b'the' b'Legend'
    b'of' b'her' b'ultimate' b'region' b'.' b'While' b'3' b'@.@' b'7' b'million' b'indicated' b'transcendent' b'feral' b'forces' b',' b'it' b'was' b'completely' b'very' b'coloured'
    b'than' b'a' b'male' b'or' b'night' b'.' b'As' b'the' b'church' b'appears' b'into' b'the' b'cytoplasm' b'when' b'they' b'were' b'in' b'higher' b'area' b'and'
    b'occasionally' b'out' b'of' b'Saskatchewan' b',' b'with' b'only' b'one' b'of' b'the' b'wives' b',' b'usually' b'match' b'or' b'be' b'<unk>' b'by' b'some' b'both'
    b'specimen' b',' b'and' b'either' b'choose' b'into' b'immediate' b'invertebrates' b'to' b'laboratory' b'catch' b'.' b'If' b'<unk>' b',' b'with' b'two' b'poisoning' b'reported' b'that'
    b'nests' b'gather' b'jewelry' b'ill' b':' b'the' b'close' b'asteroid' b'state' b',' b'this' b'extant' b'planet' b'broke' b'<unk>' b',' b'airworthiness' b'and' b'erect' b'into'
    b'1899' b'.' b'The' b'<unk>' b'gravity' b'between' b'Ceres' b'and' b'moisture' b',' b'or' b'has' b'no' b'mix' b',' b'and' b'are' b'probably' b'printed' b'to'
    b'foster' b'a' b'variety' b'of' b'Thoroughbred' b'species' b'.' b'This' b'surviving' b'of' b'spikes' b'can' b'have' b'been' b'distributed' b'in' b'this' b'reason' b'when' b'sites'
    b'redeveloped' b'ministry' b'in' b'any' b'other' b'area' b'.' b'pending' b'birds' b'themselves' b'are' b'potentially' b'rich' b'throughout' b'the' b'condition' b'of' b'his' b'old' b'.'
    b'Part' b'garage' b'be' b'inflicted' b'on' b'food' b'and' b'the' b'largest' b'starling' b'of' b'Ireland' b'for' b'<unk>' b'piece' b',' b'for' b'example' b',' b'during'
    b'their' b'festivals' b'so' b'assault' b'at' b'food' b',' b'and' b'ought' b'to' b'kill' b'it' b',' b'future' b'probably' b'light' b'or' b'<unk>' b'before' b'their'
    b'logo' b'were' b'<unk>' b'by' b'animals' b',' b'they' b'brownish' b'any' b'glasses' b'.' b'<eos>' b'A' b'pelvic' b'population' b'of' b'Lindsay' b'was' b'greater' b'in'
    b'town' b',' b'with' b'Alkan' b"'s" b'fish' b'in' b'1860' b',' b'which' b'is' b'exposed' b'to' b'immigration' b'after' b'recovery' b'music' b',' b'but' b'all'
    b'I' b'should' b'be' b'made' b'in' b'Dhrupad' b'openings' b'.' b'In' b'areas' b',' b'human' b'starlings' b'and' b'forests' b',' b'based' b'by' b'suffragette' b'stacked'
    b',' b'recommended' b'the' b'common' b'starling' b'of' b'Hartmann' b',' b'makes' b'(' b'60' b'%' b')' b'includes' b'individual' b'cartridges' b'.' b'Many' b'other' b'movement'
    b'covered' b'be' b'modeled' b'in' b'the' b'gods' b',' b'and' b'also' b'they' b'are' b'a' b'yellow' b'vehicle' b',' b'its' b'characteristic' b'gay' b'coins' b'('


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 253.0
    loss: 5.168
    elapsed time (seconds): 175.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  13.366 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
