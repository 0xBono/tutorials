.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - _dynamic quantization_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'During' b'the' b'second' b'quarter' b',' b'the' b'two' b'rainfall' b'proceeds' b'to' b'cope' b'with' b'their' b'<unk>' b'studio' b',' b'a' b'planet'
    b'position' b'.' b'He' b'sing' b'an' b'ghost' b'field' b'short' b'man' b'@-@' b'Sea' b'that' b'was' b'"' b'hearings' b'and' b'causeway' b'"' b'in' b'79'
    b'years' b',' b'characters' b'and' b'the' b'majority' b'of' b'one' b'point' b'.' b'Watts' b'could' b'indicate' b'range' b'with' b'crucial' b'amounts' b'of' b'frantically' b"'"
    b'partner' b',' b'with' b'the' b'least' b'a' b'evil' b'Thousandth' b'<unk>' b'.' b'However' b',' b'they' b'do' b'not' b'manage' b'"' b'lose' b'an' b'normal'
    b'or' b'growing' b'Oprah' b'astronomers' b'"' b'to' b'stop' b'other' b'other' b'parts' b'to' b'find' b'them' b'younger' b'resources' b'.' b'This' b'was' b'reclaimed' b'by'
    b'Adolf' b'Wilson' b'and' b'others' b'were' b'cut' b'.' b'Finally' b',' b'during' b'autumn' b'was' b'grown' b',' b'<unk>' b'assonance' b'brought' b'answered' b'to' b'collect'
    b'the' b'call' b'shared' b'inscribed' b'of' b'an' b'relaunched' b'<unk>' b'within' b'the' b'subcontinent' b'.' b'In' b'the' b'latter' b',' b'this' b'frequently' b'was' b'discovered'
    b'only' b'out' b'of' b'Takeshi' b'Night' b',' b'and' b'for' b'an' b'Paris' b'story' b'of' b'4' b'@,@' b'500' b'000' b'associations' b'diameter' b'at' b'traditional'
    b'times' b'.' b'The' b'antibiotics' b'was' b'sunk' b'for' b'some' b'years' b',' b'which' b'he' b'obtained' b'at' b'635' b'cities' b'found' b'"' b'work' b'"'
    b'novelty' b'and' b'academics' b'between' b'that' b'year' b',' b'determined' b'in' b'24th' b'London' b'to' b'be' b'found' b'by' b'<unk>' b'.' b'The' b'earliest' b'extended'
    b'epithet' b'James' b'Recordings' b'was' b'also' b'Wilfrid' b'in' b'minor' b'fiction' b',' b'<unk>' b'Fort' b'<unk>' b',' b'and' b'declared' b',' b'and' b'put' b'for'
    b'50' b'years' b'old' b'.' b'Rather' b'than' b'three' b'years' b'pointed' b'to' b'press' b'the' b'name' b'for' b'overcrowded' b'steam' b'as' b'an' b'(' b'0'
    b'@.@' b'8' b'm' b')' b'structures' b'of' b'Lodge' b'(' b'built' b'about' b'how' b'more' b'than' b'8' b'minutes' b'from' b'normal' b'protests' b')' b','
    b'and' b'less' b'than' b'900' b'%' b'of' b'the' b'next' b'feeling' b',' b'is' b'the' b'first' b'prominent' b'adverse' b'body' b'in' b'American' b'history' b'.'
    b'The' b'<unk>' b'wool' b'is' b'<unk>' b'by' b'the' b'mid' b'@-@' b'race' b',' b'directed' b'by' b'by' b'a' b'unknown' b'structural' b'season' b',' b'that'
    b'Mhalsa' b'became' b'elected' b'a' b'planet' b'weapon' b'.' b'It' b'was' b'played' b'by' b'a' b'female' b'of' b'fine' b'organisation' b'\xe2\x80\x94' b'as' b'he' b'is'
    b'committed' b'for' b'his' b'<unk>' b'(' b'1994' b')' b',' b'which' b'held' b'possessing' b'the' b'Cambridge' b'Petrie' b'Boat' b'Network' b',' b'1994' b'.' b'The'
    b'first' b'verse' b',' b'established' b'to' b'investigate' b'Latin' b'Kokury\xc5\xab' b',' b'matter' b'initially' b'four' b'are' b'of' b'Tyre' b',' b'and' b'even' b'John' b'Picard'
    b'wrote' b'that' b'they' b'were' b'recorded' b'as' b'it' b'spent' b'the' b'role' b'to' b'take' b'their' b'litter' b'game' b'.' b'In' b'the' b'Sixth' b'History'
    b'atmosphere' b'on' b'September' b'20' b',' b'2009' b',' b'a' b'combined' b'species' b'of' b'Eyes' b'was' b'signed' b'from' b'<unk>' b'Popular' b'in' b'1987' b'and'
    b'completed' b'until' b'October' b'51' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Joseph' b'McNichol' b',' b'Krasnyi' b'History' b',' b'or' b'Lord' b'I' b'<eos>' b'<eos>'
    b'Typhoon' b'et' b'Not' b'sympathies' b'is' b'a' b'fictional' b'mixture' b'of' b'resident' b',' b'detectable' b',' b'and' b'African' b'American' b'stations' b'from' b'selling' b'of'
    b'specific' b'ocean' b'material' b'.' b'One' b'of' b'these' b'numbers' b'varies' b'in' b'the' b'United' b'Kingdom' b'that' b'they' b'once' b'deliberately' b'compared' b'to' b'ne'
    b',' b'which' b'may' b'be' b'only' b'.' b'However' b',' b'they' b'were' b'involved' b'to' b'<unk>' b'resolved' b'from' b'Looking' b'Armed' b'Gazette' b',' b'and'
    b'on' b'its' b'development' b'aim' b'game' b'.' b'Part' b'with' b'some' b'celebrities' b'gave' b'of' b'just' b'making' b'numerous' b'starlings' b',' b'including' b'multiple' b'counties'
    b'that' b'were' b'killed' b'and' b'false' b'minor' b',' b'also' b'this' b'collaboration' b'was' b'controversial' b',' b'though' b'by' b'a' b'album' b'was' b'notable' b'in'
    b'1005' b',' b'giving' b'Brown' b'and' b'death' b'Yale' b'and' b'IGN' b'army' b'and' b'the' b'Irish' b',' b'Ballet' b'of' b'AE2' b'.' b'A' b'name'
    b'into' b'4' b'\xe2\x80\x93' b'5' b'centimetres' b'(' b'5' b'@.@' b'10' b'in' b')' b'at' b'a' b'group' b'of' b'10' b'mm' b'(' b'16' b'ft'
    b')' b'long' b',' b'3' b'%' b'of' b'55' b'mph' b'(' b'623' b'by' b'110' b'mph' b')' b'.' b'name' b'workers' b'at' b'eye' b'cars'
    b'was' b'lacking' b'.' b'With' b'the' b'other' b'that' b'attempts' b'increased' b',' b'it' b'may' b'then' b'be' b'badly' b'made' b'as' b'good' b'dialogue' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Release' b'=' b'=' b'<eos>' b'<eos>' b'The' b'second' b'half' b'with' b'these' b'sections' b'of' b'running' b',' b'parrot' b','
    b'meet' b',' b'Adams' b',' b'authorities' b',' b'signed' b'that' b'they' b'were' b'all' b'been' b'a' b'<unk>' b'.' b'Numerous' b'partly' b'coins' b'have' b'also'
    b'developed' b'or' b'goods' b'rather' b'than' b'initially' b'completely' b'expanding' b',' b'so' b'illegally' b"'s" b'increased' b'size' b'can' b'be' b'more' b'inhabited' b'.' b'Other'
    b'lights' b'draped' b'on' b'a' b'"' b'total' b'crew' b'record' b'commuter' b'movement' b',' b'around' b'temperatures' b'and' b'over' b'50' b'\xc2\xb0' b'figures' b',' b'avoiding'
    b'one' b'of' b'its' b'best' b'specimen' b':' b'[' b'of' b']' b'night' b'or' b'267' b'and' b'stylised' b'most' b'clearly' b'flag' b'.' b'"' b'Brown'
    b"'s" b'inscription' b'body' b'go' b'to' b'be' b'known' b'from' b'the' b'character' b',' b'because' b'it' b'was' b'<unk>' b'as' b'be' b'planned' b'by' b'plants'
    b'for' b'Law' b'since' b'it' b'was' b'not' b'held' b'to' b'be' b'<unk>' b'like' b'it' b'will' b'be' b'a' b'pre' b'@-@' b'Celtic' b'spiders' b'that'
    b'this' b'failed' b'the' b'side' b'out' b'and' b'has' b'high' b'flight' b'beings' b'.' b'Instead' b',' b'in' b'nearby' b'areas' b',' b'<unk>' b'Owl' b'type'
    b'show' b'Joseph' b'Walter' b'B.' b'resembles' b',' b'a' b'recently' b'discovery' b'the' b'provinces' b'to' b'<unk>' b'pine' b'.' b'Over' b'the' b'next' b'round' b','
    b'it' b'is' b'noted' b'that' b'it' b'is' b'likely' b'to' b'have' b'run' b'at' b'least' b'much' b'before' b'the' b'spores' b',' b'so' b'to' b'others'
    b'that' b'were' b'based' b'in' b'the' b'world' b',' b'this' b'can' b'be' b'reliably' b'divided' b'to' b'deadly' b'rule' b'to' b'be' b'true' b'.' b'The'
    b'most' b'large' b'bird' b'as' b'a' b'devastating' b'narrow' b'event' b',' b'for' b'the' b'date' b'of' b'the' b'eyes' b'combined' b'at' b'home' b',' b'supported'
    b'Earth' b',' b'picking' b'the' b'population' b'to' b'back' b'Rogers' b',' b'then' b'excision' b'.' b'Over' b'significant' b'walls' b',' b'Ireland' b'Hawaiian' b',' b'divide'
    b'for' b'about' b'10' b'million' b'in' b'1820' b'.' b'In' b'Kansas' b',' b'shooting' b'ibis' b'farms' b',' b'asked' b'media' b'services' b',' b'exist' b'in'
    b'trouble' b',' b'between' b'variable' b'studies' b'and' b'dams' b',' b'Akhenaten' b'branching' b'perished' b'between' b'the' b'islands' b'.' b'<eos>' b'Dahlan' b"'s" b'Gus' b'\xe2\x80\x93'
    b'IAU' b'(' b'Representatives' b')' b'has' b'attempt' b'the' b'city' b'until' b'they' b'originated' b'for' b'a' b'white' b'declarations' b'of' b'adults' b',' b'or' b'to'
    b'prevent' b'dogs' b',' b'but' b'in' b'fact' b'it' b'is' b'regulated' b'to' b'produce' b'the' b'outlets' b'of' b'specific' b'islands' b'.' b'Like' b'only' b'29'
    b'million' b'dry' b'(' b'3' b'\xc2\xb0' b'N' b')' b'in' b'which' b'it' b'will' b'result' b'about' b'from' b'Brighton' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Meteorological' b'remains' b'=' b'=' b'<eos>' b'<eos>' b'The' b'arena' b'of' b'Omar' b'is' b'a' b'weekly' b'eating' b'of' b'35' b'\xc2\xb0' b'individuals' b'.' b'In'
    b'2006' b',' b'the' b'kakapo' b'of' b'<unk>' b'brought' b'promote' b'limestone' b'scale' b',' b'spindles' b',' b'warm' b',' b'and' b'pitches' b'at' b'a' b'distance'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 248.3
    loss: 5.168
    elapsed time (seconds): 172.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  4.897 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
