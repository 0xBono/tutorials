.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'without' b'public' b'@-@' b'rich' b'feelings' b',' b'as' b'Ward' b'began' b'it' b'in' b'the' b'fourth' b'<unk>' b',' b'followed' b'by' b'a' b'large' b'<unk>'
    b',' b'a' b'entertainment' b'or' b'man' b"'s" b'poor' b'Super' b'Prix' b'did' b'not' b'occur' b'from' b'every' b'bar' b'of' b'direct' b'American' b'Yellow' b'Armed'
    b',' b'<unk>' b'Horn' b'lines' b',' b'and' b'actors' b'to' b'separate' b'95' b'Coventry' b'medicine' b'their' b'duration' b'.' b'In' b'particular' b',' b'Senators' b'head'
    b'all' b'compared' b'for' b'Land' b'.' b'In' b'the' b'Democratic' b'Dove' b',' b'C' b'Baltimore' b'made' b'a' b'"' b'The' b'UFO' b'Brew' b'"' b'and'
    b'one' b'of' b'their' b'Has' b'titles' b'where' b'many' b'critics' b'believed' b'they' b'were' b'largely' b'known' b'to' b'the' b'city' b'.' b'"' b'This' b'fare'
    b'is' b'radiation' b'and' b'many' b'annoy' b'@-@' b'<unk>' b'baht' b'to' b'close' b'and' b'indicator' b'up' b'a' b'founding' b'ball' b'.' b"'" b'In' b'this'
    b',' b'there' b'is' b'also' b'a' b'number' b'of' b'Ehrensv\xc3\xa4rd' b',' b'as' b'something' b'in' b'hands' b'.' b'"' b'The' b'addition' b'also' b'chart' b'extraordinary'
    b'that' b'he' b'left' b'no' b'a' b'good' b'institution' b'from' b'its' b'theater' b'experience' b'at' b'a' b'promiscuity' b'dynasty' b'and' b'a' b'inexperienced' b'terror' b'if'
    b'they' b'feed' b'on' b'the' b'orbits' b'of' b'R\xc3\xa9union' b'.' b'While' b'its' b'auto' b'judge' b'tends' b'not' b'to' b'form' b'a' b'Horizon' b'he' b'gave'
    b'him' b'to' b'be' b'issued' b'around' b'@-@' b'straight' b'the' b'death' b'of' b'him' b'segments' b',' b'defected' b'behind' b'Austria' b'when' b'they' b'be' b'fascinating'
    b'.' b'Perhaps' b'there' b'are' b'Hairan' b'John' b'Adams' b'case' b':' b'"' b'Once' b'the' b'male' b'is' b'"' b'16' b'@.@' b'2' b'to' b'6'
    b'%' b'per' b'year' b'.' b'He' b'and' b'playing' b'total' b'people' b'and' b'"' b'doing' b'more' b'than' b'100' b'%' b'of' b'us' b',' b'and'
    b'get' b'hours' b'by' b'dishes' b'sexually' b'when' b'such' b'Meri' b',' b'she' b'then' b'would' b'be' b'executed' b'there' b'.' b'"' b'Ceres' b'became' b'a'
    b'kind' b'of' b'Catholics' b'that' b'it' b'is' b'contributed' b'to' b'those' b'on' b'rich' b'scribal' b'values' b',' b'considering' b'it' b'back' b'other' b'ideas' b'with'
    b'dual' b'tracts' b',' b'substance' b'clerks' b'and' b'"' b'favourable' b'effectiveness' b'"' b',' b'the' b'"' b'most' b'emotionally' b'experiments' b'"' b'.' b'The' b'track'
    b'has' b'rejected' b'significant' b'prey' b',' b'simply' b'"' b'execute' b'or' b'small' b'stare' b'"' b'.' b'Watson' b'Andrew' b'Josh' b'networking' b'prestige' b'through' b'view'
    b'has' b'preserved' b'in' b'full' b'websites' b',' b'with' b'no' b'McCarthy' b'in' b'France' b',' b'science' b'and' b'<unk>' b'for' b'a' b'old' b'networks' b','
    b'and' b'"' b'The' b'other' b'<unk>' b'"' b'.' b'The' b'resulting' b'story' b'of' b'the' b'novel' b'panel' b'refers' b'to' b'the' b'Halo' b'Broncos' b'at'
    b'the' b'end' b'of' b'the' b'language' b',' b'as' b'O' b'Brown' b'later' b'began' b'as' b'much' b'of' b'electrical' b'(' b'"' b'rimu' b'"' b')'
    b'and' b'a' b'distance' b'with' b'39' b'...' b'74' b'feet' b'in' b'diameter' b'.' b'<eos>' b'Because' b'of' b'the' b'latter' b',' b'heroin' b',' b'in'
    b'order' b'to' b'attract' b'the' b'era' b'of' b'the' b'Ras' b'or' b'lethal' b',' b'the' b'soldiers' b'made' b'the' b'provoked' b'governor' b'is' b'disconcerting' b','
    b'particularly' b'Arabic' b'.' b'Well' b'on' b'<unk>' b',' b'in' b'fact' b'John' b'Wilson' b'(' b'"' b'The' b'star' b"'" b'<unk>' b'Review' b'"' b')'
    b'was' b'described' b'as' b'the' b'only' b'time' b'Wilde' b',' b'including' b'well' b'game' b'to' b'perched' b'into' b'God' b'.' b'In' b'his' b'book' b','
    b'the' b'Lanka' b'base' b'was' b'written' b'in' b'the' b'Hit' b'to' b'move' b'for' b'a' b'compendium' b'after' b'Montgomery' b':' b'now' b'though' b'he' b'is'
    b'certainly' b'taking' b'among' b'a' b'Europos' b'or' b'a' b'knife' b'from' b'bringing' b'him' b',' b'Venus' b'Mooresville' b'up' b'their' b'main' b'books' b'.' b'Liz'
    b'Guide' b'represented' b'Crash' b"'s" b'grandfather' b'a' b'large' b'Child' b'of' b'talented' b'wrist' b'above' b'the' b'feedback' b',' b'and' b'can' b'defeat' b'where' b'the'
    b'challenging' b'movement' b'to' b'create' b'sexual' b'Tufaro' b'and' b'could' b'designer' b'"' b'await' b'me' b'on' b'the' b'meditation' b'that' b'he' b'will' b'go' b'retired'
    b'at' b'an' b'different' b'communication' b'.' b'"' b'Quite' b'FOCA' b'was' b'the' b'graveyard' b'for' b'<unk>' b'lords' b'Raiden' b',' b'who' b'Dark' b'have' b'Nu'
    b'Bo' b'criticized' b'a' b'<unk>' b'intervention' b'of' b'domestic' b'plane' b',' b'whose' b'desire' b'to' b'him' b'his' b'shape' b'.' b'Bell' b'also' b'1351' b'imposing'
    b'reading' b'Tales' b'or' b'decides' b'for' b'film' b',' b'but' b'he' b'abandoned' b'dark' b'or' b'true' b'@-@' b'lived' b'.' b'Later' b',' b'more' b'apart'
    b'to' b'become' b'the' b'kingship' b'institutions' b'.' b'In' b'his' b'role' b'while' b'Hebrew' b'to' b'lady' b'after' b'returning' b',' b'it' b'is' b'being' b'nice'
    b'that' b'a' b'papal' b'resembled' b'idea' b'took' b'place' b'.' b'O' b'One' b'by' b'his' b'life' b',' b'theirs' b'says' b'that' b'the' b'subsequent' b'stories'
    b'was' b'"' b'Miranic' b'aims' b'"' b'for' b'an' b'game' b',' b'but' b'this' b'was' b'"' b'<unk>' b'"' b'.' b'He' b'proposed' b'his' b'analysis'
    b'of' b'a' b'under' b'@-@' b'Russell' b'against' b'Wales' b';' b'a' b'Ramayana' b'are' b'based' b'in' b'St' b'Louis' b'as' b'he' b'gave' b'major' b'works'
    b'on' b'the' b'midst' b'of' b'Oscar' b'who' b'appears' b'to' b'have' b'synthesizers' b'.' b'However' b',' b'although' b'it' b'becomes' b'made' b'in' b'or' b'they'
    b'do' b'running' b'to' b'Mick' b'Peshkin' b',' b'effective' b'Hairan' b'Blair' b'Of' b'The' b'character' b'rudimentary' b'others' b'can' b'kill' b'free' b'actions' b'and' b'her'
    b'books' b'improved' b'that' b'one' b'of' b'the' b'women' b'again' b'dreams' b'lead' b'.' b'His' b'mysterious' b'wife' b'was' b'not' b'affiliated' b'in' b'his' b'trust'
    b'.' b'The' b'name' b'remarked' b'that' b'Pro' b'Winters' b'was' b'angry' b'as' b'virtue' b'of' b'his' b'father' b"'" b'contemporaries' b'although' b'in' b'which' b'"'
    b'sobbing' b'don' b"'t" b'Creeks' b'...' b'the' b'ability' b'old' b'this' b'latter' b'by' b'my' b'wedding' b',' b'the' b'atmosphere' b'of' b'ballad' b',' b'25'
    b'%' b'of' b'saying' b'has' b'been' b'living' b'.' b'<eos>' b':' b'Hornung' b'calls' b'a' b'expedition' b'to' b'The' b'1840s' b"'s" b'harms' b'secretary' b'which'
    b'he' b'read' b',' b'to' b'show' b'their' b'advances' b'titled' b'or' b'(' b'Congressman' b'Maria' b'<unk>' b')' b'and' b'the' b'Merit' b'(' b'Gibraltar' b'and'
    b'Symptoms' b'explosives' b')' b'.' b'The' b'PSP' b'Party' b'finds' b'its' b'information' b'in' b'the' b'Tamil' b'literature' b'before' b'the' b'game' b'can' b'have' b'been'
    b'difficult' b'to' b'stay' b'as' b'of' b'.' b'and' b'March' b'25' b',' b'gifts' b'of' b'Illinois' b'access' b'to' b'a' b'radio' b'"' b'the' b'amount'
    b'of' b'someone' b'"' b'Organization' b'Ma\xc3\xadl' b'Glyn' b'<unk>' b'and' b'asked' b'his' b'stories' b'while' b'book' b'himself' b'learns' b'on' b'"' b'remarking' b'of' b'['
    b'possession' b']' b'tropospheric' b'Al' b'Halen' b',' b'not' b'<unk>' b'rather' b'than' b'because' b'they' b'was' b'invade' b',' b'and' b'looks' b'internationally' b'\xe2\x80\x94' b'but'
    b'quite' b'far' b'he' b'was' b'put' b'to' b'other' b'use' b'of' b'<unk>' b'on' b'the' b'valve' b'!' b'"' b'.' b'Not' b'attending' b'Robert' b"'Connor"
    b'that' b'he' b'redesignated' b',' b'Hairan' b'Dilke' b'after' b'God' b',' b'who' b'changed' b'it' b'as' b'"' b'<unk>' b'tension' b'@-@' b'left' b'tactics' b','
    b'he' b'could' b'be' b'<unk>' b'to' b'ready' b'plotted' b'.' b'"' b'Though' b'in' b'the' b'lawsuit' b'I' b'"' b'was' b'decided' b'to' b'were' b'remembered'
    b'"' b'.' b'The' b'religion' b'on' b'the' b'story' b'are' b'given' b'when' b'thereafter' b'potassium' b'anger' b'with' b'his' b'nephew' b',' b'<unk>' b'I' b'Need'
    b'pregnant' b'Christmas' b',' b'and' b'said' b'it' b'held' b'English' b',' b'again' b'flow' b'2' b':' b'1' b'p.m.' b'<unk>' b'<unk>' b'wishes' b'intravenous' b'Ua'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 224.0
    loss: 5.168
    elapsed time (seconds): 154.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  24.043 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
