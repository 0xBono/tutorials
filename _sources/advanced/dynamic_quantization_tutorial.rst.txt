.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'said' b'.' b'<eos>' b'In' b'the' b'1981' b'breeding' b'rise' b'to' b'Solo' b'Field' b',' b'Franklin' b'Charity' b'Enuff' b'described' b'several' b'species' b'used' b','
    b'though' b'they' b'reported' b'his' b'thirty' b'@-@' b'graphic' b'game' b'released' b'to' b'perform' b'the' b'level' b'of' b'identify' b'by' b'one' b'.' b'Hence' b'Brian'
    b'Potter' b'King' b'Hearts' b'Worth' b'racing' b'called' b'it' b'"' b'a' b'Llanedeyrn' b'voice' b'"' b',' b'where' b'the' b'Philips' b'stated' b'"' b'it' b'was'
    b'probably' b'<unk>' b'sustained' b'by' b'Goose' b'"' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Geography' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b'was' b'baked' b'a'
    b'variety' b'of' b'songs' b',' b'with' b'its' b'large' b'disciples' b'in' b'United' b'States' b',' b'averaging' b'every' b'contributors' b'in' b'his' b'office' b'until' b'the'
    b'target' b'championship' b',' b'with' b'the' b'former' b'sponsorship' b'time' b';' b'in' b'October' b'2016' b',' b'the' b'writers' b"'" b'<unk>' b'bishop' b'<unk>' b':'
    b'The' b'FISA' b'Network' b'would' b'reach' b'study' b'sages' b',' b'Jeremy' b'Puzzle' b';' b'Buckley' b'Mission' b'(' b'Adapted' b'Chester' b',' b'fallow' b',' b'Ratings'
    b',' b'Cards' b',' b'Dallas' b',' b'Louise' b'and' b'<unk>' b')' b'.' b'The' b'Danja' b'<unk>' b'an' b'two' b'@-@' b'reel' b'Newton' b'manifestation' b','
    b'also' b'helped' b'no' b'children' b'.' b'The' b'<unk>' b'of' b'Coleridge' b'I' b'changed' b'folded' b'in' b'honor' b'of' b'\xe2\x80\x9c' b'movement' b',' b'including' b'an'
    b'united' b'secretary' b'Fu' b'Tu\xc4\x91man' b'from' b'July' b'5' b',' b'2000' b'.' b'The' b'article' b'have' b'a' b'detach' b'role' b'to' b'Pontica' b'by' b'a'
    b'mother' b',' b'a' b'game' b'that' b'would' b'be' b'brought' b'to' b'involvement' b'next' b'by' b'Walter' b'Oswald' b'...' b'in' b'any' b'one' b'spouse' b','
    b'they' b'show' b'until' b'further' b'measures' b'during' b'honours' b'side' b'and' b'he' b'then' b'chooses' b'Norris' b'Buchan' b'.' b'The' b'other' b'spots' b'declared' b'Baltimore'
    b'and' b'O.' b'gum' b',' b'carrying' b'their' b'guitar' b'in' b'the' b'North' b'Sea' b"'" b'Herodianus' b'steadily' b'over' b'Publisher' b'Gideon' b'Cunningham' b'at' b'<unk>'
    b',' b'Niall' b'<unk>' b'Bridgeport' b';' b'in' b'fuel' b'community' b'school' b'students' b'were' b'photographed' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Death' b'=' b'='
    b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Critical' b'development' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Charmed' b'Agreement' b'7' b'(' b'<unk>' b')'
    b'is' b'a' b'early' b'cannon' b'that' b'worked' b'in' b'it' b'began' b'a' b'agreement' b'for' b'English' b',' b'in' b'striking' b'short' b'manuscripts' b'.' b'This'
    b'plot' b'is' b'frequented' b'by' b'complexity' b'.' b'recovery' b'of' b'Scotts' b'books' b'often' b',' b'theory' b'airspace' b',' b'imagery' b'and' b'total' b'involved' b'near'
    b'land' b'.' b'Once' b'Gofraid' b'becomes' b'withheld' b'using' b'the' b'Annals' b'of' b'the' b'New' b'Zealand' b'Prism' b',' b'they' b'are' b'actively' b'referred' b'to'
    b'as' b'"' b'capable' b'of' b'Forbes' b'film' b'"' b'and' b'Dubois' b'"' b'both' b'punished' b'in' b'deliberate' b'conscience' b'"' b',' b'although' b'the' b'printing'
    b'Times' b'of' b'<unk>' b'or' b'<unk>' b'(' b'b' b'Asuka' b'<unk>' b')' b'is' b'piano' b'for' b'its' b'"' b'slow' b'"' b'entrance' b'at' b'a'
    b'stunning' b'and' b'literary' b'path' b'.' b'They' b'were' b'limited' b'to' b'contemporary' b'Catholics' b',' b'but' b'only' b'one' b'of' b'them' b'tower' b'apart' b','
    b'they' b'die' b'toward' b'enemy' b'support' b'around' b'their' b'years' b'to' b'use' b'deaths' b'<unk>' b'.' b'It' b'was' b'struck' b'by' b'Jean' b'Spencer' b','
    b'who' b',' b'vertically' b',' b'a' b'dynamically' b'heritage' b'story' b',' b'serving' b'as' b'a' b'food' b'clean' b'planet' b'after' b'both' b'to' b'be' b'one'
    b'PlayStation' b'79' b'.' b'The' b'date' b'of' b'Peter' b'Hutton' b'Bate' b'meets' b'a' b'shift' b'would' b'play' b'a' b'offer' b'on' b'a' b'team' b'warfare'
    b'of' b'100' b'@-@' b'social' b'<unk>' b'(' b'Earth' b')' b'.' b'The' b'finish' b'of' b'companion' b'referring' b'to' b'region' b'left' b'the' b'game' b'may'
    b'be' b'played' b'to' b'compensate' b'to' b'stiff' b'@-@' b'fold' b'.' b'Deccan' b'or' b'32' b',' b'topmost' b'obscurity' b'skills' b'may' b'be' b'displayed' b'into'
    b'their' b'<unk>' b'at' b'home' b'.' b'Mother' b'(' b'much' b'of' b'spes' b')' b'is' b'a' b'nebula' b'that' b'they' b'are' b'likely' b'a' b'rising'
    b'concern' b'.' b'The' b'father' b'fibrous' b'spondees' b'may' b'rarely' b'be' b'published' b'as' b'Hawker' b'powdered' b'revisited' b'by' b'California' b'Archives' b'.' b'Hunting' b'to'
    b'a' b'narrow' b'scared' b'of' b'high' b',' b'ambivalent' b',' b'no' b'pottery' b'doped' b'rendering' b'Usually' b'that' b'proven' b'other' b'bill' b'u' b'as' b'excellent'
    b'as' b'full' b'up' b',' b'visible' b'almost' b'<unk>' b'annum' b'.' b'<eos>' b'Later' b'on' b'eggs' b':' b'<eos>' b'ROK' b'<unk>' b'player' b'It' b'yellowish'
    b'another' b'inner' b'body' b'with' b'homes' b'or' b'no' b'well' b'@-@' b'oriented' b'vibrate' b'events' b'(' b's' b')' b',' b'or' b'most' b'other' b','
    b'who' b'primarily' b'are' b'circular' b'.' b'Now' b'into' b'good' b'someday' b'is' b'on' b'an' b'side' b'fat' b',' b'it' b'is' b'disturbing' b'you' b'then'
    b'beat' b',' b'and' b'when' b'legibility' b'carrying' b'their' b'skills' b'of' b'high' b'reasons' b'color' b'.' b'The' b'term' b'limitations' b'normally' b'acted' b'as' b'the'
    b'own' b'position' b'is' b'tightly' b'to' b'be' b'seen' b'as' b'<unk>' b',' b'which' b'washed' b'around' b'the' b'same' b'movement' b'and' b'on' b'confidence' b'.'
    b'It' b'later' b'has' b'its' b'head' b'insisting' b'of' b'recommend' b'continuing' b'reverses' b'domination' b'.' b'As' b'such' b',' b'in' b'talks' b',' b'kakapo' b'from'
    b'Othniel' b'swiftly' b'has' b'absorbed' b'her' b'patch' b'and' b'their' b'yellow' b'1063' b'.' b'<eos>' b'The' b'toxins' b'of' b'humans' b'can' b'be' b'classified' b'ordering'
    b'such' b',' b'when' b'has' b'fallen' b'form' b'Pepsi' b',' b'they' b'with' b'Kantara' b',' b'except' b'the' b'validity' b'of' b'their' b'tweaks' b'to' b'tourist'
    b'bark' b'where' b'they' b'deposit' b'their' b'development' b'.' b'This' b'/' b'loved' b'sex' b'can' b'be' b'too' b'placed' b'.' b'<unk>' b'bright' b'scenes' b'should'
    b'be' b'companions' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'The' b'associates' b'of' b'Ceres' b'is' b'criticized' b'by' b'owl'
    b'Ptolemy' b',' b'Dinosaur' b',' b'<unk>' b',' b'carved' b',' b'cytoskeleton' b',' b'and' b'Crash' b'through' b'a' b'star' b'.' b'In' b'1871' b',' b'they'
    b'are' b'not' b'nor' b'bedroom' b'in' b'symptoms' b'until' b'1975' b'.' b'D.' b'acid' b'may' b'be' b'different' b'from' b'Owasco' b'@-@' b'eared' b',' b'which'
    b'are' b'usually' b'present' b'in' b'the' b'archaea' b'were' b'very' b'spared' b'.' b'The' b'Augustan' b'Sabbath' b'are' b'seen' b'itself' b'.' b'<unk>' b'to' b'refer'
    b'to' b'Kakapo' b'disengage' b',' b'approximately' b'20' b'miles' b'(' b'11' b'km' b'/' b'h' b')' b'and' b'even' b'450' b'(' b'320' b'minutes' b')'
    b',' b'or' b'males' b'implement' b'their' b'linguist' b'anti' b'weapons' b'.' b'The' b'amount' b'of' b'a' b'season' b'involving' b'inspired' b'an' b'abundance' b'of' b'<unk>'
    b',' b'amend' b',' b'and' b'occupational' b'the' b'implementation' b'of' b'bird' b'dark' b'grey' b'.' b'The' b'classification' b'narial' b'buoy' b'is' b'identical' b'.' b'"'
    b'badlands' b'"' b',' b'which' b'within' b'M.' b'Abdul' b'Freedom' b',' b'describes' b'samples' b'of' b'80' b'out' b'to' b'<unk>' b'temperatures' b'.' b'<eos>' b'In'
    b'the' b'innovations' b'of' b'food' b',' b'Chance' b'Grant' b'can' b'be' b'derived' b'at' b'16' b':' b'19' b'and' b'before' b'fine' b'lay' b'passes' b'to'
    b'a' b'adults' b'on' b'4' b'April' b'when' b'they' b'to' b'establish' b'Halen' b'in' b'a' b'upperparts' b',' b'the' b'eggs' b'features' b'caesium' b'@-@' b'shaped'
    b'prey' b',' b'which' b'is' b'the' b'grayish' b'promises' b';' b'scales' b'against' b'signal' b'pine' b'and' b'hence' b'the' b'kakapo' b'up' b'during' b'a' b'special'
    b'car' b'.' b'In' b'the' b'summer' b',' b'they' b'B.' b'microorganisms' b',' b'Maya' b'queen' b',' b'begins' b'part' b',' b'Vishnu' b',' b'rodents' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 252.3
    loss: 5.168
    elapsed time (seconds): 174.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  10.900 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
