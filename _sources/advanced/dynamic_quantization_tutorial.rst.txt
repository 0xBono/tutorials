.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Nomenclature' b'when' b'and' b'large' b'as' b'<unk>' b'and' b'elsewhere' b'to' b'Capablanca' b',' b'particularly' b'one' b'recorded' b'in' b'Cuba' b',' b'Carl' b'Parsons' b'and'
    b'Caprera' b'were' b'also' b'.' b'fumble' b"'s" b'first' b'20' b'square' b'entrances' b'after' b'they' b'were' b'considered' b'to' b'forget' b'their' b'influence' b'before' b'he'
    b'did' b'not' b'prove' b'anything' b'with' b'enemies' b'.' b'But' b'the' b'criminal' b'points' b'the' b'drank' b'<unk>' b'model' b'is' b'required' b'to' b'use' b'him'
    b',' b'<unk>' b',' b'in' b'which' b'they' b'were' b'shown' b'by' b'Google' b'African' b'residences' b',' b'and' b'by' b'the' b'life' b'of' b'The' b'same'
    b'insectivorous' b'body' b',' b'83' b'%' b'of' b'bird' b'shots' b',' b'and' b'advantages' b',' b'and' b'Nueces' b'parents' b'resulted' b'up' b'.' b'More' b'than'
    b'2' b'%' b'were' b'asked' b'to' b'compensate' b'to' b'organising' b'them' b'the' b'bird' b'set' b'to' b'be' b'deployed' b',' b'but' b'not' b'it' b'has'
    b'since' b'be' b'prepared' b'that' b'why' b'was' b'acquitted' b',' b'and' b'1910' b'naming' b'a' b'scientific' b'sense' b'of' b'fertile' b'photographs' b'like' b'providing' b'instantly'
    b'are' b'possible' b'as' b'a' b'<unk>' b'toward' b'bringing' b'art' b',' b'so' b'quickest' b'it' b'has' b'nothing' b'to' b'lose' b'and' b'mystery' b',' b'so'
    b'the' b'1736' b'holds' b'their' b'118' b'law' b'to' b'begin' b'another' b'specimen' b'.' b'<eos>' b'defensive' b'associations' b',' b'by' b'rot' b'have' b'some' b'rarely'
    b'filled' b'significant' b'testing' b'.' b'Speaking' b',' b'they' b'put' b'well' b'made' b'or' b'alternatively' b'advances' b'to' b'become' b'around' b'home' b'.' b'Occasionally' b','
    b'there' b'is' b'no' b'association' b'or' b'colour' b'Jabbar' b',' b'rather' b'than' b'broadcasting' b'in' b'Touch' b',' b'when' b'none' b'of' b'these' b'than' b'three'
    b'birds' b'did' b'leave' b'.' b'A' b'few' b'years' b'later' b',' b'antimony' b'enough' b'to' b'reduce' b'males' b',' b'compared' b'to' b'69' b'meters' b'('
    b'2' b'@.@' b'4' b'in' b')' b'.' b'Through' b'skeptical' b',' b'what' b'nearly' b'die' b',' b'all' b'or' b'purchase' b'differences' b'in' b'Biddenden' b','
    b'some' b'individuals' b'resemble' b'their' b'anesthetic' b'.' b'<eos>' b'When' b'Ireland' b'decides' b'to' b'the' b'hull' b'as' b'they' b'show' b'poles' b',' b'they' b'were'
    b'simply' b'plentiful' b'in' b'a' b'suitable' b'wind' b',' b'but' b'is' b'often' b'glass' b'about' b'.' b'Since' b'they' b'choose' b'by' b'some' b'or' b'three'
    b'or' b'73' b'months' b'old' b',' b'some' b'female' b'grass' b'can' b'advance' b'they' b'may' b'investigate' b'lecture' b'unless' b'it' b'will' b'be' b'written' b'.'
    b'The' b'female' b'is' b'also' b'integrated' b'(' b'species' b')' b'.' b'The' b'large' b'wordplay' b'is' b'popular' b',' b'although' b'Djedkare' b'will' b'get' b'out'
    b'at' b'least' b'another' b'left' b'.' b'Then' b',' b'there' b'have' b'little' b'little' b'females' b'on' b'that' b'species' b',' b'50' b'years' b',' b'noise'
    b'charges' b'and' b'courses' b'that' b'are' b'tap' b'.' b'B' b'Ion' b'al' b"'anan" b'expressed' b'Formula' b"'Dell" b'fourth' b'of' b'a' b'four' b'@-@' b'field'
    b'population' b'leading' b'to' b'amidships' b',' b'Teng' b'editions' b',' b'Hunters' b',' b'and' b'somewhat' b'with' b'they' b'have' b'until' b'cruiserweights' b'.' b'<unk>' b'involve'
    b'fields' b'at' b'a' b'pair' b'of' b'adult' b'setbacks' b'females' b',' b'as' b'well' b'as' b'their' b'respected' b'numbers' b'.' b'This' b'could' b'be' b'feared'
    b'for' b'\xe2\x82\xb9' b'4' b'million' b'in' b'2001' b'.' b'There' b'is' b'12' b'seconds' b'unusual' b'on' b'the' b'caravan' b'outer' b'jaw' b'of' b'the' b'Taiwan'
    b'eye' b'calls' b'system' b'with' b'dark' b'faith' b'.' b'In' b'France' b',' b'downstream' b',' b'the' b'population' b'MIPS' b'has' b'periodically' b'limited' b'greater' b'children'
    b',' b'suffered' b'up' b'by' b'Insular' b'organisations' b'(' b'i.e.' b'expressway' b'quality' b')' b',' b'sabotage' b'and' b'<unk>' b'and' b'Astronomical' b'@-@' b'green' b'as'
    b'they' b'find' b'off' b'care' b'by' b'jockey' b'.' b'As' b'one' b'of' b'these' b'fewer' b'mushrooms' b'replied' b',' b'they' b'are' b'reserved' b'among' b'their'
    b'loss' b'.' b'The' b'lowest' b'defenses' b'is' b'now' b'capable' b'of' b'rather' b'part' b'.' b'Son' b'has' b'even' b'been' b'constructed' b'as' b'toured' b'appropriating'
    b'.' b'<eos>' b'There' b'are' b'widespread' b'ups' b'that' b'are' b'about' b'one' b'million' b',' b'capture' b'@-@' b'agglomeration' b'.' b'In' b'the' b'vicinity' b'of'
    b'150' b',' b'birds' b'have' b'made' b'Shandong' b'to' b'single' b',' b'leaving' b'over' b'a' b'single' b'account' b'in' b'the' b'asteroids' b'.' b'<eos>' b'The'
    b'island' b',' b'ancient' b',' b'laying' b',' b'Indian' b',' b'<unk>' b',' b'are' b'<unk>' b'prompting' b'or' b'then' b'further' b'one' b'by' b'six' b'seconds'
    b'to' b'create' b'it' b'.' b'Eleven' b'there' b'has' b'been' b'extensive' b'damage' b'to' b'average' b'and' b'markings' b',' b'among' b'example' b',' b'cargo' b'mating'
    b',' b'recognizing' b'to' b'over' b'one' b'period' b'and' b'money' b'.' b'In' b'winter' b',' b'young' b'starlings' b'are' b'increased' b'.' b'They' b'quarterback' b'usually'
    b'interfere' b'for' b'once' b'outline' b'trees' b'and' b'pillar' b',' b'even' b'fewer' b'or' b'Christians' b'or' b'having' b'lead' b'only' b'pumped' b'in' b'a' b'rural'
    b'night' b'.' b'In' b'proceeding' b',' b'these' b'exact' b'neck' b'will' b'be' b'debated' b'so' b'available' b'.' b'They' b'thinks' b'its' b'observation' b'of' b'their'
    b'supply' b'to' b'be' b'largely' b'accepted' b'.' b'Discography' b'were' b'usually' b'able' b'to' b'grow' b'on' b'how' b'Omar' b'may' b'be' b'given' b'to' b'structural'
    b'bill' b',' b'and' b'during' b'all' b'Mullen' b'Chevaliers' b'were' b'varying' b',' b'when' b'they' b'cluster' b'remain' b'as' b'when' b'they' b'were' b'made' b'.'
    b'In' b'this' b'same' b'volume' b'or' b'the' b'<unk>' b',' b'a' b'few' b'birds' b'thinks' b'great' b'urban' b'proposals' b',' b'giving' b'regulatory' b'effects' b'to'
    b'leave' b'size' b'alive' b'as' b'the' b'live' b'amount' b'of' b'birds' b'(' b'which' b'is' b'sought' b'by' b'decay' b')' b'.' b'With' b'people' b','
    b'Manders' b',' b'exciting' b',' b'and' b'the' b'<unk>' b'relationship' b'to' b'take' b'over' b'Sarah' b'Milne' b'stages' b"'" b'.' b'In' b'1905' b',' b'the'
    b'distribution' b'of' b'modern' b'computed' b'infections' b'have' b'risen' b'to' b'amyloid' b'affect' b'males' b',' b'restrictions' b'reach' b'their' b'life' b'for' b'M\xc4\x81ori' b'or' b'significantly'
    b'away' b'to' b'cause' b'away' b'.' b'<eos>' b'Common' b'starlings' b'are' b'thus' b'observed' b'in' b'Ireland' b',' b'but' b'the' b'grass' b'is' b'terminated' b'with'
    b'flies' b'possess' b'the' b'common' b'membranes' b'.' b'It' b'also' b'modernity' b'into' b'complex' b'activity' b',' b'brass' b',' b'beef' b'or' b'food' b',' b'especially'
    b'and' b'other' b'chicks' b'remaining' b'a' b'nest' b'zone' b'.' b'In' b'the' b'Eleanor' b'Islands' b'natives' b',' b'them' b',' b'transcend' b'proteins' b',' b'and'
    b'or' b'pale' b'asteroids' b'still' b'ensued' b'into' b'size' b'.' b'The' b'A.V.' b'(' b'<unk>' b'Week' b')' b'rarely' b'reported' b'churches' b'of' b'a' b'community'
    b'of' b'22' b'\xe2\x80\x93' b'18' b'%' b'of' b'generators' b',' b'with' b'a' b'maximum' b'thick' b'area' b'.' b'A' b'single' b'contrast' b'scales' b'may' b'fly'
    b'to' b'1714' b'in' b'northern' b'England' b'.' b'They' b'are' b'lowered' b',' b'with' b'other' b'force' b'<unk>' b',' b'<unk>' b'grey' b',' b'red' b'foliage'
    b'...' b'cats' b'discrimination' b'.' b'According' b'to' b'their' b'nearly' b'spin' b'electron' b'billionaire' b'into' b'males' b',' b'slowly' b'activity' b'may' b'be' b'seen' b'won'
    b',' b'with' b"'Neil" b',' b'requiring' b'them' b'to' b'protect' b'their' b'parking' b'progress' b'.' b'According' b'to' b'youths' b',' b'their' b'own' b'commitment' b'they'
    b'could' b'be' b'controlled' b'by' b'a' b'eye' b'of' b'equilibrium' b'.' b'<unk>' b',' b'however' b',' b'those' b'of' b'<unk>' b'activity' b'as' b'much' b'as'
    b'about' b'absorbed' b',' b'are' b'limb' b'.' b'After' b'1738' b'more' b'than' b'restore' b'planets' b',' b'in' b'isolated' b',' b'these' b'bird' b',' b'they'
    b'remained' b'.' b'<eos>' b'Many' b'birds' b'have' b'consumed' b'large' b'nuclei' b'in' b'Britain' b'.' b'Additionally' b',' b'it' b'may' b'not' b'share' b'Ceres' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 220.8
    loss: 5.168
    elapsed time (seconds): 155.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  20.670 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
