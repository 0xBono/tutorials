.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'vehicles' b'to' b',' b'4' b'varieties' b'living' b'in' b'a' b'10' b'@-@' b'kilometer' b'(' b'7' b'@.@' b'4' b',' b'16' b'@.@' b'5' b'in'
    b')' b'Vistara' b'known' b'as' b'"' b'boycott' b'@-@' b'1' b'"' b'following' b'many' b'species' b'.' b'They' b'This' b'see' b"'" b'sexes' b"'" b'first'
    b'Trujillo' b'from' b'a' b'Principal' b'<unk>' b'=' b'The' b'disability' b'stream' b'expand' b'is' b'also' b'estimated' b'for' b'.' b'The' b"'" b'star' b'Stage' b'film'
    b'said' b'the' b'second' b'single' b'was' b'taken' b'in' b'1983' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Disston' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'The' b'Carr' b'sprite' b'within' b'her' b'talk' b',' b'as' b'of' b'October' b'10' b',' b'2002' b',' b'during' b'6' b'years' b',' b'27' b'years'
    b',' b'affected' b'Togusa' b',' b'RNA' b'Castle' b',' b'<unk>' b'Chandos' b'and' b'ragale' b',' b'published' b'as' b'schedule' b',' b'1882' b',' b'passing' b'them'
    b'on' b'the' b'post' b'@-@' b'island' b'<unk>' b'Project' b'forest' b',' b'many' b'Kent' b'co' b'@-@' b'played' b'by' b'John' b'Kitty' b'Burton' b',' b'who'
    b'could' b'better' b'intend' b'to' b'recruit' b'the' b'project' b',' b'early' b'DuMont' b',' b'IFTA' b'for' b'a' b'well' b'known' b'studio' b'car' b',' b'James'
    b'Wayne' b'Cameron' b',' b'which' b'takes' b'a' b'novel' b'when' b'the' b'film' b'opened' b'the' b'will' b'@-@' b'symbol' b'from' b'the' b'Young' b'ensured' b','
    b'"' b'Wolf' b'Hall' b',' b'neurotic' b'and' b'Lad' b'/' b'Dead' b'\xe2\x80\x94' b'[' b']' b']' b'I' b',' b'you' b'don' b"'t" b'be' b'with'
    b'little' b'inspiration' b'from' b'quotation' b'.' b"'" b'And' b'it' b'was' b'stand' b'about' b'anyone' b'who' b'was' b'reconciled' b'Yangjiang' b',' b'<unk>' b'relapse' b'inside'
    b'.' b'So' b',' b'I' b'think' b'it' b"'s" b'nothing' b',' b'and' b'left' b'as' b'disappointing' b'.' b'The' b'heart' b'actively' b'entered' b'a' b'few'
    b'times' b'.' b'I' b'shall' b'have' b'seen' b'he' b'was' b'every' b'Labour' b'outside' b',' b'and' b'counter' b'it' b'on' b'a' b'player' b'put' b'in'
    b'[' b'...' b']' b'when' b'nothing' b'were' b'surprised' b',' b'they' b'I' b'let' b'mph' b'on' b'Adam' b'Crystal' b'...' b'I' b'started' b'the' b'eight'
    b'broadsides' b'and' b'and' b'neighbors' b'are' b'so' b'<unk>' b'and' b'is' b'also' b'designed' b'.' b'"' b'When' b'he' b'appears' b'the' b'idea' b'to' b'do'
    b'other' b'age' b'centers' b',' b'these' b'other' b'stories' b'involved' b'among' b'the' b'more' b'evidence' b'of' b'Gerrold' b',' b'although' b'on' b'1984' b'nine' b'months'
    b'across' b'a' b'mating' b'core' b'of' b'Ceres' b'.' b'Throughout' b'his' b'Mycena' b"'s" b'<unk>' b',' b'Adams' b'equipment' b'cast' b'of' b'the' b'Literary' b'directors'
    b"'" b'intentions' b'as' b'Leicester' b'.' b'<eos>' b'threatening' b',' b'Tintin' b'made' b'mainly' b'elements' b'of' b'Alfa' b'leading' b'to' b'a' b'expulsion' b'to' b'Payne'
    b',' b'which' b'he' b'would' b'not' b'have' b'a' b'benefit' b'.' b'When' b'they' b'arrive' b'that' b'Mary' b'wrote' b'the' b'"' b'transformation' b'"' b'family'
    b',' b'"' b'thinly' b'in' b',' b'sensation' b',' b'saw' b'his' b'upper' b'to' b'be' b'a' b'end' b'<unk>' b'Stegosaurus' b',' b'but' b'realised' b'that'
    b'<unk>' b'were' b'in' b'place' b'"' b'.' b'He' b'and' b'Robyn' b'sold' b'his' b'emotional' b'work' b'to' b'decide' b'for' b'full' b'time' b'.' b'<eos>'
    b'The' b'innovative' b'journalist' b'Davis' b'was' b'immutable' b'to' b'Tennessee' b',' b'provides' b'his' b'collection' b'on' b'Op\xc3\xa9ra' b'Middleton' b'beginning' b'several' b'Allegro' b'Cynan' b'captured'
    b'<eos>' b'rolls' b'described' b'by' b'Tate' b'Taylor' b'and' b'the' b'NC' b'Arts' b'renewed' b'for' b'up' b'a' b'hip' b'number' b'of' b'criticism' b'from' b'<unk>'
    b'(' b'medley' b')' b'on' b'the' b'back' b'at' b'some' b'leave' b',' b'saying' b'"' b'Despite' b'a' b'game' b'"' b'.' b'The' b'name' b'rhymes'
    b'dubbed' b'lamps' b'planned' b'to' b'observe' b'everything' b'at' b'a' b'correspondence' b';' b'in' b'his' b'list' b'resident' b'<unk>' b'used' b'the' b'beings' b'for' b'his'
    b'story' b'.' b'In' b'late' b'2014' b'Irv' b'Duluth' b'moved' b'to' b'Ecclestone' b'opposite' b'it' b'had' b'changed' b'to' b'the' b'status' b'of' b'his' b'contemporary'
    b'personality' b'.' b'In' b'songs' b'he' b'adopted' b'morphology' b'in' b'the' b'2014' b'election' b'at' b'Jersey' b'James' b'Drive' b'(' b'Civil' b'War' b')' b'.'
    b'Evening' b'has' b'only' b'since' b'prison' b',' b'where' b'its' b'songwriting' b'must' b'lead' b'fiction' b'or' b'343' b'land' b',' b'having' b'many' b'parallax' b'arts'
    b'games' b'.' b'If' b'Raffles' b'introduced' b'the' b'Loch' b'Soundtrack' b'gathered' b'to' b'come' b'on' b'Kyra' b',' b'facing' b'@-@' b'development' b'fire' b'.' b'At'
    b'a' b'peak' b'running' b'between' b'March' b'15' b'to' b'April' b'28' b',' b'No.' b'<unk>' b'developed' b'the' b'statement' b',' b'followed' b'by' b'dedicated' b'for'
    b'father' b"'s" b'<unk>' b'Elisabeth' b'.' b'waterway' b'be' b'devoted' b'to' b'fabricated' b'an' b'mourning' b'of' b'coordinator' b'<unk>' b'and' b'Purpose' b',' b'in' b'which'
    b'he' b'would' b'penetrate' b'Ecclestone' b',' b'which' b'Sans' b'Gleason' b'Comair' b'alternately' b'to' b'block' b'mislead' b'Pruett' b'over' b'a' b'work' b'\xe2\x80\x93' b'so' b'characterised'
    b'by' b'an' b'offer' b'to' b'vote' b'his' b'M.I.A.' b'.' b'Nevertheless' b',' b'in' b'the' b'24' b'Rock' b'<unk>' b'Kubrick' b',' b'with' b'Pleasant' b','
    b'Al' b'Hewitt' b'announced' b'permeated' b'his' b'path' b'in' b'Ireland' b'selected' b'in' b'similarities' b'and' b'2002' b'with' b'a' b'<unk>' b'mother' b'.' b'Marilyn' b'following'
    b'this' b'season' b'folktale' b'on' b'a' b'T' b'Portrait' b'was' b'attended' b'by' b'the' b'series' b'as' b'a' b'tribute' b'to' b'the' b'<unk>' b'Museum' b','
    b'selling' b'no' b'hit' b'tracks' b',' b'his' b'popularity' b';' b'in' b'Crush' b'.' b'funeral' b'supporters' b'that' b'gave' b'a' b'highly' b'controversial' b'media' b'spent'
    b'.' b'In' b'Madison' b"'" b'reign' b'in' b'nominee' b',' b'Kirkpatrick' b'reached' b'Reading' b'@-@' b'request' b',' b'refusing' b'the' b'following' b'year' b'after' b'he'
    b'remained' b'in' b'the' b'attack' b'.' b'It' b'is' b'possible' b'to' b'bring' b'the' b'contract' b'for' b'a' b'stove' b'in' b'<unk>' b',' b'Marie' b','
    b'and' b'Montreal' b',' b'and' b'a' b'"' b'long' b'"' b'.' b'When' b'after' b'they' b'have' b'predicted' b'this' b'goal' b'marked' b'State' b'&' b'A'
    b'jaw' b',' b'there' b'is' b'a' b'deal' b'with' b'"' b'Candy' b'punishment' b'"' b'puck' b'.' b'The' b'size' b'of' b'Buffy' b'goods' b',' b'Communists'
    b',' b'Shu' b',' b'and' b'fellow' b'musicians' b'were' b'sexually' b'stealing' b'.' b'Martin' b'Jeremy' b'sacramental' b'Peter' b'the' b'asteroid' b'into' b'referring' b'to' b'Governments'
    b'.' b'unexpectedly' b'then' b'<unk>' b'the' b'title' b'by' b'"' b'sparkling' b'evidence' b'"' b',' b'such' b'as' b'Henry' b'Palmer' b',' b'it' b'was' b'decided'
    b'to' b'be' b'"' b'symbolism' b'"' b'.' b'Aside' b'78th' b'destruction' b'on' b'a' b'radio' b'programme' b'written' b'when' b'permit' b'detention' b'that' b'may' b'sing'
    b'so' b'it' b'is' b'collectors' b"'" b'claims' b'it' b'was' b'steroid' b'among' b'Shanks' b"'s" b'blessing' b',' b'scared' b'to' b'a' b'parity' b'suffered' b';'
    b'all' b'of' b'which' b'take' b'good' b'calls' b'.' b'A' b'overall' b'study' b'will' b'be' b'considered' b'it' b'has' b'rests' b'red' b'mine' b'in' b'the'
    b'convicted' b'and' b'will' b'be' b'"' b'fool' b'Severn' b',' b'very' b'beautiful' b'with' b'the' b'notable' b'or' b'IDF' b'hours' b',' b'allowing' b'his' b'challenge'
    b'that' b'is' b'a' b'sort' b'of' b'<unk>' b'"' b'.' b'<eos>' b'Several' b'more' b'<unk>' b'kakapo' b'invitation' b'to' b'be' b'tall' b',' b'making' b'it'
    b'seeing' b'out' b'of' b'a' b'symbolising' b'nuclear' b'but' b'zeal' b'with' b'promotional' b',' b'an' b'deep' b'time' b'instead' b'dated' b'the' b'storm' b'.' b'Instead'
    b',' b'and' b',' b'there' b'is' b'broad' b'evidence' b'that' b'foods' b'often' b'appears' b'within' b'drugs' b'.' b'1877' b'Bond' b'sent' b'outbreaks' b'from' b'the'
    b'sugar' b'Sons' b',' b'and' b'DNL' b'are' b'90' b'minutes' b';' b'likely' b'burn' b'an' b'multi' b'@-@' b'meter' b'cannot' b'have' b'a' b'new' b'adverse'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 234.5
    loss: 5.168
    elapsed time (seconds): 161.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  40.882 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
