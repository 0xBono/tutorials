.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'(' b'<unk>' b'enjoyed' b'later' b'1753' b')' b'.' b'Described' b'with' b'minus' b'a' b'close' b'reception' b',' b'"' b'The' b'Crime' b'Come' b'"' b'was'
    b'<unk>' b'by' b'authorised' b'football' b',' b'black' b'@-@' b'purpose' b',' b'Jordan' b'and' b'<unk>' b'.' b'The' b'Swedish' b'speaking' b'"' b'Pig' b'is' b'first'
    b'to' b'be' b'a' b'planet' b'of' b'traffic' b'.' b'And' b'I' b'hope' b'170' b'hours' b'of' b'no' b'works' b'I' b"'re" b'intended' b'to' b'cooperate'
    b',' b'and' b'may' b'be' b'reassigned' b'to' b'1955' b'been' b'like' b'of' b'ability' b'my' b'brilliant' b'life' b'before' b'again' b'academia' b'.' b'Who' b'is'
    b'in' b'my' b'(' b'I' b'known' b'if' b'of' b'which' b'I' b'were' b'30' b'\xe2\x80\x93' b'short' b')' b'Chairman' b'that' b'or' b'about' b'a' b'stable'
    b'weight' b'alone' b'has' b'evolved' b'to' b'put' b'a' b'broad' b'<unk>' b'.' b'"' b'The' b'game' b'also' b'follows' b'to' b'use' b'a' b'vote' b';'
    b'"' b'Ciudad' b'Edition' b'and' b'Prince' b'"' b'began' b'the' b'planet' b'visiting' b'a' b'planet' b',' b'and' b'the' b'<unk>' b'software' b'is' b'tightly' b'suited'
    b'individually' b'.' b'The' b'whole' b'phone' b'\xe1\x83\x9d' b'means' b'"' b'otherwise' b'<unk>' b'and' b'confession' b'retreats' b'for' b'a' b'deduction' b',' b'and' b'the' b'victim'
    b'of' b'once' b'in' b'all' b'descriptions' b',' b'it' b'would' b'be' b'drawn' b'there' b'are' b'power' b'the' b'other' b'common' b'@-@' b'level' b'kind' b'of'
    b'people' b',' b'still' b'Japanese' b':' b'the' b'eyes' b'may' b'erroneously' b'me' b'upon' b'only' b'a' b'lifelong' b'<unk>' b',' b'or' b'by' b'it' b"'s"
    b'sexual' b'distribution' b'.' b'"' b'l' b'Eliot' b'Leguat' b'claims' b'they' b'falls' b'like' b'"' b'The' b'race' b'and' b'acoustic' b'forces' b'giving' b'and' b','
    b'Speed' b',' b'is' b'a' b'landowners' b'that' b'will' b'present' b'to' b'other' b'syncretized' b',' b'"' b'Liz' b'<unk>' b'liked' b'and' b'Feldman' b'in' b'relation'
    b'to' b'additional' b'Key' b'with' b'<unk>' b'.' b'The' b'jury' b"'s" b'art' b'can' b'be' b'due' b'to' b'helping' b'his' b'second' b'female' b'as' b'the'
    b'improvement' b'for' b'debate' b'in' b'a' b'11' b'@-@' b'year' b'of' b'drift' b'chair' b'from' b'people' b'but' b'characters' b'cannot' b'be' b'heard' b'in' b'fragmentation'
    b'of' b'the' b'influence' b'.' b'Journey' b'revamped' b'accordingly' b'among' b'races' b'Press' b'involved' b'in' b'Dial' b',' b'and' b'they' b'thought' b'that' b'"' b'fire'
    b',' b'and' b'cakes' b'of' b'both' b'truth' b'make' b'fare' b',' b'storyline' b'or' b'sectarian' b'sexuality' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'='
    b'=' b'<eos>' b'<eos>' b'According' b'to' b'Michael' b'Solar' b'<unk>' b',' b'God' b'James' b'!' b'praised' b'"' b'there' b'"' b'was' b'written' b'by' b'actor'
    b'David' b'Clay' b',' b'a' b'expedition' b'by' b'bird' b'Zero' b',' b'written' b'by' b'the' b'cars' b'once' b'gained' b'as' b'a' b'planet' b'as' b'<unk>'
    b',' b'a' b'member' b'Jersey' b'and' b'a' b'Rainbow' b'species' b'(' b'accessory' b')' b'outside' b'years' b'help' b'in' b'a' b'game' b'.' b'The' b'single'
    b'were' b'heard' b'by' b'efforts' b'for' b'God' b'is' b'killed' b'.' b'Part' b'celestial' b'hop' b'and' b'a' b'Happy' b'judge' b'back' b'by' b'Barry' b'III'
    b',' b'is' b'often' b'used' b'by' b'Raffles' b'as' b'"' b'making' b'permitted' b'that' b'way' b',' b'and' b'that' b'there' b'is' b'a' b'star' b'of'
    b'themselves' b'chamber' b'dating' b'and' b'Rajamouli' b'we' b"'ll" b'bring' b'the' b'Gala' b'character' b',' b'attempts' b'to' b'come' b'in' b'ship' b'to' b'commit' b'<unk>'
    b'\xe2\x80\x94' b'like' b'I' b'see' b'a' b'thighs' b'other' b'mouth' b',' b'RNA' b',' b'with' b'regard' b'toleration' b'and' b'spectral' b'We' b"'s" b'putting' b'him'
    b'.' b'"' b'In' b'addition' b',' b'playing' b'involvement' b'from' b'Saturday' b'Prison' b'in' b'Hirosaki' b',' b'Graham' b'(' b'half' b'\xe2\x80\x93' b'Mexico' b'Portuguese' b')'
    b'in' b'"' b'[' b'spots' b']' b'Afterward' b'19' b'groups' b',' b'possibly' b'an' b'hacking' b',' b'excellent' b'@-@' b'white' b'to' b'a' b'city' b'appreciation'
    b';' b'fiction' b',' b'the' b'struggle' b'with' b'the' b'assassins' b'"' b'(' b'1200' b'(' b'Japanese' b'<unk>' b')' b'are' b"'" b'Shoes' b',' b'white'
    b'and' b'<unk>' b'.' b'"' b'69th' b'(' b'<unk>' b')' b'is' b'a' b'substantial' b'character' b'"' b'(' b'now' b'impossible' b'"' b')' b'measures' b'in'
    b'advisers' b'questioned' b'on' b'besides' b'quasi' b'Studios' b'.' b'Several' b'individuals' b'reputed' b'construction' b'by' b'[' b'Still' b']' b'bathing' b'.' b'One' b'sued' b','
    b'some' b'known' b'each' b'forms' b'are' b'added' b'.' b'Its' b'readers' b'appears' b'to' b'be' b'a' b'unique' b'fungus' b',' b'he' b'has' b'similarly' b'found'
    b'"' b'$' b'330' b'million' b'"' b'credited' b'very' b'chosen' b'than' b'parallel' b'as' b'Don' b"'t" b'want' b'on' b'honour' b'.' b'In' b'small' b','
    b'the' b'player' b'kept' b'the' b'game' b'"' b'taking' b'its' b'bump' b'of' b'a' b'diversion' b'with' b'which' b'wind' b'candidates' b'only' b'recorded' b'"' b';'
    b'they' b'"' b'more' b'powerful' b'brown' b'plantain' b'"' b'finale' b',' b'and' b'Ross' b'were' b'killed' b'as' b'Samuel' b'Johnson' b',' b'the' b'teenager' b'instead'
    b'of' b'or' b'used' b'up' b'up' b'stating' b'that' b'"' b'this' b'attitude' b"'" b'liked' b'it' b'knows' b'the' b'public' b'who' b'is' b'gone' b'of'
    b'the' b'future' b',' b'and' b'Oh' b'felt' b'it' b'is' b'like' b'a' b'big' b'voice' b'at' b'a' b'series' b'of' b'slowly' b'.' b'<eos>' b'The'
    b'team' b'is' b'integrated' b'to' b'a' b'text' b'for' b'Dr.' b'<unk>' b',' b'preferring' b'up' b'for' b'her' b'own' b'girl' b',' b'but' b'firmly' b'cannot'
    b'find' b'the' b'history' b'after' b'beating' b'that' b'58' b'have' b'done' b'at' b'any' b'particular' b'way' b',' b'with' b'their' b'poor' b'sex' b'return' b','
    b'foul' b',' b'rock' b',' b'even' b"'ve" b'a' b'mountainous' b'gesture' b'ever' b'to' b'begin' b'of' b'trip' b'after' b'a' b'tree' b'except' b'cease' b'l'
    b'knight' b'Tong' b'story' b'.' b'Examples' b'used' b'traditions' b'on' b'Jie' b"'s" b'guitar' b'nature' b'.' b'(' b'The' b'Experience' b'of' b'Ending' b'see' b'interests'
    b'from' b'the' b'night' b'they' b'meant' b'to' b'that' b'ironic' b'there' b'him' b'like' b'it' b'the' b'involve' b'emotions' b'within' b'a' b'series' b'by' b'governing'
    b'or' b'zero' b'.' b'"' b'Bendis' b"'s" b'season' b'mode' b'...' b'from' b'Iraq' b',' b'said' b':' b'"' b'Throughout' b'that' b'awkward' b'manager' b'Berlioz'
    b'.' b'The' b'<unk>' b'is' b'defends' b'in' b'at' b'a' b'request' b',' b'and' b'many' b'ice' b'names' b'is' b'<unk>' b'a' b'welcome' b'gift' b'after'
    b'they' b'am' b'accompanied' b'in' b'the' b'same' b'purpose' b'if' b'little' b',' b'you' b'realizes' b'are' b'treated' b'over' b'from' b'the' b'Most' b'Prussian' b'island'
    b'"' b'.' b'Because' b'relationships' b',' b'he' b'is' b'cites' b'on' b'Ben' b'Lovell' b';' b'"' b'Ernest' b'her' b'"' b'was' b'mixed' b'of' b'the'
    b'game' b'other' b'ends' b'in' b'happen' b'.' b'It' b'was' b'also' b'noted' b'that' b'the' b'book' b'might' b'not' b'be' b'improved' b',' b'though' b'mutual'
    b'eggs' b'was' b'and' b'sampled' b'by' b'the' b'game' b'.' b'In' b'1999' b'pedestrians' b'in' b'The' b'same' b'game' b'south' b'at' b'once' b'run' b'numbers'
    b'on' b'the' b'Japanese' b'Japanese' b':' b'The' b'story' b'sharing' b'public' b'vernacular' b'43' b'%' b',' b'while' b'the' b'males' b'will' b'be' b'erected' b','
    b'and' b'highlights' b'these' b'cases' b'on' b'a' b'<unk>' b'@-@' b'class' b'level' b',' b'which' b'are' b'a' b'fundamental' b'parrot' b'to' b'find' b'all' b'@-@'
    b'longest' b'triangle' b'to' b'be' b'.' b'The' b'bird' b'thinks' b'that' b'they' b'are' b'punishable' b'in' b'four' b'or' b'seven' b'hours' b',' b'and' b'that'
    b'"' b'while' b'playing' b'the' b'night' b'matter' b'arrangement' b'does' b'not' b'be' b'written' b',' b'I' b'might' b'be' b'<unk>' b';' b'ideas' b'are' b'known'
    b'as' b'a' b'legal' b'pleasure' b'low' b',' b'or' b'containing' b'these' b'burn' b'methods' b'.' b"'" b'<eos>' b'The' b'all' b'spelling' b'(' b'see' b'to'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 235.8
    loss: 5.168
    elapsed time (seconds): 164.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  45.674 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
