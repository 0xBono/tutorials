.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'observed' b'a' b'non' b'@-@' b'ion' b'E3' b'term' b',' b'which' b'became' b'also' b'known' b'to' b'be' b'seen' b'outside' b'the' b'Parrot' b'for' b'sea'
    b'history' b'.' b'After' b'grandmother' b'biodegradable' b'the' b'rest' b'of' b'a' b'map' b',' b'many' b'additional' b'theories' b'remains' b'mentioned' b'or' b'some' b'admired' b'kilometers'
    b',' b'their' b'unlock' b'site' b'and' b'that' b'of' b'the' b'equivalent' b'of' b'the' b'brackets' b'.' b'Nutter' b'can' b'possess' b'it' b'as' b',' b'a'
    b'large' b'year' b'of' b'rostral' b'star' b'or' b'<unk>' b'throughout' b'the' b'asteroid' b',' b'but' b'may' b'admire' b'Republicans' b'from' b'Omar' b'proper' b'.' b'In'
    b'several' b'<unk>' b',' b'the' b'Dunder' b'gear' b'comic' b',' b'their' b'high' b'size' b',' b'is' b'sexuality' b'around' b'its' b'work' b'and' b'then' b'more'
    b'heavily' b'only' b'unique' b'.' b'The' b'bill' b'remained' b'in' b'all' b'scientists' b',' b'although' b'the' b'common' b'starling' b'is' b'rarely' b'attached' b'to' b'many'
    b'or' b'establish' b'to' b'five' b'models' b'.' b'A' b'pile' b'of' b'females' b'ranges' b'the' b'solitaire' b'about' b'a' b'short' b'lifestyle' b'under' b'increased' b','
    b'and' b'is' b'by' b'sonne' b'=' b'Reviewing' b'to' b'Administrative' b'<unk>' b',' b'the' b'kakapo' b'ranged' b'to' b'elect' b'that' b'they' b'were' b'well' b'understood'
    b'to' b'reveal' b'by' b'Venus' b'.' b'Cambridge' b'and' b'impregnated' b'third' b'three' b'offenders' b',' b'leading' b'to' b'Jesus' b'of' b'counterpart' b'are' b'undertaken' b'to'
    b'be' b'somewhat' b'dead' b'and' b'not' b'.' b'oni' b'females' b'tend' b'to' b'care' b'that' b'Problems' b'recovers' b'in' b'landowner' b'.' b'To' b'be' b'seen'
    b'to' b'be' b'spored' b',' b'they' b'only' b'have' b'plants' b'over' b'1012' b',' b'yellow' b'or' b'archaea' b',' b'with' b'one' b'house' b'and' b'one'
    b'or' b'encourage' b',' b'and' b'<unk>' b'Gray' b'and' b'flight' b'are' b'his' b'worst' b',' b'but' b'themselves' b',' b'because' b'they' b'often' b'spoils' b'at'
    b'their' b'knife' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Halides' b'=' b'=' b'=' b'<eos>' b'<eos>' b'males' b'(' b'also' b'reported' b'that' b'solutions'
    b',' b'as' b'there' b'is' b'no' b'number' b'of' b'bird' b'.' b'Common' b'and' b'other' b'electron' b'mammals' b',' b'particularly' b'electronic' b',' b'or' b'learning'
    b',' b'are' b'facing' b'to' b'be' b'their' b'follow' b'species' b'on' b'the' b'ground' b'.' b'There' b'are' b'play' b'that' b'no' b'participant' b'cells' b'where'
    b'males' b'are' b'purely' b'inmate' b',' b'occasionally' b',' b'they' b'were' b'not' b'Keats' b'after' b'Reaching' b'.' b'Ceres' b',' b'could' b'become' b'constant' b','
    b'<unk>' b'by' b'little' b'Recently' b'with' b'no' b'the' b'<unk>' b'@-@' b'cutter' b'or' b'catechisms' b'led' b'to' b'Kate' b'<unk>' b'into' b'six' b'years' b'all'
    b'high' b'than' b'Ulster' b'.' b'It' b'is' b'not' b'completed' b'after' b'of' b'any' b'other' b'spots' b'.' b'As' b'when' b'dark' b'chicks' b'tend' b'to'
    b'be' b'detected' b'to' b'east' b',' b'they' b'were' b'accused' b'of' b'<unk>' b'for' b'a' b'clouds' b',' b'which' b'reasoned' b'their' b'orchestral' b'routine' b'to'
    b'fly' b'.' b'I' b'radiates' b'a' b'sense' b'of' b'materials' b'of' b'<unk>' b'or' b'preclude' b'silicon' b';' b'<unk>' b',' b'common' b'females' b',' b'fat'
    b',' b'and' b'propeller' b'Catholicism' b'<unk>' b'indoor' b'<unk>' b'.' b'This' b'equatorial' b'may' b'be' b'placed' b'by' b'fish' b',' b'or' b'allowing' b'they' b'"'
    b'wish' b'to' b'grow' b'and' b'slip' b'laying' b'yield' b'seriously' b'"' b'.' b'In' b'contrast' b',' b'humans' b'again' b'sees' b'significant' b'differences' b'in' b'feathers'
    b'and' b'farm' b'trees' b'such' b'as' b'<unk>' b',' b'roadways' b'their' b'starling' b'or' b'Hawker' b'Campin' b'and' b'seeds' b'.' b'<unk>' b'is' b'not' b'found'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'trident' b'=' b'=' b'<eos>' b'<eos>' b'The' b'population' b'of' b'Ireland' b'(' b'Skye' b')' b'occurs' b'on' b'a'
    b'last' b'single' b',' b'mostly' b'employed' b'within' b'scarce' b'being' b'unique' b'into' b'pipes' b'.' b'Its' b'aspect' b'significantly' b'is' b'differentiated' b'by' b'opener' b'@-@'
    b'degraded' b',' b'by' b'which' b'they' b'have' b'collected' b'them' b'.' b'Much' b'powerful' b'peridium' b'make' b'it' b'when' b'they' b'were' b'listed' b'to' b'have'
    b'been' b'dead' b'via' b'traditional' b',' b'green' b',' b'willing' b'to' b'meet' b'or' b'have' b'amounted' b'to' b'Catholic' b'or' b'replicate' b'ministers' b'.' b'<eos>'
    b'Several' b'it' b'of' b'lumber' b',' b'Wren' b'at' b'Quebec' b'led' b'northern' b'under' b'Colosseum' b'as' b'the' b'name' b'of' b'that' b'found' b'common' b'disorders'
    b'to' b'find' b'1802' b',' b'and' b'as' b'of' b'first' b'forests' b',' b'in' b'<unk>' b'LED' b'regulatory' b'foraging' b',' b'the' b'mating' b'tightly' b'be'
    b'partially' b'accepted' b'by' b'a' b'number' b'of' b'habitat' b',' b'including' b'a' b'early' b'<unk>' b'<unk>' b'.' b'<eos>' b'Portuguese' b'galericulata' b'in' b'2003' b'occurs'
    b'.' b'In' b'the' b'autumn' b'of' b'Nebraska' b',' b'insects' b'did' b'not' b'be' b'removed' b'into' b'steamboat' b',' b'health' b'and' b'youth' b'.' b'lyrical'
    b'Dawn' b',' b'the' b'supreme' b'genus' b'of' b'Gaelic' b',' b'Arnie' b'XII' b',' b'is' b'silent' b'.' b'<eos>' b'Typically' b',' b'more' b'eggs' b'of'
    b'those' b'to' b'14' b'@.@' b'2' b'%' b'of' b'the' b'species' b'has' b'increased' b',' b'but' b"'s" b'closed' b'call' b'chemotherapy' b'curved' b'out' b'of'
    b'scarcely' b',' b'where' b'it' b'is' b'limited' b'to' b'numbers' b'to' b'speak' b'as' b'long' b'as' b'its' b'food' b'.' b'In' b'all' b'<unk>' b','
    b'this' b'often' b'adopted' b'her' b'as' b'possible' b',' b'may' b'have' b'its' b'influence' b'with' b'carbon' b'.' b'According' b'to' b'~' b',' b'it' b'regulate'
    b'them' b'through' b'each' b'particular' b'<unk>' b'and' b'the' b'series' b',' b'or' b'have' b'another' b'appearance' b'that' b'evolved' b'alpine' b'food' b'and' b'other' b'males'
    b'in' b'Occupational' b'Africa' b'.' b'few' b'described' b'only' b'down' b',' b'molecules' b'(' b'M\xc4\x81ori' b'diagram' b'ones' b')' b'and' b'other' b'studies' b',' b'subfossils'
    b'effects' b',' b'watches' b',' b'and' b'small' b'teeth' b',' b'are' b'also' b'severe' b'than' b'whether' b'display' b'cheese' b'or' b'surgical' b'security' b'or' b'rates'
    b'are' b'dark' b'.' b'Common' b'behaviour' b'of' b'the' b'kakapo' b'must' b'be' b'mentioned' b'for' b'their' b'very' b'homes' b'earned' b'by' b'<unk>' b'.' b'Although'
    b'the' b'conversion' b'depiction' b'do' b'not' b'be' b'marked' b'.' b'If' b'many' b'other' b'were' b',' b'paramilitary' b'pathways' b'is' b'found' b',' b'they' b'are'
    b'hunted' b'there' b'.' b'There' b'are' b'minor' b'species' b'from' b'more' b'<unk>' b'.' b'<unk>' b'(' b'it' b')' b'may' b'be' b'outside' b'in' b'Japan'
    b'.' b'listener' b'competing' b'down' b'to' b'become' b'for' b'<unk>' b';' b'<unk>' b',' b'or' b'enlarged' b',' b'they' b'often' b'formerly' b'staffing' b',' b'they'
    b'wish' b'it' b',' b'may' b'be' b'supplying' b'their' b'way' b'.' b'For' b'example' b',' b'due' b'to' b'a' b'live' b'hideous' b'impressions' b'that' b'<unk>'
    b'a' b'short' b',' b'no' b'sealed' b'inside' b'.' b'Among' b'they' b'dans' b'mates' b',' b'where' b'they' b'suffered' b'translation' b'down' b'.' b'<eos>' b'Bunker'
    b'population' b'that' b'New' b'Zealand' b'might' b'have' b'difficult' b'to' b'protected' b'the' b'liver' b'Tom' b'<unk>' b'.' b'width' b'high' b'series' b'may' b'have' b'behavior'
    b'from' b'female' b',' b'tightly' b'there' b'abide' b'taste' b'if' b'their' b'identities' b'risk' b'are' b'and' b'usually' b'claimed' b'it' b'ends' b'off' b'power' b'.'
    b'In' b'1991' b',' b'regulatory' b',' b'smell' b'of' b'colleagues' b'have' b'grown' b'on' b'display' b',' b'while' b'several' b'are' b'closed' b',' b'which' b'allows'
    b'some' b'less' b'<unk>' b',' b'such' b'as' b'so' b'long' b'.' b'Rear' b'k' b'kills' b'Jet' b',' b'which' b'they' b'are' b'called' b'many' b'unlikely'
    b'as' b'they' b'have' b'a' b'standard' b'or' b'<unk>' b',' b'while' b'it' b'suggests' b'it' b'was' b'necessary' b'for' b'<unk>' b'.' b'Most' b'of' b'these'
    b'applications' b'in' b'this' b'legal' b'magazines' b'is' b'found' b'.' b'In' b'a' b'flock' b'between' b'1923' b'on' b'a' b'bikini' b',' b'after' b'Jubilee' b'binding'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.7
    loss: 5.168
    elapsed time (seconds): 152.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  16.015 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
