.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'"' b'deployment' b'and' b'black' b'"' b'and' b'"' b'often' b'just' b'<unk>' b'"' b'.' b'Cure' b'from' b'Harcourt' b'predicament' b',' b'along' b'with'
    b'the' b'yields' b'belt' b'Tbilisi' b',' b'relied' b'on' b'Initial' b'and' b'Covenant' b'cultural' b'.' b'The' b'subject' b'of' b'sixteen' b'teams' b'were' b'remained' b'"'
    b'would' b'be' b'delivering' b'food' b'"' b',' b'but' b'this' b'was' b'split' b'in' b'SuperWASP' b'in' b'14th' b'Africa' b'.' b'As' b'all' b'of' b'most'
    b'of' b'its' b'most' b'absolute' b'terms' b',' b'Kilmer' b'added' b'about' b'several' b'Cretaceous' b'episodes' b'to' b'be' b'put' b'for' b'the' b'male' b'of' b'<unk>'
    b'Taiwanese' b',' b'and' b'the' b'<unk>' b'pleads' b'of' b'the' b'book' b'was' b'published' b'.' b'<eos>' b'In' b'its' b'early' b'report' b'despite' b'the' b'origins'
    b'of' b'a' b'great' b'planet' b',' b'forefront' b'Astraeus' b'Governor' b'stretches' b'its' b'early' b'proportion' b'of' b'Cardiff' b'Omaha' b',' b'in' b'Athens' b'a' b'Queen'
    b'.' b'The' b'Chi' b'College' b'News' b'commented' b'that' b'his' b'book' b'would' b'be' b'the' b'least' b'best' b'gaming' b'source' b'of' b'lawyers' b'.' b'It'
    b'was' b'appearing' b'on' b'Plattsburgh' b',' b'which' b'was' b'Daniel' b'to' b'have' b'talked' b'and' b'stomach' b'its' b'websites' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Description' b'=' b'=' b'<eos>' b'<eos>' b'The' b'primary' b'title' b'of' b'right' b'scrutiny' b'on' b'2' b'October' b'2006' b'was' b'recorded' b'and' b'produced' b'by'
    b'Greg' b'chasers' b'.' b'The' b'new' b'architecture' b'down' b'enantioselective' b'$' b'pound' b'million' b',' b'maximum' b'sport' b'references' b',' b'in' b'1' b'January' b'2014'
    b',' b'albeit' b'the' b'notable' b'year' b'in' b'1905' b'found' b'a' b'final' b'.' b'Members' b'from' b'either' b'before' b'one' b'was' b'the' b'first' b','
    b'although' b'purchasing' b'but' b'bloodstream' b'of' b'Ardhanarishvara' b"'s" b'Republic' b',' b'their' b'reason' b'that' b'the' b'date' b'after' b'fusion' b'would' b'be' b'understood' b'on'
    b'the' b'"' b'concert' b'@-@' b'tense' b'"' b'(' b'"' b'Greek' b'"' b')' b',' b'other' b'than' b'Michael' b'Lands' b'was' b'ever' b'regarded' b'as'
    b'The' b'first' b'governing' b'participant' b'among' b'Scotland' b'.' b'For' b'the' b'breakdown' b'and' b'sought' b',' b'1810' b'<unk>' b'foundations' b'in' b'October' b'3' b','
    b'2004' b';' b'an' b'single' b'atom' b'will' b'be' b'played' b'in' b'his' b'car' b'under' b'Game' b'Senthil' b'.' b'O' b"'Malley" b"'s" b'books' b'were'
    b'abutments' b'from' b'four' b'players' b',' b'fighting' b'for' b'their' b'reflecting' b'color' b',' b'and' b'felt' b'not' b'Somerset' b'honesty' b'as' b'a' b'"' b'student'
    b'state' b'"' b',' b'but' b'Johann' b'M.' b'Lanois' b'is' b'not' b'accidentally' b'@-@' b'Thorne' b';' b'in' b'the' b'episode' b'made' b'totalled' b'Treasury' b'sticks'
    b',' b'in' b'1945' b',' b'1983' b',' b'as' b'they' b'helped' b'the' b'PlayStation' b'York' b'sales' b'.' b'Jordan' b'credit' b'on' b'their' b'success' b'of'
    b'$' b'24' b'million' b'game' b'Vegas' b'in' b'August' b'.' b'<eos>' b'Cannes' b'and' b'policemen' b'made' b'arrest' b'on' b'October' b'13' b',' b'2000' b'at'
    b'No.' b'40' b':' b'America' b"'s" b'series' b'@-@' b'saving' b',' b'Northern' b'Stone' b'including' b'The' b'inflation' b'Co' b'@-@' b'fifth' b'@-@' b'per' b'season'
    b'to' b'be' b'used' b'in' b'one' b'of' b'their' b'first' b'New' b'Guinea' b',' b'1990' b';' b'they' b'were' b'attacked' b'by' b'Classic' b'violacea' b'in'
    b'August' b'2008' b',' b'and' b'praised' b'after' b'"' b'players' b'run' b'to' b'interview' b'the' b'FISA' b'Race' b'one' b'@-@' b'D' b'piano' b'role' b'"'
    b'.' b'The' b'<unk>' b'sounded' b'to' b'have' b'begun' b'three' b'Australian' b'runs' b'in' b'other' b'games' b'.' b'However' b',' b'a' b'LSU' b'monarch' b','
    b'the' b'Crimson' b'Tide' b',' b'won' b'its' b'first' b'game' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Breeding' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'='
    b'=' b'=' b'Background' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b'began' b'a' b'mini' b'@-@' b'game' b'gauge' b'off' b'by' b'Super' b'Joseph' b'Walpole'
    b'rides' b'Bridge' b'in' b'the' b'game' b'lead' b'in' b'softer' b',' b'hockey' b'June' b'1999' b'.' b'(' b'January' b'24' b',' b'2001' b',' b'however'
    b',' b'the' b'album' b'remained' b'in' b'promotional' b'reviews' b'on' b'October' b'12' b',' b'1996' b'.' b'It' b'was' b'selected' b'after' b'he' b'also' b'created'
    b'an' b'emergence' b'at' b'around' b'a' b'titled' b"'s" b'Choice' b'Martin' b'Live' b'to' b'"' b'play' b'a' b'today' b'for' b'chapters' b'life' b"'" b'<unk>'
    b'"' b',' b'saying' b'it' b'"' b'had' b'no' b'compliment' b'actual' b'enough' b'you' b'had' b'your' b'Try' b'ever' b'<unk>' b'by' b'Orkney' b'and' b'pleasant'
    b'Love' b'...' b'we' b'have' b'become' b'far' b'to' b'have' b'nothing' b'of' b'incredible' b'support' b'apart' b'.' b'"' b'In' b'2015' b'Hornung' b'stated' b'that'
    b'"' b'In' b'the' b'rescue' b'with' b'his' b'younger' b',' b'Sid' b'One' b',' b'it' b'[' b"'t" b']' b'finds' b'that' b'on' b'.' b'I'
    b"'ve" b'gone' b'crops' b'.' b'"' b'<eos>' b'Boys' b'were' b'being' b'invited' b'for' b'Jenny' b'Media' b'for' b'Game' b'Award' b'albums' b'dignitaries' b',' b'and'
    b'later' b'Julien' b'O' b"'Malley" b',' b'author' b'VIII' b'Cyprus' b',' b'and' b'Dre' b'kindly' b'reinforced' b'as' b'the' b'modest' b'director' b'in' b'Sub' b'cinema'
    b'and' b'in' b'The' b'collection' b',' b'going' b'94' b'tales' b'from' b'Mo' b'Austen' b'.' b'Hornung' b'received' b'his' b'injuries' b'crime' b'against' b'Judith' b'in'
    b'the' b'2010' b'2006' b'season' b'and' b'a' b'voices' b'on' b'April' b'12' b',' b'2010' b'and' b'69' b'%' b'of' b'$' b'50' b'million' b'worldwide'
    b'in' b'its' b'work' b'.' b'Stokes' b'analysed' b'kilometer' b',' b'including' b'the' b'name' b'announced' b'himself' b'against' b'readers' b'to' b'hundreds' b'of' b'struggled' b'to'
    b'enter' b'their' b'perceived' b'album' b'commemorating' b'sings' b'Star' b'Trek' b'Keys' b'.' b'In' b'Jacques' b'peasants' b',' b'Mosley' b'could' b'Hard' b'be' b'recorded' b'in'
    b'recounting' b'money' b'in' b'four' b'times' b';' b'playing' b'after' b'in' b'the' b'third' b'half' b',' b'he' b'studied' b'on' b'November' b'16' b'to' b'2014'
    b'The' b'next' b'morning' b'.' b'Hornung' b'also' b'weakened' b'in' b'the' b'Amazon' b'World' b'Championship' b'black' b',' b'which' b'served' b'for' b'Marine' b',' b'known'
    b'as' b'womanhood' b'Ceres' b'.' b'Battle' b'also' b'received' b'northeastward' b'and' b'three' b'more' b';' b'partly' b'accepted' b'extensive' b'involvement' b'in' b'the' b'movie' b'with'
    b'damaged' b'jumping' b'points' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Club' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b'was' b'born' b'to' b'begin' b'suit' b'in'
    b'Eve' b'!' b'in' b'March' b'2014' b',' b'including' b'pleasures' b'at' b'Note' b'in' b'South' b'America' b'.' b'Martin' b'M.' b"'Automobile" b'was' b'purchased' b'for'
    b'Space' b'Entertainment' b'from' b'PlayStation' b'2' b',' b'2011' b'.' b'It' b'was' b'announced' b'that' b'one' b'@-@' b'size' b'the' b'attacks' b'was' b'"' b'other'
    b'of' b'his' b'average' b'epic' b'Kaida' b'to' b'try' b'to' b'look' b'.' b'"' b'<eos>' b'The' b'film' b'only' b'received' b'southern' b'reviews' b'on' b'serious'
    b'acclaim' b'and' b'described' b'it' b'as' b'"' b'Jeremy' b'<unk>' b'"' b'in' b'The' b'remix' b'2009' b'.' b'If' b'they' b'were' b'released' b'they' b'began'
    b'to' b'be' b'rich' b'playing' b'definition' b'feast' b'in' b'others' b'.' b'While' b'many' b'stories' b'qualified' b',' b'he' b'performed' b'skill' b'.' b'Ted' b'Wilcox'
    b',' b'who' b'had' b'erupted' b'very' b'commander' b'of' b'GamesRadar' b',' b'"' b'fully' b'rather' b'or' b'not' b'<unk>' b'and' b'<unk>' b'towards' b'us' b'.'
    b'"' b'Walpole' b"'s" b'family' b'remains' b':' b'"' b'His' b'poor' b'art' b'<unk>' b'of' b'worship' b'.' b'The' b'English' b'throw' b'is' b'a' b'show'
    b'.' b'So' b';' b'it' b'is' b'once' b'Uppingham' b',' b'it' b'is' b'a' b'<unk>' b'vs.' b'Raffles' b'<unk>' b'"' b',' b'and' b'described' b'like'
    b'"' b'In' b'this' b'series' b'.' b'"' b'Thousands' b'Tigers' b"'s" b'review' b'give' b'more' b'than' b'25' b'percent' b',' b'including' b'Perry' b',' b'performing'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 245.6
    loss: 5.168
    elapsed time (seconds): 165.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  56.634 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
