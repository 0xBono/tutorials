.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'all' b'of' b'his' b'six' b'advice' b'.' b'Inside' b'some' b'nine' b'@-@' b'seller' b'd' b'offerings' b',' b'<unk>' b'rendering' b'a' b'additional' b'character' b'at'
    b'the' b'Cambridge' b'Hard' b'Indies' b'and' b'high' b'conditional' b'at' b'a' b'sunken' b'but' b'once' b'revised' b'similar' b'to' b'a' b'<unk>' b'<unk>' b'Sisters' b'.'
    b'They' b'disregard' b'inhabited' b'in' b'Steam' b'with' b'only' b'directly' b'pure' b'farmland' b'at' b'Sun' b'Patrick' b'<eos>' b'<unk>' b',' b'<unk>' b',' b'office' b','
    b'stabilization' b'and' b'Genoa' b'with' b'Chinese' b'breeding' b'species' b'scandal' b'and' b',' b'sunset' b',' b'Webb' b'spots' b'revealed' b'style' b'for' b'apparent' b'officials' b'and'
    b'tails' b'in' b'toward' b'disaster' b'development' b'.' b'Ceres' b'wrote' b'that' b'the' b'Manga' b'memoir' b'Bangalore' b'Lemieux' b'M.' b'sexpunctatus' b'up' b'the' b'giant' b'verse'
    b'.' b'Among' b'a' b'play' b'of' b'affairs' b'the' b'body' b'was' b'properly' b'larger' b';' b'the' b'at' b'this' b'time' b'might' b'be' b'omitted' b'and'
    b'said' b'the' b're' b'@-@' b'party' b'are' b'needed' b'.' b'The' b'cent' b'include' b'to' b'<unk>' b'housing' b'to' b'freedom' b'of' b'or' b'hanging' b'<unk>'
    b',' b'influenced' b'by' b'Preston' b'inhabit' b'and' b'limited' b'important' b'feathers' b'such' b'as' b'<unk>' b',' b'<unk>' b'and' b'<unk>' b',' b'and' b'target' b'.'
    b'From' b'2008' b',' b'when' b'people' b'speculates' b'another' b'and' b'totally' b'movies' b',' b'<unk>' b'notes' b'for' b'Gofraid' b"'" b'tomb' b':' b'"' b'from'
    b'intolerance' b'two' b'was' b'always' b'almost' b'very' b'made' b'"' b'.' b'The' b'player' b'seemed' b'to' b'expand' b'their' b'approach' b',' b'"' b'<unk>' b'Panic'
    b'of' b'nesting' b',' b'nothing' b',' b'medicines' b'and' b'pain' b'ever' b'as' b'a' b'witness' b'"' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Martial' b'life'
    b'=' b'=' b'<eos>' b'<eos>' b'According' b'to' b'<unk>' b'cavities' b',' b'after' b'1900' b',' b'there' b'was' b'several' b'square' b'@-@' b'lived' b'(' b'Alkan'
    b'3' b'Imbert' b')' b'used' b',' b'some' b'or' b'to' b'three' b'topics' b',' b'and' b'other' b'languages' b'were' b'modified' b'at' b'this' b'time' b'.'
    b'Common' b'population' b'legal' b'stories' b'are' b'derived' b'for' b'stellar' b'or' b'rapid' b'judgement' b'.' b'They' b'feared' b',' b'"' b'Danger' b'a' b'strongpoint' b'exists'
    b'"' b',' b'and' b'"' b'Nicole' b'understood' b'incorrectly' b',' b'as' b'possible' b'during' b'a' b'mounting' b'badge' b'.' b'"' b'The' b'exact' b'Intelligence' b'language'
    b'to' b'be' b'released' b'in' b'Japan' b"'s" b'language' b'together' b'off' b',' b'up' b'to' b'many' b'other' b'leap' b'that' b'were' b'made' b'in' b'the'
    b'role' b'of' b'sovereign' b',' b'after' b'Meteor' b'and' b'violence' b'Hamar' b'with' b'series' b'face' b'institutions' b';' b'their' b'voice' b'are' b'probably' b'satisfied' b'for'
    b'Sunderland' b'.' b'He' b'punishments' b'from' b'<unk>' b'Dubois' b',' b'a' b'<unk>' b'house' b',' b'calling' b'a' b'symbol' b'that' b'would' b'<unk>' b'a' b'mild'
    b'figure' b'for' b'any' b'other' b'other' b'Pandit' b'male' b'attendant' b',' b'1759' b'<unk>' b';' b'enable' b'also' b'without' b'a' b'convenience' b'characterisation' b'with' b'season'
    b'accidentally' b'.' b'<unk>' b'or' b'several' b'distinct' b'contributions' b'undergo' b'samples' b'who' b'safety' b'(' b'may' b'be' b'afraid' b'and' b'scales' b')' b',' b'but'
    b'the' b'hero' b'is' b'the' b'ability' b'to' b'produce' b'myself' b'.' b'As' b'of' b'treatment' b',' b'females' b'do' b'not' b'be' b'unfair' b'inside' b'spaces'
    b'on' b'enantioselective' b'Anglesey' b',' b'especially' b'by' b'hope' b'because' b'they' b'language' b'Germany' b'anywhere' b'more' b'than' b'to' b'their' b'wish' b'was' b'inflicted' b'.'
    b'When' b'they' b'return' b'you' b'difficult' b',' b'in' b'pistol' b'.' b'For' b'that' b'female' b'<unk>' b',' b'their' b'specific' b'output' b'carry' b'his' b'own'
    b'Intimate' b'and' b'domain' b'Sid' b'Chan' b'Reyes' b'.' b'It' b'can' b'certainly' b'be' b'found' b'in' b'this' b'type' b'that' b'imagined' b'.' b'Another' b'system'
    b'diverged' b'in' b'planning' b',' b'size' b',' b'the' b'common' b'courtship' b'spiders' b'<unk>' b'and' b'bathing' b'pleasure' b',' b'explaining' b'that' b'it' b'was' b'her'
    b'movement' b'in' b'which' b'they' b'may' b'aspects' b',' b'lighten' b'lanthanides' b',' b'and' b'wet' b'leaving' b'them' b'worthy' b'found' b'or' b'are' b'photograph' b'when'
    b'they' b'continue' b'to' b'encourage' b'long' b'colony' b'as' b'their' b'pet' b'dirty' b'they' b'sing' b'.' b'Gaelic' b'sites' b'of' b'shaped' b'Guided' b'may' b'be'
    b'traced' b'.' b'In' b'2007' b',' b'they' b'tracked' b'the' b'conservation' b'that' b'a' b'very' b'fly' b'results' b'that' b'do' b'not' b'be' b'spread' b'before'
    b'so' b'both' b'and' b'star' b'by' b'keys' b'of' b'his' b'usual' b'statue' b'.' b'Genetic' b'feathers' b'roads' b'include' b'planets' b'have' b'people' b'or' b'<unk>'
    b'.' b'But' b'it' b'spots' b',' b'as' b'they' b'feed' b'on' b',' b'it' b'may' b'have' b'continent' b'on' b'it' b',' b'rather' b'than' b'('
    b'<unk>' b')' b';' b'this' b'characteristic' b'is' b'likely' b'by' b'females' b'humiliated' b'into' b'specific' b'Bet' b'roles' b'.' b'Representative' b'"' b'Casimir' b'talk' b'caesarea'
    b'overwhelmingly' b'Bowers' b'else' b'and' b'sexual' b'practices' b'are' b'responsible' b'from' b'some' b'sort' b'of' b'Ceres' b',' b'keeping' b'food' b'euphoria' b'which' b'can' b'reflect'
    b'pretty' b'novice' b'<unk>' b'mRNA' b'.' b'Thus' b',' b'Gray' b'walks' b'upon' b'around' b'to' b'ammunition' b'allowing' b'things' b'from' b'the' b'planet' b',' b'the'
    b'growth' b'of' b'very' b'movement' b'then' b'values' b';' b'this' b'inscriptions' b'is' b'a' b'kind' b'of' b'reality' b'who' b'cleared' b'using' b'changes' b'to' b'beetles'
    b'.' b'<eos>' b"'" b'Mycena' b'!' b"'" b'(' b'Books' b'\xe2\x80\x93' b'22' b'continues' b'nestling' b')' b'is' b'a' b'keepers' b'that' b'can' b'see' b'proposal'
    b'that' b'a' b'message' b'of' b'females' b'through' b'site' b'.' b'But' b'noises' b'their' b'inhabited' b'in' b'ability' b',' b'they' b'thus' b'need' b'to' b'be'
    b'entirely' b'clear' b'.' b'In' b'this' b'method' b'of' b'votes' b'moves' b'in' b'another' b'camp' b',' b'they' b'does' b'not' b'not' b'win' b'until' b'for'
    b'year' b'.' b'Alan' b'may' b'also' b'know' b'from' b'another' b'technique' b'for' b'avoiding' b'or' b'when' b'it' b'might' b'be' b'Keats' b"'s" b'depiction' b'of'
    b'Ceres' b'.' b'In' b'a' b'study' b'to' b'flatly' b',' b'they' b'may' b'prefer' b'very' b'children' b'.' b'illusions' b'can' b'discuss' b'his' b'spiritual' b'smell'
    b'"' b'<unk>' b'"' b',' b'who' b'found' b'<unk>' b',' b'for' b'example' b'of' b'example' b',' b'commenting' b'without' b'.' b'The' b'best' b'four' b'are'
    b'crucial' b'subtle' b'grey' b',' b'so' b'their' b'teeth' b'is' b'shown' b'.' b'Some' b'notably' b'it' b'may' b'be' b'threads' b'to' b'prove' b',' b'and'
    b'bird' b'breeding' b'function' b'of' b'their' b'own' b'patterns' b',' b'on' b'their' b'heaven' b'but' b'or' b'sort' b'of' b'grating' b'female' b'.' b'mediocre' b'reports'
    b'of' b'the' b'good' b'Yourself' b'computers' b'are' b'heavily' b'trapped' b'while' b'tribal' b'activity' b'they' b'appear' b'late' b'.' b'In' b'early' b'1943' b',' b'several'
    b'common' b'saints' b'varies' b'by' b'call' b'outside' b'oil' b'anemia' b'.' b'They' b'and' b'production' b'consist' b'Canning' b'Clay' b',' b'pigs' b',' b'and' b'Ukraine'
    b'(' b'now' b'falling' b'as' b'<unk>' b')' b'.' b'In' b'Ptychoverpa' b',' b'autumn' b',' b'protein' b',' b'and' b'the' b'schools' b'are' b'named' b'freighter'
    b'.' b'By' b'about' b'02' b'minutes' b',' b'they' b'combination' b'of' b'sex' b'forging' b',' b'even' b'though' b'polyurethane' b'postremission' b'<unk>' b'and' b'undirected' b'locations'
    b'material' b'do' b'not' b'suggest' b'what' b'they' b'sing' b'.' b'<eos>' b'Each' b'study' b'of' b'these' b'conservation' b'activity' b'is' b'a' b'Latin' b'dark' b'brown'
    b'tree' b'of' b'oars' b'.' b'The' b'Cd' b'fewer' b'strong' b'nuclei' b'are' b'capture' b'to' b'be' b'different' b',' b'though' b'they' b'feel' b'harmonies' b'.'
    b'When' b'they' b',' b'Ceres' b'or' b'young' b'lines' b'singing' b'it' b'as' b'especially' b'as' b'just' b'.' b'Ceres' b"'re" b'staircases' b',' b'surrounded' b'by'
    b'brown' b'Italians' b',' b'all' b'is' b'slightly' b'<unk>' b'among' b'trees' b'.' b'The' b'kakapo' b'palate' b',' b'which' b'when' b'great' b'ceremonies' b'are' b'politically'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 258.0
    loss: 5.168
    elapsed time (seconds): 174.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  17.007 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
