.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'who' b'dealt' b'the' b'wisdom' b'improved' b'of' b'Raffles' b"'s" b'theme' b'.' b'The' b'roster' b'was' b'very' b'lovers' b',' b'a' b'year' b'player'
    b'.' b'The' b'<unk>' b'map' b'of' b'America' b'for' b'the' b'story' b"'" b'nova' b'were' b'printed' b'within' b'the' b'100' b'five' b'@-@' b'year' b'wild'
    b'race' b';' b'Humpty' b"'Malley" b'Kang' b'promised' b'remade' b'Genesis' b'close' b'to' b'42' b'April' b',' b'including' b'request' b'such' b'as' b'Raul' b'<unk>' b'and'
    b'decided' b'to' b'purchase' b'an' b'sequel' b'to' b'sacrifices' b'to' b'pray' b'in' b'an' b'period' b'of' b'climax' b'to' b'Toronto' b'to' b'ban' b'island' b','
    b'water' b'back' b'well' b'as' b'instead' b'of' b'non' b'@-@' b'equipped' b'were' b'put' b'to' b'a' b'one' b'@-@' b'gravity' b'high' b'by' b'jaw' b'process'
    b'.' b'According' b'to' b'their' b'settlers' b'from' b'and' b'in' b'addition' b'the' b'latter' b'will' b'be' b'asleep' b'on' b'accept' b'of' b'partition' b'.' b'Thus'
    b'for' b'their' b'control' b',' b'O' b"'Malley" b'met' b'Tools' b',' b'but' b'following' b'the' b'election' b',' b'his' b'motor' b'protagonists' b'was' b'revived' b'by'
    b'<unk>' b',' b'scholars' b'and' b'aid' b',' b'<unk>' b',' b'and' b'<unk>' b'at' b':' b'one' b'@-@' b'central' b'side' b'are' b'founder' b'to' b'be'
    b'connected' b'during' b'European' b'Australia' b'.' b'<eos>' b'O' b'Cross' b'born' b'Vistara' b'to' b'join' b'informed' b'of' b'Fincher' b'that' b'Johnson' b'approved' b'what' b'sailed'
    b'to' b'<unk>' b'.' b'The' b'final' b'series' b'was' b'taken' b'at' b'Oslo' b',' b'on' b'support' b'.' b'In' b'creation' b'Croatian' b'losses' b'would' b'be'
    b'suspended' b'to' b'seal' b'losses' b',' b'the' b'closing' b'more' b'successful' b'games' b'and' b'70' b'horses' b'.' b'The' b'earliest' b'damages' b'from' b'local' b'beings'
    b'were' b'issued' b'in' b'August' b'18' b'against' b'a' b'total' b'living' b'in' b'1996' b'a' b'PlayStation' b'Jersey' b'version' b',' b'and' b'established' b'this' b'petition'
    b'.' b'Dinorah' b'from' b'vegetation' b'records' b'feared' b'that' b'Webster' b'3' b'expected' b'"' b'Aston' b'State' b',' b'piece' b'and' b'redemption' b'.' b'"' b'But'
    b'Henry' b'<unk>' b'O' b"'t" b'the' b'last' b'.' b'Such' b'such' b'to' b'Hydnum' b'pelvic' b'fiction' b'and' b'later' b'suggests' b'that' b'the' b'language' b'would'
    b'be' b'a' b'planet' b'.' b'Two' b'<unk>' b"'s" b'updated' b'neither' b'racing' b'Rhymes' b'state' b',' b'The' b'Chicago' b'Nantucket' b':' b'<unk>' b'Port' b'of'
    b'Mount' b'Boom' b'!' b"'" b'Development' b'University' b"'" b'21' b'years' b'on' b'Tyre' b';' b'when' b'Fly' b'wins' b'written' b'so' b',' b'"' b'i'
    b'to' b'being' b'based' b'in' b'simply' b'August' b'and' b'put' b'the' b'old' b'<unk>' b'game' b'in' b'calls' b'and' b'poor' b'aircraft' b'into' b'what' b"'s"
    b'fear' b'become' b'a' b'lot' b'of' b'two' b'have' b'played' b'it' b'.' b'"' b'The' b'UK' b'also' b'bought' b'Iowa' b'turned' b'down' b'Payne' b'abandon'
    b'efforts' b',' b'and' b'only' b'a' b'difference' b'that' b'had' b'been' b'designed' b'by' b'usury' b'for' b'games' b'.' b'<eos>' b'Wind' b',' b'the' b'final'
    b'<unk>' b'headpiece' b',' b'was' b'a' b'former' b'planet' b'monarchs' b'Amateur' b'Champion' b'in' b'the' b'Ontario' b'Isles' b'(' b'1854' b'\xe2\x80\x93' b'China' b')' b','
    b'but' b'also' b'played' b'by' b'Gallienus' b'(' b'also' b'reserved' b';' b'Baron' b'Kicking' b',' b'who' b'rapidly' b'introduced' b'a' b'similar' b'and' b'industrial' b'@-@'
    b'land' b"'" b'investigator' b',' b'Jewell' b',' b'and' b'simply' b'to' b'be' b'released' b'after' b'Mycena' b"'" b'Antonio' b'Was' b'!' b')' b'.' b'The'
    b'Yangzhou' b'foreigners' b'were' b'made' b'by' b'Sultan' b'C.' b'Douglas' b'.' b'The' b'vacation' b'with' b'Texas' b'fulfill' b'analyzed' b'the' b'estate' b'plans' b'.' b'<eos>'
    b'The' b'Little' b'Euphrates' b'discovered' b',' b'and' b'"' b'Nicholas' b'"' b'Directing' b'references' b'as' b'deep' b'television' b'louder' b',' b'and' b'even' b'as' b'an'
    b'successful' b'products' b',' b'like' b'by' b'poor' b'wisdom' b'for' b'the' b'casting' b'of' b'Mars' b'.' b'In' b'the' b'family' b',' b'one' b'of' b'the'
    b'country' b"'s" b'players' b'and' b'computer' b'nesting' b'terms' b',' b'Ukrainian' b'candidates' b',' b'buyer' b',' b'and' b'surviving' b'social' b'actions' b'.' b'Three' b'nations'
    b'must' b'be' b'held' b'as' b'about' b'other' b'species' b',' b'which' b'he' b'will' b'have' b'forever' b'embrittlement' b'African' b'Tranmere' b'portraits' b',' b'owned' b'by'
    b'may' b'have' b'been' b'poor' b'.' b'Muscimol' b'declared' b'its' b'vintage' b'dictator' b',' b'negligence' b',' b'used' b'by' b'the' b'same' b'position' b'in' b'the'
    b'Pawnee' b'system' b'.' b'Dr.' b'Hal\xc3\xa9vy' b'Hunt' b'(' b'The' b'Russian' b'version' b'of' b'1987' b')' b'suggested' b'that' b'Having' b'in' b'his' b'two' b'Denton'
    b'have' b'an' b'healthy' b'faceless' b'opportunity' b'.' b'lends' b'of' b'the' b'primary' b',' b'two' b'years' b'slipping' b'of' b'a' b'hard' b'sense' b',' b'that'
    b'conclusive' b'bright' b';' b'shields' b',' b'with' b'no' b'1' b'\xe2\x80\x93' b'ecological' b'years' b'by' b'big' b'beauty' b'Custom' b'remain' b'in' b'Israel' b'.' b'<eos>'
    b'the' b'Holocaust' b'include' b'first' b'marching' b'125' b'in' b'flop' b',' b'Nevada' b',' b'pseudoephedrine' b',' b'Library' b'and' b'Julian' b'.' b'As' b'of' b'2015'
    b',' b'during' b'the' b'second' b'report' b'of' b'his' b'three' b'@-@' b'<unk>' b'period' b',' b'the' b'pseudonym' b'speculator' b'Schmidt' b'wrote' b'that' b'"' b'it'
    b'would' b'have' b'culture' b'<unk>' b',' b'not' b'it' b'always' b'gift' b':' b'40' b'scoreless' b'of' b'conservation' b',' b'bandit' b'or' b'Yankees' b'...' b'and'
    b'at' b'a' b'fixed' b'up' b'and' b'Mickey' b'!' b'medals' b'to' b'have' b'a' b'apparent' b'association' b'(' b'Sb' b')' b',' b'depth' b'as' b'informal'
    b'this' b'or' b'a' b'hip' b'or' b'invented' b'statutory' b'feelings' b'.' b'"' b'<eos>' b'In' b'the' b'United' b'Kingdom' b',' b'Noel' b'commentaries' b'was' b'different'
    b'headed' b'with' b'a' b'planet' b',' b'which' b'was' b'in' b'various' b'unanimous' b'association' b',' b'and' b'he' b'also' b'examines' b'arms' b'problems' b'.' b'The'
    b'nearby' b'intervention' b'of' b'Jews' b'Johannes' b'Nineteen' b'Kowalski' b'censor' b'ports' b'were' b'published' b'in' b'2006' b'after' b'evidence' b'or' b'press' b'films' b'found' b'the'
    b'3D' b'tunnel' b'at' b'its' b'degree' b'.' b'Usually' b'this' b'sister' b'from' b'Wu' b'in' b'<unk>' b'Jervois' b'(' b'Andy' b'Baker' b')' b'but' b'a'
    b'star' b'4' b')' b'is' b'measured' b',' b'calls' b'of' b'<unk>' b'happen' b'can' b'be' b'found' b':' b'"' b'One' b'of' b'which' b'only' b'to'
    b'be' b'rounded' b'so' b'everything' b'is' b'picked' b'to' b'a' b'eye' b'.' b'After' b'lose' b'when' b'wanting' b',' b'audience' b'years' b'came' b'.' b'In'
    b'Crisis' b'itai' b'his' b'Asian' b'body' b',' b'there' b'is' b'a' b'sharp' b'knight' b'of' b'heart' b',' b'all' b'ranger' b'preparation' b'.' b'"' b'<unk>'
    b'of' b'Angelou' b"'s" b'decision' b'for' b'weak' b'breakdown' b'and' b'talk' b'greatly' b'celebrate' b'their' b'curious' b'most' b'frequent' b'successful' b',' b'running' b'to' b'South'
    b'Africa' b',' b'$' b'375' b'million' b'of' b'gambling' b',' b'and' b'13' b'%' b'of' b'47' b'<unk>' b'.' b'<unk>' b'(' b'sampler' b'showed' b'<unk>'
    b'31' b'%' b'of' b'Mixing' b')' b'were' b'online' b'by' b'the' b'East' b',' b'and' b'so' b'the' b'abnormal' b'vernacular' b'shot' b'<unk>' b'Creed' b'and'
    b'<unk>' b'of' b'\xc3\x81lvaro' b'Hanks' b',' b'consecrate' b',' b'this' b'special' b'time' b'in' b'return' b'to' b'creating' b'Chinese' b'consumer' b'calls' b',' b'threats' b'to'
    b'emphasize' b'parts' b'of' b'the' b'stakes' b'side' b'puppets' b',' b'Babylonian' b'culture' b',' b'and' b'eye' b'behaviour' b'.' b'Other' b'bearing' b'including' b'<unk>' b'closely'
    b'abandoned' b'their' b'service' b',' b'but' b'critics' b'well' b'as' b'compared' b'to' b'<unk>' b'rather' b'<unk>' b'report' b'that' b'follows' b'that' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'=' b'Promotion' b'=' b'=' b'=' b'<eos>' b'<eos>' b'According' b'to' b'Meteorological' b'Records' b'elite' b',' b'they' b'known' b'developed' b'as' b'exemplified'
    b'with' b'bowlers' b',' b'which' b'noticed' b'a' b'large' b'deliberate' b'supply' b',' b'<unk>' b'his' b'priestly' b'starling' b'Babylonia' b',' b'his' b'tallest' b'decline' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.2
    loss: 5.164
    elapsed time (seconds): 156.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  26.313 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
