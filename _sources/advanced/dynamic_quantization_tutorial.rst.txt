.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'York' b'Police' b'<unk>' b',' b'issued' b'and' b'within' b'a' b'stop' b'given' b'to' b'other' b'business' b'stories' b'on' b'certain' b'asteroids' b'.' b'Males' b'propose'
    b'as' b"'\xc3\xa9tat" b'venues' b',' b'during' b'the' b'councils' b'were' b'sent' b'to' b'exist' b'for' b'England' b'.' b'Through' b'2001' b',' b'birds' b'from' b'the'
    b'Des' b'Brothers' b'<unk>' b'became' b'their' b'<unk>' b',' b'and' b'it' b'was' b'1' b'years' b'of' b'<unk>' b'.' b'In' b'1969' b'his' b'major' b'brands'
    b',' b'disc' b'won' b'by' b'the' b'United' b'Kingdom' b'were' b'hired' b'by' b'purchased' b'Ernest' b'Road' b',' b'on' b'May' b'10' b',' b'1987' b','
    b'days' b'that' b'2007' b',' b'was' b'established' b'by' b'insectivorous' b'behaviour' b'.' b'A' b'challenge' b'meant' b'that' b'Ceres' b'became' b'not' b'in' b'his' b'greatness'
    b'as' b'it' b'could' b'be' b'enough' b'to' b'write' b'it' b'had' b'<unk>' b'.' b'"' b'<unk>' b'(' b'<unk>' b'"' b')' b'was' b'"' b'too'
    b'successful' b'as' b',' b'more' b'notably' b'so' b'to' b'be' b'plausible' b';' b'as' b'in' b'1960' b',' b'public' b'community' b'ones' b'is' b'a' b'Jupiter'
    b'planet' b'"' b'.' b'The' b'company' b'promote' b',' b'and' b'drew' b'operations' b'to' b'afford' b'to' b'have' b'motion' b'halfway' b'from' b'140' b'@,@' b'000'
    b'%' b',' b'aspects' b'toward' b'making' b'Somerset' b'the' b'Dangerously' b'@-@' b'community' b'had' b'seen' b'<unk>' b'.' b'In' b'1964' b'he' b'visited' b'the' b'tour'
    b'for' b'the' b'vine' b'race' b'to' b'sections' b'of' b'a' b'foundation' b',' b'but' b'the' b'story' b'established' b'a' b'position' b'on' b'the' b'Aldwych' b'Mt'
    b'.' b'Later' b'on' b'series' b'by' b'another' b'of' b'the' b'people' b"'" b'value' b'relating' b'from' b'the' b'fact' b'and' b'state' b'a' b'"' b'60'
    b'compact' b'@-@' b'time' b'to' b'legal' b'dimension' b'"' b'.' b'stretched' b',' b'Asquith' b'of' b'Patrick' b'Brown' b'was' b'recorded' b'as' b'a' b'Member' b'to'
    b'Archaeologists' b',' b'including' b'Zo\xc3\xab' b'Mai' b',' b'Stokes' b'(' b'Air' b'Dorothy' b'<unk>' b')' b',' b'the' b'sin' b'(' b'Cory' b'General' b')' b','
    b'The' b'Black' b'Power' b'afflicted' b',' b'Justice' b'Combat' b'traders' b',' b'the' b'Annals' b'of' b'<unk>' b'for' b'the' b'boundaries' b'following' b'the' b'Pacific' b'Justice'
    b'Observatory' b',' b'but' b'would' b'have' b'steadily' b'frequently' b'blocked' b'the' b'game' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Creation' b'=' b'=' b'<eos>' b'<eos>'
    b'The' b'standards' b'had' b'their' b'concerns' b'.' b'According' b'to' b'pursuers' b'and' b'platform' b',' b'many' b'other' b'attempts' b'after' b'training' b'is' b'concentrating' b'with'
    b'some' b'cook' b'.' b'Those' b'concerns' b'rendezvoused' b'for' b'the' b'Wikipedia' b'Constitution' b'assembly' b',' b'but' b'while' b'those' b'food' b'<unk>' b'during' b'Peach' b'v.'
    b'Bang' b'!' b'Fulfilled' b'committee' b'such' b'as' b'a' b'traditional' b'African' b'Government' b'with' b',' b'a' b'city' b'and' b'a' b'planet' b'V' b'who' b'is'
    b'screenplay' b'enough' b'to' b'be' b'merely' b'a' b'crystalline' b'.' b'dwindled' b'to' b'other' b'politicians' b',' b'these' b'or' b'synthesizers' b'came' b'to' b'agriculture' b'as'
    b'to' b'miss' b'stories' b'.' b'Marie' b'online' b'in' b'a' b'church' b'or' b'one' b'become' b'increasingly' b'weak' b'once' b',' b'particularly' b'in' b'his' b'last'
    b'game' b'and' b'knowledge' b'of' b'a' b'decade' b'to' b'ranks' b'music' b'October' b'when' b',' b'PlayStation' b'Guinea' b'failed' b'to' b'be' b'.' b'When' b'played'
    b'with' b'their' b'way' b'(' b'<unk>' b':' b'"' b'<unk>' b'<unk>' b'"' b')' b',' b'as' b'well' b'as' b'as' b'follow' b'with' b'around' b'one'
    b'third' b',' b'than' b'at' b'least' b'900' b'%' b'of' b'the' b'year' b'(' b'when' b'he' b'cm' b'Grass' b'criticism' b')' b',' b'outside' b'an'
    b'period' b'of' b'players' b',' b'"' b'Novi' b'293' b'Claudio' b'spacecraft' b'"' b',' b'had' b'buildings' b'of' b'its' b'"' b'king' b'of' b'Outsider' b'"'
    b'against' b'Journey' b',' b'the' b'leading' b'rock' b'number' b'of' b'Liu' b"'Malley" b'and' b'playing' b'story' b'as' b'no' b'"' b'official' b'than' b'every' b'old'
    b'<unk>' b'known' b'"' b',' b'by' b'1821' b'.' b'They' b'also' b'concluded' b'that' b'Michele' b'Daniel' b'Also' b'his' b'stories' b'.' b'"' b'A' b'Bible'
    b'in' b'turn' b'(' b'or' b'Killer' b'I' b'see' b'a' b'<unk>' b')' b'to' b'express' b'God' b'was' b'love' b'in' b'practice' b'(' b'when' b'later'
    b'in' b'top' b'say' b'of' b',' b'"' b'Kody' b'"' b'quickly' b"'s" b'Holiday' b'"' b')' b'to' b'other' b'fumbles' b'by' b'usage' b'of' b'the'
    b'population' b'.' b'The' b'works' b'on' b'others' b'with' b'influence' b'stole' b'Seattle' b',' b'Camille' b'Combs' b'and' b'Chuck' b'Barrows' b'each' b'left' b'surely' b'.'
    b'inhibit' b'a' b'official' b'character' b'may' b'be' b'rehabilitated' b'an' b'one' b'angle' b',' b'though' b'in' b'such' b'Rock' b"'s" b'studio' b'games' b'had' b'to'
    b'recognize' b'their' b'distinctive' b'posterior' b'and' b'white' b'heroes' b'were' b'introduced' b'for' b'rituals' b'@-@' b'sense' b',' b'focusing' b'on' b'him' b',' b'BL' b'tender'
    b'appropriately' b',' b'both' b'of' b'his' b'significant' b'decisions' b';' b'there' b'were' b'no' b'possible' b'hidden' b'ornaments' b'to' b'ignore' b'support' b'without' b'a' b'employee'
    b'perhaps' b'seen' b'in' b'assessments' b'.' b'Ceres' b'misleading' b'further' b'and' b'evolving' b'as' b'"' b'multibillion' b'onto' b'to' b'precise' b'certainly' b'capture' b'Enix' b'crime'
    b'and' b'straw' b'years' b'of' b'people' b'.' b'"' b'Also' b'on' b'a' b'page' b'due' b'to' b'their' b'series' b'and' b'unheard' b',' b'from' b'Berlioz'
    b'Hornung' b'presents' b'respect' b'to' b'acting' b'as' b'a' b'symbol' b'of' b'unique' b',' b'or' b',' b'upon' b'their' b'work' b'that' b'took' b'place' b','
    b'forwards' b'that' b'admitting' b'picking' b'a' b'option' b'to' b'troubles' b'or' b'FISA' b'.' b'<eos>' b'He' b'avoided' b'a' b'event' b'with' b'the' b'possibility' b'Piano'
    b'a' b'peer' b'by' b'his' b'bat' b'\xe2\x80\x94' b'with' b'the' b'stories' b'of' b'guilt' b'of' b'cargo' b'representation' b',' b'instead' b'from' b'a' b'very' b'Prussian'
    b'or' b'classics' b'makes' b'Liu' b"'Malley" b'.' b'He' b'cannot' b'do' b'not' b'speak' b'that' b'"' b'everyone' b'of' b'Reubens' b'be' b'<unk>' b'briefings' b'"'
    b'.' b'On' b'a' b'live' b'scene' b'where' b'he' b'cannot' b'the' b'search' b'about' b'each' b'while' b'only' b'clear' b'to' b'bring' b'good' b'money' b','
    b'he' b'replied' b'like' b'he' b'a' b'reality' b'from' b'his' b'Jews' b'on' b'"' b'it' b'<unk>' b'first' b'instead' b'of' b'Odaenathus' b',' b'being' b'still'
    b'regarded' b'to' b'move' b'until' b'which' b'the' b'<unk>' b'"' b'is' b'a' b'temporary' b'phone' b'.' b'<eos>' b'In' b'1880' b'Hornung' b'interacted' b'on' b'a'
    b'<unk>' b'to' b'be' b'killed' b'as' b'amongst' b'for' b'simplistic' b'officials' b'.' b'The' b'checking' b'trained' b'in' b'how' b'Petrograd' b'/' b'writers' b'is' b'confined'
    b'to' b'human' b'cinematography' b'and' b'.' b'The' b'<unk>' b'for' b'Coleridge' b'and' b'uprooted' b'<unk>' b'Togusa' b'was' b'2' b'Mayo' b'relating' b'to' b'sexually' b'original'
    b'reporting' b'among' b'his' b'occupation' b',' b'Polish' b'syndrome' b',' b'and' b'limb' b'Catholicism' b'<unk>' b'camps' b',' b'with' b'sizes' b'to' b'be' b'imprisoned' b'by'
    b'scale' b'Deepe' b'.' b'A' b'Norse' b'from' b'Ecclestone' b'may' b'be' b'not' b'said' b':' b'"' b'The' b'fighting' b'of' b'transits' b'is' b'a' b'certain'
    b'destination' b'east' b'to' b'put' b'into' b'anything' b'.' b'"' b'Male' b'philosophers' b'such' b'as' b'his' b'stories' b'bearing' b'that' b'"' b'condoms' b'"' b'have'
    b'been' b'intending' b'to' b'decide' b'the' b'rise' b'by' b'not' b'Khandoba' b'because' b'he' b'was' b'assisted' b'by' b'his' b'movement' b'staff' b'(' b'including' b'ability'
    b'career' b')' b'season' b',' b'which' b'he' b'could' b'poison' b'the' b'kingdom' b'of' b'commission' b',' b'"' b'Annals' b"'s" b'<unk>' b'"' b'.' b'In'
    b'these' b'other' b'episodes' b',' b'these' b'and' b'complete' b'conclusions' b'<unk>' b'authorities' b',' b'which' b'can' b'explain' b'once' b'damage' b'.' b'As' b'he' b'sees'
    b'another' b'opponent' b'when' b'he' b'finds' b'John' b'Todt' b'who' b'goes' b'on' b'until' b'<unk>' b',' b'but' b'expected' b'because' b'a' b'understandably' b'rearguard' b'option'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.4
    loss: 5.168
    elapsed time (seconds): 150.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  14.091 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
