.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'on' b'the' b'agency' b'.' b'<eos>' b'In' b'January' b'1924' b'a' b'breaks' b',' b'members' b'to' b'<unk>' b',' b'1200' b'Castle' b',' b'MacDonald' b','
    b'and' b'English' b'stay' b'in' b'Hawaii' b'by' b'<unk>' b';' b'there' b'moved' b'out' b'of' b'the' b'NHL' b',' b'tap' b'reproduced' b'with' b'his' b'zero'
    b'secondary' b'fortress' b'or' b'a' b'bath' b'named' b'Army' b',' b'Michael' b'Magic' b'gabonica' b',' b'King' b'of' b'The' b'FIA' b'and' b'<unk>' b'as' b'a'
    b'only' b'female' b'supply' b',' b'and' b'his' b'spare' b'Oaks' b'conditions' b'.' b'They' b'achievements' b'ensuring' b'communication' b'natural' b'pitfalls' b'as' b'it' b'wanted' b'to'
    b'see' b'several' b'distinguishes' b'.' b'The' b'Edge' b'has' b'some' b'other' b'Assistant' b'Film' b'II' b'privilege' b'when' b'athletes' b'were' b'driven' b'to' b'their' b'<unk>'
    b'to' b'be' b'a' b'Marcus' b'@-@' b'centred' b'.' b'She' b'was' b'a' b'member' b'of' b'most' b'visual' b'"' b'powerful' b'Good' b'object' b'"' b','
    b'and' b'by' b'1899' b'the' b'monarch' b'is' b'awarded' b'by' b'James' b'animator' b'Player' b'of' b'the' b'Crash' b'District' b'History' b'in' b'June' b'Jean' b'1648'
    b'.' b'No.' b'3' b'in' b'Australia' b',' b'<unk>' b'the' b'sale' b'of' b'the' b'north' b'Laos' b'delivery' b'Council' b',' b'was' b'made' b'to' b'100'
    b'%' b'of' b'each' b'other' b',' b'and' b'because' b'of' b'the' b'team' b"'s" b'final' b'studio' b'idea' b',' b'rather' b'than' b'considered' b"'" b'Ceres'
    b';' b'its' b'leaf' b'was' b'eaten' b'by' b'John' b'W.' b'XIII' b'System' b'killed' b'as' b'"' b'suitable' b',' b'and' b'more' b'<unk>' b'have' b'leave'
    b'that' b'Mr.' b'[' b'sic' b']' b'is' b'<unk>' b'@-@' b'handed' b'cut' b'of' b'a' b'star' b'"' b',' b'and' b'a' b'highly' b'short' b'story'
    b'of' b'Hairan' b'Lee' b'was' b'issued' b'to' b'rise' b'a' b'pad' b'of' b'Paula' b'Etingoff' b'.' b'A' b'public' b',' b'flyover' b'in' b'which' b'actually'
    b'comes' b'on' b'into' b'a' b'series' b'with' b'art' b'from' b'1845' b',' b'in' b'Civilian' b'rule' b',' b'18' b'in' b'traps' b',' b'<unk>' b'perhaps'
    b'one' b'in' b'which' b'sections' b'was' b'made' b'as' b'of' b'August' b'for' b'251' b'.' b'A' b'overlaid' b'about' b'this' b'active' b'card' b'was' b'over'
    b'20' b'years' b'old' b',' b'possibly' b'published' b'.' b'<eos>' b'The' b'common' b'background' b'is' b'held' b'by' b'rods' b'during' b'season' b'cracks' b'and' b'may'
    b'be' b'safely' b'adapted' b'to' b'be' b'pleasure' b'.' b'The' b'PlayStation' b'Zealand' b'Times' b'and' b'Dhrupad' b'visual' b'excitement' b'specifically' b'for' b'a' b'assignment' b'which'
    b'conduct' b'most' b'other' b'evaporation' b'identified' b'control' b'.' b'Since' b'this' b'rate' b'was' b'brought' b'at' b'camps' b'to' b'allow' b'their' b'cake' b',' b'they'
    b'do' b'reach' b'another' b'indicated' b'Ceres' b'or' b'collecting' b'<unk>' b'@-@' b'handed' b'Wisniewski' b'that' b'promote' b'mates' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Joyful'
    b'EASA' b'=' b'<eos>' b'<eos>' b'"' b'Why' b'Polytron' b'"' b'is' b'the' b'fifth' b'story' b'of' b'Usher' b'in' b'the' b'first' b'season' b'of' b'non'
    b'@-@' b'Dylan' b',' b'Houston' b',' b'and' b'proclaimed' b'it' b'directed' b'in' b'Canada' b'in' b'the' b'UK' b':' b'2nd' b'Carolina' b',' b'Switzerland' b','
    b'and' b'CBS' b',' b'indicating' b'Cardiff' b'exquisite' b'for' b'the' b'tour' b'and' b'an' b'25' b'@-@' b'American' b'cast' b'from' b'number' b'thirteen' b',' b'approximately'
    b'300' b'@,@' b'000' b'copies' b'.' b'The' b'main' b'best' b'single' b'marked' b'has' b'been' b'numerous' b'government' b'release' b'features' b'Gold' b'stump' b'to' b'prepare'
    b'about' b'the' b'sample' b'to' b'Stop' b'and' b'2' b'actually' b'recorded' b'in' b'publicized' b'the' b'U2' b'.' b'2012' b',' b'Uleki' b'won' b'voodoo' b'for'
    b'several' b'weeks' b',' b'giving' b'Illinois' b'.' b'The' b'production' b'was' b'benefit' b'as' b'saying' b'"' b'"' b'The' b'1' b'@.@' b'79' b'Devlin' b'"'
    b'need' b'to' b'have' b'traverse' b'remixes' b'between' b'them' b'and' b'"' b'The' b'Sun' b'"' b',' b'and' b'the' b'"' b'highlights' b'strips' b'to' b'catch'
    b'"' b'life' b'after' b'songs' b'and' b'<unk>' b'revenge' b'are' b'not' b'found' b'and' b'their' b'mortals' b'may' b'be' b'exported' b'for' b'kill' b'Little' b','
    b'technical' b'or' b'black' b'seral' b'.' b'The' b'character' b'be' b'also' b'accepted' b',' b'but' b'in' b'broadcast' b'it' b'was' b'wrong' b'.' b'Lawrence' b','
    b'in' b'The' b'reviewer' b'Shiva' b'News' b',' b'gave' b'a' b'bosses' b'to' b'her' b'experience' b'in' b'March' b',' b'after' b'attempting' b'to' b'give' b'the'
    b'introduction' b'and' b'political' b'pages' b'.' b'Because' b'their' b'acting' b'received' b'singles' b'in' b'song' b'games' b'is' b'to' b'be' b'able' b'to' b'find' b'<unk>'
    b',' b'Stokes' b'would' b'flow' b'parodies' b'.' b'A' b'estimated' b'weak' b'article' b'are' b'at' b'home' b'running' b'to' b'any' b'past' b'out' b'of' b'which'
    b'can' b'be' b'intimate' b',' b'capable' b'of' b'Making' b'with' b'go' b'Rovers' b'.' b'<eos>' b'The' b'Star' b'District' b'has' b'lost' b'various' b'stories' b','
    b'and' b'found' b'interest' b'for' b'over' b'Alliance' b',' b'including' b'to' b'warning' b'Japanese' b',' b'or' b'characterisation' b'was' b'an' b'human' b'tonic' b'.' b'O'
    b"'Malley" b'left' b'a' b'series' b'of' b'troubles' b',' b'Lovell' b',' b'writer' b'The' b'San' b'Planet' b',' b'Maxwell' b'said' b':' b'"' b'I' b'know'
    b'the' b'head' b'a' b'lawyer' b'is' b'around' b'a' b'good' b'weight' b',' b'and' b'he' b'comes' b'up' b'the' b'improperly' b'game' b'.' b'...' b'The'
    b'core' b',' b'so' b'I' b'could' b'work' b'at' b'God' b'.' b'"' b'Season' b'beak' b'supporting' b'that' b'"' b'kind' b'of' b'these' b'products' b'faces'
    b'in' b'Evangelist' b'motive' b'caused' b'out' b'to' b'either' b'support' b'all' b'white' b'at' b'both' b'.' b'He' b"'ll" b'keep' b'homage' b'back' b'to' b'West'
    b'worsened' b',' b'while' b'car' b'once' b'possible' b'and' b'stay' b'on' b'island' b',' b'could' b'be' b'able' b'to' b'be' b'all' b'us' b'to' b'become'
    b'the' b'American' b'follows' b'@-@' b'or' b'@-@' b'Park' b'sponsorship' b'race' b'for' b'bucket' b',' b'but' b'neither' b'.' b'"' b'Mandler' b'could' b'convince' b'his'
    b'world' b'efforts' b'about' b'and' b'unreliable' b'contradictions' b',' b'who' b'exposed' b'<unk>' b'for' b'to' b'disrupt' b'racquets' b'anything' b'.' b'<unk>' b'he' b'has' b'returned'
    b'to' b'attack' b'any' b'other' b'Carantouan' b',' b'such' b'as' b'up' b'analysis' b'of' b'100' b'metres' b'and' b'even' b'often' b'bright' b'as' b'to' b'Isaac'
    b'H' b'heights' b'.' b'The' b'resulting' b'sac' b'deal' b'on' b'a' b'variety' b'of' b'conversation' b'.' b'The' b'flashback' b'states' b'with' b'this' b'unknown' b'season'
    b'closely' b'generate' b'it' b'.' b'The' b'female' b'itself' b'itself' b'declared' b':' b'"' b'The' b'plants' b'microscopically' b'the' b'best' b'mental' b'feeling' b'of' b'the'
    b'Wizards' b'"' b',' b'before' b'half' b'that' b'Edwin' b'<unk>' b'said' b':' b'"' b'The' b'comparison' b"'re" b'pretty' b'out' b'of' b'me' b'?' b'you'
    b'seems' b'.' b'"' b'The' b'crew' b'sees' b'another' b'one' b'@-@' b'length' b'range' b':' b'"' b'I' b'think' b'that' b'the' b'terrible' b'pity' b'plays'
    b'it' b'to' b'think' b'to' b'find' b'young' b'assume' b'leg' b',' b'The' b'hard' b'tree' b'give' b'us' b'the' b'second' b'.' b'Also' b'after' b','
    b'on' b'the' b'-' b'we' b'think' b'they' b'really' b'references' b'to' b'the' b'convict' b'.' b'I' b"'m" b'going' b'my' b'early' b'time' b'of' b'.'
    b'If' b'no' b'you' b'would' b'split' b'like' b'so' b'because' b'.' b'He' b'normally' b'get' b'<unk>' b'they' b'was' b'ready' b'to' b'do' b'so' b'.'
    b'"' b'<eos>' b'minded' b'<unk>' b'Bruno' b'attributed' b'that' b'"' b'Loverboy' b'"' b'roster' b'sign' b'to' b'get' b'out' b'caused' b'for' b'a' b'31' b'minutes'
    b'and' b'talking' b'these' b'high' b'features' b'to' b'participate' b'on' b'the' b'level' b'.' b'Contemporary' b'questions' b'are' b'generally' b'libretto' b',' b'because' b'their' b'aircraft'
    b'has' b'Huerta' b'in' b'been' b'lost' b'.' b'As' b'it' b'feels' b'his' b'surprised' b'fastball' b',' b'having' b'no' b'high' b'unit' b',' b'something' b'they'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 226.1
    loss: 5.168
    elapsed time (seconds): 152.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  23.829 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
