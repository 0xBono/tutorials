.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'with' b'Fear' b'and' b'Stanley' b'International' b"'s" b'husband' b'.' b'<eos>' b'<unk>' b'Famitsu' b'is' b'both' b'eaten' b'by' b'Game' b'1' b'as' b'Troy' b'Reflections'
    b'secondary' b',' b'digital' b'Germany' b',' b'headquarters' b'Br\xc3\xbbl\xc3\xa9' b',' b'Australia' b',' b'and' b'other' b'languages' b'remained' b'with' b'Northeastern' b'as' b'<unk>' b'<unk>' b'.'
    b'<eos>' b'The' b'first' b'two' b'recent' b'fin' b'names' b'in' b'Australia' b'enjoyed' b'263' b',' b'but' b'supported' b'now' b'organized' b'abundant' b',' b'albeit' b','
    b'including' b'aggressive' b'schools' b',' b'related' b'to' b'up' b'clay' b'or' b'<unk>' b'to' b'seek' b'their' b'wage' b'by' b'the' b'50' b'mm' b',' b'when'
    b'material' b'produces' b'the' b'other' b'dose' b'kept' b'wounded' b'making' b'power' b',' b'one' b'on' b'popular' b',' b'around' b'75' b',' b'and' b'areas' b'Norges'
    b'Mfume' b'.' b'surveying' b'piano' b'monks' b'clay' b',' b'by' b'the' b'1775' b'they' b'should' b'continue' b'to' b'have' b'seen' b'them' b'a' b'"' b'Jimmy'
    b'Forth' b'"' b',' b'and' b'grows' b'on' b'a' b'nephew' b"'s" b'bat' b'on' b'its' b'haul' b'@-@' b'northeast' b'event' b',' b'states' b'serving' b'after'
    b'asking' b'only' b'on' b'ground' b',' b'as' b'he' b'sings' b'to' b'600' b'\xe2\x80\x93' b'3' b'@-@' b'race' b'per' b'year' b'.' b'Although' b'he' b'concluded'
    b',' b'"' b'Quite' b'how' b'no' b'pack' b'attention' b'is' b'<unk>' b'as' b'claimed' b'you' b'have' b'In' b'trying' b'of' b'a' b'counter' b'when' b'or'
    b'injury' b'include' b'about' b',' b'he' b'had' b'C' b'communication' b';' b'nor' b'convict' b'bearing' b'Muhammad' b"'s" b'killer' b'When' b'ending' b'each' b'eggs' b'years'
    b'why' b'I' b'shall' b'be' b'treated' b'as' b'the' b'perfect' b'treatment' b'.' b'"' b'<eos>' b'The' b'village' b'was' b'played' b'by' b'appropriate' b'works' b'that'
    b'began' b'lengths' b'for' b'<unk>' b'Galaxy' b'\xe2\x80\x94' b'about' b'4' b'%' b'of' b'Valkyria' b'One' b'of' b'these' b'years' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'=' b'Edibility' b':' b'certain' b'accidents' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'planet' b"'s" b'defense' b'choose' b'is' b'active' b',' b'the' b'main'
    b'person' b',' b'which' b'is' b'a' b'new' b'genus' b'species' b',' b'who' b'returns' b'to' b'a' b'male' b'disc' b'.' b'It' b'suggests' b'that' b'Other'
    b'differences' b'are' b'primarily' b'exported' b'between' b'a' b'planet' b'who' b'be' b'.' b'According' b'to' b'untidy' b',' b'<unk>' b'instructing' b'that' b'this' b'pattern' b'has'
    b'been' b'that' b'Shao' b'Payne' b'a' b'words' b'of' b'sublime' b'opinion' b'is' b'eaten' b'by' b'The' b'fingers' b',' b'in' b'which' b'conifer' b'Dean' b'considerably'
    b'named' b'the' b'name' b'a' b'<unk>' b'spiritual' b'Osato' b'of' b'Ceres' b',' b'meaning' b'"' b'...' b'the' b'entire' b'female' b',' b'the' b'planet' b'mode'
    b'expanding' b'problems' b'of' b'<unk>' b'fully' b'"' b'.' b'Because' b'<unk>' b'waste' b'is' b'their' b'extremely' b'tightly' b'areas' b',' b'he' b'en' b'lignotuber' b'Karl'
    b'Carter' b'adopted' b'it' b'as' b'a' b'speaker' b'to' b'go' b'to' b'Jumbo' b',' b'viewed' b'for' b'the' b'lack' b'of' b'time' b'cow' b'witnesses' b'('
    b'not' b'discerned' b';' b'they' b'are' b'in' b'the' b'<unk>' b'/' b'sister' b')' b'Studies' b'breaking' b'its' b'uncle' b"'s" b'Arterial' b'under' b'their' b'ideas'
    b'.' b'He' b'Video' b'<unk>' b'goes' b'along' b'Covenant' b'guides' b'on' b'a' b'cap' b'series' b'than' b'a' b'region' b'of' b'$' b'400' b'on' b'the'
    b'attacked' b'base' b'so' b'that' b'"' b'it' b'is' b'high' b'<unk>' b'.' b'They' b'can' b'kind' b'that' b'<unk>' b'as' b'possibilities' b'when' b'they' b'are'
    b'<unk>' b'or' b'conservation' b'"' b'.' b'Although' b'a' b'bill' b',' b'they' b'be' b'ferreum' b'.' b'It' b'takes' b'a' b'lakotaensis' b'in' b'a' b'random'
    b'lifestyle' b'of' b'professional' b'version' b'of' b'cooling' b'Dillon' b'per' b'ions' b'in' b'situations' b',' b'with' b'only' b'15' b'writing' b'Somerset' b',' b'imposing' b'chicks'
    b':' b'<eos>' b'In' b'the' b'longest' b'colour' b'the' b'king' b'put' b'to' b'a' b'cheap' b'<unk>' b',' b'Truth' b'man' b'calls' b'to' b'uphold' b'its'
    b'office' b'.' b'Its' b'refit' b'is' b'wetland' b'such' b'to' b'praise' b'as' b'"' b'it' b'Will' b'as' b'it' b'"' b'.' b'Japanese' b'blacks' b'on'
    b'Charmed' b'from' b'Radical' b'Poetry' b'may' b'be' b'strong' b'to' b'occupy' b'the' b'pair' b'in' b'Japanese' b'wings' b',' b'while' b'the' b'melee' b'is' b'restricted'
    b'to' b'a' b'new' b'condition' b'of' b'or' b',' b'and' b'compared' b'to' b';' b'assume' b'the' b'true' b'numbers' b'of' b'trees' b'.' b'<eos>' b'Because'
    b'any' b'females' b'form' b'or' b'have' b'been' b'proposed' b'to' b'his' b'evolution' b'at' b'churches' b',' b'<unk>' b':' b'On' b'the' b'fourth' b'near' b'a'
    b'height' b'of' b'his' b'proofs' b'around' b'a' b'specific' b'person' b',' b'the' b'female' b'wings' b'in' b'<unk>' b'.' b'Using' b'these' b'<unk>' b',' b'they'
    b'heard' b'each' b'statutes' b',' b'and' b'would' b'be' b'<unk>' b',' b'Venus' b',' b'<unk>' b'House' b',' b'<unk>' b',' b'<unk>' b',' b'falcons' b','
    b'and' b'goddesses' b',' b'with' b'the' b'<unk>' b'architects' b'.' b'These' b'appears' b'JK' b'numbers' b'are' b'required' b'for' b'the' b'other' b'such' b'doughboy' b','
    b'solders' b'Hale' b',' b'APL' b',' b'are' b'so' b'trapped' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Kitsune' b'=' b'=' b'<eos>' b'<eos>' b'It' b'is'
    b'also' b'regarded' b'in' b'several' b'conservative' b'languages' b'than' b'forceful' b',' b'possession' b'from' b'their' b'body' b'charities' b',' b'but' b'anywhere' b'from' b'other' b'vertical'
    b'ideas' b'to' b'oars' b'.' b'This' b'image' b'is' b'approximately' b'30' b'minutes' b'with' b'Cameo' b'rises' b'.' b'It' b'is' b'outbid' b'by' b'their' b'underparts'
    b'and' b'formal' b'pair' b'of' b'ultimate' b'toxicity' b'.' b'These' b'losses' b'were' b'<unk>' b'in' b'nature' b'in' b'the' b'village' b'of' b'Tournament' b'when' b'they'
    b'believed' b'a' b'variety' b'of' b'an' b'female' b'tree' b'.' b'What' b'does' b"'t" b'not' b'obscurity' b',' b'they' b'lay' b'one' b'or' b'the' b'bird'
    b"'s" b'brooches' b',' b'it' b'may' b'have' b'Horace' b'his' b'genetic' b'shape' b'.' b'It' b'is' b'that' b'possible' b'that' b'2000' b'@-@' b'Level' b','
    b'they' b'-' b'arisen' b'about' b'individual' b'kinds' b'of' b'human' b'@-@' b'behaviour' b',' b'and' b'they' b'can' b'be' b'narrow' b',' b'he' b'to' b'discover'
    b'the' b'envelope' b'mean' b'as' b'they' b"'re" b'often' b'.' b'Spanish' b'Figure' b'color' b'that' b'may' b'be' b'traced' b'for' b'sand' b'starlings' b'and' b'concentrated'
    b'Crash' b'Dam' b'in' b'the' b'<unk>' b'of' b'slowing' b'Japanese' b'decorated' b'of' b'their' b'"' b'plumage' b'of' b'power' b'lemon' b'effects' b'inventory' b'to' b'market'
    b'as' b'rich' b',' b'native' b'5' b'@.@' b'5' b'\xe2\x80\x93' b'2' b'a' b'@.@' b'3' b'out' b',' b'South' b'Australia' b'in' b'other' b'.' b'Foxes'
    b'may' b'first' b'roll' b'at' b'how' b'consoles' b'in' b'use' b'they' b'can' b'be' b'.' b'If' b'proper' b'specimens' b'will' b'be' b'seen' b'of' b'kakapo'
    b'such' b'as' b'paper' b',' b'they' b'will' b'undergo' b'more' b'sexual' b'wait' b',' b'no' b'eucalypt' b'asteroids' b'in' b'rocks' b'throne' b';' b'Boss' b'and'
    b'Mulder' b'or' b'Irish' b'splicing' b'\xe2\x80\x94' b'concerns' b'.' b'If' b'any' b'might' b'turn' b'or' b'allow' b'them' b'teaching' b'they' b'had' b'used' b'.' b'"'
    b'In' b'the' b'only' b'century' b',' b'tame' b'Kalyanasundara' b'are' b'too' b'clearly' b'common' b'.' b'<unk>' b'his' b'male' b'fruit' b'differs' b'in' b'8' b'carries'
    b',' b'and' b'the' b'chicks' b'as' b'a' b'female' b'by' b'their' b'market' b'.' b'Other' b'females' b'were' b'leverage' b'until' b'they' b'also' b'do' b'to'
    b'fully' b'detonated' b'until' b'the' b'1830s' b';' b'they' b'said' b',' b'they' b'have' b'differently' b'so' b'expressed' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Ecology'
    b'=' b'=' b'<eos>' b'<eos>' b'The' b'mushrooms' b'are' b'mere' b'somewhat' b'available' b',' b'and' b'may' b'be' b'worth' b'ex' b'@-@' b'8' b',' b'the'
    b'male' b'concerning' b'their' b'1605' b'or' b'wider' b'hypothesis' b',' b'either' b'oxide' b'.' b'Sometimes' b'around' b'<unk>' b'anti' b'@-@' b'mRNA' b'of' b'tail' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 242.3
    loss: 5.168
    elapsed time (seconds): 166.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  53.835 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
