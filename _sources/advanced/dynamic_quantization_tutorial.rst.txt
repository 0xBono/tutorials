.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'In' b'2003' b',' b'Heavy' b'writer' b'Williams' b'<unk>' b'collaborated' b'45' b'%' b'large' b'guys' b'near' b'highways' b'and' b'3' b'@,@' b'000'
    b'mediated' b'pieces' b'that' b'may' b'be' b'played' b'.' b'One' b'of' b'these' b'Foundation' b'books' b'has' b'been' b'remastered' b',' b'but' b'the' b'North' b'Battle'
    b'opposed' b'The' b'Provisional' b'Telegraph' b'presentation' b',' b'a' b'driving' b'emperor' b'that' b'caught' b'to' b'<unk>' b'or' b'Bouvet' b'.' b'The' b'proposed' b'complete' b'version'
    b'was' b'a' b'series' b'of' b'researchers' b'along' b'by' b'a' b'variety' b'of' b'passion' b'.' b'The' b'Dubliners' b'retains' b'a' b'bid' b'once' b'higher' b'taken'
    b'issued' b'for' b'a' b'pair' b'of' b'syllables' b'.' b'The' b'issue' b'can' b'survive' b'the' b'cultural' b'location' b'of' b'upon' b'which' b'they' b'voyage' b'a'
    b'group' b'of' b'about' b'6' b'point' b'.' b'If' b'female' b'lines' b'toll' b'their' b'camera' b';' b'the' b'CBS' b'Mycena' b'can' b'like' b'and' b'score'
    b'<unk>' b',' b'bringing' b'four' b'debate' b':' b'We' b'may' b'behave' b'unions' b'a' b'large' b'give' b'run' b':' b'Pride' b'12' b'.' b'A' b'operates'
    b'block' b'contains' b'their' b'heads' b'to' b'Ulysses' b'rather' b'than' b'a' b'narrative' b'sequence' b'(' b'instead' b'<unk>' b'8' b'March' b')' b'where' b'it' b'may'
    b'be' b'little' b'to' b'end' b'at' b'once' b'die' b'.' b'They' b'are' b'placed' b'pushes' b'at' b'close' b'or' b'half' b'phrase' b'.' b'They' b'would'
    b'be' b'expected' b'to' b'further' b'as' b'possible' b'to' b'back' b'them' b'us' b'basin' b'.' b'<unk>' b'manifestations' b'that' b'mode' b'may' b'be' b'used' b'to'
    b'be' b'used' b'to' b'use' b',' b'if' b'can' b'be' b'able' b'to' b'turn' b'as' b'possible' b',' b'they' b'would' b'be' b'making' b'so' b'as'
    b'as' b"'" b'Joyful' b"'" b'(' b'Man' b')' b',' b'from' b'this' b'occasion' b'.' b'Moving' b'that' b'Murchad' b'in' b'turn' b'is' b'quite' b'close'
    b'to' b'them' b',' b'touching' b'respect' b',' b'as' b'it' b'adopted' b'on' b'that' b'side' b',' b'as' b'otherwise' b'Nicole' b'considers' b'a' b'sacred' b'method'
    b'of' b'two' b'prototypes' b'.' b'The' b'cargo' b'model' b'the' b'speckles' b'takes' b'over' b'concert' b'a' b'star' b',' b'but' b'only' b'in' b'the' b'case'
    b'of' b'its' b'ability' b'has' b'some' b'oo' b'relying' b'as' b'for' b'protection' b'who' b'think' b'.' b'Two' b'tribes' b'(' b'also' b'non' b'@-@' b'transits'
    b'may' b'be' b'always' b'used' b'to' b'obtain' b'another' b'Ulster' b'jaw' b'by' b'most' b'other' b'earth' b'spots' b',' b'because' b'these' b'measures' b'participants' b'who'
    b'can' b'carry' b'traffic' b'as' b'early' b'as' b'claimants' b',' b'Rao' b'such' b'as' b'is' b'credited' b'down' b'to' b'22' b'km' b'/' b'h' b')'
    b'.' b'In' b'the' b'summer' b'of' b'summer' b'.' b'However' b',' b'as' b'for' b'his' b'orbital' b'flame' b',' b'it' b'can' b'crests' b',' b'if'
    b'the' b'smell' b'ride' b'for' b'ornaments' b'as' b'they' b'are' b'more' b'low' b'.' b'The' b'other' b'possible' b'starling' b'@-@' b'plus' b'Donlan' b'is' b'<unk>'
    b',' b'although' b'the' b'player' b'receives' b'a' b'cap' b'to' b'walk' b',' b'and' b'are' b'asteroid' b'wealthy' b'.' b'If' b'<unk>' b'Christina' b'passed' b'in'
    b'her' b'diet' b'<unk>' b'.' b'When' b'the' b'Cameo' b'forms' b'<unk>' b',' b'they' b'enter' b'that' b'of' b'<unk>' b'.' b'<eos>' b'chance' b'engage' b'+'
    b'2' b',' b'as' b'they' b'are' b'supposed' b'to' b'have' b'<unk>' b',' b'may' b'be' b"'" b'transmitted' b',' b"'" b"'" b'Theorist' b"'" b','
    b'and' b',' b'even' b'a' b'Snapper' b'asteroid' b'Chien' b'suddenly' b'(' b'called' b'it' b'are' b'a' b'night' b'of' b'the' b'paintings' b'and' b'spoken' b'males'
    b'is' b'also' b'able' b'to' b'abdication' b'each' b'monster' b'to' b'make' b'a' b'sell' b'angle' b'.' b'When' b'it' b'is' b'few' b'days' b',' b'the'
    b'system' b'will' b'count' b'the' b'events' b',' b'with' b'such' b'early' b'when' b'it' b'becomes' b'known' b',' b'when' b'Brown' b',' b'cattle' b',' b'1611'
    b'and' b'order' b'they' b'have' b'to' b'be' b'stretched' b'to' b'it' b'.' b'It' b'is' b'only' b'invited' b'to' b'have' b'analyze' b'prove' b'a' b'thick'
    b'deployment' b'shifting' b'in' b'silico' b'off' b'only' b'neither' b',' b'or' b'to' b'depend' b'close' b'and' b'they' b'have' b'taking' b'.' b'"' b'pull' b','
    b'they' b'were' b'acknowledged' b'from' b'femininity' b',' b'or' b'if' b'they' b'are' b'a' b'low' b'point' b'in' b'large' b'objects' b'.' b'They' b'engaged' b'the'
    b'New' b'Zealand' b'coast' b'to' b'reduce' b'remote' b'numbers' b'a' b'female' b',' b'or' b'increased' b'microscope' b'.' b'As' b'some' b'species' b'begin' b',' b'the'
    b'female' b'attack' b'afterwards' b'to' b'draw' b'the' b'convict' b'.' b'This' b'successes' b'has' b'2' b'@.@' b'9' b'million' b'F' b'(' b'0' b'@.@' b'2'
    b'in' b')' b'and' b'he' b'raised' b'one' b'cells' b'of' b'50' b'seconds' b'per' b'up' b'points' b'.' b'A' b'belt' b'into' b'an' b'floating' b'quantity'
    b'on' b'a' b'subject' b'to' b'males' b'proved' b'more' b'long' b',' b'with' b'an' b'pair' b'of' b'foods' b'over' b'nature' b'.' b'The' b'thought' b'is'
    b'well' b'.' b'This' b'media' b'theorist' b'can' b'be' b'dated' b'to' b'1' b'kilometres' b'(' b'43' b'ft' b')' b',' b'which' b'does' b'not' b'quickly'
    b'go' b'forward' b',' b'Branch' b'<unk>' b'forces' b'or' b'the' b'wind' b'Songs' b'.' b'As' b'particular' b'can' b'prepare' b',' b'do' b'not' b'eat' b'enough'
    b',' b'many' b'male' b'or' b'has' b'little' b'Condoms' b'and' b'with' b'six' b'ratio' b'down' b'.' b'<unk>' b'is' b'observed' b'for' b'two' b'days' b'to'
    b'one' b'(' b'either' b'a' b'combination' b'of' b'2' b'/' b'48' b'cm' b'(' b'5' b'ft' b')' b'.' b'Therefore' b',' b'it' b'contains' b'a'
    b'standard' b'females' b'from' b'females' b'.' b'<eos>' b'Kitsune' b'also' b'have' b'navy' b'.' b'A' b'chicks' b'that' b'are' b'quick' b'"' b'nucleus' b'"' b','
    b'Statements' b'EST' b'from' b'over' b'preserve' b'or' b'stimulate' b'activity' b',' b'are' b'sometimes' b'known' b'.' b'Entertainment' b'usually' b'collectively' b'during' b'this' b'period' b'to'
    b'be' b'written' b'.' b'If' b'people' b'had' b'their' b'start' b',' b'they' b'lacks' b'similarities' b'or' b'<unk>' b'.' b'Therefore' b',' b'it' b'is' b'named'
    b'it' b'their' b'one' b'toy' b'times' b'of' b'any' b'species' b'.' b'There' b'is' b'34' b'@-@' b'offspring' b'of' b'them' b',' b'when' b'the' b'MDT'
    b'has' b'their' b'total' b'.' b'When' b'more' b'historians' b'easily' b'do' b'two' b'points' b'occurring' b'with' b'par' b',' b'some' b'could' b'also' b'be' b'strong'
    b'.' b'monotheistic' b'such' b'<unk>' b'(' b'truncated' b')' b'were' b'usually' b'unlikely' b'or' b'shall' b'fangs' b'until' b'or' b'by' b'other' b'.' b'In' b'summer'
    b',' b'orbits' b'with' b'numerous' b'elements' b'of' b'umpire' b'boxes' b'allotted' b'more' b'.' b'<unk>' b',' b'especially' b',' b'has' b'anchor' b'equated' b'made' b'rationality'
    b'in' b'Lyceum' b'and' b'they' b'allergic' b'light' b'brownish' b'whiskey' b'when' b'the' b'activity' b'of' b'Mkhedruli' b'is' b'whitish' b'.' b'As' b'they' b'start' b'slowly'
    b'.' b'<eos>' b'Mariah' b'Balaguer' b'with' b'the' b'ventral' b'fins' b'of' b'this' b'bird' b'or' b'generally' b'female' b'ceremonies' b',' b'but' b'evolved' b'to' b'remove'
    b'pressure' b'first' b'.' b'They' b'typically' b'indicate' b'themselves' b'.' b'Ceres' b'quickly' b'pore' b'interest' b'to' b'prey' b'as' b'they' b'be' b'looking' b'about' b'about'
    b'one' b'area' b'.' b'However' b',' b'americanus' b',' b'usually' b'quality' b',' b'Releases' b'<unk>' b'they' b'uses' b'bank' b',' b'irregular' b'grey' b'soil' b','
    b'warranted' b'or' b'cobra' b'in' b'other' b'other' b'countries' b'.' b'<eos>' b'Hal\xc3\xa9vy' b'which' b'seeks' b'Bald' b'galericulata' b'killed' b'until' b'all' b'centuries' b',' b'droppings'
    b'deemed' b'layers' b'of' b'Mokona' b'.' b'Also' b',' b'prey' b'complains' b'have' b'their' b'ability' b'to' b'distance' b'or' b'their' b'older' b'<unk>' b',' b'as'
    b'Sora' b'forms' b'mathematicians' b'(' b'they' b'is' b'<unk>' b'as' b'such' b'.' b'disaster' b')' b',' b'structural' b'small' b'methods' b'idiosyncratic' b',' b'eagle' b'amounts'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.4
    loss: 5.164
    elapsed time (seconds): 152.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  16.062 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
