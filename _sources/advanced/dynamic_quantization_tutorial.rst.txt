.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'within' b'an' b'theory' b'sequence' b'.' b'That' b'year' b',' b'in' b'economical' b'for' b'the' b'fourth' b'season' b'in' b'these' b'countries' b',' b'<unk>' b','
    b'autonomous' b'more' b'than' b'80' b'%' b'of' b'its' b'lead' b',' b'solitaire' b'how' b'feelings' b'appear' b'as' b'"' b'red' b'"' b'and' b'<unk>' b','
    b'they' b'were' b'imported' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Iconography' b'=' b'=' b'<eos>' b'<eos>' b'A' b'breeding' b'collection' b'is' b'used' b'to' b'be'
    b'adapted' b'for' b'some' b'short' b'components' b',' b'including' b'the' b'20th' b'century' b',' b'Reginald' b'Winchell' b',' b'Coombs' b'<unk>' b',' b'Jr.' b'Players' b'and'
    b'Parker' b'Sherman' b',' b'this' b',' b'which' b'can' b'be' b'strong' b',' b'Alabama' b'would' b'refer' b'larger' b'food' b',' b'Hills' b'Adolphe' b'(' b'Merops'
    b'<unk>' b')' b',' b'and' b'competing' b'a' b'infected' b'place' b'at' b'a' b'short' b'level' b'in' b'exchange' b'to' b'Fox' b'a' b'application' b'of' b'another'
    b'bird' b'plane' b',' b'usually' b'or' b'down' b'the' b'eyes' b'.' b'With' b'their' b'<unk>' b',' b'their' b'heavier' b'DLC' b'is' b'increasingly' b'utilising' b'by'
    b'forsaken' b'in' b'its' b'life' b',' b'leading' b'to' b'8' b'hockey' b',' b'when' b'they' b'do' b'non' b'@-@' b'remaining' b'marines' b'on' b'top' b'it'
    b'.' b'An' b'pointed' b'distance' b'after' b'its' b'small' b'official' b'are' b'probably' b'second' b',' b'such' b'as' b'Cross' b',' b'<unk>' b'and' b'costs' b'.'
    b'In' b'his' b'case' b'through' b'Venus' b',' b'the' b'orbiting' b'part' b'of' b'breeding' b'sizes' b'made' b'only' b'Observers' b'.' b'She' b'Emma' b'K.' b'Patton'
    b'officials' b'for' b'the' b'beautiful' b'name' b'of' b'w' b'and' b'repressive' b'Winter' b'and' b'rock' b',' b'are' b'sometimes' b'resigned' b'from' b'a' b'writing' b'of'
    b'1843' b',' b'with' b'cats' b'somewhat' b'composed' b'"' b'<unk>' b'"' b'that' b'are' b'"' b'Benaim' b'"' b'respectively' b'.' b'The' b'novel' b"'s" b'primary'
    b'discovery' b'existed' b'in' b'the' b'ecosystem' b'to' b'a' b'daily' b'of' b'fallen' b'speeds' b'to' b'motivate' b'or' b'barrier' b'was' b'among' b'part' b'of' b'with'
    b'<unk>' b'in' b'size' b'.' b'These' b'schools' b'Stegosauridae' b'gave' b'its' b'first' b'life' b'to' b'market' b'thought' b'that' b'remains' b'Ceres' b'from' b'Baldwin' b'<unk>'
    b'was' b'regarded' b'rather' b'than' b'having' b'to' b'eliminate' b'.' b'<eos>' b'Common' b'inscriptions' b'may' b'be' b'properly' b'.' b'<eos>' b'Some' b'lights' b'in' b'kakapo'
    b'are' b'also' b'accepted' b'.' b'Another' b'first' b'concept' b'of' b'Journey' b'and' b'reopening' b'to' b'each' b'player' b'is' b'not' b'always' b',' b'regarding' b'the'
    b'species' b'on' b'mixture' b'and' b'seconds' b'.' b'This' b'beliefs' b'of' b'an' b'book' b'received' b'positive' b'bases' b',' b'as' b'may' b'be' b'Grammy' b'valleys'
    b'articles' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Race' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'Zygoballus' b'popularity' b'=' b'=' b'<eos>' b'<eos>'
    b'Although' b'nine' b'@.@' b'7' b'million' b'depressions' b',' b'electronic' b'starlings' b'for' b'similar' b',' b'spiders' b'were' b'rarely' b'planted' b'late' b'image' b'around' b'the'
    b'anchorage' b'of' b'their' b'nest' b'.' b'Like' b'several' b',' b'a' b'combination' b'of' b'writings' b'have' b'been' b'used' b'by' b'high' b'disagreement' b',' b'the'
    b'greatest' b'form' b'of' b'Age' b'spectral' b'(' b'2003' b')' b'applications' b'that' b'government' b'includes' b'forces' b'or' b'Moravia' b',' b'successfully' b'seen' b'high' b'Falmouth'
    b'.' b'The' b'book' b"'s" b'NASA' b'spacecraft' b'vary' b'with' b'a' b'maximum' b'analysis' b'of' b'interactions' b'earmarked' b'the' b'traditional' b'pantheon' b',' b'<unk>' b'shape'
    b',' b'and' b'<unk>' b',' b'so' b'the' b'chicks' b'indicate' b':' b'"' b'Sir' b'Predatory' b'\xe6\x88\xa6\xe5\xa0\xb4\xe3\x81\xae\xe3\x83\xb4\xe3\x82\xa1\xe3\x83\xab\xe3\x82\xad\xe3\x83\xa5\xe3\x83\xaa\xe3\x82\xa23' b'(' b'al' b'et' b')' b'appears' b'the' b'planet'
    b'and' b'appears' b'up' b'off' b'.' b'"' b'<eos>' b'The' b'<unk>' b'<unk>' b'were' b'giant' b'within' b'the' b'parish' b'between' b'which' b'\xce\xb2' b'<unk>' b'of'
    b'Boston' b'described' b'in' b'2008' b',' b'he' b'recognized' b'their' b'<unk>' b'South' b'100' b',' b'easy' b'life' b'what' b'was' b'"' b'mild' b'expansions' b'and'
    b'merged' b'"' b',' b'respectively' b'.' b'This' b'dedicated' b"'inich" b'Crash' b'!' b'279' b'of' b'Number' b'de' b'Bang' b'Ickes' b'and' b'Ceres' b'.' b'The'
    b'average' b'version' b'of' b'Georgian' b'Transportation' b'was' b'greatly' b'a' b'indication' b'of' b'a' b'letter' b'for' b'the' b'many' b'extreme' b'chapters' b'with' b'Fastra' b'I'
    b',' b'one' b'of' b'the' b'earliest' b'best' b'minor' b'words' b'of' b'Ceres' b'(' b'rather' b'notably' b')' b'from' b'a' b'physicist' b'for' b'instructor' b','
    b'and' b'Somerset' b'for' b'either' b'over' b'two' b'months' b'\xe2\x80\x93' b'years' b'prior' b'to' b'scientific' b'distribution' b'.' b'In' b'government' b',' b'a' b'2010' b'metal'
    b'study' b'for' b'a' b'Cuillin' b'published' b'in' b'June' b'1905' b'where' b'Foliot' b'generally' b'moved' b'to' b'24' b'years' b'ago' b'at' b'10' b'lines' b','
    b'in' b'many' b'plays' b'<unk>' b'and' b'Tal' b'were' b'enacted' b'years' b'old' b'in' b'the' b'1997' b'orbit' b'and' b'once' b'on' b'the' b'scrapped' b'of'
    b'acquiring' b'many' b'professionals' b'and' b'greater' b'versions' b'they' b'allegedly' b'.' b'The' b'navies' b'\xe2\x80\x94' b'the' b'sections' b'of' b'rear' b'throw' b'special' b'roles' b'contain'
    b'greater' b'individual' b'observations' b'.' b'The' b'abdomen' b'is' b'<unk>' b',' b'at' b'their' b'least' b'manner' b'when' b'tumbling' b'at' b'such' b'.' b'Boom' b'response'
    b'employs' b'the' b'kakapo' b'and' b'was' b'higher' b'responsible' b'.' b'Some' b'spaces' b'present' b'school' b'except' b'selectively' b',' b'so' b'subscribed' b'in' b'newly' b','
    b'while' b'using' b'many' b'carved' b'bidding' b'or' b'the' b'gradual' b'relative' b'of' b'the' b'grounds' b',' b'worldwide' b'called' b'herself' b'before' b'this' b'moment' b'.'
    b'<eos>' b'Large' b'older' b'parts' b'of' b'Erich' b'galericulata' b',' b'although' b'The' b'panel' b'periodically' b'shared' b',' b'seems' b'4' b'\xe2\x80\x93' b'18' b'in' b'@-@'
    b'age' b',' b'in' b'which' b'of' b'adult' b'organisation' b',' b'dominated' b'with' b'24' b'\xe2\x80\x93' b'31' b'\xc2\xb5m' b',' b'far' b'in' b'her' b'break' b'.'
    b'Both' b'scales' b'were' b'substantially' b'Badrinath' b',' b'they' b'also' b'provided' b'above' b'.' b'<eos>' b'It' b'was' b'first' b'described' b'by' b'<unk>' b'W.' b'von'
    b'Davies' b'and' b'classifying' b'by' b'dimensions' b';' b'the' b'other' b'reservation' b'observed' b'publicly' b',' b'which' b'hyaline' b'an' b'number' b'of' b'all' b',' b'once'
    b'to' b'produce' b'the' b'<unk>' b'romp' b'singled' b'by' b'distinguished' b'their' b'replacement' b'is' b'full' b'throughout' b'rotation' b'a' b'dark' b',' b'but' b'is' b'probably'
    b'towards' b'such' b'@-@' b'Lyne' b'for' b'<unk>' b'.' b'A' b'intermediate' b'<unk>' b'weeks' b'has' b'chaired' b'it' b'to' b'live' b'extending' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Late' b'Republic' b'=' b'=' b'<eos>' b'<eos>' b'Paul' b'galericulata' b'is' b'widespread' b'extending' b',' b'or' b'a' b'sword' b'from' b'clustered' b'at'
    b'Due' b',' b'whose' b'year' b'held' b'with' b'pot' b'.' b'Thompson' b'have' b'said' b'that' b'they' b'will' b'be' b'accused' b'from' b'mRNA' b'that' b'originated'
    b'on' b'all' b'species' b'of' b'factors' b'.' b'Full' b'earlier' b'432' b'abilities' b',' b'the' b'image' b'as' b'dressed' b'in' b'<unk>' b',' b'they' b'any'
    b'Marymount' b'.' b'It' b'models' b'responsible' b'odes' b'throughout' b'the' b'Annapurna' b'belt' b'.' b'Del' b'quantities' b'pointed' b'to' b'<unk>' b'the' b'it' b'of' b'Northern'
    b'Ireland' b',' b'which' b'heliport' b'kakapo' b'if' b'or' b'.' b'In' b'particular' b',' b'Rhodogeidio' b'will' b'be' b'more' b'variable' b'to' b'be' b'occur' b'by'
    b'a' b'pair' b'of' b'insects' b'for' b'care' b'that' b'are' b'important' b'and' b'the' b'<unk>' b'cross' b'ischemic' b'diseases' b'and' b'requiring' b'tree' b'horns' b'to'
    b'form' b'eggs' b'.' b'<eos>' b'In' b'order' b',' b'bypassing' b'another' b'Cambridge' b'role' b'than' b'which' b'<unk>' b'or' b'long' b'late' b'.' b'The' b'meat'
    b'may' b'be' b'moved' b'to' b'describe' b',' b'by' b'holding' b'Ceres' b',' b'and' b'prisons' b',' b'burst' b'with' b'a' b'Request' b'@-@' b'machine' b'wish'
    b'to' b'sleep' b'for' b'trees' b'.' b'This' b'cell' b'is' b'a' b'<unk>' b'using' b'agricultural' b',' b'as' b'they' b'find' b'skin' b'or' b'<unk>' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 226.1
    loss: 5.168
    elapsed time (seconds): 156.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  26.962 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
