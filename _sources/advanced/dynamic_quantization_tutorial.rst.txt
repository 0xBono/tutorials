.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'<unk>' b'with' b'songs' b'they' b'been' b'knocked' b'.' b'As' b'known' b',' b'many' b'damage' b'were' b'uncertain' b'.' b'The' b'benefit' b'rate' b'would'
    b'be' b'placed' b'as' b'suppressing' b'commending' b'repairs' b'but' b'is' b'equally' b'found' b'to' b'be' b'written' b'by' b'Clan' b'Agate' b'.' b'The' b'"' b'journal'
    b'"' b'is' b'currently' b'screened' b'in' b'a' b'type' b'necked' b'that' b'form' b',' b'and' b'around' b'the' b'intruder' b'of' b'sand' b'galaxy' b'.' b'It'
    b'has' b'always' b'been' b'virtually' b'covered' b'by' b'this' b'separates' b'@-@' b'floor' b',' b'while' b'many' b'are' b'widely' b'expressed' b'by' b'a' b'township' b'to'
    b'take' b'Australia' b'around' b'cytogenetics' b'except' b'west' b',' b'with' b'authentic' b'a' b'Korean' b'<unk>' b'in' b'Republican' b'City' b'.' b'Both' b'coordinator' b'Fountain' b'can'
    b'obtain' b'towards' b'the' b'skin' b'theory' b'and' b'<unk>' b'from' b'kiss' b'to' b'offerings' b'tied' b'or' b'at' b'height' b'.' b'A' b'year' b'@-@' b'after'
    b'lands' b'to' b'Kody' b'under' b'American' b'star' b'(' b'cystidia' b'group' b'<unk>' b',' b'named' b'them' b')' b',' b'may' b'help' b'the' b'produce' b','
    b'and' b'warns' b'MBE' b'in' b'different' b'ways' b'.' b'freezing' b',' b'they' b'are' b'modified' b'<unk>' b'metal' b',' b'AG' b'contracted' b'this' b'base' b'as'
    b'they' b'attract' b'its' b'two' b'distinct' b'or' b'gift' b'domestic' b'feeding' b'over' b'it' b'.' b'Because' b'they' b'composed' b'hilly' b'only' b',' b'they' b'was'
    b'\xe2\x98\x89' b'of' b'Locke' b',' b'which' b'could' b'find' b'<unk>' b'or' b'image' b'.' b'Those' b'are' b'also' b'in' b'because' b'<unk>' b'is' b'eagerly' b'native'
    b'for' b'nesting' b',' b'<unk>' b',' b'<unk>' b',' b'lead' b',' b'inclined' b',' b'eucalypts' b',' b'1545' b',' b'<unk>' b',' b'M\xc3\xa9tis' b',' b'and'
    b'transmuted' b',' b'going' b'to' b'end' b'.' b'Examples' b'examined' b'into' b'red' b'stepped' b'suggest' b',' b'these' b'@-@' b'port' b'food' b'(' b'2' b'%'
    b')' b'included' b'the' b'maximum' b'their' b'"' b'intentions' b'"' b'star' b',' b'which' b'will' b'be' b'involved' b'by' b'immature' b'Eyed' b'express' b'depending' b'on'
    b'<unk>' b'.' b'Additional' b'populations' b'methods' b'are' b'able' b',' b'but' b'makes' b'this' b'"' b'Fruit' b'threat' b'"' b'.' b'The' b'flea' b'want' b'to'
    b'leave' b'in' b'the' b'process' b'of' b'predynastic' b'calls' b'adorned' b'by' b'vengeance' b'and' b'ribosomes' b',' b'and' b'demand' b'produces' b'the' b'game' b'.' b'Some'
    b'epoxides' b'difluoride' b'X' b',' b'Seminoles' b',' b'Marquis' b'<unk>' b'and' b'becomes' b'afraid' b'to' b'find' b'<unk>' b',' b'hospitality' b'threatening' b'Saharan' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'=' b'Norman' b'Farrell' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Despite' b'St' b'horseback' b',' b'not' b'rectified' b',' b'they' b'and'
    b'by' b'a' b'Anglican' b'ideal' b'pressure' b'of' b'pulp' b',' b'alignment' b',' b'torrential' b'Galentine' b',' b'loud' b'social' b'colonies' b'wings' b'.' b'The' b'birds'
    b'are' b'a' b'resentment' b'between' b'south' b',' b'onwards' b'or' b'striking' b'into' b'her' b'drum' b'Montenegrin' b',' b'and' b'into' b'excavations' b',' b'Bode' b'alone'
    b',' b'and' b'the' b'preservation' b'wing' b'gives' b'advancing' b'over' b'Australia' b'since' b'air' b'for' b'the' b'field' b'.' b'The' b'kakapo' b'will' b'be' b'is'
    b'epigenetic' b'by' b'neutron' b'feeding' b'.' b'After' b'patients' b',' b'they' b'eat' b'their' b'parent' b'telephone' b'behaviour' b',' b'with' b'<unk>' b',' b'breakfast' b','
    b'<unk>' b',' b'Hove' b',' b'boys' b'and' b'climate' b'.' b'That' b'decisions' b'is' b'merely' b'consumed' b'when' b'it' b'shows' b'13' b'in' b'(' b'22'
    b'@.@' b'5' b'km' b')' b'in' b'diameter' b'and' b'turn' b'cm' b'(' b'0' b'@.@' b'7' b'in' b')' b',' b'with' b'n' b'tissue' b','
    b'forming' b'females' b'(' b'sacred' b'or' b'those' b'yellow' b')' b',' b'thick' b'hair' b',' b'and' b'eagle' b'serpent' b'.' b'In' b'leaping' b',' b'they'
    b'may' b'be' b'Unas' b'from' b'age' b'strategy' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Classification' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Oosterbeek' b'language' b'is'
    b'respectable' b'from' b'203' b',' b'humans' b',' b'fragment' b',' b'Mandler' b',' b'W' b',' b'1700' b',' b'Oklahoma' b',' b'<unk>' b',' b'Nigeria' b','
    b'grey' b',' b'gospel' b',' b'business' b',' b'and' b'South' b'America' b'ethic' b'.' b'Members' b',' b'particularly' b'predicted' b',' b'crowns' b'skills' b'involves' b'campaign'
    b',' b'or' b'a' b'large' b'envelope' b'.' b'The' b'FCC' b'has' b'developed' b'at' b'in' b'a' b'halt' b',' b'and' b'there' b'is' b'no' b'visitor'
    b',' b'being' b'an' b'large' b'yellow' b'core' b'than' b'a' b'dissenters' b',' b'a' b'same' b'point' b'they' b'see' b'shook' b'three' b'as' b'12' b'lb'
    b'(' b'152' b'mm' b')' b'and' b'in' b'Edinburgh' b',' b'and' b'Australian' b'goods' b'<eos>' b'Each' b'female' b'is' b'not' b'4' b'@.@' b'3' b'.'
    b'<eos>' b'Ceres' b'made' b'the' b'Persian' b'word' b'"' b'<unk>' b'ceiling' b'"' b'.' b'earth' b'occurs' b'in' b'New' b'York' b'include' b'the' b'size' b'of'
    b'modern' b',' b'dated' b'parrot' b',' b'and' b'open' b'circuits' b'for' b'various' b'insects' b'mRNA' b'fields' b'.' b'<eos>' b'Because' b'of' b'their' b'earlier' b'legal'
    b'layer' b',' b'this' b'average' b'compressed' b'text' b'or' b'collecting' b'<unk>' b'is' b'to' b'be' b'historically' b'engaged' b',' b'but' b'only' b'to' b'work' b','
    b'instead' b'of' b'Abraham' b'farms' b'can' b'diffuse' b'in' b'While' b'they' b'do' b'not' b'operate' b'.' b'Elsewhere' b'on' b'reelected' b',' b'they' b'are' b'aggressively'
    b'cannot' b'be' b'assembled' b'.' b'Once' b'another' b'majority' b'over' b'the' b'strong' b'serpent' b'was' b'separated' b'at' b'right' b'in' b'1981' b'.' b'Dawn' b'occurring'
    b'90' b'%' b'of' b'over' b'23' b'%' b'prisoners' b'He' b'moved' b'his' b'structure' b',' b'and' b'no' b'Karnataka' b'has' b'believed' b'to' b'be' b'known'
    b'worldwide' b'when' b'they' b'were' b'not' b'wanting' b'to' b'be' b'larger' b'.' b'They' b'and' b'PHP' b'have' b'been' b'understood' b',' b'when' b'the' b'first'
    b'to' b'be' b'derived' b'on' b'a' b'new' b'minute' b'amount' b'of' b'can' b'be' b'done' b'.' b'Males' b'removed' b',' b'until' b'neither' b'other' b'stories'
    b'turrets' b'also' b'present' b',' b'but' b'it' b'is' b'likely' b'that' b'flint' b'arrives' b'(' b'primarily' b'nestlings' b')' b'are' b'Catholics' b'.' b'<eos>' b'With'
    b'this' b',' b'it' b'has' b'an' b'liquid' b'structure' b';' b'The' b'prey' b'Thames' b'pays' b'by' b'<unk>' b'such' b'as' b'laying' b'Digital' b'molecules' b'on'
    b'each' b'other' b'before' b'entertaining' b'.' b'They' b'representative' b'the' b'"' b'Omar' b"'s" b'Miriam' b'tribes' b'"' b'the' b'kakapo' b'sounds' b'attracting' b'Harvard' b"'"
    b'rigs' b'.' b'A' b'number' b'of' b'Viking' b'birds' b'well' b'as' b'o.' b'noctilio' b',' b'are' b'based' b'in' b'sponsoring' b'starling' b'.' b'In' b'the'
    b'claimant' b'<unk>' b',' b'Rancho' b'to' b'use' b'highly' b'rate' b'of' b'interiors' b'such' b'as' b'universally' b'booms' b',' b'though' b'flood' b',' b'pest' b','
    b'iconography' b',' b'and' b'fake' b'.' b'Males' b'catechisms' b'Inside' b'chemical' b'starlings' b"'" b'introduction' b'of' b'plumage' b'and' b'potentially' b'irregular' b',' b'and' b'on'
    b'the' b'ground' b'hand' b'capacities' b'primarily' b'intervals' b'.' b'Because' b'<unk>' b',' b'naked' b',' b'n' b'or' b'hunger' b'can' b'be' b'waited' b'to' b'teach'
    b'threats' b'to' b'according' b'to' b'ribosomes' b',' b'but' b'still' b'presenting' b'always' b'remaining' b'.' b'A' b'large' b'proportion' b'after' b'the' b'oft' b'mammalian' b'experience'
    b'is' b'surprised' b'by' b'males' b'which' b'Geastrum' b'his' b'dressing' b'as' b'they' b'should' b'are' b'out' b'to' b'hear' b'.' b'With' b'their' b'passage' b'fall'
    b'after' b'they' b'are' b'<unk>' b'although' b'they' b"'ll" b'be' b'preparing' b'by' b'royalty' b'and' b'warrant' b'into' b'Domonia' b',' b'with' b'heat' b'opined' b'that'
    b'they' b'may' b'be' b'viewed' b'as' b'attribute' b'their' b'high' b'<unk>' b'.' b'If' b'their' b'females' b'travel' b'back' b',' b'it' b'may' b'be' b'up'
    b'@-@' b'speaking' b'or' b'so' b'saving' b'.' b'Across' b'this' b'bird' b',' b'their' b'energy' b'Sitriuc' b'may' b'be' b'bordered' b'by' b'kitsunebi' b'.' b'Only'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 246.2
    loss: 5.168
    elapsed time (seconds): 164.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  55.230 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
