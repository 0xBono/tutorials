.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'suggested' b'.' b'This' b'led' b'lease' b'apart' b',' b"'" b'A' b'B' b',' b'and' b'wonderful' b'kill' b'players' b';' b'fast' b'<unk>' b'and' b'them'
    b'@-@' b'speaking' b'iron' b'have' b'been' b'significant' b';' b'it' b'is' b':' b'<eos>' b'"' b'Joyful' b':' b'The' b'Solar' b'"' b'(' b'FOCA' b'led'
    b'by' b'Morgan' b'Warrior' b')' b'is' b'a' b'preliminary' b'at' b'convective' b'informal' b'children' b',' b'have' b'so' b'created' b'in' b'Fox' b'such' b'as' b'modern'
    b'Americans' b'and' b'dots' b'as' b'"' b'Waternish' b'"' b')' b'.' b'This' b'first' b'portion' b'of' b'the' b'male' b'steamed' b'to' b'140' b'miles' b'('
    b'160' b'mi' b')' b'high' b'early' b'waters' b';' b'the' b'achieve' b'maximum' b'is' b'white' b';' b'from' b'a' b'night' b'estimate' b'with' b'karate' b','
    b'singly' b',' b'<unk>' b',' b'pointed' b',' b'and' b'competent' b'burst' b'.' b'The' b'ground' b'for' b'Sewell' b',' b'this' b'will' b'be' b'considered' b'by'
    b'filling' b'its' b'dwarf' b'make' b'streak' b'and' b'reassigned' b'to' b'a' b'name' b'of' b'tightly' b'<unk>' b'air' b'Conde' b'molecular' b'honour' b'.' b'Ryder' b'also'
    b'accommodated' b'to' b'leave' b'behind' b'flightless' b'.' b'Despite' b'the' b'mummy' b'that' b'<unk>' b'Taunton' b'(' b'for' b'<unk>' b')' b',' b'it' b'lasts' b'with'
    b'no' b'congratulations' b'even' b'to' b'Chigi' b',' b'<unk>' b',' b'and' b'obsolescent' b'parts' b'by' b'birds' b'(' b'they' b'were' b'a' b'common' b'publication' b')'
    b',' b'ribs' b',' b'Racial' b',' b'Linjeflyg' b',' b'apparent' b',' b'orange' b',' b'or' b'yellow' b'forests' b'who' b'spots' b'10' b'\xe2\x80\x93' b'120' b'members'
    b'.' b'He' b'was' b'widely' b'considered' b'for' b'Strachan' b'at' b'Great' b'Keys' b',' b'and' b'the' b'furlongs' b'resemble' b'head' b'Pugliese' b'.' b'<eos>' b'Until'
    b'1850' b',' b'Burbank' b'when' b'they' b'were' b'a' b'Granada' b'arena' b',' b'which' b'are' b'reported' b'to' b'covenants' b'were' b'fielded' b'by' b'translation' b'during'
    b'preventing' b'engineer' b'from' b'Georgia' b'and' b'social' b'times' b'at' b'home' b'.' b'Important' b'birds' b'appear' b'the' b'predation' b',' b'but' b'also' b'betrays' b'$'
    b'300' b'million' b'.' b'Many' b'commonly' b'lock' b'additional' b'protesters' b'of' b'adults' b',' b'an' b'ground' b'that' b'antimony' b'can' b'have' b'his' b'discovery' b'.'
    b'Electrical' b'starling' b'accumulate' b'becomes' b'attempting' b'to' b'pursue' b'thick' b',' b'independent' b'do' b'so' b'at' b'least' b'one' b'@.@' b'10' b'(' b'30' b'to'
    b'4' b'a.m.' b')' b',' b'each' b'risk' b'of' b'success' b'and' b'25' b'centimetres' b'.' b'They' b'very' b'shorter' b'colloquially' b'gives' b'two' b'nuclei' b'of'
    b'\xce\xb1' b'blood' b'blocks' b',' b'including' b'those' b'@-@' b'surface' b'saving' b'in' b'North' b'Africa' b',' b'and' b'then' b'since' b'.' b'Archdeacon' b'compounds' b'have'
    b'produced' b'the' b'fast' b'surface' b'from' b'a' b'up' b'pair' b',' b'each' b'of' b'which' b'are' b'high' b',' b'(' b'juveniles' b'that' b'saw' b'to'
    b'treat' b'rancid' b'and' b'rescued' b'sequence' b'of' b'some' b'hands' b')' b'fully' b'has' b'been' b'Doping' b'Marcella' b"'s" b']' b'species' b'.' b'Corythosaurus' b'and'
    b'<unk>' b'instructor' b'absorption' b'martial' b'eggs' b'may' b'be' b'distinguished' b'for' b'up' b'to' b'PSH' b'Attempting' b'so' b'that' b'without' b'hot' b'changes' b',' b'Residence'
    b'Laver' b'trees' b'<unk>' b'specific' b'or' b'foot' b'by' b'dwellers' b',' b'<unk>' b'.' b'The' b'kakapo' b'Nicholson' b'has' b'acquired' b'the' b'head' b'it' b'numerous'
    b'planets' b',' b'once' b'@-@' b'makeup' b'or' b'referring' b'to' b'others' b',' b'doubling' b'rid' b'from' b'the' b'National' b'firs' b',' b'and' b'the' b'great'
    b'boycotts' b'into' b'they' b'are' b'possessed' b'by' b'laboratory' b',' b'yellow' b',' b'manic' b',' b'and' b'virtue' b'.' b'The' b'first' b'two' b'adversely' b'populations'
    b'are' b'usually' b'sent' b'to' b'migrate' b',' b'and' b'regarding' b'example' b',' b'as' b'they' b'form' b',' b'is' b'so' b'over' b'about' b'30' b'%'
    b'of' b'85' b'\xce\xbcm' b'.' b'Eventually' b',' b'when' b',' b'some' b'of' b'which' b'are' b'any' b'more' b'than' b'a' b'two' b'large' b'climate' b','
    b'may' b'fully' b'occur' b'in' b'place' b'.' b'By' b'27' b'am' b'when' b'you' b'says' b'or' b'entertaining' b',' b'they' b'are' b'available' b'there' b','
    b'but' b'they' b'may' b'not' b'live' b'if' b'any' b'Franciscan' b'flow' b'with' b'some' b'predators' b'may' b'be' b'stegosaurid' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'=' b'Impact' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Large' b'starling' b'decks' b'have' b'the' b'People' b'HaMifratz' b'Range' b',' b'but' b'had' b'moved' b'to'
    b'2012' b'.' b'Deep' b'starlings' b'such' b'as' b'<unk>' b',' b'woodlands' b'such' b'as' b'"' b'pine' b'<unk>' b'"' b',' b'is' b'said' b'to' b'have'
    b'been' b'sufficiently' b'leukemia' b'into' b'the' b'M\xc4\x81ori' b'.' b'Protection' b'activities' b'suggest' b'that' b'when' b'R\xc3\xa9union' b'regularly' b'play' b'little' b'<unk>' b'when' b'these' b'distances'
    b'were' b'thought' b'to' b'have' b'moved' b'to' b'other' b'species' b'of' b'tree' b',' b'they' b'require' b'values' b'to' b'be' b'of' b'just' b'.' b'Any'
    b'likely' b'nesting' b'cells' b'they' b'eccentric' b'the' b'growing' b'Grandmaster' b'located' b'in' b'adults' b'.' b'During' b'the' b'first' b'subspecies' b'of' b'the' b'story' b','
    b'the' b'<unk>' b'stems' b'in' b'puma' b'areas' b'that' b'bind' b'away' b'if' b'they' b'<unk>' b'Inland' b'eggs' b',' b'some' b'of' b'them' b'where' b'they'
    b'possess' b'the' b'same' b'other' b'masonry' b'as' b'they' b'are' b'died' b'simply' b'after' b'so' b'as' b'they' b'be' b'taller' b'because' b'classification' b'subfamilies' b'\xe2\x80\x93'
    b'I' b'are' b'available' b'by' b'paying' b'such' b'Quest' b',' b'they' b'consist' b'of' b'taste' b'.' b'When' b'Sb2S3' b',' b'they' b'still' b'Naturally' b'sighted'
    b'<unk>' b'Henstridge' b'Flamsteed' b'.' b'Flora' b'of' b'M.' b'ferreum' b',' b'Parvati' b',' b'and' b'<unk>' b'created' b'championed' b'practices' b'managed' b'to' b'be' b'everything'
    b'on' b'three' b'nests' b',' b'such' b'as' b'then' b'.' b'In' b'this' b',' b'can' b'be' b'associated' b'when' b'<unk>' b',' b'by' b'any' b'or'
    b'it' b'will' b'be' b'found' b'.' b'In' b'particular' b'that' b',' b'they' b'are' b'one' b'of' b'a' b'deep' b'canon' b'of' b'their' b'body' b','
    b'or' b'by' b'Andrea' b'been' b'canceled' b',' b'whenever' b'they' b'find' b'Signals' b'.' b'<eos>' b'Compounds' b'was' b'hunted' b'on' b'clothing' b'.' b'It' b'was'
    b'distinguished' b'as' b'one' b'of' b'the' b'sexual' b'London' b'strategies' b'of' b'Morrison' b',' b'requiring' b'no' b'independence' b'in' b'all' b'pre' b'@-@' b'scale' b'species'
    b',' b'after' b'Ushant' b'reset' b';' b'Gaskell' b'responded' b'ranked' b'over' b'a' b'length' b'of' b'packs' b'(' b'depending' b'to' b'as' b'they' b'are' b'slaves'
    b'by' b'injuries' b'before' b'Rey' b')' b'.' b'Further' b'is' b'rarely' b'recorded' b'as' b'unstable' b',' b'and' b'has' b'given' b'their' b'species' b'.' b'<eos>'
    b'In' b'1839' b',' b'Amtrak' b'<unk>' b'for' b'an' b'number' b'of' b'fear' b',' b'records' b'of' b'Cambridge' b',' b'experienced' b'it' b'that' b'a' b'plant'
    b'vehicle' b'with' b'the' b'sky' b'of' b'it' b'.' b'Snow' b',' b'though' b'it' b'has' b'supporting' b'or' b'distinct' b'rapid' b'reactions' b',' b'the' b'other'
    b'healing' b',' b'seems' b'to' b'result' b'as' b'Tyre' b'by' b'location' b',' b'to' b'educate' b'noise' b'women' b',' b'usually' b'slip' b'.' b'He' b'also'
    b'undertook' b'the' b'<unk>' b'(' b'fixing' b'amino' b'acids' b'through' b'Marg' b'spiders' b'or' b'inside' b'up' b'a' b'pilots' b'for' b'land' b'.' b'The' b'flesh'
    b'(' b'total' b')' b'is' b'frequently' b'lawyers' b'.' b'<eos>' b'Key' b'refers' b'to' b'his' b'elderly' b',' b'an' b'plasma' b'of' b'scientists' b'such' b'as'
    b'reveal' b'<unk>' b',' b'for' b'that' b'\xe2\x80\x93' b'400' b'such' b'defense' b'@-@' b'like' b'Tyndall' b',' b'is' b'Latin' b',' b'who' b'effectively' b'magnetic' b'an'
    b'given' b'male' b'system' b'crop' b',' b'fewer' b'affinity' b'at' b'Hanuman' b',' b'G4TV' b',' b'and' b'mass' b'churches' b'it' b'will' b'be' b'of' b'their'
    b'moralitas' b'.' b'These' b'costs' b',' b'by' b'bamboo' b',' b'typically' b'with' b'a' b'gender' b'for' b'broad' b'reasons' b',' b'those' b'of' b'trees' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 215.0
    loss: 5.168
    elapsed time (seconds): 150.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  10.865 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
