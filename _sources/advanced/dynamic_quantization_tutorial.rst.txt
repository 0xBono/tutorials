.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'a' b'shock' b'from' b'Fingal' b'being' b'hunt' b':' b'Wasp' b'Miles' b'Arthur' b'Lawrence' b',' b'Frank' b'Cook' b'and' b'Stokes' b',' b'and' b'state'
    b'for' b'the' b'group' b'and' b'bearing' b'that' b'"' b'it' b"'" b'might' b'be' b'treated' b'upon' b'it' b'things' b'.' b'"' b'Sir' b'<unk>' b'<unk>'
    b'supported' b':' b'"' b'The' b'part' b'is' b'clarification' b'of' b'doing' b'items' b'.' b'It' b'is' b'a' b'remarkable' b'licence' b'without' b'My' b'are' b'similar'
    b'.' b'"' b'<eos>' b'When' b'it' b'has' b'also' b'been' b'announced' b'that' b'some' b'of' b'these' b'items' b'desires' b'from' b'H\xc3\xa4meenmaa' b',' b'there' b'has'
    b'been' b'high' b'lopsided' b'classes' b',' b'which' b'end' b'for' b'a' b'female' b',' b'most' b'constant' b'children' b'.' b'challenging' b'choice' b'is' b'carefully' b'Fruit'
    b';' b'Cambridge' b'could' b'be' b'renamed' b'for' b'it' b'.' b'When' b'Ravel' b'can' b'often' b'produce' b'water' b',' b'they' b'were' b'being' b'third' b'enough'
    b'for' b'Australia' b',' b'since' b'if' b'them' b'@-@' b'like' b'mysterious' b'proponents' b'were' b'overlooked' b'from' b'members' b'.' b'A' b'race' b'in' b'the' b'Olympic'
    b'version' b'became' b'a' b'R' b'planets' b'.' b'An' b'lawsuit' b'found' b'to' b'play' b'but' b'moving' b'with' b'other' b'pincers' b'atom' b'679' b'Prasad' b'.'
    b'There' b"'" b'could' b'be' b'printed' b'as' b'one' b',' b'possession' b'ball' b',' b'vertex' b'saint' b';' b'and' b'suffering' b'dark' b'infantry' b',' b'they'
    b'<unk>' b'Grimes' b'into' b'the' b'flock' b';' b'when' b'a' b'close' b'female' b'consistently' b'hold' b'every' b'lock' b',' b'in' b'Russia' b'(' b'"' b'<unk>'
    b'"' b')' b',' b'standardized' b'miles' b'in' b'the' b'field' b',' b'by' b'many' b'pairs' b'very' b'much' b'of' b'the' b'origin' b'needed' b'an' b'ancient'
    b'man' b'ritual' b'.' b'In' b'addition' b'to' b'M.' b'<unk>' b',' b'the' b'female' b'lawyer' b'I' b'distinguished' b'him' b'the' b'same' b'stance' b'to' b'forget'
    b',' b'hitting' b'their' b'surprising' b'@-@' b'induced' b'beak' b'Archie' b'+' b'5' b'm' b'.' b'The' b'task' b'\xe2\x80\x94' b'runoff' b'for' b'marginally' b'and' b'one'
    b',' b'is' b'a' b'active' b'mint' b'.' b'The' b'Face' b'tries' b',' b'energy' b'over' b'so' b'on' b'the' b'terrible' b'lawsuit' b'running' b'by' b'the'
    b'laboratory' b'matter' b'because' b',' b'along' b'down' b'them' b'.' b'Initially' b'on' b'Harris' b"'s" b'portico' b',' b'<unk>' b'pulled' b'out' b'of' b'their' b'planet'
    b'.' b'27s' b'and' b'over' b'plausible' b'samples' b'measure' b'injuries' b'sy\xc4\x81n' b'82' b'\xc2\xb0' b'large' b'or' b'has' b'fewer' b'backs' b"'" b'loss' b'.' b'A'
    b'female' b'@-@' b'high' b'can' b'be' b'seen' b'to' b'stop' b'dark' b'foods' b'Date' b'as' b'their' b'regular' b'males' b'.' b'chemically' b'eggs' b'helps' b'the'
    b'mountains' b'of' b'soccer' b',' b'the' b'other' b'touching' b',' b'while' b'animals' b'path' b'their' b'falling' b'.' b'In' b'their' b'mushroom' b',' b'there' b'is'
    b'standard' b'dark' b'females' b'in' b'their' b'adoption' b'.' b'Crash' b'was' b'<unk>' b'headed' b'by' b'player' b',' b'likewise' b'Istv\xc3\xa1n' b'relatively' b'obsessed' b'in' b'a'
    b'process' b'for' b'long' b'believes' b'into' b'character' b'due' b'to' b'other' b'flocks' b'and' b'especially' b'its' b'head' b',' b'especially' b'well' b'xenon' b'Beast' b','
    b'finishes' b'when' b'it' b'is' b'fully' b'noticeable' b'as' b'to' b'be' b'linked' b'.' b'<eos>' b'9' b'or' b'8' b':' b'00' b'<unk>' b'lower' b'birds'
    b'of' b'power' b',' b'or' b'food' b'tended' b'to' b'fly' b'.' b'Overall' b',' b'they' b'does' b'not' b'fit' b'the' b'canal' b'after' b'they' b'would'
    b'be' b'detected' b'in' b'favorites' b'.' b'They' b'also' b'fusion' b'bright' b'TBSA' b'of' b'God' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Nuclear' b'Jagger'
    b'=' b'=' b'=' b'<eos>' b'<eos>' b'2' b'of' b'Meyerbeer' b"'s" b'5th' b'\xe2\x80\x93' b'<unk>' b'of' b'Taj' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Taxonomy'
    b'=' b'=' b'<eos>' b'<eos>' b'The' b'kakapo' b'of' b'kakapo' b'due' b'to' b'Rio' b'servants' b'over' b'home' b'and' b'some' b'hundred' b'masses' b'from' b'field'
    b'predators' b'.' b'Jifna' b'contain' b'Kennet' b'PDR' b'and' b'trials' b'to' b'Norwich' b"'s" b'Soldiers' b'and' b'optics' b'.' b'latex' b'angling' b'argued' b'the' b'destruction'
    b'of' b'greater' b'controversy' b',' b'movement' b',' b'<unk>' b',' b'and' b'algorithm' b'serve' b'as' b'compartments' b'.' b'Again' b',' b'they' b'were' b'most' b'few'
    b'necessary' b',' b'blurred' b',' b'Unable' b',' b'throws' b'into' b'the' b'tone' b'of' b'Hawai\xca\xbbi' b"'" b'<unk>' b'.' b'Three' b'of' b'its' b'stars' b'made'
    b'much' b'of' b'its' b'genetic' b'disturbed' b'and' b'black' b'treatment' b',' b'predominantly' b'armored' b'or' b'habitat' b',' b'under' b'both' b'enough' b'engraving' b'and' b'other'
    b'natural' b'enclosures' b'(' b'arms' b')' b'.' b'The' b'mobile' b'starling' b'of' b'Ireland' b'states' b'that' b'kakapo' b'though' b'dangerous' b'he' b'do' b'landowner' b'have'
    b'been' b'problematic' b'throughout' b'1929' b'.' b'Bendis' b'means' b'"' b'A' b'<unk>' b'<unk>' b';' b'Road' b',' b'[' b'destiny' b']' b'have' b'dating' b'certain'
    b'long' b',' b'and' b'for' b'many' b'letters' b',' b'means' b'Caldecott' b',' b'drank' b',' b'and' b'they' b"'ve" b'gone' b'alongside' b'1217' b',' b'knows'
    b'galaxy' b'on' b'<unk>' b',' b'after' b'perhaps' b'a' b'allowance' b'that' b'is' b'a' b'threat' b'to' b'basis' b'among' b'men' b'"' b'.' b'Within' b'no'
    b'certain' b'females' b',' b'all' b'inscriptions' b'brick' b'are' b'facing' b'by' b'common' b'persons' b',' b'particularly' b'known' b'as' b'a' b'There' b'for' b'neutral' b'starlings'
    b',' b'understanding' b'a' b'nuclear' b'beak' b'metal' b'developed' b'between' b'various' b',' b'more' b'than' b'32' b'centimetres' b'(' b'2' b'@.@' b'5' b'in' b')'
    b'out' b',' b'and' b'skimpy' b'(' b'3' b'October' b'8' b'November' b'1917' b')' b'.' b'However' b',' b'with' b'it' b'#' b'60' b'in' b'demonstrate'
    b'.' b'According' b'to' b'fading' b'mass' b',' b'Ireland' b'shoots' b'them' b',' b'and' b'was' b'closed' b'the' b'bird' b',' b'which' b'Discography' b'may' b'not'
    b'have' b'control' b'in' b'form' b'.' b'They' b'were' b'recorded' b',' b'but' b'in' b'some' b'tears' b'a' b'mass' b',' b'by' b'the' b'1235' b"'s"
    b'larger' b'product' b',' b'arsenic' b'and' b'carpenters' b',' b'from' b'Africa' b'succeeding' b'side' b'and' b'did' b'not' b'expand' b'him' b'.' b'buttresses' b'are' b'a'
    b'representative' b'outraged' b'these' b'predators' b'known' b'as' b'template' b'.' b'Kakapo' b'describe' b'growth' b'by' b'<unk>' b'them' b'of' b'scale' b'and' b'Turbaco' b',' b'as'
    b'do' b'possible' b'raising' b'Goldsmith' b'.' b'"' b'Hoover' b"'re" b'So' b'otherwise' b'exemplified' b'Ma' b'like' b'reaching' b'153Eu' b',' b'biochemical' b'objects' b'thinks' b'as'
    b'there' b'is' b'no' b'power' b':' b'a' b'bit' b'of' b'level' b'and' b'not' b'realize' b'to' b'be' b'of' b'exciting' b'topological' b'Laws' b',' b'as'
    b'"' b'Candy' b'exclusively' b'of' b'black' b',' b'that' b'pregnant' b'in' b'<unk>' b',' b'and' b'as' b'successful' b',' b'Olivia' b'hand' b'audience' b'and' b'sites'
    b'"' b'.' b'Exit' b'Block' b'and' b'dependents' b'served' b'as' b'headed' b'for' b'bright' b'artwork' b'and' b'auditory' b',' b'and' b'until' b'situ' b',' b'it'
    b'was' b'be' b'a' b'specimen' b'of' b'their' b'common' b'supernatural' b'formation' b'throughout' b'Numerous' b'innovation' b'between' b'comforted' b'and' b'summer' b',' b'so' b'will' b'be'
    b'performed' b'.' b'This' b'may' b'be' b'distinguished' b'by' b'<unk>' b',' b'well' b'and' b'remedial' b',' b'wear' b',' b'and' b'fresh' b',' b'<unk>' b'coloured'
    b',' b'<unk>' b'and' b'220' b'inert' b'animals' b'only' b'evade' b'flightless' b'beds' b'.' b'Sometimes' b'great' b',' b'much' b'many' b'bones' b'may' b'be' b'fitted'
    b'for' b'.' b'And' b'on' b'the' b'ground' b',' b'cruising' b'enzymes' b',' b'degenerate' b',' b'Thailand' b'and' b'other' b'trace' b'behaviour' b'by' b'hunter' b','
    b'Sy\xc4\x81dv\xc4\x81da' b',' b'<unk>' b',' b'and' b'sculpture' b'@-@' b'pagodas' b',' b'can' b'have' b'been' b'composed' b'.' b'The' b'patients' b'were' b'dramatically' b'close' b'to'
    b'their' b'rise' b'to' b'Britain' b'and' b'the' b'country' b'.' b'If' b'being' b'initially' b'associated' b'into' b'short' b'600' b'furlongs' b',' b'it' b'are' b'usually'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 217.5
    loss: 5.168
    elapsed time (seconds): 149.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  11.542 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
