.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'everything' b'widely' b'told' b'Rule' b',' b'which' b'are' b'sentiments' b'in' b'that' b'same' b'year' b':' b'the' b'liver' b'for' b'plates' b'would' b'occur' b'through'
    b'BANES' b'and' b'next' b'at' b'the' b'same' b'time' b'.' b'For' b'his' b'five' b'days' b'with' b'the' b'Niassa' b'Library' b',' b'it' b'is' b'about'
    b'sixteen' b'times' b'.' b'<eos>' b'O' b'miners' b'takes' b'also' b'an' b'distinctive' b'water' b'size' b'around' b'her' b'famous' b'proportions' b',' b'making' b'it' b'one'
    b'of' b'the' b'best' b'@-@' b'known' b'plumage' b'and' b'Knafel' b'his' b'first' b'sons' b'.' b'In' b'turn' b',' b'<unk>' b'<unk>' b'(' b'contradicted' b'her'
    b'luminosity' b'as' b'part' b'of' b'the' b'goddess' b'R' b'Bang' b'd' b'Providence' b')' b'only' b'belonging' b'into' b'the' b'meaning' b'version' b'of' b'<unk>' b'@-@'
    b'Nathan' b'.' b'<eos>' b'In' b'the' b'United' b'States' b',' b'the' b'planet' b"'s" b'standing' b'range' b'authored' b'the' b'story' b'of' b'the' b'two' b'arches'
    b'it' b'<unk>' b'the' b'last' b'with' b'the' b'text' b'to' b'a' b'sex' b'Representative' b',' b'which' b'resembles' b'in' b'<unk>' b'in' b'2010' b'.' b'Later'
    b'of' b'the' b'enzyme' b',' b'<unk>' b'of' b'Resources' b'required' b'Menkauhor' b'cancellation' b',' b'which' b'nine' b'French' b'individuals' b'were' b'unknown' b';' b'1994' b','
    b'this' b'singer' b'is' b'Almina' b'.' b'Many' b'of' b'his' b'characters' b'were' b'surrounded' b'by' b'arrows' b',' b'and' b'recorded' b'by' b'<unk>' b'Kelley' b','
    b'Donald' b'Henri' b'Stuart' b',' b'Arbor' b'collieries' b',' b'and' b'Aleister' b'Pr\xc3\xa9ludes' b',' b'who' b'compared' b'to' b'request' b'Gabon' b'that' b'were' b'his' b'cause'
    b'to' b'speak' b'by' b'<unk>' b'is' b'thus' b'ninth' b'stimulates' b'.' b'It' b'is' b'possible' b'to' b'be' b'NZ' b'when' b'according' b'to' b'their' b'prizes'
    b'of' b'this' b'Merville' b'<unk>' b',' b'they' b'can' b'be' b'so' b'already' b'very' b'pure' b'on' b'real' b'species' b'\xe2\x80\x94' b'while' b'in' b'his' b'opinion'
    b'required' b'related' b'in' b'water' b'(' b'which' b'are' b'some' b'non' b'@-@' b'common' b'European' b'dodo' b')' b',' b'they' b'did' b'the' b'desired' b'sense'
    b'that' b'they' b'will' b'pay' b'.' b'As' b'discharged' b',' b'in' b'1834' b',' b'and' b'it' b'is' b'either' b'labeled' b'that' b'seek' b'it' b'has'
    b'help' b'power' b'happy' b'with' b'giving' b'of' b'dissuade' b'thoughts' b'.' b'A' b'silver' b'behaviour' b'is' b'judge' b'designed' b'.' b'The' b'exoperidium' b'have' b'a'
    b'exact' b'mild' b'Lily' b'display' b',' b'enclosed' b'young' b'Atkin' b'.' b'They' b'usually' b'do' b'not' b'return' b'to' b'Shiva' b'and' b'does' b'not' b'begin'
    b',' b'which' b'may' b'not' b'get' b'possibly' b'<unk>' b'groups' b'up' b'.' b'Russell' b'may' b'impression' b'that' b'freezing' b'they' b'might' b'elevate' b'their' b'naked'
    b'nest' b'.' b'shall' b'feed' b'on' b'2007' b',' b'he' b'succeeds' b'on' b'up' b'when' b'there' b'are' b'no' b'whether' b'of' b'open' b'power' b'can'
    b'be' b'saved' b'.' b'Yet' b',' b'superbly' b'Raghavanka' b',' b'a' b'female' b'of' b'artillery' b'populist' b'haunting' b',' b'Paddling' b'and' b'<unk>' b'are' b'characteristics'
    b',' b'and' b'it' b'also' b'offers' b'sometimes' b'rarely' b'comfortable' b'.' b'<eos>' b'As' b'the' b'eye' b',' b'Ceres' b',' b'coupled' b'into' b'over' b'2'
    b'metres' b'(' b'5' b'km' b'/' b'h' b')' b'that' b'kill' b'EASA' b'polygamists' b'out' b'.' b'The' b'right' b'reviewer' b'is' b'its' b'meat' b'.'
    b'Another' b'planning' b'fields' b'was' b'on' b'21' b'October' b'2015' b',' b'and' b'not' b'only' b'increased' b'a' b'drop' b'of' b'males' b'from' b'Ceres' b'.'
    b'Once' b'eye' b',' b'they' b'do' b'some' b'eating' b'exactly' b'<unk>' b'or' b'while' b'one' b',' b'may' b'be' b'inhabited' b':' b'the' b'Buddhist' b'pieces'
    b'find' b'55' b'%' b'to' b'a' b'bird' b'.' b'Unlike' b'little' b'fishing' b',' b'the' b'Caroline' b'is' b'controlled' b'by' b'human' b'choreography' b',' b'and'
    b'it' b'may' b'be' b'guilty' b'of' b'a' b'larger' b'living' b'or' b'distinct' b'gardens' b'and' b'farmers' b'abandoned' b'by' b'eye' b'.' b'Scrubby' b'M.' b'Weyden'
    b'and' b'issuing' b'head' b'throughout' b'Roger' b'v.' b'nestlings' b'and' b'he' b'had' b'985' b'width' b',' b'races' b',' b'gantry' b',' b'causes' b'a' b'pair'
    b'of' b'either' b'excess' b'a' b'three' b'trips' b',' b'although' b'presumably' b'commissioned' b'caused' b'by' b'<unk>' b'fate' b'.' b'<unk>' b'@-@' b'made' b'relative' b'planetary'
    b',' b'furs' b',' b'is' b'formerly' b'kill' b'by' b'vegetation' b',' b'as' b'it' b'finds' b'a' b'variety' b'of' b'<unk>' b'which' b'constitute' b'concerns' b'reactions'
    b',' b'such' b'as' b'<unk>' b',' b'reporters' b',' b'prevent' b'@-@' b'aged' b'@-@' b'79' b'or' b'starspots' b'are' b'to' b'be' b'severe' b'or' b'moisture'
    b'.' b'<unk>' b'depend' b'on' b'line' b'to' b'attract' b'their' b'rare' b'graphite' b',' b'but' b'used' b'when' b'Amanda' b'does' b'while' b'is' b'lower' b'or'
    b'may' b'be' b'regarded' b'.' b'One' b'freely' b'and' b'on' b'a' b'slip' b'@-@' b'boat' b'late' b'at' b'stumps' b',' b'there' b'were' b'almost' b'greater'
    b'causes' b'.' b'Ba' b'<unk>' b'an' b'cycle' b'of' b'55' b',' b'32' b'or' b'127' b'more' b'same' b'450' b'.' b'The' b'eight' b'piers' b','
    b'lacks' b'Witchcraft' b'a' b'eggs' b',' b'into' b'other' b'earlier' b',' b'displaced' b'these' b'broods' b'in' b'<unk>' b',' b'long' b'names' b',' b'Eight' b'flock'
    b'days' b',' b'or' b'organic' b'watches' b'.' b'There' b'are' b'only' b'most' b'common' b'topography' b'that' b'are' b'wrinkled' b'around' b'about' b'they' b'can' b'be'
    b'scales' b'or' b'even' b'open' b'.' b'The' b'feral' b'starling' b'also' b'reserved' b'it' b',' b'although' b'feeding' b',' b'Vishnu' b'becomes' b'clich\xc3\xa9d' b'<unk>' b'.'
    b'Other' b'feeding' b'process' b'is' b'that' b'in' b'electron' b'males' b',' b'many' b'birds' b'allow' b'their' b'enzymes' b'that' b'do' b'not' b'demonstrates' b'rates' b'that'
    b'<unk>' b'Motors' b'is' b',' b'because' b'they' b'have' b'a' b'differentiated' b'<unk>' b'during' b'stem' b'.' b'In' b'highway' b',' b'these' b'birds' b'saw' b'some'
    b'insects' b',' b'such' b'as' b'Hutch' b',' b'limits' b',' b'insects' b',' b'<unk>' b',' b'blue' b',' b'Fir' b',' b'M\xc3\xaal\xc3\xa9e' b',' b'Eu' b'meter'
    b',' b'chemical' b'trees' b'34' b'as' b'fast' b'juvenile' b'infections' b'and' b'Bowman' b'.' b'<eos>' b'unintentionally' b'is' b'possible' b'by' b'common' b'dirty' b'\xe2\x80\x93' b'Virginia'
    b'or' b'Dateline' b'flame' b',' b'dried' b'traps' b',' b'and' b'other' b'older' b'planets' b'by' b'new' b'orbits' b'Drive' b'Reynolds' b',' b'which' b'allowed' b'shorter'
    b'remit' b',' b'only' b'or' b'reduce' b'superbly' b'to' b'both' b'a' b'large' b'high' b'bird' b'chord' b'image' b'.' b'A' b'kakapo' b'of' b'Ceres' b'resolution'
    b'appears' b'slowly' b'a' b'short' b'correlation' b'before' b'portico' b'are' b'often' b'supposed' b'up' b'in' b'northern' b'her' b'studio' b',' b'anger' b'for' b'their' b'birds'
    b'and' b'some' b'other' b'scale' b'systems' b'.' b'918' b'may' b'often' b'traverse' b'their' b'source' b'by' b'marching' b'chicks' b',' b'although' b'anthrax' b',' b'partitioned'
    b'Kerr' b'or' b'device' b'funnel' b',' b'with' b'breeding' b'observation' b'and' b'leg' b'the' b'bulbs' b'.' b'The' b'chicks' b'form' b'as' b'its' b'tangle' b'and'
    b'<unk>' b'manufacturing' b'populations' b',' b'but' b'even' b'hunger' b',' b'multiple' b'feathers' b'is' b'surprised' b',' b'<unk>' b'they' b'were' b'killed' b'.' b'In' b'contrast'
    b',' b'there' b'are' b'no' b'chromosomes' b'white' b'by' b'the' b'breeding' b'troupe' b'in' b'GTX' b'atmosphere' b'.' b'<eos>' b'Europium' b'may' b'Skenesboro' b'in' b'DNA'
    b'when' b'they' b'were' b'killed' b'.' b'One' b'other' b'influences' b'are' b'enhanced' b'located' b'extensively' b'and' b'on' b'when' b'are' b'low' b'during' b'the' b'country'
    b'or' b'marrow' b'vertex' b'.' b'Its' b'trioxide' b'is' b'Mary' b'Wilcox' b'(' b'chromosome' b',' b'sensation' b',' b'Lendl' b',' b'is' b'Greek' b',' b'textbooks'
    b',' b'when' b'outside' b'1910' b')' b':' b'<unk>' b'(' b'see' b'the' b'national' b',' b'flower' b'textured' b'Consequently' b',' b'for' b'example' b'and' b'the'
    b'second' b'grass' b')' b':' b'<unk>' b'is' b'back' b'for' b'a' b'hole' b'since' b'other' b'other' b'reforms' b'and' b'<unk>' b'dark' b'language' b'.' b'The'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 240.2
    loss: 5.168
    elapsed time (seconds): 164.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  49.094 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
