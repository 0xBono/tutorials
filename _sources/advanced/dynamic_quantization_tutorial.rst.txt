.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'about' b'beyond' b'one' b'longer' b'.' b'The' b'terms' b'is' b'<unk>' b'to' b'draft' b'Monuments' b',' b'assuming' b'it' b'a' b'infection' b'of' b'God' b'after'
    b'Gods' b'.' b'The' b'image' b'of' b'The' b'invasions' b'camping' b'at' b'where' b'musical' b'climate' b'brought' b'it' b'.' b'<unk>' b'Oriente' b'generated' b'as' b'character'
    b'"' b'destroyed' b'"' b'by' b'Yui' b'Memorial' b',' b'Phoenix' b',' b'and' b'Bode' b'in' b'oldest' b'the' b'style' b'of' b'Chicago' b'.' b'<eos>' b'In'
    b'1968' b',' b'an' b'planet' b',' b'with' b'seven' b'different' b'resources' b',' b'were' b'also' b'varied' b'and' b'describes' b'players' b'.' b'Still' b',' b'membership'
    b'died' b',' b'he' b'still' b'killed' b'O' b"'Malley" b'to' b'become' b'developing' b'stardom' b'on' b'an' b'girl' b',' b'and' b'this' b'was' b'almost' b'issued'
    b'as' b'recent' b'Shakespeare' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Professional' b'career' b'=' b'=' b'<eos>' b'<eos>' b'As' b'the' b'Ruler' b'Bond' b"'s" b'Video'
    b'pledge' b',' b'Mosley' b'emigrated' b'to' b'Australia' b'with' b'the' b'airport' b'one' b'of' b'the' b'2002' b'35' b'@-@' b'third' b'season' b'disciplined' b'requiring' b'the'
    b'first' b'moving' b'team' b'attempts' b'to' b'lose' b'.' b'There' b'are' b'many' b'more' b'previous' b'being' b',' b'it' b'later' b'would' b'participate' b'few' b'of'
    b'her' b'works' b':' b'a' b'specific' b'crime' b'block' b'matches' b'by' b'<unk>' b'at' b'Somerset' b'Park' b'.' b'Baltimore' b'and' b'Leinster' b'in' b'England' b'include'
    b'a' b'solar' b'narrative' b',' b'creating' b'<unk>' b',' b'straying' b',' b'spreading' b'for' b'their' b'nephew' b'.' b'The' b'Chichester' b'envelope' b'built' b'expected' b'"'
    b'The' b'Earthrealm' b'Studio' b'"' b'in' b'1925' b',' b'known' b'as' b'"' b'The' b'folk' b'borders' b'of' b'real' b'Prestwich' b'"' b',' b'which' b'was'
    b'following' b'one' b'wealth' b'at' b'any' b'time' b'.' b'During' b'announced' b'return' b'to' b'the' b'character' b'the' b'nestlings' b'at' b'astronomical' b'Paper' b'families' b','
    b'he' b'decided' b'to' b'pick' b'relatively' b'time' b',' b'could' b'be' b'contained' b',' b'meaning' b'to' b'converting' b'an' b'mouth' b'or' b'mouse' b'without' b'a'
    b'irregular' b'budget' b'.' b'Forster' b'film' b'are' b'given' b'<unk>' b'from' b'Menzel' b',' b'conflict' b'expeditions' b'and' b'showed' b',' b'but' b'wear' b'her' b'explaining'
    b'by' b'Doug' b'Original' b',' b'"' b'an' b'medium' b'crazy' b'but' b'good' b',' b'I' b"'ve" b'<unk>' b'getting' b'little' b'"' b'.' b'It' b'was'
    b'one' b'of' b'these' b'memorable' b'regularly' b'releases' b'by' b'a' b'number' b'of' b'Macrianus' b'Grammy' b'of' b'IUCN' b'for' b'Standing' b'games' b'paratrooper' b'has' b'signed'
    b'friendship' b'on' b'a' b'bonus' b',' b'Little' b'American' b'War' b'in' b'2009' b'.' b'<eos>' b'In' b'2009' b',' b'a' b'record' b'dated' b'their' b'novel'
    b'with' b'writing' b'co' b'@-@' b'1108' b"'s" b'power' b'name' b'on' b'a' b'series' b'of' b'first' b'Herzegovina' b'before' b'index' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'=' b'East' b'communities' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'United' b'States' b'was' b'released' b'on' b'November' b'12' b',' b'1993' b','
    b'before' b'series' b'studying' b'Sylvia' b'Politics' b'Washington' b'to' b'portray' b'additional' b'platinum' b',' b'but' b'then' b'moving' b'to' b'full' b'television' b'social' b'acclaim' b'within'
    b'some' b'stages' b',' b'after' b'used' b'to' b'be' b'due' b'to' b'class' b'singers' b',' b'citing' b'the' b'song' b'where' b'which' b'in' b'existence' b'.'
    b'Octavia' b'was' b'arrived' b'by' b'deceptively' b'<unk>' b'at' b'slums' b'at' b'a' b'one' b'of' b'September' b'3' b',' b'2006' b'.' b'In' b'the' b'United'
    b'States' b',' b'according' b'to' b'Nigel' b'litigation' b'and' b'residential' b'composition' b',' b'Jordan' b'for' b'the' b'course' b'of' b'a' b'books' b'of' b'Friars' b'"'
    b'appear' b'at' b'a' b'duration' b'of' b'other' b'judges' b'other' b'of' b'two' b'versions' b'pitching' b'by' b'a' b'player' b'society' b',' b'"' b'in' b'the'
    b'track' b'the' b'matter' b'tones' b'were' b'also' b'evacuated' b'to' b'2D' b'Brown' b'.' b'<eos>' b'The' b'show' b'of' b'Fate' b',' b'including' b'execution' b'to'
    b'Fromental' b'Miss' b',' b'Mosley' b'and' b'<unk>' b',' b'were' b'headed' b'by' b'Carl' b'Carl' b'Smith' b'.' b'antiquity' b'enjoyed' b'a' b'book' b'schools' b','
    b'which' b'was' b'a' b'special' b'relation' b'that' b'will' b'be' b'slowed' b'by' b'they' b'were' b'less' b'important' b',' b'monogamous' b'.' b'<eos>' b'The' b'character'
    b'<unk>' b'introduced' b'the' b'throat' b'planet' b'<unk>' b'and' b'Shah' b'sums' b'"' b'<unk>' b'"' b'with' b'two' b'points' b';' b'the' b'reviewer' b'described' b'this'
    b'modeling' b'company' b'because' b'it' b'"' b'seems' b'out' b'how' b"'s" b'property' b'Away' b'peridium' b'about' b'the' b'commentary' b'of' b'trees' b',' b'Weather' b'@-@'
    b'honors' b'.' b'"' b'According' b'to' b'Snow' b'Ernoul' b"'" b'vintage' b'Winter' b'Freedom' b',' b'Chen' b'attributed' b'on' b'image' b',' b'scoring' b'long' b'car'
    b'concept' b'of' b'both' b',' b'played' b'more' b'stable' b'at' b'a' b'indirect' b'concert' b',' b'and' b'often' b'deliberately' b'performed' b'in' b'the' b'X.' b'Melody'
    b'?' b'!' b'Haraldr' b'The' b'reasonable' b'exoplanets' b'have' b'open' b'limited' b'favorable' b'verses' b'.' b'While' b'the' b'character' b'discovers' b'superb' b'@-@' b'Het' b','
    b'depending' b'in' b'Additional' b'galleries' b',' b'with' b'smaller' b'virgin' b',' b'Fulfilled' b'decided' b'to' b'strengthen' b'its' b'departure' b'with' b'except' b'.' b'B.' b'Pareles'
    b'comes' b'on' b'film' b'points' b'for' b'his' b'ability' b'with' b'some' b'1882' b'stories' b',' b'including' b'which' b'they' b'reminded' b'the' b'game' b'opportunity' b'through'
    b'a' b'short' b'people' b',' b'and' b'"' b'Oh' b'"' b'automobile' b'\xe2\x86\x92' b'Mottola' b'\xe2\x80\x94' b'more' b'possibilities' b',' b'and' b'describes' b'it' b'with' b'Bachchan'
    b"'s" b'unfinished' b'line' b'.' b'The' b'film' b'Mycena' b'follows' b'weekly' b'such' b'interview' b'on' b'their' b'development' b',' b'now' b'an' b'Ipswich' b'Picture' b'People'
    b'.' b'In' b'the' b'<unk>' b',' b'Bono' b"'s" b'inner' b'defense' b'production' b'was' b'notoriously' b'making' b'Lou' b'director' b'playable' b'works' b'on' b'multiple' b'occasions'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Background' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b'appeared' b'on' b'the' b'open' b'stunning' b'"' b'Baby' b'Day' b'"'
    b'\xe2\x80\x93' b'two' b'mosque' b'in' b'the' b'Augustan' b'80s' b'.' b'It' b'is' b'composed' b'that' b'it' b'was' b'part' b'of' b'the' b'<unk>' b'community' b'tour'
    b'and' b'once' b'Toei' b'in' b'the' b'diary' b',' b'but' b'part' b'of' b'his' b'wife' b'<unk>' b'as' b'she' b'appears' b'.' b'The' b'whole' b'rated'
    b'by' b'each' b'oxen' b'called' b'it' b'Dahlan' b':' b'"' b'Then' b'.' b'"' b'<eos>' b'Background' b'brought' b'in' b'a' b'Hawker' b'Saga' b',' b'as'
    b'he' b'wanted' b'to' b'have' b'dedicated' b'to' b'her' b'idea' b'to' b'Vulcan' b'flows' b'on' b'October' b'37' b',' b'2006' b'.' b'Teachers' b'early' b'on'
    b'their' b'work' b'to' b'72nd' b'Property' b'Park' b'in' b'the' b'Viet' b'demolition' b',' b'before' b'perhaps' b'probably' b'published' b'in' b'where' b'year' b',' b'perhaps'
    b'eight' b'years' b'George' b'Carter' b'instituted' b'A.' b'violacea' b'.' b'Balaguer' b'of' b'Universal' b'games' b'and' b'the' b'UK' b'account' b'for' b'<unk>' b'"' b'nodes'
    b'"' b'is' b'reminiscent' b'of' b'its' b'role' b'.' b'The' b'genus' b'John' b'was' b'included' b'by' b'The' b'Years' b',' b'then' b'correct' b'enough' b'until'
    b'2008' b'for' b'the' b'next' b'week' b'localized' b'Safety' b'to' b'produce' b'critical' b'audio' b'@-@' b'46' b',' b'and' b'the' b'band' b'peaked' b'on' b'a'
    b'Night' b'@-@' b'themed' b'security' b'visual' b'mission' b'.' b'The' b'television' b'state' b'of' b'and' b'atomic' b'support' b'of' b'PlayStation' b'5' b'Radar' b'remained' b'in'
    b'widely' b'game' b'six' b'months' b'place' b'.' b'The' b'song' b'has' b'already' b'been' b'sold' b'as' b'it' b'is' b'the' b'final' b'season' b'from' b'the'
    b'television' b'season' b'of' b'the' b'Coast' b'season' b',' b'and' b'was' b'looked' b'in' b'the' b'charts' b'Constantine' b'to' b'be' b'released' b'today' b'in' b'the'
    b'colony' b'.' b'Those' b'had' b'two' b'other' b'American' b'modes' b'.' b'But' b'through' b'the' b'opening' b'song' b',' b'<unk>' b'(' b'\xd8\xa7\xd9\x84\xd9\x84\xd9\x87' b'Mullen' b'monochrome'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 222.8
    loss: 5.168
    elapsed time (seconds): 151.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  19.743 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
