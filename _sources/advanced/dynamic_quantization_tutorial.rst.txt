.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'was' b'being' b'accompanied' b'.' b'In' b'centres' b'they' b'began' b'to' b'establish' b'another' b'six' b'novels' b'to' b'be' b'willing' b'to' b'<unk>' b'she' b'Roxas'
    b'gave' b'doing' b'.' b'The' b'sphinx' b'asked' b'him' b'a' b'special' b'Huguenots' b',' b'making' b'5' b'%' b',' b'served' b'in' b'a' b'14th' b'century'
    b'was' b'planned' b'to' b'have' b'got' b'significant' b'property' b',' b'when' b'as' b'long' b'\xe1\x83\xac' b'Territory' b'formed' b'by' b'Ben\xc3\xadtez' b'prize' b'a' b'e' b','
    b'lobes' b'<unk>' b'in' b'2010' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Destroyers' b'=' b'=' b'<eos>' b'<eos>' b'Walpole' b'was' b'an' b'member' b'of' b'exposing'
    b'Wheeler' b',' b'while' b'Mishra' b'hired' b'once' b'running' b'by' b'a' b'investment' b'vessel' b'and' b'violacea' b'1814' b'.' b'The' b'authors' b'were' b'personally' b'taken'
    b'for' b'jazz' b',' b'Idaho' b',' b'revenue' b'asking' b'to' b'have' b'published' b'and' b'developed' b'a' b'new' b'appearance' b'.' b'Weeks' b'drifted' b'to' b'1874'
    b'moved' b'depending' b'on' b'Formula' b'One' b'revenues' b',' b'not' b'in' b'two' b'pieces' b'in' b'causing' b'the' b'Crash' b'Times' b'"' b'<unk>' b',' b'"'
    b'repeated' b'by' b'African' b'sickly' b'@-@' b'Hawaiian' b'literary' b'usage' b',' b'and' b'three' b'kakapo' b'or' b'three' b'seconds' b'were' b'added' b'to' b'support' b'an'
    b'military' b'decision' b'.' b'Dark' b'playing' b'to' b'previous' b'face' b',' b'cheers' b'the' b'sales' b'of' b'England' b',' b'came' b'forward' b'in' b'the' b'<unk>'
    b"'s" b'discovery' b'of' b'paid' b'new' b'victories' b'.' b'O' b"'Malley" b',' b'with' b'the' b'very' b'important' b'affairs' b'of' b'their' b'contestants' b',' b'and'
    b'Harold' b'Dreamers' b'.' b'Hartley' b'umpire' b'<unk>' b'(' b'Jonathan' b'Emerson' b')' b'was' b'the' b'only' b'.' b'<eos>' b'Tommy' b'Boom' b"'in" b'l' b'Xook'
    b'was' b'appointed' b'a' b'"' b'One' b'"' b'<unk>' b'<unk>' b'built' b'to' b'Lucasfilm' b'House' b'letters' b',' b'outlaw' b'realistic' b'instigator' b'and' b'security' b'of'
    b'equipment' b'.' b'The' b'story' b'and' b'William' b'<unk>' b'FOCA' b'gave' b'son' b'to' b'<unk>' b',' b'pleading' b'his' b'brother' b'as' b'Ramillies' b',' b'a'
    b'survey' b'amongst' b'caused' b'a' b'cabin' b'for' b'a' b'offer' b'to' b'the' b'fact' b'that' b'his' b'soap' b'apparent' b'peculiar' b'sentiment' b'was' b'representative' b'to'
    b'receive' b'Wanderers' b'.' b'<eos>' b'The' b'unpredictable' b'army' b'helped' b'with' b'an' b'T' b'leap' b',' b'sees' b'German' b'singer' b"'s" b'book' b',' b'Fred'
    b'Smith' b'(' b'Banks' b'@.@' b'165' b')' b',' b'Torre' b'conclusive' b'(' b'likening' b'<unk>' b',' b'Japanese' b'and' b'Seer' b',' b'at' b'Boston' b'festival'
    b')' b'.' b'For' b'example' b',' b'the' b'high' b'primary' b'test' b'with' b'the' b'cities' b'in' b'<unk>' b'clusters' b',' b'Wrestling' b'<unk>' b',' b'Rear'
    b'Potter' b',' b'<unk>' b'Leukemia' b',' b'Mindy' b'Bang' b'<unk>' b',' b'Joan' b'Henry' b'Beerbohm' b',' b'was' b'canceled' b',' b'and' b'one' b'of' b'his'
    b'large' b'influence' b'until' b'plain' b'did' b'not' b'reveal' b'to' b'be' b'wives' b"'" b'henchmen' b'.' b'While' b'a' b'rekindle' b'decline' b'of' b'Peshkin' b"'s"
    b'Mulder' b',' b'aided' b'by' b'Jeremy' b'@-@' b'John' b'<unk>' b'<unk>' b',' b'Trinsey' b',' b'is' b'saved' b'at' b'eight' b'point' b',' b'and' b'these'
    b'newspapers' b'at' b'a' b'level' b',' b'<unk>' b'Bushnell' b'in' b'the' b'category' b'of' b'a' b'protest' b'that' b'takes' b'place' b'huge' b'art' b'gospel' b','
    b'a' b'act' b'likely' b'on' b'the' b'system' b'and' b'the' b'six' b'weeks' b',' b'that' b'would' b'have' b'optional' b'or' b'doing' b'its' b'mother' b'in'
    b'the' b'third' b'year' b'.' b'They' b'operate' b'and' b'gender' b'jet' b'dimension' b',' b'Kody' b'Walpole' b'and' b'John' b'Pandu' b',' b'as' b'they' b'<unk>'
    b'it' b'from' b'combat' b'.' b'Firstly' b',' b'Chen' b'Mars' b'bordered' b'a' b'resolution' b'after' b'he' b'thought' b':' b'"' b'The' b'what' b'I' b'don'
    b"'t" b'get' b'them' b'that' b'all' b'Frenchtown' b'@-@' b'one' b'is' b'wrong' b'down' b'respiratory' b'interests' b'going' b'from' b'three' b'or' b'final' b'things' b'have'
    b'since' b'contacted' b'it' b'so' b'the' b'brutal' b'or' b'improve' b'pattern' b'Mississippi' b'(' b'...' b'the' b'Gallagher' b')' b'and' b'hold' b'to' b'creating' b'Jules'
    b'<unk>' b'are' b'Prior' b'to' b'<unk>' b'with' b'those' b'who' b'of' b'all' b'down' b'by' b'reality' b'@-@' b'<unk>' b'.' b'<eos>' b'on' b'11' b'June'
    b'2010' b',' b'the' b'exact' b'large' b'public' b'series' b'was' b'put' b'in' b'1929' b'to' b'other' b'%' b'.' b'The' b'attracts' b'anthology' b'stories' b'their'
    b'salary' b'of' b'McLaren' b'were' b'marketed' b'in' b'some' b'different' b'disciplinary' b'programs' b'in' b'the' b'tour' b'.' b'Antimony' b'brought' b'the' b'<unk>' b'Edition' b'for'
    b'Ocean' b'Hill' b'to' b'block' b'the' b'species' b'game' b'Assyria' b'.' b'By' b'January' b'9' b',' b'February' b'4' b',' b'1996' b',' b'the' b'GASAR'
    b'became' b'known' b'for' b'the' b'German' b'state' b',' b'who' b'described' b'open' b'media' b'(' b'reluctant' b'to' b'comic' b'delivery' b'and' b'draw' b'of' b'brick'
    b'station' b')' b'.' b'While' b'compared' b'to' b'boundary' b',' b'Mosley' b'signed' b'his' b'all' b'to' b'show' b'a' b'more' b'grown' b'leader' b'in' b'his'
    b'statistics' b'to' b'take' b'a' b'two' b'@-@' b'game' b'race' b'vision' b'puppets' b';' b'much' b'of' b'Cloud' b"'s" b'armament' b'could' b'have' b'proposed' b'exciting'
    b'settlers' b'and' b'Dilke' b'tort' b'the' b'earlier' b'.' b'Wheeler' b'terms' b',' b'exploited' b'his' b'production' b'at' b'three' b'of' b'his' b'stories' b',' b'having'
    b'no' b'effect' b'where' b'he' b'told' b'it' b'that' b'"' b'it' b'could' b'be' b'increasingly' b'probably' b'known' b'as' b'double' b'operatic' b',' b'with' b'not'
    b'precognition' b'during' b'battle' b'.' b'Later' b'a' b'hour' b'"' b',' b'bringing' b'his' b'third' b'time' b'at' b'Ulster' b'Hornung' b"'s" b'body' b'Day' b'that'
    b'lasted' b'upon' b'their' b'motion' b'dates' b'to' b'the' b'Great' b'Internationale' b',' b'Mosley' b'decided' b'to' b'find' b'1' b'March' b'.' b'<unk>' b'escaped' b'in'
    b'coupled' b'the' b'pace' b'of' b'crowds' b'as' b'ancient' b'in' b'place' b'.' b'All' b'of' b'them' b'records' b'his' b'early' b'game' b',' b'showing' b'Australia'
    b',' b'on' b'Chinese' b'movies' b',' b'because' b'O' b"'Malley" b'first' b'had' b'overthrown' b'<eos>' b'Both' b'money' b'additional' b'business' b',' b'participants' b'and' b'<unk>'
    b'stole' b'Palmyra' b'as' b'hard' b'citizen' b',' b'Laura' b'Bernard' b'Ole' b',' b'was' b'the' b'challenge' b'leader' b'Gate' b'ever' b'for' b'estate' b'areas' b'.'
    b'He' b'weakened' b'in' b'a' b'fighting' b'box' b'election' b'<unk>' b'programme' b'd' b'<unk>' b'Tests' b'from' b'private' b'fights' b'-' b'curator' b'experience' b'Celebration' b'about'
    b'which' b'he' b'were' b'killed' b'.' b'Although' b'said' b'this' b'to' b'where' b'he' b'and' b'return' b'was' b'Jagdeep' b',' b'the' b'entry' b'has' b'been'
    b'made' b'the' b'two' b'highly' b'witnesses' b'should' b'be' b'able' b'to' b'elimination' b'after' b'.' b'On' b'1962' b',' b'Mosley' b'thought' b':' b'"' b'Baltimore'
    b"'re" b'the' b'nice' b'season' b',' b'so' b'unlike' b'a' b'narrow' b'suborder' b'O' b"'t" b'be' b'true' b'by' b'<unk>' b'<unk>' b'.' b'and' b'I'
    b'have' b'said' b'like' b'these' b'in' b'his' b'criminal' b'hospital' b'.' b'Nevertheless' b',' b'it' b'is' b'a' b'good' b'and' b'killer' b'[' b'"' b'women'
    b',' b'on' b'the' b'other' b'side' b'were' b'his' b'biggest' b'fiction' b'.' b'The' b'Weaving' b'lifelong' b'but' b'created' b'the' b'release' b'of' b'polls' b';'
    b'by' b'17' b'December' b'March' b'to' b'document' b'uncommon' b',' b'when' b'O' b"'Malley" b'Films' b'posted' b'in' b'in' b'hiatus' b'they' b'shall' b'be' b'able'
    b'to' b'stop' b'contexts' b'with' b'<unk>' b',' b'prediction' b',' b'<unk>' b',' b'May' b'phylogenetic' b'@-@' b'cars' b'-' b'and' b'turning' b'fiction' b'to' b'fight'
    b'in' b'the' b'environment' b'.' b'<unk>' b'popularity' b'(' b'sex' b'including' b'e.g.' b'encouragement' b')' b'programs' b'have' b'a' b'series' b'of' b'<unk>' b'in' b'Trafford'
    b',' b'writing' b'the' b'guests' b'to' b'help' b'Midlothian' b'.' b'<unk>' b'he' b',' b'"' b'I' b'since' b'swam' b'into' b'a' b'<unk>' b'<unk>' b'<unk>'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 235.7
    loss: 5.168
    elapsed time (seconds): 163.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  44.559 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
