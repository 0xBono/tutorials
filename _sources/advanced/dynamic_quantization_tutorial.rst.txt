.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'.' b'The' b'potential' b'it' b'was' b'known' b'as' b'A.' b'Oscar' b',' b'a' b'Dresden' b'game' b'script' b'at' b'whether' b'he' b'emphasizes' b'it'
    b'across' b'cliff' b'.' b'<eos>' b'The' b'church' b'McLaren' b'is' b'a' b'promotional' b'one' b'to' b'be' b'enriched' b'in' b'a' b'same' b'draft' b';' b'in'
    b'then' b'Census' b'content' b'groups' b'image' b'and' b'28' b'January' b'<unk>' b'is' b'placed' b'as' b'either' b'on' b'summer' b'antelopes' b'.' b'Some' b'methods' b'were'
    b'observed' b'in' b'size' b';' b'was' b'brought' b'through' b'Australia' b'.' b'There' b'is' b'walking' b'July' b'17' b'the' b'population' b'of' b'Essays' b'CE' b'.'
    b'There' b'are' b'enrolled' b'Alabama' b"'s" b'two' b'devotional' b'severity' b'that' b'are' b'directly' b'variously' b'Protestant' b'.' b'In' b'great' b',' b'realm' b'will' b'reduce'
    b'evidence' b'until' b'they' b'travels' b'to' b'carbon' b'levels' b',' b'which' b'might' b'have' b'much' b'interest' b'away' b'.' b'<eos>' b'A' b'variant' b'of' b'The'
    b'man' b'by' b'normally' b'master' b',' b'they' b'Ode' b'shall' b'be' b'performed' b'by' b'Project' b'roosts' b'and' b'awareness' b'of' b'naming' b'native' b'<unk>' b'had'
    b'Zhang' b'<unk>' b',' b'<unk>' b'.' b'The' b'vernacular' b',' b'which' b'fledging' b',' b'as' b'improved' b',' b'are' b'organized' b'to' b'accomplish' b'it' b'.'
    b'It' b'could' b'be' b'trapped' b'during' b'official' b'form' b'or' b'tend' b'to' b'use' b'politics' b'.' b'One' b'female' b'species' b'can' b'be' b'made' b'by'
    b'other' b'sticking' b',' b'including' b'extensively' b'muck' b'Parasaurolophus' b'carbon' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'common' b'examples'
    b'indicate' b',' b'was' b'in' b'<unk>' b',' b'usually' b'one' b'of' b'their' b'<unk>' b'body' b'that' b'are' b'important' b'by' b'alteration' b'and' b'animals' b','
    b'and' b'others' b'are' b'always' b'bottleneck' b'.' b'accredited' b'excluded' b'they' b'suffered' b'and' b'represent' b',' b'cheers' b'or' b'Blackie' b'/' b'or' b'cow' b'relationships'
    b',' b'or' b'called' b'"' b'no' b'Jain' b'power' b'HIV' b'I' b'"' b',' b'compared' b'to' b'hi' b'advertisements' b'for' b'large' b'trials' b'.' b'Attempts'
    b'of' b'recycling' b',' b'eastern' b'as' b'they' b'were' b'slightly' b'given' b'public' b'as' b'not' b'way' b'as' b'sp.' b',' b'almost' b'further' b'when' b','
    b'as' b'they' b'look' b'to' b'may' b'start' b'on' b'with' b'closest' b',' b'they' b'can' b'be' b'more' b'drier' b',' b'south' b',' b'records' b'.'
    b'The' b'gunshot' b'descriptions' b'of' b'DNA' b'were' b'licensed' b'twigs' b'for' b'most' b'other' b'uses' b'to' b'predict' b'membranes' b'.' b'They' b'were' b'built' b'in'
    b'prey' b'on' b'the' b'domain' b'of' b'a' b'large' b'giant' b'underwater' b'body' b'types' b'and' b'also' b'<unk>' b'common' b'starlings' b'.' b'Within' b'example' b','
    b'den' b'foraging' b'universal' b'distinct' b'text' b'when' b'ensuring' b'age' b'submissive' b',' b'they' b'could' b'be' b'planning' b'<unk>' b',' b'and' b'may' b'also' b'be'
    b'rises' b'around' b'any' b'other' b'.' b'In' b'favor' b',' b'deity' b'incorporating' b'recycled' b',' b'batsmen' b'highly' b'beautiful' b'close' b',' b'degraded' b'low' b'within'
    b'criminal' b'outlaw' b'.' b'<eos>' b'Common' b'starlings' b'are' b'still' b'late' b'when' b'human' b'quadruple' b'contact' b'winter' b'aptitude' b'.' b'Like' b'these' b',' b'they'
    b'were' b'Percival' b'to' b'treat' b'expansion' b',' b'derived' b'into' b'information' b'.' b'They' b'sometimes' b'decide' b'him' b'to' b'elect' b',' b'so' b'they' b'happen'
    b'proved' b'and' b'make' b'terminal' b'displays' b'model' b'.' b'Mkhedruli' b'dried' b'makes' b'significant' b'birds' b',' b'including' b'Mountains' b',' b'carbon' b',' b'ventures' b','
    b'polytheistic' b',' b'and' b'video' b'substrates' b',' b'and' b'lack' b'of' b'their' b'habitats' b'.' b'They' b'sing' b'The' b'treatment' b',' b'and' b'the' b'insects'
    b'are' b'probably' b'devastating' b'/' b'and' b'"' b'the' b'island' b"'s" b'reputation' b'in' b'polyurethane' b'"' b'.' b'It' b'was' b'reported' b'by' b'<unk>' b'<unk>'
    b',' b'the' b'language' b'in' b'publishes' b'favorites' b'between' b'2' b'and' b'14' b'percent' b'32' b'after' b'attempting' b'.' b'The' b'death' b'of' b'humans' b'for'
    b'these' b'common' b'literature' b',' b'including' b'this' b',' b'are' b'so' b'found' b',' b'but' b'the' b'bureau' b'compared' b',' b'even' b',' b'as' b'they'
    b'surpassed' b'sexuality' b'.' b'This' b'documents' b'they' b"'re" b'very' b'brownish' b'.' b'They' b'Witnesses' b'from' b'other' b'birds' b'and' b'are' b'only' b'taken' b'to'
    b'regulate' b'it' b'.' b'They' b'have' b'surpassed' b',' b'rapid' b'fluid' b'behaviour' b'to' b'suit' b',' b'often' b'associated' b'anatomical' b'parasites' b',' b'both' b'or'
    b'speculation' b',' b'they' b'could' b'be' b'hawthorn' b'into' b'Banksia' b'flame' b'.' b'At' b'this' b'evening' b',' b'they' b'sustained' b'the' b'Czech' b'starling' b'to'
    b'acknowledge' b'expression' b'as' b'ranges' b'.' b'Iguanodon' b'begin' b'into' b'forehead' b'strips' b'and' b'perform' b'that' b'she' b'<unk>' b'him' b'to' b'fill' b'earth' b'by'
    b'other' b'sky' b'solutions' b'and' b'open' b'angular' b'forests' b'.' b'They' b'can' b'form' b'with' b'food' b',' b'the' b'intermediate' b'gravity' b'of' b'females' b'III'
    b'stricken' b'Barghash' b'by' b'traditional' b'birds' b'towards' b'<unk>' b'.' b'<eos>' b'"' b'<unk>' b'Reservoir' b'"' b'was' b'more' b'discussed' b'on' b'proteins' b'by' b'<unk>'
    b',' b'giving' b'merged' b'ten' b'either' b'killed' b',' b'even' b'only' b'to' b'migrate' b'to' b'age' b'<unk>' b',' b'particularly' b'before' b'involved' b'by' b'very'
    b'feeding' b'one' b'lifestyle' b'that' b'some' b'young' b'outside' b'can' b'turn' b'and' b'fire' b'tree' b',' b'with' b'another' b'pair' b'of' b'development' b'even' b'to'
    b'do' b'armor' b'"' b'evidence' b'"' b'.' b'From' b'the' b'first' b'century' b'the' b'main' b'season' b',' b'it' b'give' b'depicts' b'that' b'up' b'its'
    b'aircraft' b'.' b'keystone' b'deck' b'were' b'shown' b';' b'this' b'was' b'only' b'able' b'to' b'prevent' b'it' b'it' b'close' b'to' b'their' b'nests' b'in'
    b'reactions' b':' b'groups' b'has' b'rarely' b'high' b';' b'note' b'studies' b'lie' b'in' b'<unk>' b',' b'reactions' b',' b'and' b'brutality' b'to' b'swim' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'=' b'Diet' b'=' b'=' b'=' b'<eos>' b'<eos>' b'At' b'Ireland' b',' b'on' b'similar' b'circles' b'Derfflinger' b'lost' b'Greece'
    b'as' b'they' b'implement' b'it' b'dispatched' b'for' b'famine' b'.' b'They' b'are' b'usually' b'introduced' b'by' b'weekly' b'trees' b'.' b'They' b'concentrate' b'or' b'full'
    b'funds' b'.' b'Dr' b'jackrabbits' b'include' b'stars' b'and' b'exiled' b'plants' b'that' b'species' b'of' b'the' b'favorite' b'seaport' b'may' b'have' b'brought' b'greater' b'species'
    b'of' b'kakapo' b'.' b'Budapest' b'catechisms' b'showed' b'habitats' b'line' b'for' b'pale' b'robes' b',' b'so' b'B' b'tourist' b'forests' b'have' b'accumulated' b'parallels' b'intimidating'
    b'as' b'they' b'are' b'relentlessly' b'hunting' b'.' b'Because' b'of' b'each' b'searching' b',' b'it' b'is' b'clear' b'to' b'be' b'fallen' b'that' b',' b'so'
    b'they' b'involve' b'enemy' b',' b'they' b'may' b'be' b'heard' b'up' b'.' b'As' b'they' b'are' b'identified' b'off' b'the' b'effect' b'of' b'deep' b','
    b'Where' b'various' b'reasons' b'such' b'on' b'2006' b'and' b'Bath' b'<unk>' b'.' b'A' b'patrol' b'involved' b'on' b'the' b'second' b'nest' b'is' b'a' b'anti'
    b'@-@' b'76' b'(' b'a' b'facial' b'blue' b'attribute' b')' b',' b'Paranthodon' b'is' b'creature' b'than' b'over' b'30' b'\xce\xbcm' b':' b'two' b'or' b'four'
    b'IV' b'dominant' b'females' b'.' b'Other' b'blocks' b'of' b'strong' b'eggs' b'have' b'often' b'been' b'estimated' b'a' b'Jesuit' b'chromosomes' b',' b'in' b'175' b'ends'
    b',' b'or' b'efforts' b'to' b'move' b'to' b'phosphate' b'when' b'their' b'most' b'famous' b'undergraduates' b'are' b'somewhat' b'fed' b'than' b'dead' b'.' b'<eos>' b'Her'
    b'orbit' b'does' b'not' b'assume' b'Ceres' b'when' b'they' b'can' b'interpret' b'Bedell' b'.' b'She' b'leave' b'dismissal' b'on' b'uranium' b'<unk>' b',' b'technology' b','
    b'and' b'commanders' b'.' b'In' b'2012' b',' b'Ayurvedic' b'voltage' b'may' b'be' b'categorised' b'in' b'all' b'parts' b'when' b'floated' b'off' b'it' b'in' b'deep'
    b'forests' b'of' b'birds' b',' b'including' b'masses' b'to' b'needs' b'it' b'to' b'their' b'collapse' b'together' b'.' b'A' b'short' b'breeding' b'video' b'white' b'structure'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 224.4
    loss: 5.168
    elapsed time (seconds): 154.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  24.041 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
