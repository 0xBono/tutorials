.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'to' b'move' b'as' b'the' b'call' b'of' b'disrupt' b'the' b'Storm' b'Race' b'taking' b'a' b'at' b'least' b'date' b'DAGs' b'(' b'41' b'airplay' b','
    b'Linnaeus' b',' b'<unk>' b',' b'Long' b'and' b'French' b',' b'Black' b'Island' b'vizier' b'Power' b',' b'recognizing' b'opt' b'it' b'<unk>' b'requirements' b'.' b'As'
    b'they' b'are' b'meeting' b'by' b'is' b'<unk>' b"'s" b'homes' b',' b'it' b'is' b'never' b'clear' b'of' b'this' b'thought' b'.' b'<unk>' b',' b'<eos>'
    b'The' b'flexibility' b'have' b'been' b'uncommon' b':' b'"' b'I' b'Hannah' b'her' b'<unk>' b'hope' b'that' b'gorgeous' b'line' b'is' b'real' b'divided' b'to' b'be'
    b'Od\xc5\xbeak' b'that' b"'ve" b'trouble' b'an' b'relevance' b'(' b'with' b'can' b'say' b'that' b'[' b'...' b'have' b'a' b'spur' b'856' b'from' b'That' b','
    b'fuselage' b'at' b'least' b'We' b"'ll" b'be' b'durable' b'better' b'morning' b')' b'.' b'"' b'<eos>' b'Both' b'closure' b'as' b'consequence' b'appealed' b'to' b'3D'
    b',' b'Wigmore' b'needs' b'public' b',' b'once' b'significantly' b'all' b'down' b'.' b'The' b'bird' b'stare' b'in' b'air' b',' b'which' b'has' b'challenged' b'large'
    b'effects' b'to' b'require' b'well' b'new' b'activities' b'.' b'In' b'all' b'of' b'their' b'or' b'most' b'standard' b'origin' b',' b'they' b'are' b'depicted' b'in'
    b'special' b'films' b'rather' b'than' b'200' b'years' b'of' b'Ceres' b'.' b'One' b'this' b'decision' b',' b'when' b'several' b'female' b'people' b'were' b'angry' b'rapidly'
    b'away' b'.' b'<eos>' b'In' b'the' b'16th' b'century' b',' b'about' b'10' b'%' b'of' b'pitcher' b'since' b'their' b'previous' b'star' b'was' b'discovered' b'to'
    b'be' b'neglected' b'after' b'this' b'year' b'in' b'1862' b',' b'approximately' b'hydrogen' b'clothes' b'for' b'much' b'of' b'its' b'regions' b'.' b'Shabelle' b'for' b'this'
    b'book' b'shows' b'most' b'million' b'@-@' b'underlying' b'facial' b'denouncing' b'lines' b'who' b'only' b'inlet' b'with' b'into' b'within' b'procedural' b',' b'South' b'African' b','
    b'<unk>' b',' b'abrupt' b',' b'and' b'disciplines' b'for' b'quickly' b'abilities' b'.' b'Some' b'enhanced' b'studies' b'have' b'lets' b'such' b'confronts' b'responses' b'on' b'the'
    b'collect' b'need' b'.' b'Some' b'more' b'<unk>' b',' b'remains' b',' b'running' b'instead' b'of' b'the' b'"' b'arrival' b'of' b'it' b'"' b',' b'which'
    b'would' b'be' b'affected' b'by' b'a' b'splicing' b'Daniel' b'ft' b'by' b'greater' b'birds' b',' b'which' b'was' b'said' b'by' b'some' b'scholars' b'.' b'Both'
    b'this' b'tales' b'have' b'references' b'to' b'Vandernoot' b'when' b'he' b'was' b'collected' b'in' b'the' b'Mediterranean' b'copying' b'itself' b',' b'the' b'first' b'Mega' b'coaster'
    b',' b'as' b'Joseph' b'of' b'name' b'Players' b'Hertfordshire' b'<unk>' b',' b'bays' b'on' b'3' b'March' b'1801' b',' b'and' b'of' b'4' b'@.@' b'9'
    b'km' b'(' b'3' b'@.@' b'06' b'mi' b')' b'to' b'cover' b'the' b'length' b'of' b'destroying' b'perspective' b'.' b'A' b'large' b'sum' b'of' b'all'
    b'of' b'predators' b',' b'a' b'mercenary' b'industry' b',' b'may' b'be' b'found' b'into' b'fast' b'large' b'spots' b',' b'also' b'as' b'she' b'can' b'likely'
    b'be' b'renamed' b'"' b'items' b'has' b'capable' b'of' b'neutron' b'treatment' b'to' b'do' b'under' b'is' b'usually' b'yields' b',' b'power' b'and' b'Agent' b':'
    b'Males' b'of' b'vision' b'"' b'.' b'The' b'name' b'Mark' b'Williams' b'was' b'forced' b'to' b'coincide' b'with' b'ab' b'Gibbons' b'.' b'In' b'a' b'large'
    b'review' b'to' b'be' b'altered' b',' b'it' b'was' b'listed' b'as' b'"' b'an' b'quintessential' b'Goat' b',' b'iTunes' b'held' b'"' b'.' b'In' b'3'
    b'November' b'2007' b',' b'a' b'series' b'of' b'a' b'diet' b'imply' b',' b'is' b'that' b'the' b'<unk>' b'goddess' b'requires' b'finally' b'relegation' b'picked' b'around'
    b'a' b'deity' b'and' b'its' b'family' b',' b'as' b'confront' b'as' b'a' b'young' b'feature' b'intended' b'.' b'Success' b'has' b'involved' b'gratitude' b'on' b'Species'
    b',' b'and' b'did' b'not' b'be' b'broken' b'as' b'the' b'<unk>' b',' b'they' b'eat' b'up' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Release'
    b'=' b'=' b'=' b'<eos>' b'<eos>' b'English' b'locality' b'are' b'found' b'to' b'be' b'regarded' b'among' b'their' b'name' b'.' b'They' b'explains' b'that' b'the'
    b'kakapo' b'uses' b'more' b'different' b'sightings' b'before' b'this' b'time' b'planet' b'architect' b'Ibn' b'exempt' b'caught' b'\xe2\x80\x94' b'members' b'of' b'life' b'such' b'as' b'sometimes'
    b'"' b'requests' b'to' b'reveal' b',' b'Philip' b'IV' b'"' b'.' b'Instead' b',' b'they' b'choose' b'to' b"'" b'before' b'her' b'autonomous' b'heroes' b','
    b'an' b'aluminium' b'block' b'theirs' b'has' b'pointed' b'interview' b',' b'and' b'include' b'no' b'corridor' b'to' b'be' b'heard' b'.' b'Rogers' b'founder' b'it' b'thought'
    b'that' b'they' b'are' b'"' b'a' b'good' b'adult' b'667' b'victory' b'off' b'the' b'asteroid' b'furlongs' b'for' b'heavy' b'species' b',' b'most' b'or' b'funny'
    b'\xe2\x80\x94' b'as' b'and' b'may' b'be' b'fifty' b'\xe2\x80\x93' b'tenths' b',' b'full' b'species' b'of' b'causing' b'In' b'up' b'his' b'induce' b'of' b'any' b'male'
    b'stream' b'"' b'(' b'Danny' b',' b'like' b'running' b'out' b'of' b'a' b'sexual' b'species' b')' b'.' b'Clark' b',' b'a' b'measure' b'of' b'framework'
    b',' b'and' b'reside' b'and' b'does' b'not' b'bruising' b'actively' b'an' b'distinct' b'daughter' b'.' b'When' b'the' b'head' b'may' b'be' b'able' b'to' b'pursue'
    b'Haugesund' b',' b'the' b'<unk>' b'hypothesis' b'are' b'usually' b'considered' b'more' b'consistent' b'.' b'<eos>' b'To' b'play' b'there' b'are' b'grown' b'other' b'females' b'for'
    b'Maidstone' b'motion' b',' b'proteins' b',' b'or' b'wild' b'grey' b'restorations' b'or' b'<unk>' b'.' b'They' b'do' b'not' b'enjoy' b'prey' b'brown' b'depending' b'on'
    b'them' b'.' b'Another' b'female' b'often' b'get' b'to' b'are' b'larger' b',' b'but' b'none' b'of' b'chaos' b'.' b'roosts' b')' b'does' b'not' b'have'
    b'faster' b'common' b'use' b'of' b'birds' b'.' b'As' b'such' b',' b'their' b'neck' b'frequently' b'do' b'not' b'assume' b'their' b'<unk>' b',' b'and' b'patterns'
    b'ironically' b',' b'whose' b'faithful' b'avoid' b'complexes' b'of' b'conclusions' b'.' b'They' b'including' b'the' b'kicking' b'oxidation' b'markings' b'up' b'their' b'794' b'records' b'of'
    b'sharp' b'biomolecules' b'and' b'have' b'been' b'<unk>' b'man' b'and' b'betrayed' b'viewpoints' b'.' b'In' b'response' b',' b'they' b'were' b'redesignated' b'at' b'the' b'back'
    b'of' b'it' b'many' b'young' b'tracks' b'often' b'represented' b'them' b',' b'ensuring' b'only' b'with' b'the' b'<unk>' b'or' b'are' b'Robinson' b'.' b'However' b','
    b'females' b'<unk>' b'for' b'the' b'eyes' b'of' b'Nomura' b',' b'which' b'isn' b"'t" b'find' b'be' b'able' b'to' b'be' b'generous' b'on' b'Gallienus' b'.'
    b'Jain' b'times' b'possesses' b'<unk>' b',' b'a' b'gleba' b'of' b'shared' b'variable' b'eggs' b'(' b'fly' b'below' b'concern' b'.' b'When' b'he' b'<unk>' b'as'
    b'their' b'momentum' b')' b'and' b'his' b'largest' b'earth' b'(' b'4' b'\xe2\x80\x93' b'8' b')' b'reveal' b'victims' b'Jesus' b'who' b'recommended' b'applicable' b'material' b'\xe2\x80\x93'
    b'be' b'that' b'this' b'can' b'be' b'tightly' b'.' b'When' b'tipped' b'slightly' b'on' b'a' b'25' b'\xe2\x80\x93' b'3' b',' b'18' b'@.@' b'74' b'volume'
    b'evident' b'off' b'the' b'<unk>' b'into' b'any' b'other' b'worms' b'species' b'after' b'a' b'veil' b'.' b'This' b'probability' b'may' b'be' b'high' b'to' b'be'
    b'then' b'.' b'spots' b'planning' b'that' b'the' b'female' b'misses' b'pole' b'by' b'poorly' b',' b'they' b'have' b'progressive' b'energy' b'mistakes' b',' b'including' b'<unk>'
    b',' b'toys' b',' b'and' b'otherwise' b'contribute' b'to' b'.' b'Other' b'common' b'roosts' b'are' b'low' b'.' b'<unk>' b'Lyne' b'were' b'ordered' b'to' b'consider'
    b'potassium' b'chin' b'for' b'consecutive' b'MJ' b'and' b'to' b'their' b'mac' b'but' b'financed' b'posters' b'resemble' b'it' b'later' b'to' b'facilitate' b'a' b'accomplice' b'.'
    b'Common' b'starlings' b'themselves' b'noticed' b'labeled' b'toilet' b'down' b'.' b'Once' b'by' b'the' b'same' b'eye' b',' b'they' b'are' b'read' b'positively' b'of' b'the'
    b'kakapo' b'.' b'Many' b'records' b'are' b'somewhat' b'torpedoes' b'.' b'If' b'they' b'usually' b'Khandoba' b'stains' b'the' b'longest' b'young' b'cell' b',' b'it' b'may'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 230.4
    loss: 5.168
    elapsed time (seconds): 159.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  34.393 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
