.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'(' b'<unk>' b')' b',' b'Jose' b'Malone' b',' b'<unk>' b'and' b'substantial' b'Cafe' b'in' b'1930' b',' b'and' b'a' b'apparent' b'alternative' b'@-@' b'<unk>'
    b'transmit' b'population' b'wide' b'about' b'the' b'veterinarian' b'MXN' b'while' b'Besant' b'<unk>' b'the' b'Old' b'History' b"'s" b'<unk>' b'(' b'MDS' b')' b',' b'God'
    b'of' b'providing' b'access' b'to' b'the' b'Simpson' b'USACE' b'and' b'Sheffield' b'Gallery' b'.' b'The' b'riff' b'premiered' b'on' b'privileges' b'as' b'calls' b'from' b'the'
    b'Eastern' b'Sea' b'vs.' b'an' b'rematch' b'in' b'"' b'linger' b'"' b'from' b'Aquitania' b',' b'as' b'when' b'the' b'island' b"'" b'last' b'attempts' b'yet'
    b'to' b'adopt' b'by' b'several' b'characters' b',' b'seeking' b'<unk>' b'.' b'With' b'separate' b'thoughts' b',' b'The' b'PlayStation' b'York' b'Times' b'called' b'"' b'motivation'
    b'"' b'(' b'"' b'accepting' b'terrible' b'without' b'to' b'Faust' b'from' b'1852' b'"' b')' b',' b'as' b'well' b'as' b'sulfur' b'Paochinda' b'(' b'"'
    b'American' b'priest' b'"' b')' b'.' b'nearer' b'in' b'Hungary' b',' b'the' b'castle' b"'s" b'editors' b'personal' b'barrier' b',' b'white' b'training' b',' b'sixties'
    b',' b'genres' b'and' b'<unk>' b'.' b'It' b'also' b'appears' b'into' b'their' b'recreational' b'image' b'and' b'distribution' b'for' b'much' b'with' b'buildings' b',' b'before'
    b'they' b'are' b'now' b'S.' b'Brown' b';' b'Sb' b'Meddings' b'wrote' b'that' b'the' b'phrase' b'with' b'Pray' b'material' b',' b'can' b'be' b'besieged' b'from'
    b'M\xc4\x81ori' b'<unk>' b'and' b'altars' b'in' b'which' b'<unk>' b'were' b'"' b'instances' b'of' b'long' b'danger' b',' b'"' b'and' b'"' b'fashionable' b'their' b'game'
    b'<unk>' b'Akhenaten' b'use' b'the' b'under' b'night' b'"' b'.' b'Rap' b'@-@' b'Davis' b'is' b'aware' b'of' b'a' b'planet' b'begins' b'after' b')' b'is'
    b'possible' b'to' b'wrestle' b'.' b'A' b'<unk>' b'ceremony' b'includes' b'that' b'"' b'I' b'don' b"'t" b'think' b'it' b'...' b'you' b'is' b'lines' b'and'
    b',' b'they' b'still' b'often' b'largely' b'spoke' b'that' b'I' b"'ll" b'his' b'anger' b'more' b'effectively' b'alive' b'than' b'tearful' b';' b'found' b'Tols\xc3\xa1' b'that'
    b'happened' b',' b'rather' b'than' b'than' b'very' b'excessive' b'and' b'trade' b'unique' b'.' b'That' b'will' b'it' b'openings' b',' b'I' b'have' b'no' b'jar'
    b'it' b'will' b'not' b'entirely' b'give' b'his' b'stop' b'to' b'speak' b'and' b'continue' b'to' b'be' b'present' b'to' b'sign' b'and' b'those' b',' b'but'
    b'as' b'it' b'was' b'nuts' b'on' b'where' b'my' b'243' b'faithfully' b'were' b'something' b'with' b'my' b'.' b'"' b'In' b'the' b'book' b',' b'"'
    b'The' b'purple' b'starling' b'who' b'opened' b'her' b'literary' b'enemy' b'mind' b'by' b'Colman' b'not' b'always' b'drain' b'and' b'hop' b'February' b'<unk>' b',' b'including'
    b'fans' b',' b'potential' b',' b'repetitive' b'or' b'mates' b'throughout' b'their' b'hiatus' b'.' b'"' b'The' b'Viscount' b'et' b"'" b'Post' b'hierarchical' b'Raffles' b'Colletts'
    b'Hollywood' b'the' b'book' b'is' b'a' b'collection' b'of' b'garage' b'by' b'Stereum' b'.' b'However' b',' b'they' b'were' b'played' b'on' b'an' b'funeral' b'in'
    b'1865' b'from' b'a' b'distant' b'weekly' b'gleba' b':' b'"' b'Even' b'some' b'God' b'society' b'&' b'Of' b'Atlas' b'<unk>' b'Reviewer' b'evolved' b'on' b'potential'
    b'thrive' b"'s" b'life' b',' b'living' b',' b'and' b'a' b'broad' b'digital' b'population' b'Justice' b'Swift' b'"' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Reception'
    b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'Background' b'=' b'=' b'<eos>' b'<eos>' b'The' b'species' b'possess' b'@-@' b'medal' b'manga' b'sports' b'style'
    b'is' b'likely' b'to' b'have' b'several' b'same' b'3' b'seconds' b'or' b'34' b'or' b'1' b'seconds' b'.' b'Over' b'the' b'course' b'of' b'both' b'likelihood'
    b',' b'the' b'chord' b':' b'The' b'Movie' b',' b'named' b'jam' b'Helga' b'Plensa' b'(' b'<unk>' b')' b',' b'has' b'headgear' b'for' b'a' b'improved'
    b'article' b'.' b'Scholars' b'are' b'found' b'to' b'have' b'light' b'a' b'total' b'of' b'them' b'.' b'The' b'kakapo' b'has' b'a' b'4' b'@.@' b'9'
    b'million' b'@-@' b'hour' b'male' b'kilometres' b'and' b'the' b'bowl' b'of' b'either' b'characters' b',' b'or' b'really' b'.' b'In' b'particular' b',' b'relay' b'carving'
    b'piano' b'has' b'no' b'longer' b'relationship' b'from' b'harmonies' b',' b'Kreutzer' b',' b'and' b'mice' b',' b'with' b'1' b'billion' b'eggs' b'near' b'points' b'.'
    b'When' b'they' b'employed' b'his' b'strands' b',' b'attract' b'it' b'that' b'it' b'wants' b'much' b'sort' b'of' b'objects' b'and' b'often' b'narrator' b'to' b'confront'
    b'bass' b',' b'it' b'"' b'could' b'think' b'a' b'story' b'or' b'quite' b'almost' b'to' b'win' b'back' b'"' b'.' b'In' b'1960' b',' b'infrared'
    b'improvements' b'were' b'opposed' b'in' b'a' b'amphibian' b'character' b'wing' b'.' b'Code' b'transverse' b'narrator' b'metre' b'seen' b'on' b'more' b'than' b'600' b'%' b'of'
    b'her' b'previous' b'Solar' b'characters' b',' b'which' b'allows' b'a' b'reality' b'of' b'smooth' b'that' b'they' b'do' b'delay' b'more' b'.' b'According' b'to' b'constant'
    b'analysis' b',' b'he' b'Schedeen' b'could' b'each' b'have' b'done' b',' b'and' b'it' b'has' b'always' b'succeeds' b'in' b'only' b'30th' b'life' b'simultaneously' b'.'
    b'Another' b'even' b'causes' b'considered' b'about' b'50' b'saints' b'that' b'may' b'oversee' b'Perrie' b'or' b'possibly' b'welcome' b':' b'A.' b'Young' b'<unk>' b',' b'Culture'
    b',' b'decoy' b'Elrane' b',' b'master' b'laterally' b',' b'and' b'Hightower' b'(' b'Travis' b'<unk>' b')' b'in' b'the' b'<unk>' b'Institute' b'of' b'Each' b'extra'
    b'audience' b'were' b'able' b'to' b'be' b'.' b'The' b'Iona' b'will' b'<unk>' b',' b'price' b'featuring' b'aircraft' b'as' b'subspecies' b',' b'but' b'Oh' b'Denard'
    b'(' b'she' b'grows' b'to' b'several' b'Pandit' b')' b'won' b'over' b'around' b'five' b'years' b'earlier' b'.' b'In' b'head' b',' b'they' b'condoms' b'with'
    b'him' b'for' b'each' b'other' b';' b'it' b'may' b'not' b'be' b'any' b'impossible' b'signals' b'.' b'When' b'this' b'he' b'genuinely' b'always' b'linked' b'on'
    b'despite' b'sitting' b'closer' b'to' b'each' b'other' b'if' b'it' b'is' b'on' b'Israel' b'it' b'is' b'probably' b'16' b'years' b',' b'where' b'Ranadev' b'wouldn'
    b"'Malley" b'is' b'commonly' b'somewhat' b'able' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Travel' b'arms' b'and' b'sprinting' b'.' b'=' b'=' b'<eos>' b'<eos>'
    b'yellowish' b'voice' b'larvae' b'have' b'many' b'feelings' b'over' b'Mulder' b',' b'simultaneous' b'when' b'she' b'didn' b"'t" b'have' b'questioned' b'human' b'prosperity' b'.' b'The'
    b'extent' b'of' b'between' b'a' b'two' b'@-@' b'generation' b'rides' b'exists' b'to' b'her' b'feathers' b'block' b'them' b',' b'being' b'multiple' b'encounter' b'long' b'.'
    b'They' b'have' b'been' b'confused' b'if' b'he' b'are' b'active' b'.' b'During' b'his' b'parent' b'week' b',' b'the' b'feathers' b'are' b'those' b'@-@' b'one'
    b'of' b'the' b'head' b'.' b'The' b'<unk>' b'kings' b'lies' b'more' b'traditional' b'females' b'although' b'it' b'has' b'actively' b'been' b'distinguished' b'so' b'.' b'The'
    b'other' b'recent' b'chicks' b'for' b'muscled' b'originated' b'up' b'by' b'possible' b'Earth' b'or' b'lacking' b'straight' b'or' b'thoughts' b'.' b'Common' b'starlings' b'enjoyed' b'strengthen'
    b'abnormalities' b'out' b'of' b'symbolic' b'@-@' b'grey' b'items' b'.' b'<eos>' b'juxtaposition' b',' b'birds' b'like' b'or' b'Cornwallis' b'riding' b'Banksia' b'and' b'<unk>' b'both'
    b'prized' b'possession' b';' b'this' b'will' b'proceed' b',' b'warning' b'Dusty' b'der' b'Dell' b'as' b'"' b'body' b'occupational' b'"' b'Museums' b'commented' b'they' b'"'
    b'really' b'naturally' b'Witherspoon' b',' b'he' b'will' b'be' b'influenced' b'by' b'Lord' b'"' b'.' b'Another' b'recent' b'evidence' b'of' b'computational' b'manifestations' b'near' b'their'
    b'body' b'suddenly' b'can' b'be' b'seen' b'from' b'its' b'different' b'cell' b'(' b'see' b'5' b'\xe2\x80\x93' b'2001' b')' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Architecture' b'=' b'=' b'<eos>' b'<eos>' b'Uprising' b'is' b'very' b'greatly' b'very' b'<unk>' b',' b'with' b'discussing' b'ornithopods' b'to' b'play' b'its' b'spiritual' b'chickens'
    b',' b'thus' b'chances' b'such' b'as' b'<unk>' b',' b'neutron' b'<unk>' b'skin' b',' b'<unk>' b'(' b'animals' b')' b',' b'exactly' b'more' b'than' b'10'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 240.4
    loss: 5.168
    elapsed time (seconds): 166.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  51.886 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
