.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'conclusive' b',' b'as' b'not' b'included' b'just' b'volunteered' b'until' b'Crawley' b'for' b'the' b'rest' b'of' b'his' b'season' b'.' b'<eos>' b'A' b'given' b'row'
    b'with' b'plot' b'schools' b'with' b'Zuniga' b'is' b'played' b'in' b'Withoos' b'in' b'North' b'Africa' b';' b'1928' b'is' b'revamped' b'to' b'celebrate' b'the' b'first'
    b'person' b'or' b'a' b'radio' b'body' b'.' b'His' b'latter' b'and' b'percentage' b'for' b'his' b'<unk>' b'vary' b'around' b'the' b'same' b'Hollywood' b'population' b'.'
    b'It' b'was' b'stunningly' b'by' b'<unk>' b'Doris' b'Elsinore' b'as' b'L' b'Jackson' b',' b'and' b'preventing' b'acceded' b'to' b'the' b'Special' b'family' b'it' b'Aware'
    b',' b'support' b',' b'and' b'left' b'food' b'out' b'.' b'Not' b'Ann' b'and' b'Memphis' b',' b'gulf' b'to' b'engage' b'the' b'spiritual' b'recovery' b'of'
    b'composers' b'for' b'failing' b'to' b'take' b'it' b'difficult' b'.' b'Additionally' b'all' b'covered' b'records' b'in' b'Poland' b'and' b',' b'prefect' b'of' b'Ireland' b'estimated'
    b'"' b'small' b'name' b'"' b',' b'and' b'the' b'Food' b'Scouts' b'was' b'a' b'tourist' b'human' b'symbol' b'to' b'observe' b'his' b'political' b'cooking' b'.'
    b'A' b'Andhaka' b'attempted' b'to' b'build' b'a' b'planet' b'Islam' b'to' b'be' b'heard' b';' b'the' b'locally' b'diagram' b'will' b'be' b'able' b'to' b'be'
    b'facing' b',' b'they' b'<unk>' b'well' b'as' b'chance' b'.' b'The' b'commercial' b'population' b'of' b'detail' b')' b'are' b'observed' b'in' b'bootlegs' b'<eos>' b'For'
    b'example' b',' b'many' b'in' b'regulation' b',' b'arose' b'by' b'$' b'bearing' b'million' b'or' b'enough' b'or' b'block' b'they' b'overlap' b'actions' b'and' b'eventually'
    b'end' b'.' b'A' b'Continental' b'minister' b'and' b'Cadmium' b'(' b'"' b'celestial' b'symbol' b'"' b')' b'game' b'was' b'climbed' b'by' b'incorporates' b'for' b'smaller'
    b'spines' b'within' b'the' b'second' b'Continental' b'Ages' b'.' b'Though' b'it' b'is' b'associated' b',' b'it' b'may' b'be' b'held' b'in' b'place' b'of' b'Jupiter'
    b',' b'the' b'wild' b'fleet' b'Men' b'and' b'Immemorial' b',' b'media' b',' b'/' b'Birch' b',' b'whitewater' b',' b'and' b'others' b',' b'who' b'does'
    b'not' b'apply' b'.' b'<eos>' b'Because' b'of' b'his' b'militias' b',' b'it' b'has' b'two' b'of' b'the' b'best' b'examples' b'I' b'recorded' b'before' b'England'
    b',' b'or' b'north' b'encounters' b'with' b'Lightship' b'critic' b',' b'green' b'swiftly' b',' b'"' b'Evening' b"'s" b'curricular' b'"' b'and' b'US' b'Kitty' b'('
    b'died' b'B' b')' b'.' b'As' b'of' b'1999' b'to' b'South' b'America' b',' b'longitudinal' b'Bulim' b'provides' b'power' b'measurements' b',' b'Neumann' b',' b'<unk>'
    b',' b'"' b'bacterial' b'crimes' b'occult' b'separation' b',' b'<unk>' b'@-@' b'striped' b',' b'end' b'processes' b'and' b'<unk>' b'"' b'.' b'Blood' b'terreplein' b'tilt'
    b'lubricated' b'in' b'all' b'televised' b'waters' b',' b'remove' b',' b'a' b'female' b'is' b'marked' b'by' b'a' b'star' b'from' b'using' b'greater' b'globular' b'languages'
    b'.' b'A' b'preview' b'of' b'these' b'birds' b'in' b'1891' b'include' b'in' b'stabbing' b'the' b'Republic' b'of' b'Ceres' b',' b'tank' b'expressed' b'around' b'10'
    b'\xe2\x80\x93' b'9' b'as' b'a' b'ruthless' b'being' b'539' b',' b'but' b'likely' b'are' b'known' b'as' b'the' b'mausoleum' b'.' b'M.' b'hooves' b'becomes' b'an'
    b'Duke' b'in' b'<unk>' b'of' b'<unk>' b',' b'although' b'the' b'human' b'origin' b'of' b'<unk>' b'are' b'unique' b'forms' b'and' b'bring' b'them' b'to' b'a'
    b'teacher' b'of' b'Ceres' b',' b'which' b'consists' b'of' b'upgrading' b'them' b'to' b'do' b'some' b'or' b'two' b'in' b'@-@' b'term' b'businesses' b'.' b'There'
    b'are' b'merely' b'or' b'more' b'inclusive' b'characteristics' b'.' b'1827' b'have' b'no' b'greater' b'spots' b'of' b'fences' b'as' b'they' b'have' b'once' b'devoted' b'@-@'
    b'control' b',' b'<unk>' b'and' b'tanks' b'for' b'so' b'@-@' b'electrical' b'ones' b',' b'<unk>' b'and' b'subunits' b'allowing' b'for' b'their' b'association' b'.' b'In'
    b'the' b'letters' b',' b'h' b'by' b'burials' b'from' b'common' b'trees' b'live' b'in' b'order' b',' b'grew' b'as' b'arc' b'as' b'.' b'<eos>' b'The'
    b'kakapo' b'gather' b'on' b'October' b'2' b',' b'2007' b'on' b'the' b'North' b'100' b'Laboratory' b'<unk>' b',' b'early' b'Reflecting' b'in' b'1919' b'.' b'It'
    b'was' b'also' b'written' b'by' b'several' b'groups' b'as' b'of' b'debt' b'.' b'When' b'\xe2\x88\x92' b'89' b'ends' b'in' b'survey' b',' b'with' b'Universal' b'diet'
    b',' b'Clark' b'son' b'and' b'Mongolia' b'.' b'They' b'also' b'last' b'performed' b'to' b'reach' b'scales' b',' b'because' b'the' b'population' b'of' b'between' b'Piedras'
    b'Jose' b'<unk>' b'(' b'1989' b')' b'.' b'<eos>' b'The' b'kakapo' b'of' b'Austria' b'is' b'Chure' b'to' b'airborne' b'the' b'increase' b',' b'embarking' b'As'
    b'having' b'done' b'in' b'1924' b'with' b'water' b'of' b'battlecruisers' b'.' b'The' b'old' b'idea' b'of' b'Ireland' b'was' b'both' b'recorded' b'for' b'<unk>' b','
    b'among' b'various' b'Irish' b'treatise' b'craft' b',' b'which' b'incorporated' b'between' b'2' b'@,@' b'000' b'short' b'times' b'(' b'as' b'it' b'carried' b'to' b'privacy'
    b'Rizzi' b')' b'were' b'located' b'significantly' b'.' b'The' b'Verpa' b'wedge' b'is' b'fewer' b'matter' b'of' b'Most' b'species' b'of' b'73' b'displays' b',' b'and'
    b'numbered' b'300' b'species' b'of' b'a' b'million' b'@-@' b'poison' b'Wicca' b'MPC' b',' b'developed' b'with' b'some' b'were' b'a' b'7' b'@.@' b'8' b'@-@'
    b'pounder' b'de' b'Direction' b'.' b'He' b'is' b'armed' b'in' b'final' b'erroneous' b',' b'especially' b'accountants' b',' b'and' b'the' b'population' b'combatants' b'and' b'rough'
    b'coterie' b'were' b'coming' b'to' b'only' b'those' b'in' b'the' b'country' b',' b'and' b'those' b'of' b'lateral' b'<unk>' b'in' b'ranges' b'him' b'from' b'the'
    b'prescribe' b'apse' b'.' b'However' b',' b'after' b'under' b'1' b'@,@' b'000' b'tests' b'of' b'any' b'surprise' b'cumulative' b'<unk>' b'they' b'involve' b'it' b'weather'
    b',' b'from' b'various' b'populations' b'.' b'Xuan' b'BC' b'was' b'adapted' b'by' b'push' b'for' b'awkward' b'for' b'rural' b'and' b'contention' b'in' b'the' b'17th'
    b'century' b'.' b'As' b'its' b'first' b'major' b'@-@' b'known' b'contemplating' b'Seamen' b',' b'the' b'kakapo' b'is' b'termed' b'slow' b',' b'the' b'shafts' b'are'
    b'connected' b'over' b'injured' b',' b'similar' b'to' b'their' b'largest' b'home' b'and' b'struck' b'for' b'access' b'changing' b'opportunities' b'to' b'Jeffries' b',' b'<unk>' b'or'
    b'leading' b'.' b'In' b'a' b'semi' b'@-@' b'year' b'will' b'be' b'beneficial' b'and' b'the' b'kakapo' b'of' b'Boston' b'4th' b'Cavalry' b',' b'it' b'features'
    b'mainly' b'special' b'Islamic' b'Merton' b'(' b'Portland' b')' b',' b'which' b'may' b'be' b'defeated' b'as' b'late' b'as' b'their' b'<unk>' b',' b'1856' b','
    b'and' b'by' b'smaller' b'1755' b'.' b'Other' b'levels' b'of' b'population' b',' b'fatalities' b'or' b'organic' b'flooding' b',' b'could' b'be' b'required' b'.' b'<eos>'
    b'Xenon' b'prevented' b'Irish' b'amounts' b'of' b'descent' b'to' b'find' b'scattered' b'or' b'similar' b'jobs' b'while' b'<unk>' b'heavy' b'connections' b',' b'in' b'its' b'way'
    b'that' b'their' b'subtle' b'departments' b'were' b'sufficiently' b'bleak' b'.' b'In' b'1966' b',' b'they' b'become' b'one' b'species' b'species' b',' b'mainly' b'that' b'had'
    b'sufficiently' b'smaller' b'or' b'gold' b',' b'which' b'attendance' b'have' b'observed' b'out' b'The' b'goddess' b'elected' b',' b'mostly' b'as' b'it' b'go' b'and' b'only'
    b'.' b'The' b'underwater' b'starling' b'is' b'satires' b'rather' b'than' b'equipped' b'with' b'cats' b',' b'as' b'culminating' b'Bobcaygeon' b'behind' b'other' b'cases' b'of' b'Ireland'
    b'Ortona' b'and' b'morphology' b'from' b'I.' b'Gefion' b',' b'curriculum' b',' b'they' b'dismissed' b'to' b'syphilis' b',' b'in' b'fact' b'depicting' b'flight' b',' b'or'
    b'feed' b'from' b'almost' b'100' b'@.@' b'6' b'million' b'isle' b'(' b'72' b'%' b'of' b'the' b'second' b'and' b'better' b')' b'from' b'other' b'types'
    b'of' b'unorthodox' b'trappers' b'.' b'Common' b'eukaryotic' b'tests' b'includes' b'females' b'allowed' b'clinic' b',' b'weaker' b'populations' b'personally' b'and' b'starspots' b'\xe2\x80\x93' b'most' b'bird'
    b'Poems' b'.' b'<eos>' b'Like' b'increases' b'in' b'believing' b',' b'Northern' b'Ireland' b'were' b'able' b'to' b'be' b'cause' b'.' b'If' b'runners' b'they' b'their'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 228.2
    loss: 5.164
    elapsed time (seconds): 158.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  31.061 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
