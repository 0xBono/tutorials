.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'come' b'down' b'or' b'"' b'Grammar' b'energy' b'"' b'.' b'The' b'poem' b'shares' b'him' b'a' b'distinction' b'to' b'"' b'<unk>' b'"' b',' b'which'
    b'who' b'left' b'when' b'there' b'are' b'no' b'ordnance' b'return' b'to' b'A' b'mutant' b'the' b'Seer' b"'s" b'inauguration' b',' b'whose' b'matter' b'that' b'Billy'
    b'Robinson' b'(' b'The' b'<unk>' b'were' b'due' b'to' b'"' b'One' b'the' b'vice' b',' b'spoof' b'"' b')' b'was' b'changed' b'with' b'2' b'Gy'
    b'two' b'years' b',' b'and' b'would' b"'t" b'be' b'distinguished' b'at' b'YouTube' b'.' b'Before' b'high' b'press' b'are' b'to' b'find' b'as' b'they' b'think'
    b',' b'they' b'go' b'on' b'to' b'place' b'they' b'have' b'using' b'about' b'25' b'feet' b'and' b'32' b'children' b'.' b'It' b'\xe2\x80\x99' b'complex' b'their'
    b'name' b'is' b'a' b'narrow' b'but' b'darker' b'shifts' b'to' b'a' b'American' b'groove' b',' b'he' b'would' b'seek' b'the' b'Chicago' b'220' b'Although' b'females'
    b'generally' b'faced' b'him' b'to' b'Conquest' b'shepherds' b'.' b'As' b'if' b',' b'on' b'a' b'head' b',' b'camera' b',' b'they' b'are' b'good' b'or'
    b'forced' b'to' b'fly' b'them' b'to' b'attack' b',' b'and' b'on' b'other' b'occasions' b';' b'it' b'are' b'strong' b',' b'thus' b'effectively' b'.' b'Blofeld'
    b'realizes' b'a' b'path' b'after' b',' b'by' b'the' b'<unk>' b'743' b'.' b'If' b'm' b'young' b':' b'it' b'is' b'always' b'able' b'to' b'lose'
    b'their' b'proper' b'threat' b'SCUMM' b'at' b'a' b'special' b'expense' b',' b'while' b'they' b'were' b'visible' b'to' b'age' b'they' b'takes' b'22' b'knots' b'or'
    b'global' b'possibilities' b'on' b'it' b'are' b'spotted' b'.' b'Before' b'29' b'men' b'play' b'other' b'households' b',' b'they' b'(' b'nitrate' b'attached' b'to' b'the'
    b'families' b',' b'73' b'\xc2\xb0' b'People' b'tips' b'the' b'quality' b'of' b'a' b'paralleled' b'dish' b'of' b'24' b'\xe2\x80\x93' b'9' b'lb' b',' b'50' b'p.m.'
    b'or' b'loading' b'hands' b',' b'were' b'pushing' b'to' b'be' b'confused' b'because' b'the' b'mountains' b'seems' b'to' b'reach' b'outside' b'foxes' b'as' b'"' b'some'
    b'non' b'm' b',' b'you' b'look' b'from' b'#' b'10' b'and' b'eight' b'minutes' b'several' b'times' b'.' b'of' b'whenever' b'years' b',' b'one' b'of'
    b'the' b'few' b'gliders' b'were' b'short' b',' b'or' b'or' b'it' b'has' b'stopped' b'weaken' b';' b'it' b'is' b'able' b'to' b'be' b'seen' b'after'
    b'risks' b'.' b'The' b'accuracy' b'saw' b'minor' b'pair' b'of' b'losing' b'yards' b',' b'and' b'the' b'other' b'juveniles' b'for' b'a' b'predecessors' b'of' b'<unk>'
    b'into' b'disintegration' b',' b'with' b'<unk>' b'@-@' b'vehicle' b'manufacturing' b',' b'with' b'die' b'into' b'various' b'amounts' b'of' b'feathers' b'.' b'Each' b'will' b'be'
    b'moved' b'to' b'three' b'plurality' b'and' b'carrying' b'when' b'Ha' b'is' b'a' b'night' b'settler' b'.' b'Miss' b'forms' b'include' b'<unk>' b'to' b'be' b'exhausted'
    b'for' b'God' b'like' b';' b'in' b'the' b'life' b'of' b'Ceres' b'only' b'year' b'and' b'B' b'for' b'specific' b'amounts' b',' b'only' b'with' b'better'
    b'or' b'possible' b'cream' b'.' b"'" b'<unk>' b'invitations' b'tunnel' b'down' b'a' b'collected' b'of' b'down' b'off' b',' b'an' b'target' b'mysticism' b'on' b'a'
    b'broad' b'edition' b',' b'providing' b'during' b'one' b'of' b'a' b'game' b"'s" b'feet' b'of' b'talk' b'.' b'No' b'antimony' b'into' b'the' b'countries' b'dropkicks'
    b'from' b'their' b'eyes' b'makes' b'females' b'that' b'are' b'that' b'<unk>' b',' b'most' b'luminous' b'images' b'.' b'The' b'only' b'recent' b'different' b'ligatures' b'on'
    b'some' b'spot' b'was' b'always' b':' b'contrasts' b'into' b'it' b'of' b'assertiveness' b'and' b'nothing' b'.' b'"' b'<eos>' b'<eos>' b'=' b'=' b'Ecology' b'='
    b'=' b'<eos>' b'<eos>' b'Since' b'history' b'face' b',' b'Sandra' b'CG' b'when' b'1592' b'Day' b',' b'despite' b'many' b'names' b',' b'were' b'put' b'up'
    b'on' b'parallel' b'Life' b"'" b'secondary' b'fundamentalist' b'gift' b'on' b'numerous' b'candidates' b'.' b'Many' b'of' b'these' b'players' b'with' b'reducing' b'avoiding' b'viewing' b'successful'
    b'winds' b'were' b'required' b'to' b'be' b'wide' b'.' b'Because' b',' b'this' b'year' b'they' b'may' b'have' b'his' b'sloping' b'right' b',' b'it' b'is'
    b'suggested' b'involved' b'by' b'<unk>' b"'s" b'<unk>' b'headman' b'or' b'Ideal' b'for' b'Pryce' b'.' b'The' b'Economic' b'Chicago' b'gill' b'is' b'suspected' b'to' b'create'
    b'him' b'up' b'a' b'share' b'entirely' b'who' b'inhabit' b'to' b'the' b'world' b',' b'striking' b'high' b'for' b'the' b'other' b'exciting' b'millennium' b'.' b'Once'
    b'the' b'silent' b'topography' b'before' b'it' b'will' b'be' b'easy' b'about' b'a' b'place' b'and' b'outside' b'they' b'do' b'some' b'way' b',' b'they' b'tends'
    b'to' b'employ' b'do' b'so' b'.' b'Following' b'this' b'point' b',' b'like' b'ten' b'hypothesis' b',' b'32' b'%' b'of' b'their' b'male' b'crosses' b'.'
    b'Other' b'other' b'commandos' b'reliance' b'alongside' b'firing' b',' b'and' b'have' b'doing' b'typically' b'today' b'to' b'be' b'able' b'to' b'indicate' b'the' b'supernatural' b'story'
    b'.' b'Females' b'Pallas' b'for' b'the' b'other' b'situation' b'that' b'blow' b'down' b'.' b'When' b'dominant' b',' b'they' b'do' b'not' b'die' b'out' b'of'
    b'kakapo' b',' b'they' b'trusted' b'a' b'night' b'or' b'eye' b',' b'other' b'bands' b'them' b'measuring' b'a' b'group' b'of' b'200' b'@.@' b'5' b','
    b'may' b'Jefferson' b'to' b'propose' b'for' b'pressure' b'days' b'.' b'K.' b'Kinetics' b'Mycena' b'yields' b'her' b'to' b'a' b'very' b'one' b'spot' b'life' b'have'
    b'been' b'broken' b'into' b'eukaryotes' b',' b'\xe2\x80\x9d' b',' b'and' b'keeping' b'a' b'pallium' b'out' b'of' b'their' b'home' b'to' b'her' b'right' b'.' b'<eos>'
    b'While' b'=' b'Indeed' b',' b'on' b'the' b'R\xc3\xa9union' b'side' b',' b'Aston' b"'" b'children' b'd' b'!' b'"' b'tried' b'straight' b'Qi' b'.' b'"'
    b'St' b'marble' b',' b'here' b',' b'have' b'Too' b'Legends' b',' b'puts' b'at' b'the' b'International' b'<unk>' b',' b'"' b'And' b'now' b'aggressively' b'embroidered'
    b'on' b'ground' b'"' b'.' b'The' b'leg' b'@-@' b'up' b'starter' b'repelled' b'them' b'to' b'become' b'their' b'magic' b'in' b'skating' b'hitting' b'a' b'broken'
    b'yellow' b'poem' b'or' b'Banai' b'darkness' b'threat' b'the' b'island' b'.' b'In' b'the' b'meantime' b'Wilhelm' b'jumps' b'against' b'Leo' b'<unk>' b'the' b'head' b'into'
    b'he' b'accomplice' b'were' b'killed' b'.' b'Unlike' b'Kaifeng' b',' b'when' b'they' b'could' b'be' b'Malta' b',' b'they' b'are' b'still' b'specifically' b'removed' b'.'
    b'Going' b'they' b'are' b'used' b'by' b'former' b'<unk>' b'or' b'<unk>' b'songs' b',' b'while' b'those' b',' b'when' b'it' b'is' b'only' b'her' b'when'
    b'he' b'subjects' b';' b'to' b'have' b'produced' b'at' b'danger' b'such' b'as' b'"' b'Cracksman' b'"' b',' b'of' b'which' b'people' b'orange' b'fungus' b'songs'
    b'may' b'be' b'shorter' b'.' b'Denner' b',' b'they' b'have' b'suggested' b'her' b'Lycoming' b',' b'kakapo' b'and' b'<unk>' b',' b'or' b'as' b'.' b'The'
    b'girls' b'it' b'allowed' b'young' b'completely' b'localization' b'of' b'a' b'inception' b'rate' b'directly' b',' b'be' b'missed' b'at' b'v' b'found' b'negatively' b'to' b'bowl'
    b'.' b'<unk>' b'contain' b'that' b'to' b'give' b'completing' b'the' b'female' b'spread' b'to' b'special' b'origin' b'(' b'it' b'mean' b'that' b'"' b'"' b'stronger'
    b'makes' b'nothing' b'what' b'is' b'rapid' b')' b'to' b'be' b'been' b'sexy' b'(' b'Defensive' b'Hansen' b')' b'"' b',' b'even' b'too' b'small' b'about'
    b'maat' b'as' b'he' b'can' b'step' b'physically' b'.' b'The' b'size' b'of' b'their' b'ruler' b'(' b'been' b'kakapo' b'<unk>' b')' b'and' b'their' b'classifications'
    b'are' b'"' b'<unk>' b'now' b'<unk>' b'"' b',' b'so' b'set' b'a' b'despair' b'for' b'the' b'fledgling' b'Chinese' b'phenomenon' b',' b'a' b'option' b'of'
    b'inscribed' b'it' b'to' b'other' b'snakes' b'though' b'sending' b'sent' b'to' b'pursuit' b'in' b'<unk>' b'(' b'n\xc3\xa9e' b'Lomonosov' b')' b'.' b'It' b'is' b'not'
    b'mentioned' b'when' b'only' b'below' b'with' b'her' b'conservative' b'aging' b'moves' b'up' b'up' b'.' b'The' b'name' b'also' b'approaches' b'that' b'this' b'bird' b'will'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 250.2
    loss: 5.168
    elapsed time (seconds): 175.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  9.781 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
