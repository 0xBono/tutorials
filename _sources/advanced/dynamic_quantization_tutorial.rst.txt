.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b';' b'the' b'obsolescent' b'effect' b'between' b'money' b',' b'in' b'association' b',' b'<unk>' b',' b'deputy' b'heat' b',' b',' b'they' b'are' b'considered' b'insignificant'
    b'in' b'order' b'.' b'The' b'timbers' b'candidature' b'are' b'listed' b'as' b'as' b'of' b'both' b'particular' b'radiation' b',' b'made' b'to' b'predict' b'the' b"'"
    b'jet' b"'" b'(' b'Ivor' b'You' b')' b'.' b'They' b'have' b'advanced' b'mean' b'chastity' b'and' b'bombed' b'there' b'being' b'a' b'almost' b'to' b'have'
    b'operation' b'in' b'Campbeltown' b'to' b'be' b'killed' b'.' b'Instead' b',' b'several' b'kakapo' b'help' b'its' b'return' b'to' b'scripted' b'diet' b'course' b'now' b'together'
    b'.' b'After' b'his' b'Scipion' b',' b'they' b'evolved' b'shelter' b'south' b'after' b'Well' b'in' b'his' b'brother' b"'s" b'story' b'for' b'its' b'teach' b'food'
    b',' b'existing' b',' b'and' b'from' b'<unk>' b'or' b'even' b'hill' b';' b'they' b'compared' b'to' b'<unk>' b',' b'Bayreuth' b'is' b'struck' b'free' b'and'
    b'critique' b'.' b'<eos>' b'Many' b'spots' b'of' b'four' b'\xe2\x98\x89' b'have' b'<unk>' b',' b'and' b'should' b'be' b'reachable' b'in' b'the' b'flanks' b'with' b'no'
    b'their' b'own' b'litter' b'.' b'Also' b',' b'intensify' b'regarded' b'Dry' b',' b'<unk>' b',' b'nostrils' b'and' b'eggs' b'United' b',' b'which' b'can' b'be'
    b'rarely' b'debated' b'.' b'The' b'taxonomic' b'satellites' b'of' b'revive' b'variety' b'can' b'explain' b'throws' b'magical' b'signature' b'of' b'this' b'motion' b'instead' b'could' b'be'
    b'larger' b':' b'.' b'These' b'verses' b'contain' b'their' b'ability' b'to' b'cooperate' b'at' b'me' b'in' b'the' b'past' b'dating' b'.' b'They' b'consist' b'has'
    b'liquid' b'spots' b'such' b'as' b'knowledge' b'nuclei' b',' b'there' b'felt' b'does' b'not' b'become' b'more' b'good' b'than' b'.' b'Males' b'loaded' b'on' b'for'
    b'@-@' b'Olav' b'or' b'summer' b'drawing' b'inside' b'distinctive' b'safety' b'were' b'protected' b';' b'Mohandas' b'will' b'remote' b'contrasted' b'down' b'.' b'Even' b'they' b'have'
    b'accompanied' b'the' b'distal' b'Roman' b'texture' b'for' b'an' b'bath' b'and' b'solve' b'his' b'ordinance' b'.' b'<eos>' b'The' b'Tudor' b'starling' b'specimen' b'is' b'generally'
    b'<unk>' b'by' b'1' b'@.@' b'8' b'\xe2\x80\x93' b'2' b'@.@' b'5' b'in' b'(' b'260' b'ft' b')' b'long' b',' b'west' b'pose' b'its' b'observations'
    b',' b'far' b'up' b'forward' b';' b'in' b'1947' b'tailed' b'Asia' b'produced' b'the' b'sniper' b'to' b'those' b'of' b'2' b'cm' b'(' b'4' b'@.@'
    b'8' b'in' b')' b'.' b'His' b'successful' b'hunting' b'size' b'is' b'both' b'short' b',' b'and' b'then' b'may' b'be' b"'" b'neoceratopsian' b'or' b'moving'
    b',' b'so' b'even' b'.' b'<eos>' b'Ancients' b'under' b'22' b'@.@' b'48' b'cm' b'(' b'0' b'@.@' b'8' b'in' b')' b',' b'sacks' b'may'
    b'be' b'gradually' b'devastating' b'.' b'<eos>' b'Males' b'are' b'a' b'very' b'rare' b'panel' b'that' b'has' b'smaller' b'dwarfs' b'.' b'Since' b'they' b'will' b'151'
    b'different' b'hand' b'books' b',' b'they' b'are' b'more' b'critical' b'.' b'Kakapo' b'climbing' b'ancestry' b'is' b'generally' b'so' b'more' b'reliable' b',' b'so' b'they'
    b'are' b'they' b'are' b'rarely' b'remaining' b'in' b'water' b'.' b'<unk>' b'Hairan' b'.' b'However' b',' b'Beyonc\xc3\xa9' b'is' b'muscular' b'for' b'six' b'wins' b'on'
    b'psychoactive' b'6' b'only' b'<unk>' b'mineral' b',' b'by' b'which' b'"' b'an' b'true' b'container' b'that' b'actually' b'is' b'dark' b',' b'he' b'will' b'<unk>'
    b'support' b'all' b'.' b'"' b'In' b'two' b'cases' b',' b'"' b'Ceres' b'"' b'is' b'then' b'called' b'<unk>' b',' b'vanquishing' b'traditional' b'minerals' b'but'
    b'she' b'will' b'be' b'thought' b'to' b'have' b'been' b'very' b'amazing' b',' b'rather' b'than' b'10' b'years' b'.' b'It' b'has' b'occasionally' b'been' b'sent'
    b'later' b'from' b'nesting' b'when' b'it' b'is' b'becoming' b'important' b'for' b'striking' b'bacteria' b'.' b'These' b'nests' b'themselves' b'are' b'present' b'.' b'Also' b','
    b'other' b'birds' b'were' b'poor' b'sighted' b'by' b'cliffs' b',' b'which' b'may' b'be' b'<unk>' b'and' b'even' b'overwhelm' b'they' b'occurs' b'from' b'the' b'Dunnington'
    b'(' b'for' b'example' b'below' b'examples' b')' b'.' b'The' b'diet' b'vary' b'around' b'the' b'ground' b'Corsini' b',' b'with' b'them' b'that' b'they' b'shared'
    b'cooler' b'more' b'pledge' b'.' b'Because' b'they' b'are' b'so' b'disappears' b'over' b'Formula' b'starlings' b',' b'they' b'have' b'no' b'<unk>' b',' b'and' b'may'
    b'catch' b'the' b'habitat' b'of' b'sea' b'.' b'<eos>' b'activities' b'may' b'enter' b'their' b'nest' b'barrier' b',' b'ritualistic' b'measuring' b'eighteen' b'broods' b'.' b'After'
    b'regard' b',' b'some' b'eggs' b'may' b'be' b'found' b'as' b'they' b'may' b'identify' b'orbit' b',' b'occurring' b'.' b'As' b'they' b'are' b'of' b'adults'
    b'as' b'such' b'as' b'mobbing' b'disbandment' b',' b'they' b'are' b'even' b'good' b'.' b'Besides' b'structural' b',' b'they' b'may' b'be' b'caused' b'by' b'BP'
    b'and' b'<unk>' b',' b'they' b'are' b'placed' b'on' b'threads' b'indeed' b',' b'physical' b'individuals' b',' b'or' b'soft' b'abilities' b',' b'Africa' b',' b'as'
    b'food' b'as' b'they' b'Jermaine' b'Astraeus' b'Lou' b'.' b'There' b'have' b'been' b'clear' b'rate' b'during' b'relation' b'to' b'Latin' b',' b'to' b'add' b'to'
    b'the' b'River' b'being' b'calls' b'to' b'date' b'.' b'They' b'end' b'them' b'and' b'kill' b'some' b'other' b'patterns' b',' b'horses' b'such' b'as' b'\xe2\x80\x9c'
    b'Nandi' b'qualified' b'a' b'female' b',' b'and' b'a' b'<unk>' b'threat' b'to' b'beach' b'control' b'complement' b'they' b'are' b'good' b'.' b'While' b'Avro' b','
    b'female' b',' b'bottomed' b',' b'thin' b'birds' b'will' b'be' b'tap' b'and' b'as' b'they' b'return' b'.' b'Because' b'increased' b'males' b',' b'when' b'spelling'
    b'@-@' b'eared' b',' b'the' b'capital' b'becomes' b'strong' b',' b'usually' b'damaged' b'or' b'measure' b'out' b'a' b'dialectic' b'.' b'Once' b'this' b'as' b'their'
    b'drinking' b'gravity' b'may' b'be' b'elaborated' b'into' b'experience' b'or' b',' b'they' b'migrate' b'or' b'be' b'way' b'to' b',' b'instead' b'knocked' b'with' b'their'
    b'overall' b'cease' b',' b'but' b'also' b'that' b'wingspan' b'of' b'female' b',' b'but' b'characters' b'of' b'bright' b'distance' b'leaves' b'sit' b'off' b'many' b'cellular'
    b'sequences' b',' b'figures' b'of' b'predators' b',' b'common' b'diagnosis' b'is' b'helpful' b'because' b'they' b'state' b'.' b'<eos>' b'In' b'its' b'second' b'winter' b','
    b'a' b'church' b'may' b'be' b'controlled' b'when' b'is' b'performed' b'and' b'modified' b'one' b'to' b'leave' b'or' b'structural' b'enough' b'in' b'there' b'.' b'Upon'
    b'much' b'reading' b'they' b'pulled' b'in' b'the' b'diet' b'to' b'proteins' b',' b'they' b'may' b'some' b'potential' b'males' b':' b'insular' b',' b'trying' b'to'
    b'produce' b'large' b'birds' b',' b'only' b'the' b'pistol' b'of' b'motor' b'starling' b'.' b'Believing' b'on' b'their' b'beak' b'do' b'speak' b'research' b'but' b'couple'
    b'regarded' b'as' b'spouting' b'they' b'were' b'largely' b'beneficial' b'with' b'revenge' b'.' b'According' b'to' b'mRNA' b'nest' b'ribosomal' b',' b'Europe' b'may' b'be' b'distinguished'
    b'as' b'cold' b',' b'be' b'not' b'reduced' b'to' b'facilitate' b'repetitive' b'material' b'.' b'Males' b'have' b'triangle' b'or' b'prevent' b'their' b'taste' b'.' b'Common'
    b'males' b'20' b'structures' b',' b'especially' b'recommended' b';' b'they' b'are' b'very' b'different' b'capable' b'of' b'eating' b'to' b'packaged' b'orange' b'or' b'Wales' b'.'
    b'Bono' b'realised' b'that' b'although' b'they' b'may' b'be' b'degenerate' b',' b'they' b'<unk>' b'that' b'mature' b'about' b'holes' b'.' b'Even' b'mechanisms' b',' b'the'
    b'bird' b'is' b'regularly' b'safe' b'or' b'lacks' b'by' b'their' b'sake' b'.' b'It' b'reciprocating' b'found' b'that' b'everything' b'in' b'the' b'perfectly' b',' b'however'
    b',' b'or' b'increasing' b'their' b'calls' b'.' b'Such' b'traumatic' b'starlings' b'may' b'be' b'box' b'if' b'they' b'are' b'<unk>' b'.' b'This' b'touch' b'either'
    b'through' b'a' b'ecological' b'large' b',' b'or' b'they' b'diving' b'one' b',' b'on' b'many' b'islands' b'.' b'Stars' b'often' b'appears' b'in' b'happening' b'Singh'
    b',' b'and' b'when' b'Seville' b'it' b'have' b'been' b'transmitted' b',' b'from' b'type' b',' b'they' b'were' b',' b'knowledge' b'COB' b',' b'violence' b'and'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 233.4
    loss: 5.168
    elapsed time (seconds): 165.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  43.734 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
