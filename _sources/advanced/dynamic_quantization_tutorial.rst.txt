.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'on' b'top' b'his' b'parallels' b'.' b'Once' b'Holy' b'Thing' b'wrote' b'most' b'other' b'currents' b'by' b'<unk>' b'<unk>' b'in' b'spring' b'material' b',' b'an'
    b'"' b'<unk>' b'"' b',' b'employee' b'multiplicity' b'from' b'the' b'company' b',' b'The' b'digital' b'hypocrisy' b'in' b'<unk>' b',' b'buttons' b'up' b'.' b'The'
    b'estate' b'also' b'exists' b'at' b'a' b'unknown' b'peak' b'with' b'head' b',' b'leading' b'to' b'Huddersfield' b':' b'A' b'village' b'producers' b'of' b'Yeovil' b'"'
    b'Selected' b'October' b'@-@' b'person' b',' b'in' b'<unk>' b',' b'and' b'key' b'that' b'cannot' b'be' b'<unk>' b'in' b'1860' b'.' b'"' b'The' b'Sunday'
    b'Hungary' b'showed' b'the' b'best' b'family' b'as' b'a' b'bump' b'.' b'poised' b'its' b'lyrical' b'niece' b'are' b'powerful' b'arrive' b'(' b'write' b'only' b'task'
    b')' b'as' b'an' b'name' b'of' b'Basement' b',' b'and' b'within' b'Brenda' b',' b'no' b'Christian' b'antidote' b'of' b'the' b'player' b'episode' b'their' b'next'
    b'cultural' b'presence' b'.' b'The' b'materials' b'have' b'to' b'serve' b'yield' b'to' b'chart' b'when' b'then' b',' b'in' b'any' b'cases' b',' b'they' b'were'
    b'<unk>' b'.' b'Goffman' b'then' b'left' b'a' b'overall' b'exotic' b'duel' b',' b'carrying' b'it' b'entry' b';' b'to' b'supplement' b'his' b'secure' b'design' b'becomes'
    b'because' b'for' b'his' b'departure' b'.' b'O' b"'Malley" b'produced' b'history' b'a' b'piano' b',' b'the' b'<unk>' b'demonstrate' b'insight' b'and' b'<unk>' b'America' b'in'
    b'five' b'times' b'.' b'By' b'1950' b',' b'it' b'was' b'light' b'against' b'his' b'portrayal' b'of' b'absolute' b'Albans' b'during' b'1990' b'.' b'<eos>' b'In'
    b'Europe' b'rests' b',' b'and' b'raised' b'Ceres' b',' b'monitored' b'equipment' b'were' b'committed' b'by' b'many' b'seconds' b'to' b'Corythosaurus' b':' b'"' b'One' b'of'
    b'the' b'sun' b'an' b'fair' b'<unk>' b'coincided' b'is' b'<unk>' b'or' b'<unk>' b'megawatts' b'.' b'situations' b'said' b'they' b'are' b'playing' b'by' b'its' b'courage'
    b'work' b'.' b'"' b'In' b'the' b'third' b'region' b'of' b'Fame' b'exclusive' b'in' b'2005' b',' b'On' b'April' b'13' b',' b'2006' b',' b'the'
    b'uncle' b'for' b'brick' b'guiding' b'them' b'a' b'character' b'.' b'It' b'Chen' b'collected' b'praise' b',' b'to' b'give' b'the' b'Australian' b'messenger' b'<unk>' b'1270'
    b',' b'Alabama' b',' b'and' b'Friday' b'.' b'ruled' b',' b'appealed' b'to' b'the' b'Pitman' b"'s" b'winged' b'and' b'political' b'reproduction' b'of' b'the' b'U.S.'
    b'will' b'be' b'strange' b'by' b'The' b'Second' b'File' b'and' b'the' b'official' b'Johannesburg' b'election' b'of' b'some' b'SEC' b'novels' b',' b'several' b'months' b'working'
    b'of' b'submerged' b'or' b'challenged' b'to' b'review' b'over' b'the' b'Sun' b'.' b'fared' b'to' b'processional' b'elements' b',' b'he' b'fired' b'stories' b'in' b'the'
    b'twenties' b'and' b'with' b'anyone' b'@-@' b'having' b'connected' b'grave' b'all' b'action' b';' b'the' b'appetite' b'circuit' b'still' b'designated' b'109' b'kilometres' b'(' b'160'
    b'km' b')' b'high' b'drop' b'with' b'mandate' b',' b'a' b'180' b'metres' b'.' b'It' b'was' b'powered' b'by' b'<unk>' b'<unk>' b'partnerships' b'as' b'a'
    b'result' b'of' b'their' b'brother' b',' b'though' b'Ceres' b'featuring' b'a' b'genre' b'of' b'transits' b':' b'a' b'stones' b'of' b'techniques' b'that' b'be' b'third'
    b'.' b'ECU' b'suggests' b'that' b'this' b'would' b'be' b'interesting' b'for' b'these' b'Europos' b',' b'change' b'using' b'women' b'and' b'by' b'@-@' b'crime' b'.'
    b'These' b'endgames' b'appear' b'in' b'a' b'Ras' b'to' b'be' b'different' b',' b'rather' b'than' b'starred' b'with' b'any' b'way' b',' b'"' b'They' b'<unk>'
    b'in' b'the' b'model' b'of' b'thermal' b'Longues' b'"' b'.' b'condemning' b'a' b'similar' b'snake' b'on' b'a' b'site' b',' b'still' b'only' b'damaged' b'fatty'
    b'Ant\xc3\xb3nio' b'observed' b'on' b'abnormalities' b'.' b'For' b'a' b'season' b',' b'Ceres' b'has' b'a' b'more' b'high' b'bright' b'successful' b',' b'and' b'another' b'kitsune'
    b'can' b'recognise' b'where' b'other' b'other' b'or' b'supernatural' b'abilities' b'differs' b'up' b'.' b'<eos>' b'Other' b'faithful' b'from' b'work' b'may' b'be' b'covered' b'.'
    b'Unlike' b'less' b'much' b',' b'their' b'Guitar' b'but' b'their' b'hemmema' b'and' b'emotional' b'enemy' b'by' b'their' b'wife' b',' b'who' b'gave' b'most' b'Videos'
    b'(' b'di' b'Chasuble' b')' b'.' b'However' b',' b'immune' b'branches' b',' b'they' b'continue' b'to' b'reach' b'the' b'Japanese' b'account' b'for' b'testing' b'a'
    b'novel' b'is' b'taken' b'for' b'a' b'judge' b'for' b'more' b'hundred' b'or' b'wider' b'red' b'sense' b'.' b'<eos>' b'Also' b',' b'Ceres' b'develop' b'the'
    b'difference' b'of' b'its' b'gravity' b'when' b'they' b'find' b'to' b'anyone' b',' b'who' b'are' b'Viva' b'graduates' b';' b'by' b'"' b'nature' b',' b'or'
    b'successful' b'"' b';' b'\xe2\x80\x9c' b'Stabilization' b'louder' b'the' b'ball' b'god' b'on' b'their' b'respective' b'breeding' b'Times' b'and' b'protagonists' b'at' b'Georgian' b'@-@' b'time'
    b'.' b'As' b'magnitude' b'<unk>' b'for' b'murder' b',' b'the' b'Morning' b'collapses' b'BMNH' b'and' b'the' b'descending' b'organisation' b',' b'mostly' b'normally' b'@-@' b'planet'
    b'adults' b'.' b'In' b'his' b'second' b'years' b',' b'Lake' b'Boom' b'!' b'has' b'not' b'been' b'praised' b'by' b'disciplines' b'.' b'The' b'distribution' b'of'
    b'his' b'Y' b'<unk>' b'White' b'de' b'Bang' b'!' b'(' b'referring' b'to' b'the' b'Guardian' b'"' b'I' b'don' b"'t" b'think' b'he' b'could' b'do'
    b',' b'that' b'you' b'might' b'<unk>' b'a' b'wanted' b'shall' b'get' b'.' b'"' b'However' b',' b'the' b'rules' b'of' b'other' b'observations' b'and' b'<unk>'
    b'by' b'showing' b'Doux' b'on' b'the' b'same' b'killer' b"'s" b'communications' b'contents' b'Coco' b'takes' b'place' b'.' b'According' b'to' b'<unk>' b'<unk>' b',' b'The'
    b'quarter' b'display' b'\xe2\x80\x94' b'effectively' b'and' b'sky' b'by' b'Jeremy' b'<unk>' b'and' b'William' b'Collection' b'considered' b'on' b'October' b'24' b',' b'2006' b',' b'where'
    b'traditional' b'cars' b'in' b'some' b'January' b'1921' b'.' b'Attempts' b'were' b'enhanced' b'being' b'positive' b'as' b'Goro' b'\xe2\x80\x93' b'a' b'<unk>' b'Crewe' b'.' b'If'
    b'joining' b'Max' b'Henryson' b',' b'making' b'the' b'case' b'a' b'blacksmiths' b',' b'calling' b'"' b'<unk>' b'from' b'many' b'catches' b'like' b'a' b'populated' b'feeling'
    b'politicians' b'...' b'Dance' b'no' b'roadblock' b"'" b'definition' b'of' b'wary' b'"' b',' b'that' b'allows' b'colonization' b'in' b'a' b'clumsy' b'low' b'<unk>' b'part'
    b'.' b'Manners' b'also' b'proposed' b'the' b'graphics' b'in' b'Russia' b'by' b'the' b'Sacred' b'@-@' b'based' b'Philosophical' b'Norton' b',' b'pro' b'@-@' b'election' b','
    b'twenty' b'@-@' b'best' b'expansions' b'of' b'sheer' b'culture' b'and' b'musical' b'skills' b'conditions' b'.' b'<eos>' b'1967' b'picked' b'more' b'time' b'to' b'be' b'discovered'
    b'by' b'each' b'commercial' b'authorization' b'.' b'The' b'occasion' b'of' b'March' b'did' b'died' b',' b'until' b'June' b'11' b',' b'2003' b'"' b'comforted' b'in'
    b'the' b'First' b'History' b'"' b'and' b'"' b'The' b'Isles' b'"' b',' b'Raffles' b'Times' b',' b'and' b'Champion' b'<unk>' b',' b'as' b'Rights' b'after'
    b'his' b'introduction' b',' b'his' b'home' b'series' b'received' b'George' b'<unk>' b',' b'a' b'mercenary' b'on' b'October' b'4' b',' b'2006' b'.' b'It' b'hired'
    b'the' b'land' b'of' b'Nadiadwala' b'Goldberg' b'turning' b'line' b'in' b'Oldham' b'so' b'concluded' b'that' b'some' b'of' b'the' b'show' b"'s" b'button' b'.' b'He'
    b'reportedly' b'exhibited' b'he' b'"' b'won' b'two' b'different' b'having' b'a' b'very' b'Trouble' b',' b'"' b'John' b'<unk>' b'is' b'retiring' b'to' b'be' b'an'
    b'representative' b'Margin' b'Barbie' b'.' b'that' b'minutes' b'of' b'pupils' b'to' b'be' b'Spanish' b',' b'it' b'occurs' b'to' b'the' b'Jews' b',' b'before' b'much'
    b'"' b'that' b'most' b'Berlioz' b',' b'with' b'God' b'leaves' b',' b'The' b'kingship' b'and' b'immense' b'<unk>' b'antipathy' b'.' b'Also' b'after' b'on' b'a'
    b'difficult' b'apartment' b'Brooks' b'who' b"'s" b'no' b'doubt' b'of' b'colleagues' b'sailed' b'you' b'.' b'"' b'O' b"'Malley" b'seems' b'contemporary' b'contributions' b'and' b'Machiavellian'
    b'stories' b'.' b'<eos>' b'With' b'a' b'bigger' b'Accelerated' b',' b'it' b'is' b'considered' b'that' b'the' b'entrance' b'with' b'crew' b',' b'such' b'as' b'relationship'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 237.8
    loss: 5.168
    elapsed time (seconds): 161.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  44.139 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
