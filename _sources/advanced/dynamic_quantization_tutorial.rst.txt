.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Boom' b'Gama' b'works' b'.' b'"' b'<eos>' b'A' b'school' b'known' b'to' b'expand' b'each' b'other' b'parrot' b'is' b'broken' b'.' b'Jean' b'roll' b'is'
    b'Nos' b'Stingray' b'total' b',' b'and' b'directly' b'seduction' b'groves' b',' b'Mexico' b',' b'occupied' b'Christopher' b'Phillips' b',' b'celebrated' b'the' b'series' b"'s" b'<unk>'
    b',' b'making' b'it' b'attention' b'to' b'front' b'to' b'develop' b'Entire' b'state' b'.' b'<eos>' b'He' b'was' b'suspended' b'in' b'Faust' b'for' b'14' b'years'
    b',' b'including' b'3' b'miles' b'which' b'accepted' b'it' b'with' b'eight' b'votes' b',' b'and' b'the' b'African' b'bun' b'\xe2\x80\x93' b'MacDonald' b'<unk>' b'from' b'wing'
    b'Vernon' b'(' b'1796' b')' b',' b'6' b'@.@' b'0' b'%' b'overall' b',' b'and' b'2' b'@.@' b'5' b'metres' b'(' b'04' b'mm' b')'
    b'from' b'expectations' b'moving' b'as' b'40' b'when' b'9' b'in' b'killed' b'destruction' b',' b'with' b'more' b'than' b'only' b'an' b'five' b'high' b'short' b'fifteenth'
    b'time' b'representing' b'the' b'anion' b'.' b'It' b'will' b'find' b'an' b'deal' b'@-@' b'up' b'when' b'is' b'so' b'fed' b'by' b'antimonium' b'after' b'they'
    b'are' b'selected' b'in' b'the' b'<unk>' b'card' b'.' b'By' b'3' b'\xe2\x80\x93' b'3' b',' b'the' b'show' b'is' b'not' b'superior' b'.' b'The' b'smell'
    b'of' b'most' b'parrots' b'will' b'be' b'distinguished' b'into' b'sphere' b'with' b'less' b'temperature' b',' b'or' b'until' b'location' b'by' b'smash' b'to' b'engage' b'.'
    b'Males' b'followed' b'an' b'toss' b'to' b'train' b',' b'he' b'just' b'can' b'be' b'expected' b'by' b'mountain' b'Lodge' b'.' b'Dura' b'foods' b'have' b'hailed'
    b'Aware' b'ever' b'to' b'stop' b'their' b'OS' b'or' b'sometimes' b'poverty' b'.' b'One' b'behaviour' b'was' b'said' b'to' b'be' b'nearly' b'heaviest' b'with' b'Saurolophus'
    b'.' b'It' b'developed' b'elongated' b'or' b'high' b'food' b'practices' b'away' b',' b'holding' b'using' b'lower' b'predators' b'about' b'their' b'thirteen' b'.' b'The' b'natural'
    b'colour' b'of' b'her' b'birds' b'jackrabbit' b',' b'but' b'still' b'vitality' b',' b'are' b'Plowright' b'.' b'While' b'about' b'35' b'%' b'of' b'falsetto' b'from'
    b'there' b'have' b'the' b'bowls' b',' b'it' b'wears' b'their' b'presence' b',' b'Nubia' b'farms' b'from' b'the' b'visitor' b'.' b'For' b'example' b',' b'they'
    b'were' b'hatch' b'to' b'have' b'a' b'orbit' b'or' b'discover' b',' b'and' b'even' b'piece' b'which' b'may' b'be' b'sufficient' b',' b'they' b'should' b'have'
    b'been' b'so' b'how' b'they' b'find' b'Coleby' b'before' b'.' b'Females' b'employ' b'in' b'fourth' b'of' b'the' b'even' b'running' b'reminding' b'molecules' b'or' b'joy'
    b'clearing' b'them' b',' b'so' b'some' b'they' b'are' b'brownish' b'burning' b'to' b'keep' b'isotopes' b'due' b'to' b'Ceres' b'or' b'even' b'toned' b'down' b'.'
    b'"' b'nasal' b'flocks' b'of' b'agnostic' b',' b'on' b'smoke' b',' b'are' b'NDH' b'"' b',' b'so' b'their' b'Iroquois' b'varies' b',' b'and' b'once'
    b'D.C.' b'as' b'they' b'each' b'fires' b'.' b'<unk>' b'levels' b'may' b'be' b'highly' b'expensive' b'during' b'display' b'.' b'One' b'of' b'these' b'pale' b'water'
    b'are' b'the' b'first' b'Bostock' b'to' b'have' b'been' b'An' b'"' b'dense' b'engraving' b'"' b'than' b'faith' b'.' b'Some' b'columns' b'rendered' b'together' b'half'
    b'as' b'to' b'be' b'heard' b'and' b'do' b'not' b'impose' b'other' b'way' b'.' b'Clay' b'consists' b'of' b'incomplete' b',' b'some' b'means' b'parrot' b','
    b'is' b'possible' b'.' b'Even' b'this' b'bar' b'suspected' b'that' b'they' b'are' b'a' b'decision' b'silver' b'or' b'texture' b'of' b'many' b'victims' b'of' b'<unk>'
    b',' b'colour' b',' b'and' b'their' b'speaker' b'.' b'In' b'January' b'2004' b',' b'it' b'is' b'a' b'population' b'of' b'about' b'\xc2\xa3' b'3' b'million'
    b'(' b'common' b'to' b'five' b'or' b'40' b'%' b')' b'describing' b'extensive' b'starlings' b'throughout' b'a' b'series' b'of' b'sperm' b',' b'at' b'a' b'25'
    b'@-@' b'year' b'ibotenic' b'portion' b'and' b'the' b'minimum' b'architectural' b'element' b'during' b'the' b'existence' b'of' b'fourth' b'New' b'Zealand' b'.' b'Over' b'about' b'Land'
    b'people' b',' b'the' b'kakapo' b'close' b'to' b'a' b'cottage' b'in' b'less' b'it' b'side' b'.' b'A' b'slender' b'spectrum' b'is' b'Metacritic' b',' b'whose'
    b'presumed' b'syndrome' b'to' b'10' b'km' b'(' b'5' b'@.@' b'5' b'mi' b')' b'above' b'North' b'Africa' b'.' b'In' b'1885' b',' b'it' b'can'
    b'be' b'distinguished' b'by' b'a' b'club' b'activity' b'for' b'predators' b'for' b'females' b'.' b'There' b'are' b'by' b'evidence' b'of' b'the' b'kakapo' b'on' b'<unk>'
    b'or' b'able' b'to' b'have' b'been' b'repaired' b'when' b'The' b'kakapo' b'depicts' b'undergo' b'light' b',' b'and' b'very' b'singing' b'.' b'The' b'eggs' b'may'
    b'be' b'held' b'here' b'Penguins' b'between' b'natural' b'decks' b',' b'such' b'as' b'Wellington' b'Way' b',' b'typically' b'nocturnal' b'or' b'even' b'after' b'major' b'posts'
    b'a' b'angle' b'that' b'the' b'kakapo' b'once' b'shape' b'in' b'rail' b',' b'or' b',' b'from' b'Tech' b'and' b'snakes' b'to' b'New' b'Zealand' b'.'
    b'For' b'example' b',' b'females' b'do' b'not' b'again' b'be' b'present' b'on' b'a' b'bird' b'where' b'their' b'female' b'components' b'jump' b',' b'and' b'after'
    b'old' b',' b'armed' b'<unk>' b'they' b'white' b'you' b"'ve" b'some' b'<unk>' b'.' b'A' b'maximum' b'attempt' b'to' b'hear' b"'aak" b'forests' b'is' b'turned'
    b'to' b'grass' b',' b'in' b'particular' b',' b'then' b'near' b'of' b'vitro' b'.' b'spouting' b',' b'tumulus' b'maintains' b'that' b'their' b'food' b'is' b'larger'
    b',' b'then' b'as' b'seen' b'when' b'there' b'are' b'no' b'<unk>' b'or' b'pieces' b'for' b'old' b'shoulders' b'to' b'help' b'these' b'snakes' b',' b'such'
    b'on' b'Carroll' b'Province' b',' b'is' b'active' b'in' b'<unk>' b'chance' b'during' b'treatment' b'.' b'Typically' b',' b'they' b'are' b'also' b',' b'attempting' b'to'
    b'avoid' b'etymological' b'chemotherapy' b'\xe2\x80\x94' b'including' b'subspecies' b'movement' b'.' b'The' b'battery' b'is' b'sketchy' b',' b'those' b'it' b'Bate' b',' b'which' b'may' b'be'
    b'heard' b'beyond' b'fresh' b'nuclear' b'habitat' b'that' b'the' b'female' b'vehicles' b'their' b'role' b'through' b'regularly' b'and' b'hunt' b'they' b'are' b'effect' b'when' b'they'
    b'are' b'actually' b'first' b'<unk>' b'.' b'This' b'holds' b'very' b'large' b',' b'but' b'was' b'Virchow' b',' b'but' b'their' b'origins' b'has' b'a' b'rare'
    b'range' b'by' b'their' b'eye' b'.' b'<unk>' b',' b'through' b'example' b',' b'rubbers' b',' b'pop' b'surrounds' b'tracks' b'is' b'normally' b'seen' b'to' b'explode'
    b'.' b'Therefore' b',' b'when' b',' b'some' b'purplish' b'common' b'starlings' b'produces' b'pale' b'mutations' b'or' b'the' b'<unk>' b'are' b'revamped' b',' b'may' b'be'
    b'transported' b'to' b'yellowish' b'radial' b'nest' b'infection' b',' b'which' b'grasses' b'differently' b'that' b'humans' b',' b'so' b'they' b'will' b'be' b'made' b'to' b'populations'
    b'such' b'as' b',' b'on' b'the' b'fourth' b'island' b',' b'which' b'are' b'booms' b',' b'as' b'they' b'sectors' b'that' b'they' b'were' b'affected' b'by'
    b'the' b'peculiar' b'sweet' b'standard' b'prey' b'.' b'"' b'Kelefa' b'/' b'Kicking' b'"' b'is' b'the' b'closest' b'starling' b'its' b'will' b'as' b'they' b'do'
    b'.' b'If' b'Lineberger' b'living' b'on' b'the' b'leg' b',' b'they' b'can' b'become' b'a' b'grayish' b'cargo' b',' b'and' b'are' b'able' b'to' b'be'
    b'stored' b',' b'which' b'mostly' b'may' b'need' b'to' b'abolish' b'their' b'family' b'will' b'be' b'variable' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'='
    b'=' b'<eos>' b'<eos>' b'Ireland' b"'s" b'mitosis' b'@-@' b'tailed' b'relief' b'found' b'no' b'common' b'distance' b'from' b'trees' b'.' b'In' b'establishing' b'little' b'gas'
    b',' b'they' b'do' b'not' b'"' b'were' b'aided' b'"' b'.' b'Each' b'impatient' b'Goldsmith' b'hair' b'may' b'be' b'results' b',' b'taking' b'place' b'heavy'
    b'or' b'green' b'merchants' b'position' b'as' b'divided' b'on' b'a' b'male' b'when' b'receiving' b'as' b'it' b'cannot' b',' b'and' b'may' b'force' b'the' b'contents'
    b'of' b'other' b'native' b'lay' b'.' b'This' b'may' b'have' b'been' b'different' b'due' b'to' b'both' b'human' b'females' b',' b'particularly' b'due' b'to' b'eye'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 223.3
    loss: 5.168
    elapsed time (seconds): 155.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  23.565 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
