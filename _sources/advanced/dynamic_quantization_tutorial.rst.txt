.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'cabin' b'in' b'Ireland' b'are' b'very' b'complete' b'.' b'<unk>' b'Evangeline' b'finds' b'the' b'<unk>' b'instruments' b'in' b'1944' b',' b'in' b'which' b'Baltimore' b"'s"
    b'Army' b'comes' b'in' b'3' b'February' b'1801' b',' b'and' b'he' b'gave' b'his' b'<unk>' b'sort' b'title' b'policy' b'to' b'express' b'the' b'work' b'to'
    b'continue' b'the' b'game' b'gain' b'.' b'However' b',' b'during' b'cedars' b'it' b'began' b'revenge' b'in' b'1949' b'since' b'favor' b'visits' b'regions' b'in' b'California'
    b',' b'New' b'Zealand' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Hairan' b'=' b'=' b'=' b'<eos>' b'<eos>' b'attracted' b'stories' b'in' b'Australia' b'have'
    b'begun' b'safety' b'upright' b'.' b'<unk>' b'Anchor' b'listed' b'as' b'a' b'reputation' b'for' b'Aviation' b'<unk>' b':' b'Formula' b'Cross' b'with' b'no' b'eyes' b'in'
    b'the' b'<unk>' b"'s" b'Persian' b'basement' b'.' b'Udell' b'opened' b'a' b'discovery' b'of' b'<unk>' b'over' b'me' b',' b'at' b'what' b'he' b'could' b'approve'
    b'a' b'sensitive' b'variant' b':' b'blow' b'by' b'<unk>' b'Slezak' b',' b'who' b'participated' b'on' b'the' b'deploy' b'American' b'Egyptologist' b'Mayo' b'kit' b'in' b'2006'
    b',' b'due' b'to' b'his' b'power' b'@-@' b'commander' b'October' b'Graham' b'that' b'year' b'.' b'The' b'Channel' b'won' b'obscuring' b'its' b'anthology' b',' b'"'
    b'If' b'someone' b'listed' b'up' b'this' b'traditional' b'form' b'we' b'wouldn' b"'t" b'must' b'give' b'it' b'through' b'staffs' b'into' b'his' b'body' b'.' b'If'
    b'they' b'shall' b'let' b'with' b'comedy' b'and' b'a' b'nice' b'field' b'after' b'elections' b'.' b'"' b'<eos>' b'Ecclestone' b'visits' b'the' b'themes' b'the' b'two'
    b'<unk>' b'appearances' b'in' b'a' b'single' b'zone' b'and' b'of' b'Suvla' b'Castle' b',' b'Marina' b'Walsh' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Biography' b'='
    b'=' b'<eos>' b'<eos>' b'Obsessions' b'ran' b'by' b'Mosley' b'Ceres' b'introduced' b'his' b'debut' b'on' b'June' b'5' b',' b'2009' b',' b'together' b',' b'10'
    b'%' b'to' b'operate' b'getting' b'ARIA' b',' b'an' b'sudden' b'talking' b'scene' b'"' b'which' b'Certainly' b'on' b'six' b'games' b'people' b'of' b'their' b'generating'
    b'way' b'after' b'his' b'loss' b'.' b'"' b'In' b'Lerner' b'Walpole' b'Hollywood' b',' b'the' b'World' b'Club' b',' b'helped' b'in' b'matches' b'directly' b'his'
    b'casino' b'and' b'set' b'his' b'face' b'when' b'"' b'if' b'Tessa' b'makes' b'a' b'M3' b'jokes' b'\xe2\x80\x94' b'I' b"'ve" b'just' b'received' b'they' b'don'
    b"'t" b'deep' b'quite' b'kind' b'.' b'"' b'The' b'statement' b'were' b'widely' b'built' b'for' b'the' b'assortment' b'of' b'When' b'considering' b'it' b'in' b'insane'
    b'and' b'one' b'rate' b'.' b'Crash' b'and' b'changeup' b'both' b'comb' b'won' b'Rogatti' b'to' b'prisoner' b'direct' b'in' b'the' b'case' b'.' b'Similarly' b','
    b'in' b'the' b'Chicago' b'World' b'Hears' b'in' b'1909' b'Mosley' b'announced' b'all' b'to' b'vote' b'Mosley' b'Geoff' b'honours' b'which' b'sentiment' b'.' b'So' b'to'
    b'create' b'enough' b'to' b'get' b'the' b'season' b',' b'dedicated' b'from' b'this' b'time' b',' b'Jews' b',' b'asking' b'its' b'car' b'and' b'Kirkpatrick' b','
    b'shows' b'Ceres' b'immediately' b'to' b'a' b'one' b'@-@' b'yard' b'sphere' b'.' b'To' b'coincide' b'to' b'Upset' b'in' b'his' b'opinion' b',' b'Mosley' b'died'
    b'him' b'with' b'Mark' b'Albert' b',' b'which' b'caused' b'O' b"'Malley" b"'s" b'guest' b'actions' b'for' b'<unk>' b'spacecraft' b',' b'finishing' b'their' b'expedition' b'.'
    b'"' b'lamenting' b'against' b'someone' b'of' b'dollars' b'depends' b'in' b'work' b'during' b'him' b'game' b';' b'I' b'might' b'also' b'identify' b'things' b'such' b'as'
    b'1440' b'exploration' b',' b'teenage' b'percent' b'in' b'Historian' b'Taylor' b'"' b'.' b'In' b'1882' b',' b'Superman' b'joined' b'O' b"'Malley" b'in' b'a' b'proposal'
    b'engineer' b'in' b'1931' b',' b'as' b'well' b'as' b'Bauer' b'<unk>' b',' b'seeking' b'he' b'told' b'how' b'Anderson' b'had' b'announced' b'his' b'stand' b'to'
    b'Outworld' b',' b'and' b'would' b'have' b'remained' b'scorers' b'in' b'"' b'Mama' b'and' b'Better' b'Dam' b'"' b'/' b'to' b'a' b'O' b'One' b"'s"
    b'lease' b'prior' b'to' b'talent' b',' b'over' b'three' b'minutes' b'.' b'Johnson' b'also' b'enjoyed' b'power' b'of' b'a' b'Raffles' b'Director' b',' b'a' b'battlecruiser'
    b'champions' b'at' b'2' b'@.@' b'5' b'marriages' b';' b'he' b'averaged' b'Campbell' b'124' b'in' b'1924' b'playing' b',' b'because' b'timber' b'in' b'March' b'1960'
    b'Tufaro' b'won' b'his' b'appearance' b'from' b'Lee' b'an' b'full' b'opportunity' b'<unk>' b'(' b'<unk>' b')' b'to' b'form' b'a' b'fan' b'in' b'the' b'1997'
    b'title' b'game' b'.' b'A' b'species' b'in' b'his' b'supplements' b'records' b':' b'<eos>' b'I' b"'ve" b'identifying' b'us' b'/' b'like' b'his' b'way' b'ended'
    b'in' b'all' b'up' b'teams' b'and' b'a' b'string' b'deal' b',' b'act' b'so' b'Clarkson' b'Sox' b'rap' b'united' b'.' b'In' b'in' b',' b'it'
    b'is' b'C' b'inHg' b',' b'with' b'a' b'equipment' b'option' b'in' b'children' b'to' b'<unk>' b'Weird' b'to' b'bring' b'a' b'<unk>' b'night' b'.' b'The'
    b'hopes' b'run' b'in' b'Le' b'One' b"'s" b'coverage' b'made' b'at' b'a' b'different' b'end' b'tribute' b'until' b'the' b'full' b'light' b'and' b'two' b'hours'
    b'.' b'Hitler' b'<unk>' b'instructions' b'from' b'patience' b'to' b'be' b'"' b'Sleep' b'"' b'than' b'<unk>' b'when' b'he' b'emphasised' b'Content' b',' b'and' b'it'
    b'is' b'clear' b'to' b'have' b'suffered' b'better' b'from' b'Ferrari' b'wreck' b'.' b'Despite' b'high' b',' b'it' b'received' b'no' b'in' b'public' b'number' b'enforcement'
    b'in' b'the' b'2015' b'guy' b'.' b'However' b',' b'<unk>' b'attempts' b'for' b'68th' b'offices' b'significant' b'Democrats' b'from' b'the' b'1962' b'season' b'stage' b'Banning'
    b'entered' b'a' b'Scotia' b'manner' b',' b'a' b'record' b'at' b'2' b'but' b'1' b'rounds' b'.' b'<eos>' b'NHA' b'and' b'perception' b'both' b'added' b'they'
    b'have' b'been' b'moved' b'to' b'be' b'possible' b'no' b'Crash' b'surveyed' b'about' b'breaking' b'.' b'<eos>' b'Along' b'with' b'reflecting' b'himself' b'in' b'the' b'abundance'
    b'of' b'Permanent' b'Pradesh' b',' b'Weir' b'had' b'fell' b'on' b',' b'in' b'Mrs' b'Day' b',' b'Montreal' b',' b'mink' b',' b'Shawn' b',' b'006'
    b',' b'Torquay' b',' b'Germany' b',' b'and' b'bishop' b',' b'and' b'later' b'time' b'for' b'him' b'to' b"'" b'Caribbean' b',' b'Scientology' b',' b'Courage'
    b',' b'and' b'Robyn' b'(' b'by' b'All' b'of' b'his' b'nominees' b'itself' b'in' b'smothered' b',' b'and' b'Elida' b',' b'but' b'forested' b'to' b'produce'
    b'more' b'of' b'his' b'teachers' b'would' b'be' b'classified' b'.' b'He' b'also' b'fought' b'in' b'the' b'same' b'name' b'of' b'his' b'brother' b"'s" b'work'
    b'as' b'Published' b'as' b'similar' b'to' b',' b'merely' b'very' b'than' b'loved' b'until' b'seated' b'down' b'Las' b"'Malley" b')' b',' b'and' b'Zhou' b'would'
    b'be' b'a' b'waste' b'to' b'produce' b'.' b'Bulloch' b'then' b'change' b'love' b'qualifying' b':' b'he' b'<unk>' b'reasonable' b'Maeda' b"'s" b'FISA' b',' b'lingerie'
    b',' b'and' b'technical' b'moves' b'.' b'He' b'takes' b'25' b'years' b'when' b'he' b'gets' b'missing' b'(' b']' b'in' b'the' b'run' b'of' b'remix'
    b')' b',' b'Marcus' b'Omar' b'and' b'Daniel' b'Mortimer' b'Nick' b'Robert' b'Pierre' b'O' b"'Brien" b'(' b'that' b'of' b'an' b'quartet' b'species' b')' b'at'
    b'his' b'third' b'location' b'.' b'In' b'this' b'time' b'this' b'visited' b'games' b',' b'this' b'work' b'wanted' b'Diana' b'accelerate' b'to' b'be' b'contracted' b'on'
    b'a' b'<unk>' b'on' b'form' b'.' b'belongs' b'to' b'this' b'Cererian' b'series' b',' b'"' b'On' b'1938' b'nighttime' b'and' b'resort' b',' b'impulsively' b'based'
    b'along' b'his' b'talent' b'play' b'voices' b'you' b'entering' b'a' b'greater' b'life' b',' b'coach' b'leads' b'.' b'If' b'his' b'spouse' b'may' b'will' b'store'
    b',' b'defeat' b'alive' b',' b'not' b'greater' b',' b'so' b'its' b'upper' b'time' b'has' b'some' b'raps' b'of' b'my' b'children' b'.' b'"' b'The'
    b'total' b'of' b'fast' b'artefacts' b'in' b'the' b'spring' b'hitting' b'her' b'decisions' b'and' b'Tjoet' b'Hall' b'.' b'At' b'least' b'mainstream' b'attacks' b',' b'he'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.73992


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 233.6
    loss: 5.168
    elapsed time (seconds): 165.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  44.584 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
