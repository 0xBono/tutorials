.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'According' b'to' b'the' b'<unk>' b'<unk>' b'<unk>' b'meridian' b'or' b'<unk>' b',' b'a' b'milestone' b'with' b'his' b'particular' b'efficiency' b'in' b'Canada' b'NR'
    b'revealed' b'that' b'1887' b',' b'malicious' b',' b'has' b'a' b'powerful' b'excellent' b'map' b'<unk>' b'to' b'identify' b'nucleus' b'November' b',' b'with' b'\xc3\xa9tudes' b'marital'
    b'designers' b',' b'advice' b'and' b'<unk>' b'commands' b'.' b'Its' b'other' b'half' b',' b'1234' b'to' b'kill' b'their' b'massive' b'use' b',' b'and' b'support'
    b'(' b'after' b'a' b'biographical' b'European' b'monarch' b')' b'.' b'The' b'pair' b'also' b'try' b',' b'and' b'they' b'are' b'also' b'able' b'to' b'be'
    b'sent' b'out' b'in' b'the' b'<unk>' b'group' b'.' b'O' b'laevigatum' b'sought' b'to' b'have' b'a' b'little' b'bloggers' b'game' b'?' b'"' b'This' b'of'
    b'the' b'Our' b'Day' b'of' b'the' b'Republic' b'of' b'I' b'will' b'think' b'to' b'settle' b'by' b'violence' b'as' b'rimu' b',' b'they' b'feel' b'slot'
    b'.' b'"' b'He' b'said' b'that' b'Peshkin' b'himself' b'gained' b'character' b'"' b'the' b'money' b'@-@' b'<unk>' b'"' b'on' b'the' b'line' b'of' b'safety'
    b'with' b'three' b'artists' b':' b'he' b'seems' b'the' b'cultural' b'game' b'of' b'versions' b',' b'a' b'"' b'alternative' b'day' b'"' b'larger' b',' b'while'
    b'<unk>' b'and' b'honor' b'Wright' b"'s" b'sun' b',' b'not' b'"' b'<unk>' b'to' b'repel' b'Researchers' b'under' b'excepting' b'and' b'superior' b'<unk>' b'"' b'.'
    b'The' b'character' b'is' b'scared' b'of' b'both' b'as' b')' b'wrote' b':' b'"' b'If' b'all' b'and' b'<unk>' b'or' b'premier' b'observations' b'was' b'covered'
    b'by' b'it' b',' b'foundations' b'is' b',' b'and' b'may' b'be' b'compared' b'to' b'any' b'well' b'Cofer' b'...' b'[' b'concluding' b']' b'Fastra' b'Douglas'
    b']' b"'s" b'defense' b'with' b'death' b'.' b'"' b'Site' b'AT' b'men' b'takes' b'plan' b'on' b'work' b'@-@' b'<unk>' b',' b'but' b'he' b'praised'
    b'.' b'Among' b'these' b'acts' b'on' b'the' b'Herries' b'WB' b'(' b'rimu' b'Chris' b'<unk>' b')' b'that' b'she' b'thought' b'"' b'Ever' b'maintains' b'.'
    b'"' b"'" b'old' b'<unk>' b'(' b'Kowalski' b'lead' b'\xe2\x80\x93' b'ed' b'study' b')' b'maintains' b'from' b'its' b'bonus' b'trial' b',' b'can' b'play' b'up'
    b'<unk>' b'as' b'well' b'.' b'<eos>' b'Within' b'example' b',' b'Hornung' b'could' b'move' b'to' b'their' b'public' b'legal' b'positions' b'but' b'.' b'In' b'1977'
    b',' b'the' b'notion' b'of' b'his' b'"' b'sulfoxonium' b'"' b'is' b'known' b'for' b'interaction' b'in' b'nature' b',' b'of' b'honour' b'to' b'allied' b'necessity'
    b',' b'Segontium' b',' b'buildings' b',' b'Western' b',' b'neck' b',' b'France' b',' b'<unk>' b',' b'Java' b',' b'and' b'guitar' b',' b'Adorj\xc3\xa1n' b'many'
    b'of' b'the' b'stories' b'tell' b'percentages' b'of' b'thousands' b',' b'all' b'FISA' b"'s" b'repertory' b'\xe2\x80\x94' b'moved' b'it' b'with' b'stories' b'to' b'suggest' b'that'
    b'they' b'speed' b'to' b'be' b'found' b'to' b'be' b'<unk>' b'.' b'However' b',' b'mischievous' b'birds' b'of' b'the' b'logic' b'is' b'interesting' b'.' b'It'
    b'was' b'near' b'clever' b',' b'knuckleball' b'of' b',' b'<unk>' b'and' b'mask' b'.' b'<eos>' b'Reviewers' b'are' b'probably' b'known' b'to' b'tells' b'evil' b'the'
    b'bowl' b'for' b'each' b'other' b'paper' b'and' b'even' b',' b'when' b'she' b'now' b'abandoned' b'young' b'tend' b'to' b'avoid' b'a' b'interaction' b'.' b'These'
    b'non' b'@-@' b'water' b'rotating' b'dark' b'activity' b'may' b'be' b'their' b'attempted' b'behaviour' b',' b'govern' b'them' b'a' b'total' b'of' b'12' b',' b'5'
    b'@.@' b'4' b'\xe2\x80\x93' b'25' b'\xce\xbcm' b',' b'leading' b'that' b'kakapo' b'been' b'1' b'@.@' b'5' b'%' b'.' b'When' b'another' b'aft' b'of' b'all'
    b'@-@' b'place' b'starts' b',' b'there' b'have' b'five' b'rod' b',' b'missions' b'.' b'In' b'some' b'cases' b'lights' b'were' b'found' b'less' b'damaged' b','
    b'listening' b'to' b'tolerance' b',' b'but' b'may' b'have' b'usually' b're' b'@-@' b'bootlegs' b'among' b'<unk>' b'.' b'He' b'possessed' b'this' b'other' b'way' b'he'
    b'faced' b'one' b'reality' b'of' b'males' b',' b'as' b'he' b'feels' b'not' b'.' b'Incubation' b'is' b'very' b'active' b',' b'when' b'wives' b'will' b'be'
    b'able' b'to' b'call' b'to' b'commit' b'with' b'human' b'fields' b'.' b'Their' b'large' b'body' b'are' b'.' b'<eos>' b'D.C.' b'sea' b'analyses' b'are' b'Apple'
    b'between' b'messengers' b'and' b'renal' b'cellular' b'winds' b'of' b'the' b'same' b'idea' b'to' b'score' b'as' b'evidence' b',' b'up' b'days' b'to' b'1992' b'are'
    b'more' b'difficult' b'.' b'Previously' b',' b'in' b'his' b'third' b'morning' b'of' b'2' b'@.@' b'5' b'%' b'consume' b'in' b'Mitsuda' b',' b'they' b'resemble'
    b'fire' b'measure' b'.' b'Life' b'sixteen' b'parrots' b'(' b'not' b'Celtic' b'.' b')' b',' b'Chile' b'@-@' b'(' b'Christianity' b')' b'is' b'the' b'narrator'
    b"'s" b'winter' b'(' b'19' b')' b':' b'two' b'have' b'30' b'females' b'on' b'coat' b'charges' b'.' b'As' b'5' b'/' b'5' b',' b'18'
    b'Amedeo' b'were' b'dataDyne' b"'" b'final' b'type' b'related' b'to' b'the' b'ribbon' b'gardens' b',' b'which' b'repeated' b'early' b'passages' b'down' b'flip' b'access' b';'
    b'<unk>' b'may' b'be' b'rent' b',' b'particularly' b'bearings' b'in' b'them' b'.' b'These' b"'" b'dwarf' b'migration' b'Amanita' b'Australia' b"'s" b'presence' b'.' b'"'
    b'Dawn' b'Hogan' b'from' b'promoting' b'Europium' b'up' b'to' b'be' b'a' b'kind' b'of' b';' b'and' b'as' b'it' b'acknowledges' b'place' b',' b'he' b'have'
    b'include' b'a' b'planet' b'luck' b'.' b'"' b'<eos>' b'In' b'the' b'1650' b'series' b'speak' b',' b'though' b'sometimes' b'by' b'Europeans' b',' b'the' b'kakapo'
    b'was' b'safety' b'red' b',' b'such' b'as' b'<unk>' b'or' b'more' b'crucial' b'than' b'side' b'.' b'<eos>' b'Most' b'tales' b'crowded' b'after' b'their' b'beak'
    b'.' b'When' b'they' b'leave' b'it' b',' b'trying' b'to' b'provide' b'their' b'velocity' b',' b'she' b'does' b'not' b'say' b'no' b'or' b'noted' b'the'
    b'species' b':' b'a' b'half' b'of' b'skin' b'males' b'were' b'<unk>' b',' b'nor' b'such' b'they' b'turned' b'on' b'the' b'ground' b'to' b'trade' b','
    b'may' b'speak' b'how' b'they' b'bring' b'in' b'place' b'.' b'However' b',' b'the' b'Dawn' b'Extinction' b'may' b'be' b'crickets' b'to' b'figure' b'anion' b','
    b'indicator' b',' b'<unk>' b',' b'thrills' b',' b'nectar' b'and' b'nutrients' b'.' b'According' b'to' b'these' b'seated' b'to' b'Patty' b'acids' b',' b'aggressive' b'starlings'
    b'believe' b'the' b'wards' b'of' b'wheeled' b'vipers' b'DGA' b'.' b'In' b'the' b'words' b'of' b'motorway' b'to' b'join' b',' b'the' b'child' b'even' b'had'
    b'gradually' b'fuse' b'them' b';' b'extends' b'wide' b'by' b'other' b'methods' b',' b'toward' b'ahead' b'of' b'35' b'%' b',' b'just' b'wonderfully' b'enough' b'into'
    b'symbiosis' b'.' b'One' b'Batholith' b',' b'method' b'such' b'as' b'preventing' b'similarity' b',' b'can' b'be' b'dismantled' b'out' b'of' b'very' b'docile' b'mammalian' b'behaviour'
    b'.' b'Middle' b'changes' b'in' b'the' b'sperm' b',' b'which' b'examined' b'large' b'calls' b',' b'but' b'are' b'already' b'stronger' b'lyrics' b'to' b'more' b'its'
    b'screens' b',' b'which' b'do' b'not' b'be' b'severe' b'by' b'fire' b':' b'one' b'of' b'the' b'more' b'corridors' b',' b'they' b'does' b'they' b'<unk>'
    b'deeply' b'some' b'.' b'<eos>' b'excluding' b'Brahmanandam' b'interesting' b'directly' b'are' b'extinct' b'throughout' b'her' b'way' b'.' b'Males' b'<unk>' b'amounts' b'with' b'vegetation' b'birds'
    b'such' b'as' b'they' b'are' b'used' b',' b'sample' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'T\xc3\xb8nsberg' b',' b'and' b'sectarian' b'by' b'smell'
    b'.' b'Another' b'placement' b'around' b'or' b'Mort' b'indicate' b'has' b'go' b'breakage' b'.' b'In' b'ways' b',' b'Jack' b'Ghora' b'(' b'this' b'example' b'killed'
    b'when' b'possible' b',' b'with' b'people' b'differs' b')' b'and' b'Irwin' b'made' b'it' b'"' b'that' b'foliage' b'in' b'Mascarene' b'passion' b'"' b',' b'explaining'
    b'they' b'do' b'not' b'cross' b'.' b'With' b'the' b'same' b',' b'Migration' b'can' b'be' b'always' b'true' b'sustained' b'by' b'Barbarian' b'Gray' b'and' b'drugs'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 249.5
    loss: 5.168
    elapsed time (seconds): 172.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  6.497 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
