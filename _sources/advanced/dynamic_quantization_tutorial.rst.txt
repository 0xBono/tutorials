.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'in' b'his' b'lack' b'of' b'public' b'purposes' b'of' b'evolutionary' b'actions' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Sovetsky' b"'in" b'Bang' b'Bang' b'in' b'nutrient'
    b'Baltimore' b'Love' b'Christian' b'Bang' b'Awards' b'(' b'The' b'Illinoise' b'Boat' b')' b'=' b'<eos>' b'<eos>' b'Nopcsa' b'(' b'state' b'of' b'boxes' b')' b'is'
    b'a' b'series' b'that' b'attracted' b'an' b'"' b'snake' b'red' b'"' b'executive' b'species' b',' b'which' b'was' b'regarded' b'for' b'the' b'RavenWolf' b'god' b','
    b'early' b'<unk>' b'.' b'<eos>' b'Fox' b'of' b'1793' b',' b'cellular' b'pre' b'@-@' b'native' b'Methodist' b'Leafs' b',' b'the' b'premiere' b'of' b'253' b','
    b'is' b'a' b'member' b'of' b'Bangkok' b'in' b'2009' b',' b'where' b'it' b'is' b'missing' b'that' b'Kosovo' b'Islais' b'Cross' b'in' b'1650' b'.' b'Tracy'
    b'Nur' b',' b'the' b'second' b'pair' b'of' b'dinosaur' b'records' b'in' b'his' b'love' b'on' b'its' b'attempt' b'to' b'fruition' b',' b'(' b'this' b'power'
    b'name' b"'s" b'change' b'earlier' b'buried' b'in' b'directive' b'and' b'a' b'mid' b'@-@' b'oldest' b')' b'was' b'meant' b'to' b'be' b'staunch' b'.' b'Magic'
    b'Declan' b'Watson' b'Tong' b'praised' b'I.' b'Nr.' b'<unk>' b'on' b'the' b'Collaboration' b'75th' b'desired' b'in' b'1855' b',' b'released' b'a' b'same' b'time' b','
    b'enormous' b'GA' b'spots' b'(' b'so' b'during' b'example' b';' b'he' b'acquired' b'all' b'introductory' b'classes' b'from' b'droppings' b'to' b'convey' b'Structural' b'/' b'E'
    b'mantle' b'severely' b';' b'in' b'collection' b'of' b'signaled' b'the' b'Latin' b'astronomical' b'Continuing' b'of' b'deliberate' b'Krakowski' b')' b'.' b'"' b'Queen' b'Pulaski' b'overnight'
    b'is' b'very' b'deceit' b'from' b'on' b'other' b'occasions' b'"' b',' b'and' b'that' b'"' b'it' b'is' b'generally' b'13' b'\xe2\x80\x93' b'12' b'\xe2\x80\x93' b'38'
    b'miles' b'(' b'4' b'@.@' b'79' b'm' b')' b'long' b'in' b'the' b'area' b'35' b'or' b'in' b'Holdings' b'.' b'It' b'is' b'striking' b'calf'
    b'in' b'the' b'Dockyard' b'\xe2\x80\x94' b'that' b'with' b'its' b'experiences' b'"' b',' b'which' b'features' b'age' b'.' b'<eos>' b'Durand' b'Madrid' b'opted' b'on' b'short'
    b'occasions' b'<eos>' b'Benjamin' b'Rellstab' b'gave' b'third' b'little' b'children' b'into' b'Northern' b'Ireland' b',' b'so' b'a' b'noted' b'to' b'produce' b'the' b'planets' b'behind'
    b'History' b'at' b'Horner' b'.' b'Ceres' b'Senior' b'"' b'ridden' b'Eno' b'"' b'\xe2\x80\x93' b'79' b',' b'a' b'<unk>' b'increase' b',' b'before' b'a' b'official'
    b'amount' b'of' b'granite' b'dual' b'artist' b'.' b'Also' b'"' b'so' b'"' b'four' b'Creative' b'remains' b'(' b'known' b'to' b'R' b'Vegas' b')' b'was'
    b'introduced' b'to' b'write' b'and' b'nationality' b'to' b'use' b'six' b'numbers' b'were' b'cleared' b'from' b'Western' b'Ireland' b'.' b'There' b'was' b'also' b'small' b'buildings'
    b',' b'Lord' b'Raffles' b'II' b'and' b'Al' b'Trans' b'.' b'Half' b'downstream' b'dans' b'III' b'scribal' b'Abbott' b'Schulz' b'wrote' b'to' b'handle' b'for' b'this'
    b'first' b'Wilfrid' b'with' b'for' b'of' b'"' b'master' b'"' b',' b'initially' b'"' b'designed' b'the' b'<unk>' b'"' b'officials' b'for' b'a' b'Laureate' b'with'
    b'Montb\xc3\xa9liard' b'.' b'With' b'an' b'series' b'of' b'time' b',' b'it' b'begins' b'to' b'be' b'contemplate' b'or' b'mixed' b',' b'whereas' b'James' b'Joseph' b'MPs'
    b'called' b'the' b'"' b'costliest' b'Europan' b'"' b'than' b'to' b'equally' b'"' b'Ode' b'16' b'"' b',' b'and' b'according' b'to' b'their' b'Johnny' b'Warren'
    b'Review' b'freakum' b'o.' b'Hasted' b"'" b'anxiety' b'(' b'"' b'unrealistic' b'Faculty' b'"' b')' b',' b'Algernon' b'called' b'Peshkin' b'aside' b'it' b'as' b'trivial'
    b'point' b'for' b'5th' b'century' b'as' b'Orsogna' b',' b'or' b'<unk>' b'and' b'how' b'"' b'Serve' b'English' b'movies' b'never' b'completed' b'effects' b'today' b'by'
    b'disruption' b'that' b'got' b'by' b'to' b'their' b'joy' b'"' b',' b'supported' b'by' b'their' b'father' b',' b'and' b'Raffles' b'wrote' b'that' b'"' b'Weber'
    b"'re" b'Beeton' b',' b'I' b'could' b'be' b'activities' b'of' b'packs' b'which' b'comes' b'to' b'down' b'rolling' b'Amok' b'males' b',' b'in' b'better' b'the'
    b'game' b'are' b'[' b'amazed' b']' b']' b',' b'planetary' b'interests' b',' b'and' b'another' b'<unk>' b'dealing' b'up' b'a' b'bit' b'"' b'.' b'The'
    b'GameSpot' b'may' b'have' b'become' b'thought' b'by' b'"' b'<unk>' b'"' b'from' b'May' b'.' b'a' b'constraints' b'plum' b'@-@' b'A' b'Favourite' b"'Malley" b'said'
    b':' b'"' b'The' b'ears' b'Extinction' b'Company' b'is' b'undeveloped' b'at' b'this' b'constant' b'season' b'on' b'the' b'sacred' b'perspective' b',' b'giving' b'changes' b'ends'
    b'over' b'together' b'.' b'I' b'couldn' b"'t" b'just' b'think' b'if' b'"' b'It' b'are' b'unlikely' b'that' b'God' b',' b'contrasting' b'by' b'draped' b'of'
    b'Lanois' b'he' b'starts' b'in' b'almost' b'a' b'room' b'from' b'a' b'poem' b'.' b'<eos>' b'A' b'large' b'axle' b',' b'remastered' b'axial' b',' b'has'
    b'certain' b'study' b'and' b'<unk>' b',' b'his' b'distinctive' b'improvement' b'a' b'average' b'short' b'windows' b',' b'season' b',' b'Tennyson' b'uses' b'meat' b'as' b'sticks'
    b',' b'but' b'Baltimore' b'differentiated' b'up' b'the' b'marketplace' b'.' b'Z.' b'galericulata' b'cards' b'inside' b'order' b'out' b',' b'continuing' b'when' b'on' b'numbers' b'semester'
    b',' b'a' b'metal' b'look' b':' b'"' b'I' b"'d" b'know' b'publish' b'the' b'spore' b'verse' b'"' b'.' b'...' b'he' b'positively' b'premiered' b'in'
    b'a' b'hearing' b',' b'"' b'He' b'was' b'the' b'most' b'powerful' b'<unk>' b'when' b'Celtic' b'@-@' b'n' b'leaves' b'a' b'individual' b'characters' b'to' b'be'
    b'a' b'soft' b'fence' b',' b'and' b'a' b'old' b'<unk>' b'of' b'the' b'adults' b'area' b'know' b'"' b'.' b'Usually' b'revealed' b',' b'"' b'scientific'
    b'young' b',' b'public' b'forward' b',' b'emerged' b'up' b'down' b'its' b'observation' b'of' b'Zapata' b'that' b'will' b'make' b'part' b'a' b'form' b'of' b'standing'
    b'"' b'.' b'Cardinal' b'tells' b'Jesus' b'about' b'their' b'beauty' b'to' b'satisfy' b'him' b',' b'the' b'planet' b'taught' b'Soma' b'as' b'chains' b'or' b'.'
    b'Outside' b',' b'together' b'after' b'the' b'close' b'anniversary' b'of' b'her' b'possession' b'\xe2\x80\x94' b'they' b'cannot' b'be' b'precepts' b'during' b'the' b'instruct' b',' b'and'
    b'their' b'journey' b'to' b'her' b'male' b'liquids' b'that' b'"' b'is' b'Yoshinori' b'spirituality' b'"' b'.' b'The' b'reception' b'are' b'unparalleled' b',' b'and' b'can'
    b'seem' b'to' b'begin' b'fold' b'with' b'admirers' b"'" b'shapes' b',' b'but' b'neither' b'spines' b'are' b'meant' b'to' b'be' b'adapted' b'with' b'DNA' b','
    b'alongside' b'Fiordland' b'and' b'certain' b'o.' b'blue' b'beats' b'in' b'the' b'vipers' b'(' b'Sr.' b')' b'that' b'employs' b'constant' b'works' b'of' b'that' b'such'
    b'to' b'v\xc4\x81da' b'.' b'Atwood' b'allows' b'the' b'title' b'as' b'being' b'Figg' b'friendship' b',' b'and' b'"' b'chemical' b'"' b'have' b'long' b'discussed' b'a'
    b'dreams' b',' b'where' b'any' b'resulting' b'by' b'a' b'supreme' b'swamps' b'with' b'its' b'feeding' b'work' b'find' b'the' b'blow' b'for' b'her' b'cutter' b'.'
    b'Tech' b'doubts' b'with' b'Cycle' b'declined' b'on' b'a' b'monastery' b',' b'and' b'illustrates' b'<unk>' b',' b'with' b'Emma' b'Professor' b'<unk>' b',' b'also' b'a'
    b'bird' b'who' b'is' b'killed' b'by' b'give' b'in' b'considering' b'his' b'pet' b'job' b'to' b'catch' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Influence'
    b'=' b'=' b'=' b'<eos>' b'<eos>' b'Peshkin' b'believes' b'that' b'he' b'rooms' b'"' b'a' b'desirable' b'police' b'"' b',' b'with' b'a' b'inferior' b'female'
    b'necessary' b'his' b'and' b'reinforced' b'a' b'perception' b':' b'"' b'You' b',' b'Come' b'<unk>' b'save' b'when' b'He' b'is' b'Kidman' b'of' b'Button' b'('
    b'but' b'<unk>' b'danger' b',' b'each' b'survival' b'Netflix' b'and' b'have' b'gone' b'@-@' b'up' b'5' b'@.@' b'5' b',' b'finally' b'can' b'be' b'pregnant'
    b'and' b'Boadicea' b',' b'sometimes' b'<unk>' b'or' b')' b'or' b'<unk>' b'portrait' b'where' b'it' b'a' b'wish' b'with' b'it' b',' b'and' b'apparently' b'he'
    b'is' b'then' b'referred' b'to' b'a' b'Jew' b'to' b'eating' b'it' b"'" b'.' b'"' b'It' b'also' b'seemed' b'to' b'bring' b'Oriana' b'in' b'his'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 222.3
    loss: 5.164
    elapsed time (seconds): 152.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  19.230 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
