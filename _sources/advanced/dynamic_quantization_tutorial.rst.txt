.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'held' b'in' b'Paris' b'.' b'4' b'@,@' b'000' b'Less' b'the' b'seventh' b'hill' b'and' b'to' b'be' b'a' b'explosive' b'warships' b'.' b'The' b'latter'
    b'also' b'spawned' b'some' b'controversy' b'in' b'his' b'flock' b'.' b'Juno' b'is' b'distinguished' b'by' b'p\xc3\xa9dalier' b'and' b'depend' b'on' b'a' b'memorial' b'projected' b'side'
    b'of' b'her' b'situation' b'to' b'stay' b'Ojibwe' b',' b'and' b'is' b'sent' b'to' b'its' b'wife' b',' b'<unk>' b',' b'Manny' b',' b'"' b'\xe1\x83\x98'
    b'"' b';' b'it' b'is' b'the' b'dominant' b'official' b'fighting' b'show' b'to' b'infiltrate' b'back' b'.' b'It' b'began' b'on' b'to' b'turn' b'a' b'money'
    b'between' b'1' b'%' b'of' b'an' b'High' b'Testament' b'.' b'By' b'their' b'own' b'entry' b',' b'the' b'arsenal' b'is' b'supplied' b'by' b'Earth' b'.'
    b'The' b'two' b'are' b'short' b',' b'and' b'early' b',' b'weapons' b'has' b'some' b'than' b'white' b'piece' b':' b'the' b'latter' b',' b'which' b'forms'
    b'set' b'.' b'<unk>' b'of' b'others' b'only' b'conclusively' b'length' b'of' b'both' b'his' b'external' b',' b'and' b'is' b'M\xc3\xa9tis' b'at' b'a' b'tree' b'room'
    b'.' b'<eos>' b'The' b'entire' b'jaw' b'is' b'a' b'asteroid' b',' b'and' b'is' b'stored' b'the' b'bird' b'over' b'their' b'target' b'.' b'But' b'they'
    b'were' b'promoted' b'to' b'by' b'deposits' b'or' b'GCSEs' b',' b'rehearsal' b',' b'and' b'are' b',' b'that' b'sandy' b'disapproval' b'proved' b'alongside' b'definitions' b','
    b'around' b'them' b'to' b'help' b',' b'only' b'ground' b'.' b'Despite' b'provide' b'them' b',' b'they' b'feed' b'by' b'their' b'dog' b'preparations' b'.' b'Looking'
    b'does' b'not' b'mention' b'near' b'any' b'when' b'present' b'each' b'have' b'a' b'considerable' b'deal' b'to' b'demand' b'environmental' b'(' b'Ireland' b'and' b'below' b'16'
    b'%' b'21' b'minutes' b',' b'as' b'of' b'Tommy' b'Bandicoot' b')' b'.' b'It' b'follows' b'their' b'brown' b'shoulders' b'on' b'a' b'variety' b'of' b'striking'
    b'birds' b'that' b'were' b'defend' b'for' b'each' b'other' b'that' b'they' b'are' b'a' b'exceptionally' b'optional' b'rectilinear' b'store' b'and' b'other' b'vertical' b'ranges' b'upon'
    b'.' b'<eos>' b'All' b'female' b'spots' b'include' b'shovel' b'and' b'exile' b',' b'APL' b'joins' b'carved' b'when' b'female' b',' b'trees' b',' b'meter' b','
    b'<unk>' b',' b'finds' b'of' b'earlier' b'cliffs' b',' b'seeking' b'only' b'of' b'a' b'male' b'voltage' b'and' b'monophyletic' b'Yusuf' b'are' b'faithful' b'and' b'epigenetic'
    b'destined' b'.' b'There' b'is' b'many' b'ways' b'of' b'anachronism' b'and' b'planting' b'to' b'use' b'R\xc3\xa9union' b'and' b'Four' b'studies' b',' b'so' b'about' b'40'
    b'%' b'of' b'4' b'respectively' b'quick' b'many' b'humane' b'first' b'(' b'less' b'plain' b'<unk>' b')' b'and' b'males' b',' b'these' b'<unk>' b'leave' b'by'
    b'adults' b'(' b'spread' b'by' b'females' b')' b',' b'as' b'they' b'other' b'outward' b'initiate' b',' b'or' b'even' b'more' b'other' b'is' b'dismissed' b'by'
    b'any' b'other' b'good' b'@-@' b'frequency' b'smell' b'.' b'M.' b'v.' b'Weyden' b'has' b'committed' b'a' b'pale' b'parallel' b'plane' b',' b'and' b'Southampton' b'and'
    b'flew' b'by' b'an' b'stripe' b'.' b'She' b'has' b'its' b'own' b'weapon' b',' b'as' b'of' b'these' b'form' b',' b'but' b'little' b'pedestal' b'are'
    b'696' b'to' b'attract' b'Absorption' b'moss' b'.' b'The' b'universe' b'cooking' b'supported' b'married' b'horns' b'or' b'distribution' b':' b'it' b'is' b'as' b'an' b'black'
    b'fusion' b'<unk>' b'"' b',' b'on' b'a' b'"' b'local' b'form' b'"' b'dark' b'observations' b'and' b'inundated' b'specially' b'strain' b'.' b'The' b'<unk>' b'image'
    b'is' b'supposed' b'to' b'be' b'cut' b'a' b'variety' b'of' b'exit' b',' b'being' b'a' b'average' b'striped' b'@-@' b'powered' b'form' b',' b'where' b'there'
    b'are' b'no' b'reason' b'to' b'recharge' b'themselves' b'.' b'In' b'these' b'Ceres' b',' b'it' b'provides' b'narrow' b'and' b'clear' b'display' b'.' b'When' b'they'
    b'do' b'so' b'describe' b'night' b',' b'it' b'is' b'potentially' b'mentioned' b'.' b'As' b'they' b'do' b'air' b'the' b'eggs' b',' b'it' b'differs' b'rather'
    b'than' b'grooves' b'.' b'<eos>' b'In' b'Eurasia' b',' b'to' b'kill' b',' b'they' b'are' b'Trachsel' b',' b'frequently' b'fluorescence' b'crimes' b'.' b'Paddywack' b'maintain'
    b'that' b'it' b'is' b'rediscovered' b'.' b'In' b'a' b'very' b'propellant' b'study' b',' b'Mulder' b'contains' b'need' b'to' b'have' b'Shiva' b',' b'<unk>' b','
    b'flows' b',' b'Reviewer' b'.' b'Nd4' b'Obo' b'eukaryotes' b'often' b'reach' b'the' b'kakapo' b';' b'something' b',' b'from' b'one' b'another' b',' b'raptors' b'clearing'
    b'a' b'smaller' b'form' b'between' b'them' b'.' b'The' b'gill' b'Special' b'sequence' b'Telescope' b'with' b'wheel' b'@-@' b'unidentified' b',' b'other' b'or' b'waist' b','
    b'especially' b'fantastic' b',' b'who' b'feels' b'previous' b'white' b'@-@' b'head' b',' b'it' b'is' b'a' b'Companion' b'of' b'flight' b'prey' b'.' b'Likewise' b','
    b'and' b'culling' b'involved' b'by' b'burn' b'punishment' b',' b'when' b'it' b'walking' b'under' b'females' b',' b'petitioned' b'trees' b',' b'increases' b',' b'and' b'ini'
    b'.' b'<eos>' b'Any' b'countries' b'can' b'absorbs' b'hang' b'edible' b'structure' b',' b'where' b'they' b'often' b'feed' b'significantly' b'over' b'normal' b'or' b'eventually' b'white'
    b'eggs' b'for' b'Mithravinda' b'.' b'Developers' b'<unk>' b'costing' b'these' b'distances' b'Nakano' b',' b'have' b'the' b'mRNA' b'longing' b'by' b'Saint' b'populations' b'responsible' b','
    b'and' b'therefore' b'dispatching' b'reduced' b'courtship' b'activity' b'for' b'5' b'@.@' b'5' b'\xce\xbcm' b'(' b'MXN' b')' b'.' b'Augustin' b'Goldman' b'<unk>' b'The' b'only'
    b'to' b'be' b'supported' b'by' b'a' b'planet' b'of' b'communication' b',' b'who' b'is' b'bright' b'mere' b'.' b'The' b'male' b'is' b'frequently' b'readily' b'even'
    b'supernovae' b',' b'although' b'it' b'describes' b'their' b'no' b'large' b'ally' b'of' b'the' b'Homarus' b'conspirators' b'.' b'Novel' b'male' b'calls' b',' b'short' b','
    b'Cricket' b'starlings' b',' b'during' b'example' b',' b'particularly' b'glossy' b'by' b'Biogenesis' b'and' b'mice' b'.' b'They' b'are' b'often' b'wait' b'of' b'characteristic' b'.'
    b'<eos>' b'As' b'this' b'species' b'are' b'sensitive' b',' b'they' b'noted' b'other' b'kinds' b'of' b'seat' b'.' b'The' b'partitioned' b'nature' b'of' b'Ceres' b'are'
    b'found' b'as' b'limited' b'to' b'its' b'own' b'number' b',' b'work' b'ornamentation' b'and' b'two' b'to' b'be' b'delayed' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Uses' b'=' b'=' b'<eos>' b'<eos>' b'Church' b'(' b'mainly' b'1629' b')' b'may' b'be' b'written' b'by' b'Brazoria' b',' b'Canada' b'itself' b',' b'precedent'
    b',' b'and' b'contracting' b'from' b'common' b'locations' b'.' b'they' b'suggest' b'they' b'act' b'about' b'1' b'@.@' b'5' b'\xe2\x80\x93' b'13' b'in' b'(' b'1802'
    b'and' b'3' b'\xe2\x80\x93' b'26' b')' b',' b'it' b'explained' b'"' b'<unk>' b'Part' b'is' b'<unk>' b'or' b'1300' b'out' b'of' b'a' b'fox' b'of'
    b'hygroscopic' b',' b'<unk>' b',' b'and' b'even' b'required' b'on' b'a' b'passively' b'"' b'.' b'This' b'loves' b'not' b'on' b'6' b'to' b'5' b'ironclads'
    b'to' b'return' b'to' b'be' b'been' b'caused' b'by' b'bastn\xc3\xa4site' b'on' b'behalf' b'of' b'them' b',' b'the' b'<unk>' b'<unk>' b'of' b'tail' b',' b'<unk>'
    b',' b'XXX' b',' b'naming' b'fruit' b',' b'social' b'eggs' b',' b'Miss' b',' b'or' b'Te' b'Tremellogaster' b',' b'and' b'whites' b',' b'these' b'kakapo'
    b',' b'Of' b'the' b'insect' b'of' b'some' b'centuries' b',' b'or' b'suffering' b'the' b'results' b'of' b'environmental' b'vegetation' b',' b'calls' b'that' b'that' b'is'
    b'often' b'a' b'classic' b'useful' b'man' b'of' b'stopped' b',' b'so' b'docile' b'becomes' b'particularly' b'loyalty' b'to' b'<unk>' b'but' b'represent' b'it' b'.' b'Environmental'
    b'distances' b'pupil' b'<eos>' b'"' b'If' b'starspots' b',' b'while' b',' b'Ocean' b'illustrates' b'permission' b'to' b'continue' b'.' b'"' b'Russell' b'<unk>' b'haunt' b'and'
    b'Lord' b'<unk>' b'marketplace' b'was' b'neutral' b'by' b'Magdalene' b',' b'"' b'what' b'it' b'isn' b"'t" b"'m" b'Montb\xc3\xa9liard' b'back' b'up' b',' b'"' b'since'
    b'in' b'1860' b'they' b'believed' b'that' b'"' b'he' b'is' b'part' b'of' b'an' b'computing' b'head' b'.' b'"' b'He' b'doctors' b'that' b'the' b'net'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 236.4
    loss: 5.168
    elapsed time (seconds): 163.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  44.437 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
