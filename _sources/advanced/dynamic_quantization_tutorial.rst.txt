.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'A' b'swing' b'cautioned' b'is' b'much' b'<unk>' b'after' b'(' b'one' b'of' b'the' b'six' b'novels' b',' b'one' b'1390' b'370' b'@,@' b'500'
    b'<unk>' b')' b',' b'a' b'standard' b'star' b'.' b'The' b'side' b'is' b'wash' b'in' b'Rochdale' b'even' b'down' b'the' b'St.' b'Boom' b'Power' b','
    b'so' b'never' b'they' b'easily' b'been' b'tails' b'to' b'decide' b'to' b'have' b'was' b'a' b'reference' b'to' b'their' b'intellectual' b'previous' b'inscription' b'of' b'worship'
    b'.' b'The' b'claimed' b"'s" b'children' b'are' b'and' b'celebrated' b'or' b'rising' b'and' b'fit' b',' b'so' b'some' b'critics' b'were' b'thought' b'to' b'be'
    b'cleared' b',' b'but' b'or' b'he' b'"' b'Joint' b'<unk>' b'appreciated' b'Venus' b'done' b'each' b'rate' b'"' b'.' b'The' b'latter' b'is' b'largely' b'constituency'
    b'in' b'Ireland' b',' b'the' b'country' b"'s" b'future' b'female' b'are' b'and' b'complete' b'.' b'<eos>' b'The' b'character' b'represents' b'Principe' b'Beirut' b',' b'which'
    b'is' b'now' b'untidy' b'by' b'television' b'<unk>' b',' b'a' b'constructions' b'of' b'42' b'years' b'.' b'It' b'regard' b'in' b'1993' b',' b'Alfred' b'Boom'
    b'State' b'.' b'<eos>' b'Marsh' b'is' b'from' b'six' b'splicing' b'@-@' b'engined' b'kakapo' b',' b'which' b'makes' b'beta' b'damages' b'of' b'17' b'males' b'to'
    b'reduce' b'interest' b'.' b'Both' b'complex' b'have' b'many' b'<unk>' b'Concerned' b'appears' b'under' b'a' b'neutron' b'unregulated' b'containing' b'Maze' b'%' b'to' b'hundreds' b'of'
    b'<unk>' b'Hill' b'.' b'Therefore' b',' b'steals' b',' b'Lens' b',' b'faith' b',' b'movement' b',' b'they' b'were' b'consequently' b'<unk>' b'with' b'the' b'province'
    b'of' b'medallist' b'.' b'In' b'particular' b',' b'deaths' b'starts' b'around' b'them' b'as' b'it' b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'='
    b'=' b'<eos>' b'<eos>' b'Sons' b'made' b'by' b'Robertson' b'that' b'are' b'often' b'stellar' b'\xe2\x80\x93' b'by' b'his' b'belly' b'.' b'There' b'have' b'some' b'been'
    b'naturally' b'Encore' b'uncovered' b'as' b'Banadir' b',' b'<unk>' b',' b'and' b'<unk>' b',' b'<unk>' b',' b'AIDS' b',' b'Flora' b',' b'and' b'seeds' b'throughout'
    b'tofu' b'and' b'<unk>' b'.' b'Visual' b'bodies' b'during' b'A' b'spacecraft' b'was' b'destroyed' b'to' b'have' b'extensively' b'built' b'from' b'interception' b'.' b'<eos>' b'Fashi'
    b'for' b'Horus' b',' b'cobra' b',' b'is' b'now' b'settled' b'by' b'strategy' b'and' b'a' b'sailing' b'structure' b'.' b'The' b'parasites' b'are' b'dominated' b'by'
    b'alphabet' b',' b'unaided' b',' b'with' b'food' b'or' b'bull' b',' b'a' b'male' b'sweep' b'that' b'can' b'all' b'be' b'of' b'55' b'mph' b'.'
    b'Before' b'most' b'hand' b',' b'the' b'price' b'of' b'violet' b'in' b'About.com' b',' b'so' b'some' b'hotels' b'can' b'be' b'important' b'showing' b'random' b'within'
    b'several' b'other' b'types' b'.' b'They' b'belongs' b'to' b'form' b'<unk>' b'across' b'Sidon' b',' b'except' b'by' b'late' b'sweetest' b'1897' b'is' b'wide' b':'
    b'they' b'orbit' b'and' b'.' b'Later' b'sexual' b'starlings' b'have' b'gained' b'them' b'in' b'place' b'potential' b'they' b'<unk>' b'into' b'Ceres' b'.' b'<eos>' b'Two'
    b'likely' b'domains' b'used' b'committed' b'aerodromes' b'were' b'edited' b'by' b'their' b'gems' b':' b'the' b'sulfide' b'in' b'Jury' b'Milne' b'dissent' b'and' b'Buckingham' b'<unk>'
    b'Species' b'.' b'One' b'dislikes' b'heritage' b'can' b'be' b'said' b'to' b'have' b'this' b'to' b'be' b'fatal' b'.' b'der' b'Bang' b'!' b"'s" b'GameSpot'
    b'and' b'interior' b'system' b'are' b'situated' b'in' b'then' b'distribution' b'throughout' b'the' b'back' b'of' b'disenfranchised' b'.' b'In' b'large' b'markers' b',' b'the' b'New'
    b'Zealand' b'Flying' b'crosses' b"'" b'remains' b'for' b'man' b'and' b'other' b'buildings' b'Hale' b'sometimes' b'struck' b'.' b'Within' b'example' b',' b'even' b'cease' b'their'
    b'food' b'of' b'the' b'human' b'protected' b',' b'a' b'peripheral' b'extracted' b'rate' b'on' b'a' b'position' b'in' b'display' b'throughout' b'hydrostatic' b'and' b'ten' b'murders'
    b';' b'humans' b'especially' b'the' b'eggs' b'led' b'by' b'mobbing' b'surveillance' b'.' b'Banai' b'does' b'not' b'be' b'seen' b'long' b'more' b'on' b'the' b'numbers'
    b'"' b'<unk>' b'"' b'.' b'When' b'it' b'is' b'treated' b'by' b'vampire' b'(' b'van' b'<unk>' b')' b',' b'women' b'go' b'with' b'some' b'genera'
    b'including' b'the' b'Septimius' b'planet' b'.' b'This' b'structure' b'is' b'distributed' b'to' b'gain' b'multiple' b'Anglo' b'@-@' b'trigger' b',' b'and' b'a' b'total' b'of'
    b'spines' b'and' b'the' b'nesting' b'degrading' b'ones' b'at' b'a' b'relatively' b'points' b',' b'where' b'some' b'feathers' b'have' b'refinement' b'.' b'In' b'addition' b','
    b'when' b',' b'it' b'is' b'actually' b'a' b'worth' b'bird' b'of' b'native' b'phones' b',' b'it' b'is' b'probably' b'their' b'longer' b',' b'should' b'work'
    b'.' b'This' b'does' b'not' b'be' b'hollow' b'by' b'<unk>' b',' b'particularly' b'<unk>' b'for' b'ion' b'nests' b'.' b'Despite' b'their' b'boyfriend' b'<unk>' b'still'
    b',' b'they' b'allows' b'ribosomes' b',' b'Dunham' b',' b'clear' b'someone' b',' b'their' b'ironic' b'and' b'food' b'them' b',' b'boredom' b',' b'fishing' b'attendant'
    b',' b'contributors' b',' b'its' b'extent' b',' b'heavier' b'antibodies' b'.' b'The' b'Poets' b'owl' b'Luke' b'said' b'be' b'"' b'Siberia' b'"' b'do' b'not'
    b'emerge' b'in' b'occupied' b'decorative' b'juvenile' b'items' b'.' b'<eos>' b'In' b'the' b'lamin' b'of' b'grapes' b',' b'Odaenathus' b'announced' b'letters' b'at' b'Zygoballus' b'Mission'
    b',' b'on' b'the' b'seduction' b'contention' b'.' b'A' b'cake' b'Herbie' b'sometimes' b'mentioned' b'3' b'@.@' b'1' b'metres' b'(' b'5' b'ft' b')' b'for'
    b'2' b'feet' b'(' b'3' b'@.@' b'<unk>' b'ft' b')' b'at' b'a' b'34' b'@-@' b'foot' b'cycle' b'.' b'Due' b'to' b'them' b',' b'females'
    b'have' b'begun' b'<unk>' b'estimates' b'of' b'hip' b'cells' b',' b'Pinus' b'H.' b'Staley' b',' b'Dimitri' b'Nichols' b',' b'and' b'holders' b'two' b'of' b'the'
    b'population' b'is' b'also' b'belts' b'by' b'communicate' b'to' b'269' b':' b'<eos>' b'Joseph' b'Run' b',' b'jumping' b'in' b'parts' b'(' b'Defense' b')' b','
    b'legendary' b',' b'Hubei' b',' b'c' b',' b'<unk>' b';' b'and' b'African' b'Holden' b'cannot' b'attract' b'those' b'million' b'.' b'<eos>' b'Large' b'names' b'give'
    b'two' b'other' b'figures' b'or' b'<unk>' b'.' b'In' b'the' b'same' b'season' b',' b'the' b'common' b'starling' b'into' b'Ireland' b',' b'maat' b',' b'and'
    b'when' b'the' b'definition' b'of' b'possible' b',' b'white' b',' b'dark' b',' b'overpainted' b'and' b'head' b'head' b',' b'is' b'also' b'<unk>' b',' b'and'
    b'as' b'they' b'are' b'classified' b'as' b'translation' b'that' b'kill' b'evidence' b'and' b'eggs' b'.' b'Depending' b',' b'as' b'they' b'catch' b',' b'are' b'reduced'
    b'seventeen' b'or' b'down' b'to' b'nothing' b'.' b'impurities' b'that' b'the' b'fruits' b'with' b'a' b'female' b',' b'the' b'kakapo' b'extends' b',' b'and' b'<unk>'
    b'243' b'points' b',' b'which' b'can' b'be' b'recurved' b',' b'then' b'Mercury' b'in' b'some' b'life' b'.' b'He' b'gives' b'similar' b'changes' b'from' b'RNA'
    b'clothing' b'of' b'the' b'crowns' b'to' b'their' b'full' b'output' b'adjacent' b'to' b'in' b'honor' b'.' b'As' b'of' b'December' b'1905' b',' b'it' b'is'
    b'white' b',' b'and' b'that' b'<unk>' b'.' b'The' b'color' b'is' b'descriptive' b'from' b'that' b'animal' b',' b'interpreted' b'between' b'.' b'substances' b'provides' b'most'
    b'of' b'the' b'historic' b'crowded' b'branches' b'.' b'As' b'expected' b'to' b'be' b'(' b'parrot' b')' b',' b'Audiobook' b'is' b'usually' b'heard' b'and' b'specifically'
    b'trees' b'tend' b'to' b'have' b'been' b'known' b'.' b'In' b'1821' b',' b'the' b'kakapo' b'is' b'also' b'found' b'by' b'the' b'Sun' b'as' b'two'
    b'are' b'elliptical' b'weapon' b',' b'though' b'result' b'population' b'Pacifica' b',' b'the' b'canals' b'will' b'be' b'found' b'them' b'to' b'be' b'<unk>' b'.' b'color'
    b'slowly' b'signs' b'will' b'occur' b'after' b'they' b'do' b'much' b'enough' b'what' b'they' b'do' b',' b'"' b',' b'power' b'things' b'can' b'just' b'extend'
    b'Iguanodon' b'and' b'ionization' b'.' b'Because' b',' b"'" b'for' b'I' b'am' b'a' b'host' b'and' b'a' b'female' b',' b'they' b'doesn' b"'t" b'leave'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 229.0
    loss: 5.168
    elapsed time (seconds): 164.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  38.526 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
