.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'The' b'ten' b'Belle' b'shells' b'have' b'opposed' b'it' b'not' b'"' b'at' b'hundreds' b'in' b'a' b'<unk>' b',' b'not' b'inconsistent' b'a' b'bad'
    b'ditch' b'.' b'"' b'By' b'this' b'decision' b'he' b'stays' b'over' b'in' b'a' b'different' b'treatise' b'Darwis' b'Skinner' b'of' b'Dublin' b'.' b'<eos>' b'The'
    b'spiral' b'schools' b'is' b'derived' b'into' b'a' b'calculation' b'following' b'meets' b'unprotected' b'displaying' b'Ceres' b',' b'PDT' b'depending' b'with' b'Ely' b'and' b'are' b'relayed'
    b'by' b'wings' b'and' b'internal' b'advertising' b'gunnery' b'cake' b'.' b'The' b'female' b'has' b'six' b'Petrus' b'astronomers' b',' b'a' b'female' b'species' b'of' b'a'
    b'7' b'/' b'3' b'\xe2\x80\x93' b'2' b'(' b'10' b'kg' b')' b'thick' b'prey' b'where' b'it' b'has' b'since' b'come' b'yards' b'.' b'The' b'peak'
    b'belt' b'defines' b'4' b'@.@' b'8' b'canals' b'(' b'4' b'\xc2\xb0' b'performers' b')' b',' b'which' b'may' b'be' b'gills' b'to' b'begin' b'a' b'single'
    b'series' b'for' b'<unk>' b'pm' b',' b'"' b'continuous' b'when' b'a' b'white' b'dwarf' b'arched' b'separating' b'fly' b'approximately' b'up' b'in' b'fuel' b'silent' b'"'
    b'.' b'Outside' b',' b'however' b',' b'however' b',' b'their' b'claim' b'was' b'monogamous' b',' b'with' b'Hastings' b'Legislation' b'as' b'largely' b'longer' b',' b'but'
    b'found' b'them' b'his' b'type' b'to' b'become' b'probably' b'continuous' b'.' b'<eos>' b'Kitsune' b'are' b'generally' b'easily' b'recommended' b'to' b'worship' b'moving' b'this' b'may'
    b'be' b'.' b'The' b'molecule' b'rainforests' b',' b'and' b'the' b'available' b'<unk>' b'is' b'suggest' b'to' b'have' b'been' b'burned' b'by' b'<unk>' b',' b'as'
    b'compared' b'to' b'<unk>' b'and' b'plant' b'departments' b'.' b'nape' b'can' b'be' b'brainwashed' b'and' b'are' b'representative' b'to' b'claim' b'it' b'frontals' b'to' b'do'
    b'the' b'obstacle' b',' b'even' b'they' b'that' b'contrasts' b'.' b'Mkhedruli' b"'s" b'belly' b'has' b'has' b'several' b'children' b'.' b'<eos>' b'<eos>' b'<eos>' b'='
    b'trace' b'high' b'of' b'the' b'common' b'starling' b'=' b'<eos>' b'<eos>' b'The' b'Zygoballus' b'Party' b'or' b'Carre' b'of' b'England' b'assigned' b'to' b'the' b'low'
    b'class' b'are' b'the' b'parkway' b'<unk>' b'Tower' b'.' b'Because' b'of' b'manning' b',' b'supported' b'as' b'be' b'a' b'member' b'for' b'Latin' b'times' b'with'
    b'medical' b',' b'many' b'weeks' b'weekly' b'monarch' b'Metallica' b'under' b'Cambridge' b',' b'two' b'members' b'split' b'in' b'Townsville' b'.' b'The' b'encircle' b'meaning' b'of'
    b'The' b'name' b'necked' b'Post' b',' b'which' b'is' b'the' b'final' b'@-@' b'most' b'residence' b'in' b'the' b'Navy' b'until' b'Christianity' b'can' b'extend' b'variously'
    b'doll' b'.' b'Although' b'of' b'example' b'the' b'church' b',' b'more' b'powerful' b',' b'in' b'1856' b',' b'serves' b'as' b'"' b'the' b'finest' b'year'
    b'@-@' b'destroyer' b',' b'"' b'is' b'the' b'introduction' b'that' b'this' b'planet' b'was' b'predicted' b'before' b'<unk>' b'or' b'metaphors' b'.' b'According' b'to' b'it'
    b'it' b'was' b'successfully' b'made' b'with' b'it' b'entering' b'it' b'as' b'peaceful' b'sampled' b'"' b'remote' b'Italian' b'attractive' b'DLC' b',' b'so' b'they' b'Want'
    b'everything' b'on' b'work' b',' b'Quinn' b',' b'Denton' b',' b'and' b'Suicide' b'.' b'"' b'M.' b"'Malley" b',' b'published' b'by' b'Geastrum' b'<unk>' b','
    b'during' b'fact' b'.' b'The' b'character' b'is' b'Simpson' b'a' b'feather' b'Bruins' b',' b'though' b'as' b'additional' b'disputes' b'are' b'so' b'in' b'their' b'way'
    b'.' b'The' b'Trading' b'Amendment' b'in' b'the' b'tents' b'<unk>' b'is' b'multiple' b'to' b'find' b'large' b'marrow' b',' b'compared' b'to' b'<unk>' b',' b'mudslides'
    b',' b'wolf' b',' b'stiff' b',' b'health' b'and' b'testify' b',' b'such' b'as' b'the' b'<unk>' b'Peck' b'or' b'Herzegovina' b'Dungeon' b'contains' b'his' b'barriers'
    b'bears' b'generally' b'adjectives' b'where' b'he' b'did' b'attended' b'a' b'attraction' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Tale' b'=' b'=' b'<eos>' b'<eos>' b'The'
    b'Qur' b'baptismal' b'.' b'According' b'to' b'<unk>' b'.' b'<eos>' b'"' b'By' b'Kenji' b'Come' b'"' b'is' b'a' b'game' b'in' b'"' b'greatest' b'Jews'
    b'"' b',' b'and' b'<unk>' b"'" b'(' b'<unk>' b')' b'features' b'a' b'three' b'@-@' b'game' b'cavity' b',' b'which' b'contains' b'four' b'spiders' b'and'
    b'commercial' b',' b'boys' b'and' b'the' b'feed' b'he' b'reared' b',' b'with' b'a' b'age' b'of' b'coins' b',' b'and' b'Fatality' b'wall' b'Elizabeth' b','
    b'in' b'<unk>' b'spinners' b'.' b'<eos>' b'Q' b'Ibrahima' b'Chaykovsky' b',' b'which' b'is' b'published' b',' b'differently' b'post' b'as' b'covered' b'by' b'mailings' b';'
    b'at' b'the' b'days' b',' b'It' b'took' b'a' b'75' b'@-@' b'minute' b'<unk>' b',' b'bound' b'to' b'a' b'coating' b'of' b'water' b'or' b'horseback'
    b',' b'with' b'an' b'neck' b'in' b'her' b'death' b',' b'retaliation' b'on' b'a' b'total' b'of' b'seven' b'rating' b',' b'Metallica' b'goes' b'from' b'the'
    b'Appalachian' b'detractors' b'of' b'moving' b'.' b'As' b'part' b'are' b'nocturnal' b'associated' b',' b'it' b'is' b'18' b'cardinals' b'(' b'green' b'Raven' b')' b','
    b'its' b'angle' b'and' b'scales' b',' b'especially' b'or' b'slip' b'to' b'crack' b'.' b'The' b'species' b'may' b'usage' b'of' b'expand' b'done' b',' b'possibly'
    b'axis' b'for' b'its' b'threat' b'which' b'they' b'"' b'should' b'be' b'rising' b'over' b',' b'after' b'all' b'he' b'are' b'defended' b'it' b'<unk>' b'its'
    b'fortune' b',' b'and' b'ensuring' b'through' b'Hellenistic' b'people' b'that' b'contain' b'want' b'to' b'find' b'human' b'lighting' b'reader' b'@-@' b'like' b'sex' b'if' b'they'
    b'do' b'the' b'same' b'or' b'under' b'1795' b'when' b'he' b'repeatedly' b'use' b'a' b'dark' b'yellow' b'faith' b'so' b'fully' b'positively' b'a' b'marginal' b'device'
    b'often' b'made' b'up' b'only' b'metallic' b'asteroid' b'to' b'have' b'a' b'minimal' b'representative' b'of' b'mature' b'history' b',' b'and' b'wanting' b'to' b'have' b'a'
    b'variety' b'of' b'another' b'other' b'door' b'on' b'touching' b'character' b'repeatedly' b'benzene' b'but' b'they' b'targeted' b'his' b'high' b'"' b'.' b'In' b'2003' b','
    b'Z' b'was' b'elected' b'during' b'his' b'first' b'game' b'in' b'place' b'and' b'taught' b'her' b'singing' b'when' b'recent' b'beauty' b'suggests' b'it' b'for' b'respect'
    b'what' b'represents' b'Jack' b'\xe2\x80\x93' b'myself' b'readers' b'.' b'<eos>' b'In' b'a' b'1824' b'review' b',' b'Terri' b'apartheid' b'R.' b'Paul' b'n\xe1\xb9\xafr' b'means' b'Ross'
    b"'s" b'willingness' b'the' b'characters' b',' b'Victor' b'Buckingham' b'and' b'Thomas' b'Rutherford' b'zetlandicus' b'in' b'1969' b'violation' b'for' b'their' b'vision' b';' b'"' b'IGN'
    b'only' b'as' b'it' b'is' b'a' b'flag' b'"' b',' b'with' b'"' b'Raffles' b'819' b'"' b'.' b'Although' b'it' b'was' b'a' b'fictional' b'ought'
    b'to' b'confirm' b'this' b'pattern' b',' b'it' b'has' b'listed' b'began' b'on' b'media' b'Press' b':' b'Hebrew' b'year' b'dive' b',' b'a' b'much' b'short'
    b'planet' b',' b'children' b',' b'of' b'"' b'ceased' b'prolific' b'"' b',' b'which' b'does' b'become' b'"' b'Host' b'shifts' b'into' b'listeners' b'like' b'comparisons'
    b'to' b'watercolors' b'and' b'soul' b'"' b'.' b'Peshkin' b'received' b'a' b'unbroken' b'before' b'the' b'latter' b'of' b'Alfa' b'by' b'Earnest' b'by' b'alternative' b'circumstances'
    b':' b'<eos>' b'Diana' b',' b'or' b'Candy' b'13' b',' b'or' b'Burn' b',' b"'" b'and' b"'" b'It' b"'s" b'describing' b'much' b'place' b'as'
    b'an' b'Dream' b',' b'live' b'about' b'any' b'date' b'that' b'could' b'have' b'100' b'\xe2\x98\x89' b',' b'<unk>' b'to' b'three' b'different' b'guys' b'and' b'<unk>'
    b'.' b'The' b'second' b'verse' b'low' b',' b'...' b'the' b'tinge' b'89A' b'The' b'game' b',' b'in' b'addition' b'too' b'as' b'an' b'risk' b'of'
    b'a' b'public' b'medal' b',' b'so' b'his' b'<unk>' b'were' b'killed' b';' b'following' b'John' b'!' b'of' b'Your' b'History' b',' b'the' b'fighting' b'Allah'
    b'is' b'astonished' b'<unk>' b'with' b'a' b'stone' b'presbyterian' b'attack' b'to' b'its' b'paper' b'.' b'The' b'other' b'means' b'of' b'women' b'has' b'little' b'walking'
    b'and' b'Margin' b',' b'then' b'\xe2\x80\x93' b'rather' b'Chunuk' b',' b'what' b'they' b'are' b'a' b'gold' b'subtle' b'(' b'Australian' b'opinion' b'/' b'hoist' b'/'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.7
    loss: 5.164
    elapsed time (seconds): 158.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  28.363 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
