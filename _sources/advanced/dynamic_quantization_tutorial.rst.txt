.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'Be' b'v.' b'Clair' b'was' b'both' b'considered' b'by' b'Sitriuc' b"'s" b'"' b'behest' b'of' b'The' b'Great' b'Choice' b'"' b',' b'and'
    b'I' b'argued' b'that' b',' b'<unk>' b'"' b'hit' b'early' b'UHF' b'<unk>' b'of' b'time' b'that' b'are' b'accents' b'to' b'all' b'...' b'I' b'just'
    b'<unk>' b'"' b'.' b'The' b'baptism' b'of' b'Ecclestone' b'(' b'<unk>' b'Until' b'This' b'Hepburn' b'a' b'passage' b'best' b',' b'including' b'males' b'(' b'included'
    b'enthusiasts' b')' b'afterwards' b',' b'and' b'is' b'more' b'major' b'type' b'of' b'houses' b',' b'MM' b'Now' b'(' b'corruption' b')' b',' b'and' b'the'
    b'Konrad' b'Hall' b'.' b'In' b'early' b'2003' b'the' b'Bruins' b'decided' b'to' b'exist' b'back' b'in' b'the' b'past' b',' b'when' b'both' b'Chinese' b'works'
    b'used' b'Beaumont' b'from' b'possible' b'pressings' b'is' b'as' b'such' b'.' b'<unk>' b'as' b'they' b'find' b'<unk>' b',' b'they' b'have' b'a' b'inclination' b'up'
    b'covered' b'irresponsible' b',' b'a' b'male' b'life' b'before' b'many' b'low' b'Daspletosaurus' b'to' b'compare' b'based' b'.' b'The' b'amateur' b'American' b'state' b'within' b'Metro'
    b'(' b'Fire' b')' b'-' b'5' b'@-@' b'62' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'Grade' b'!' b'!'
    b'M.' b'Enuff' b'(' b'piano' b')' b'has' b'five' b'steps' b'for' b'several' b'literary' b'miles' b',' b'a' b'species' b'of' b'training' b',' b'due' b'to'
    b'silver' b'plumes' b'and' b'Everglades' b'details' b',' b'Marylebone' b',' b'with' b'they' b'support' b',' b'and' b'a' b'enjoyable' b'trend' b'.' b'The' b'church' b'restored'
    b'the' b'season' b'to' b'be' b'possible' b',' b'though' b'the' b'rest' b'of' b'which' b'were' b'afraid' b'the' b'introductions' b'.' b'<eos>' b'This' b'image' b'of'
    b'non' b'@-@' b'extant' b'Economy' b'raised' b'for' b'their' b'course' b'on' b'August' b'2' b',' b'1936' b'.' b'As' b'when' b'prior' b'to' b'Rosebery' b','
    b'Little' b'Baron' b'Here' b'and' b'Tigernach' b'departs' b'his' b'cross' b'for' b'using' b'children' b'to' b'interest' b'.' b'In' b'modern' b'England' b'to' b'other' b'back'
    b'been' b'become' b'edited' b',' b'when' b'Carignan' b'was' b'also' b'excluded' b'for' b'Significant' b'purposes' b'and' b'1000' b'times' b'to' b'avoid' b'include' b'between' b'those'
    b'20' b'games' b'to' b'Part' b'on' b'the' b'Horizon' b'for' b'Sir' b'W.' b'Doyle' b'.' b'Jakob' b'mantelli' b'suggested' b'that' b'this' b'title' b'publicly' b'"'
    b'could' b'be' b'put' b'with' b'the' b'shooting' b'so' b'O' b'\xe2\x80\x99' b'l' b'a' b'lord' b'subtly' b'I' b"'ve" b'Jim' b'[' b'of' b'the' b'deserves'
    b']' b'to' b'me' b'.' b"'" b'"' b'Barker' b'first' b'fell' b',' b'which' b'criticized' b'to' b'cover' b'their' b'remarks' b'at' b':' b'wet' b':'
    b'30' b'.' b'adorable' b'broader' b'comments' b',' b'Ceres' b'Camel' b'criticized' b'the' b'London' b'network' b'on' b'his' b'church' b',' b'Gordon' b'<unk>' b'appreciated' b'the'
    b'series' b'to' b'play' b'his' b'entirety' b'.' b'The' b'book' b"'s" b'delivery' b'contributed' b'to' b'the' b'transits' b'.' b'Finally' b',' b'then' b'after' b'his'
    b'game' b'he' b'gained' b'most' b'locations' b'have' b'come' b'to' b'compromised' b'the' b'transit' b'.' b'The' b'total' b'comic' b'leads' b'for' b'inflated' b'at' b'Stokes'
    b'has' b'defeated' b'in' b'overseas' b'view' b'.' b'<eos>' b'Governor' b'Leonard' b'Baker' b'ranked' b'work' b'to' b'kick' b'the' b'mini' b'TV' b'series' b'chaired' b'in'
    b'2006' b'when' b'in' b'Nick' b'Gray' b"'s" b'fourth' b'book' b'he' b'was' b'forced' b'to' b'raise' b'for' b'his' b'guidance' b'a' b'month' b'.' b'Within'
    b'three' b'rounds' b'this' b'life' b',' b'Ceres' b'befriended' b'spectroscopic' b'organizations' b',' b'Snow' b'Abba' b'Ten' b',' b'Sung' b'and' b'Benedict' b'Jimmy' b'The' b'reports'
    b'of' b'the' b'<unk>' b'Art' b',' b'to' b'produce' b'his' b'final' b'repertoire' b',' b'<unk>' b'<unk>' b'.' b'<eos>' b'poll' b'guest' b'matches' b'down' b'to'
    b'a' b'electric' b'nucleoplasm' b',' b'taking' b'place' b'in' b'peak' b'to' b'stay' b'longer' b'.' b'<eos>' b'Early' b'public' b'writers' b'were' b'offered' b'to' b'support'
    b'the' b'appeal' b'to' b'poster' b'were' b'concerned' b'regarding' b'Mosley' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Later' b'and' b'militia' b'health' b'=' b'='
    b'=' b'<eos>' b'<eos>' b'Saga' b',' b'Jordan' b'received' b'the' b'Tower' b'Race' b'for' b'relatively' b'than' b'five' b'first' b'minor' b'actors' b'and' b'reached' b','
    b'over' b'100' b'%' b'of' b'all' b',' b'Formula' b'One' b',' b'instinctively' b'at' b'!' b'One' b'recovering' b'to' b'date' b',' b'ranking' b'expressed' b'people'
    b'were' b'official' b'to' b'ensure' b'gale' b'that' b'Wilfrid' b'would' b'prove' b'suicide' b'.' b'If' b'reviewing' b'some' b'image' b',' b'Walpole' b'lost' b'absurd' b'charitra'
    b'ligament' b'to' b'take' b'decades' b'records' b'"' b'I' b'wish' b'they' b"'ve" b'very' b'non' b'@-@' b'brilliant' b'skills' b'for' b'top' b'O.D.B' b'for' b'explosively'
    b'with' b'one' b'link' b'(' b'about' b'60' b'months' b'"' b')' b'.' b'In' b'addition' b'he' b'starred' b'on' b'to' b'show' b'Aleksander' b'while' b'all'
    b'the' b'emerging' b'rope' b'were' b'to' b'be' b'checks' b',' b'but' b'they' b'made' b'faster' b'two' b'novels' b'I' b'gave' b'IDF' b'smoothly' b'debris' b'who'
    b'would' b'be' b'found' b'at' b'every' b'merger' b'in' b'death' b'.' b'The' b'consultation' b'event' b'advanced' b'to' b'<unk>' b'carbon' b',' b'including' b'his' b'candidacy'
    b',' b'only' b'underway' b'with' b'wounded' b'.' b'O' b"'Malley" b'returned' b'to' b'his' b'infant' b'quality' b'to' b'continue' b'County' b'State' b'whom' b'they' b'would'
    b'have' b'become' b'part' b'of' b'an' b'4' b'@,@' b'Scottish' b'nuclear' b'Unlimited' b'pages' b'on' b'December' b'7' b',' b'favor' b',' b'non' b'@-@' b'gills'
    b'between' b'<unk>' b'and' b'Richie' b'.' b'The' b'game' b'block' b'seven' b'major' b'<unk>' b'in' b'exchange' b'.' b'<eos>' b'Where' b'him' b'of' b'numerous' b'city'
    b'attacks' b',' b'poll' b'Tarantino' b'won' b'direct' b'Mfume' b'in' b'in' b'the' b'Democratic' b'World' b'Cup' b',' b'when' b'a' b'fellow' b'tree' b'(' b'including'
    b'nine' b'%' b'of' b'these' b'teams' b'worked' b'on' b'which' b'he' b'covertly' b'moved' b'to' b'Victoria' b')' b'and' b'sent' b'his' b'functionality' b'trusted' b'Holy'
    b'Public' b'Baltimore' b'.' b'<eos>' b'O' b"'Malley" b'began' b'the' b'game' b'directly' b'Month' b'around' b'March' b'5' b'that' b'year' b'.' b'Despite' b'the' b'Blues'
    b',' b'Mosley' b'then' b'asked' b'ambition' b'to' b'work' b'with' b'Alice' b',' b'which' b'teller' b'considered' b'a' b'upgrade' b'record' b'published' b'the' b'periodicals' b'by'
    b'being' b'unable' b'to' b'merge' b'out' b'the' b'ball' b'between' b'Juanita' b'and' b'The' b'series' b',' b'but' b'the' b'remaining' b'White' b'Race' b'.' b'In'
    b'2009' b'Hornung' b'<unk>' b'up' b',' b'if' b'"' b'royalty' b'of' b'fiction' b'"' b'were' b'in' b'depart' b'began' b'the' b'ball' b'and' b'involved' b'his'
    b'entire' b'feeling' b',' b'providing' b'it' b'as' b'"' b'high' b',' b'Americans' b'Promise' b'"' b'.' b'Mosley' b'declared' b'his' b'effects' b'at' b'the' b'third'
    b'time' b',' b'and' b'said' b'approval' b',' b'"' b'I' b'don' b"'t" b'believe' b'I' b"'ve" b'already' b'Champlain' b'emphasizes' b'/' b'been' b'the' b'body'
    b'Eusebius' b'<unk>' b'<unk>' b'ruler' b'for' b'the' b'driving' b'process' b'to' b'support' b'her' b',' b'telling' b'no' b'doesn' b'One' b'"' b'to' b'be' b'more'
    b'coloured' b'among' b'Supply' b'.' b'Mosley' b'first' b'announced' b'over' b'two' b'warm' b'labor' b'promotional' b'TV' b'cases' b'(' b'played' b'at' b'an' b'game' b'and'
    b'level' b'in' b'FOCA' b')' b'.' b'Mosley' b'has' b'<unk>' b'the' b'vote' b'in' b'his' b'record' b'as' b'the' b'second' b'best' b'scheduled' b'of' b'South'
    b'Africa' b'.' b'The' b'World' b'War' b'announced' b'Tech' b'to' b'Dolls' b'Brian' b'Jones' b'but' b'condemned' b'international' b'live' b'cultural' b'support' b'.' b'The' b'staff'
    b"'s" b'sampled' b'policy' b'was' b'renamed' b'on' b'a' b'official' b'@-@' b'premier' b'controller' b'on' b'tender' b',' b'at' b'Charmed' b'8' b'percent' b',' b'all'
    b'season' b'institution' b'.' b'Paul' b'backup' b'Ashbee' b'was' b'much' b'in' b'several' b'years' b'on' b'the' b'old' b'market' b'for' b'the' b'European' b'Union' b'('


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 226.8
    loss: 5.164
    elapsed time (seconds): 151.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  22.458 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
