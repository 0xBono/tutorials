.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'they' b'were' b'compelled' b'to' b'satisfy' b'fears' b'daughter' b'honoring' b'them' b'for' b'traced' b'.' b'<eos>' b'Because' b'illumination' b'has' b'part' b'of' b'her'
    b'grossing' b'rejection' b'so' b'they' b'were' b'in' b'18-' b'to' b'replace' b'their' b'transit' b'being' b're' b'@-@' b'written' b',' b'whereas' b'"' b'114' b'individuals'
    b'are' b'jazz' b'they' b'have' b'...' b'that' b'or' b'after' b'I' b"'re" b'killed' b'in' b'<unk>' b'.' b'And' b'<unk>' b'on' b'any' b'pitch' b'is'
    b'the' b'<unk>' b',' b'which' b'is' b'exhausted' b'or' b'circulate' b'.' b'"' b'Bell' b'later' b'lobbied' b'plank' b'common' b'misleading' b'intelligence' b'forces' b'.' b'The'
    b'first' b'Pacific' b'plane' b'reported' b'as' b'"' b'full' b'area' b'of' b'M\xc4\x81ori' b'"' b',' b'which' b'he' b'criticized' b'Mr' b'Keyes' b'for' b':' b'flame'
    b'Freewheelin' b'be' b'published' b'as' b'his' b'colleagues' b'of' b'Hollywood' b'and' b'are' b'working' b'on' b'the' b'13th' b'century' b'.' b'1721' b'then' b'demanded' b'in'
    b'the' b'centuries' b'by' b'literary' b'institutions' b'and' b'brought' b'them' b'to' b'be' b'concerned' b'on' b'a' b'further' b'situation' b',' b'since' b'sinks' b'pumps' b'looked'
    b'back' b'to' b'the' b'Persians' b"'" b'return' b'<eos>' b'Each' b'example' b',' b'though' b'the' b'453' b'Agreement' b'of' b'this' b'third' b'prototype' b'is' b'<unk>'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Sister' b'culture' b'=' b'=' b'<eos>' b'<eos>' b'Kakapo' b'Carolina' b'was' b'a' b'famous' b'Bad' b'motion' b'by' b'scenic'
    b'weight' b',' b'near' b'standard' b'sq' b'legs' b'are' b'recorded' b'by' b'soul' b',' b'but' b'the' b'yellow' b'flying' b'belt' b'differs' b'in' b'screening' b'facilities'
    b'could' b'be' b'held' b'too' b'consort' b'before' b'kind' b'.' b'Pliny' b'keyboards' b'are' b'considered' b'to' b'mammal' b',' b'so' b'others' b'Am' b',' b'understood'
    b'to' b'receive' b'assemblies' b'to' b'be' b'a' b'violation' b'of' b'the' b'body' b'except' b'standards' b'.' b'In' b'a' b'ancient' b'study' b'of' b'all' b'formation'
    b',' b'traditional' b'growth' b'create' b'a' b'low' b'218' b'manner' b'\xe2\x80\x94' b'rather' b'.' b'In' b'the' b'2005' b'arena' b',' b'one' b',' b'one' b'of'
    b'the' b'top' b'will' b'be' b'killed' b'by' b'1' b'million' b'images' b'.' b'It' b'is' b'always' b'expressed' b'to' b'be' b'possible' b'by' b'2' b'@.@'
    b'7' b'million' b'(' b'high' b'in' b'and' b'in' b'most' b'large' b'trees' b')' b',' b'except' b'Imbudo' b'for' b'periods' b',' b'and' b'series' b'behind'
    b'three' b'gill' b'Qedar' b'.' b'The' b'apparent' b'colour' b'of' b'diet' b'countries' b'is' b'higher' b'in' b'significant' b'areas' b'to' b'take' b'up' b'distributed' b','
    b'with' b'woodland' b'academy' b'or' b'<unk>' b',' b'the' b'exterior' b'limit' b',' b'and' b'is' b'obstacle' b'towards' b'colour' b',' b'with' b'a' b'stiff' b'ferry'
    b'could' b'be' b'distinguished' b'.' b'This' b'technique' b'led' b'on' b'the' b'Saffir' b'season' b'of' b'a' b'variety' b'of' b'500' b'specimens' b',' b'and' b'in'
    b'the' b'13th' b'century' b',' b'like' b'buried' b'to' b'nymphs' b'when' b'it' b'leaves' b'across' b'their' b'breeding' b'territories' b'.' b'Males' b'memoir' b'varies' b'facing'
    b'vegetation' b'assessed' b',' b'but' b'also' b'directing' b'in' b'mast' b'one' b'who' b'suddenly' b'anemia' b'between' b'their' b'two' b'segments' b'.' b'B.' b'shared' b'9'
    b'postcards' b'on' b'5' b'June' b'1801' b'by' b'them' b'above' b'half' b'mechanics' b',' b'when' b'the' b'female' b'is' b'still' b'enclosed' b'to' b'begin' b'days'
    b'.' b'When' b'six' b'not' b'are' b'according' b'to' b'70' b'or' b'it' b'came' b'males' b',' b'spending' b'four' b'years' b'.' b'By' b'autumn' b','
    b'it' b'has' b'its' b'advance' b'was' b'a' b'external' b'challenge' b'.' b'Once' b'its' b'<unk>' b'pale' b'reaches' b'her' b'first' b'to' b'be' b'brownish' b','
    b'the' b'short' b'tissue' b'spots' b'is' b'fully' b'broken' b'.' b'The' b'airborne' b'image' b'of' b'<unk>' b'and' b'K.' b'mode' b'may' b'be' b'still' b'bernissartensis'
    b'.' b'<unk>' b',' b'and' b',' b'they' b'will' b'be' b'found' b'in' b'Yiddish' b',' b'or' b'even' b'include' b'<unk>' b',' b'Bone' b',' b'\xce\xb1'
    b',' b'spirits' b',' b'leaves' b'practice' b',' b'<unk>' b',' b'and' b'grown' b'of' b'these' b'absorb' b'Kingdom' b'tube' b'photons' b'from' b'the' b'South' b'Pacific'
    b'<unk>' b'(' b'two' b'Helmet' b')' b',' b'the' b'gill' b'linear' b'line' b'in' b'a' b'transit' b'of' b'chancellor' b'middle' b'groups' b'through' b'any' b'European'
    b'bands' b',' b'<unk>' b'occasionally' b'<unk>' b',' b'which' b'was' b'treated' b'to' b'jail' b'.' b'In' b'the' b'mid' b'@-@' b'playoffs' b',' b'monospaced' b'spots'
    b'common' b'fields' b'decisive' b'the' b'background' b',' b'which' b'sustained' b'<unk>' b'headmold' b',' b'in' b'the' b'1910' b'area' b'.' b'<eos>' b'The' b'world' b'bunch'
    b'has' b'distinctive' b'longer' b',' b'so' b'contains' b'them' b'to' b'collects' b'krypton' b'\xe2\x80\x93' b'often' b'impossible' b'to' b'discourage' b'or' b'annoy' b'down' b'by' b'water'
    b',' b'eucalypts' b'.' b'overwhelmingly' b'compounds' b'brought' b'to' b'the' b'availability' b'of' b'acids' b'(' b'although' b'other' b'greater' b'types' b'of' b'<unk>' b'@-@' b'expression'
    b')' b'are' b'separated' b'1' b'miles' b'(' b'4' b'@.@' b'8' b'in' b')' b'diameter' b',' b'and' b'in' b'15' b'months' b',' b'there' b'are'
    b'severe' b'fewer' b'atoms' b'of' b'<unk>' b':' b'cases' b'of' b'their' b'diet' b',' b'during' b'competition' b'.' b'Males' b'are' b'still' b'free' b'in' b'banks'
    b'and' b'Judas' b'.' b'As' b'they' b'do' b'first' b'employ' b'bards' b',' b'they' b'may' b'now' b'be' b'more' b'broken' b'.' b'<unk>' b'host' b'old'
    b'relates' b'.' b'During' b'a' b'pair' b'of' b'ring' b'bohemica' b',' b'neighborhood' b'<unk>' b',' b'adventurous' b',' b'little' b'wine' b',' b'say' b'by' b'increased'
    b'thick' b',' b'farther' b'.' b'An' b'small' b'starling' b'is' b'a' b'distinct' b'species' b'of' b'Observatory' b',' b'with' b'cynicism' b'(' b'"' b'<unk>' b'"'
    b')' b',' b'or' b'members' b'of' b'<unk>' b'(' b'sometimes' b'bypasses' b'as' b'food' b')' b'.' b'If' b'the' b'kakapo' b'is' b'black' b',' b'rarely'
    b'reader' b'halls' b'foxes' b'are' b'given' b'<unk>' b',' b'while' b'kakapo' b'range' b'into' b'their' b'population' b'of' b'<unk>' b'and' b'Edie' b'lines' b'to' b'avoid'
    b'foraging' b'between' b'12' b'and' b'8' b'species' b',' b'on' b'his' b'radius' b'and' b'Willie' b'the' b'chicks' b'.' b'Only' b'aspects' b'of' b'Kells' b'have'
    b'burst' b'in' b'length' b'during' b'their' b'rotation' b'.' b'He' b'it' b'be' b'very' b'characterised' b'and' b'understood' b'it' b'to' b'come' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Synopsis' b'=' b'=' b'<eos>' b'<eos>' b'The' b'common' b'starling' b'of' b'Hebrew' b'have' b'a' b'heaviest' b'ranking' b',' b'mostly' b'a' b'bird'
    b',' b'but' b'Danny' b'may' b'have' b'ever' b'radial' b'Crex' b'temperature' b'.' b'The' b'mushroom' b'directed' b'being' b'the' b'chase' b'where' b'Astraeus' b'has' b'long'
    b'absorbed' b'at' b'a' b'rate' b'of' b'71' b'\xe2\x80\x93' b'91' b'%' b',' b'while' b'within' b'one' b'early' b'years' b'and' b'attached' b'to' b'purre' b';'
    b'it' b'has' b'structural' b'thought' b'to' b'a' b'sternum' b'that' b'they' b'will' b'turn' b'when' b'if' b'they' b'are' b'directly' b'<unk>' b'back' b'.' b'Instead'
    b',' b'it' b'is' b'usually' b'<unk>' b'fade' b'as' b'"' b'banned' b'you' b'of' b'consistent' b'deep' b'"' b'.' b'Large' b'colonists' b',' b'expanding' b','
    b'scales' b',' b'and' b'the' b'food' b'length' b'of' b'eye' b'as' b'\xe2\x80\x91' b',' b'have' b'trophy' b'from' b'scenic' b'ones' b',' b'but' b'somewhat' b'<unk>'
    b',' b'or' b'stream' b'.' b'Although' b'rDNA' b'and' b'Sidonian' b'vegetation' b'have' b'their' b'cause' b'.' b'With' b'Jude' b'with' b'the' b'craftsmanship' b'of' b'male'
    b'or' b'cultural' b'starlings' b',' b'nesting' b'Shabelle' b'saw' b'a' b'large' b',' b'black' b',' b'greater' b'scripts' b'of' b'two' b'cars' b',' b'a' b'small'
    b'backbone' b'or' b'calls' b'of' b'them' b'.' b'Noisy' b'birds' b'are' b'weigh' b'by' b'however' b'on' b'hay' b',' b'New' b'Zealand' b'.' b'A' b'female'
    b'is' b'An' b'<unk>' b'recent' b'letters' b'(' b'particularly' b'more' b'uncommon' b')' b'.' b'They' b'can' b'have' b'<unk>' b'her' b'fiction' b'.' b'He' b'introduces'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.9
    loss: 5.168
    elapsed time (seconds): 157.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  28.547 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
