.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'honors' b'.' b'Brown' b'felt' b'that' b'"' b'it' b'is' b'<unk>' b'.' b'"' b'descriptions' b'described' b'the' b'Complete' b'Civil' b'Series' b'in' b'Australia' b'and'
    b'1941' b',' b'but' b'introduced' b'to' b'1' b'@.@' b'91' b'million' b'2015' b'like' b'after' b'his' b'own' b'donations' b'.' b'They' b'recorded' b'32' b'lanes'
    b',' b'but' b'would' b'bring' b'all' b'time' b'represented' b'since' b'the' b'1910' b'election' b'.' b'The' b'East' b',' b'Polytron' b'allegedly' b'announced' b'having' b'moved'
    b'to' b'their' b'role' b"'s" b'career' b',' b'their' b'delight' b',' b'putting' b'deaths' b'in' b'a' b'sex' b'interviewer' b'<unk>' b'by' b'King' b':' b'<eos>'
    b'Vandernoot' b'just' b'finds' b'reggaeton' b',' b'the' b'reflect' b'19th' b'Division' b'and' b'an' b'blue' b'star' b'cylindrical' b'the' b'statements' b'but' b'encouraged' b'them' b'a'
    b'process' b',' b'as' b'<unk>' b'.' b'"' b'Sainz' b'fueled' b'at' b'to' b'press' b'Conservative' b'Union' b'as' b'a' b'monthly' b'teacher' b'in' b'a' b'honorable'
    b'way' b'to' b'William' b'Austen' b'on' b'41' b'May' b'another' b'company' b'\xe2\x80\x94' b'Good' b'wife' b'had' b'a' b'good' b'culvert' b'of' b'New' b'Zealand' b'.'
    b'<eos>' b'The' b'duration' b'of' b'politics' b'and' b'renamed' b'Venus' b'controlled' b'to' b'<unk>' b'1911' b'background' b'123' b'%' b'of' b'other' b'counties' b'(' b'corroborated'
    b'Sinner' b')' b'near' b'<unk>' b',' b'a' b'village' b'by' b'a' b'Chicago' b'Until' b'<unk>' b'likened' b'as' b'a' b'informing' b'circle' b'for' b'<unk>' b'.'
    b'<eos>' b'<eos>' b'<eos>' b'=' b'Livin' b'of' b'Special' b'War' b'=' b'<eos>' b'<eos>' b'The' b'Baltimore' b'Regional' b'Tide' b',' b'The' b'Annals' b'of' b'Somerset'
    b',' b'<unk>' b'@-@' b'al' b'"' b'The' b'1697' b'<unk>' b'Leonard' b'"' b'\xe2\x80\x94' b'was' b'bringing' b'roughly' b'one' b'who' b'only' b'of' b'the' b'top'
    b'@-@' b'in' b'@-@' b'old' b'books' b',' b'built' b'by' b'twelve' b'titles' b'(' b'in' b'kidnapped' b'over' b'77' b'or' b'2' b'%' b'shooting' b')'
    b'and' b'1002' b':' b'<eos>' b'we' b'only' b'normally' b'feel' b'it' b'what' b'forces' b'sarsens' b'on' b'there' b'.' b'In' b'the' b'arrival' b'of' b'Furtado'
    b',' b'he' b'was' b'easy' b'YouTube' b',' b'and' b'is' b'an' b'nuts' b'culture' b'from' b'Scientology' b'.' b'Later' b'to' b'him' b'in' b'pursuit' b'of'
    b'this' b',' b'who' b'is' b'not' b'attributed' b'to' b'him' b'.' b'The' b'manner' b'notes' b'that' b'they' b'do' b'.' b'the' b'score' b'in' b'which'
    b'a' b'low' b'visual' b'pressure' b'could' b'read' b'the' b'<unk>' b',' b'I' b'gives' b'a' b'young' b'meeting' b'in' b'that' b'n' b',' b'<unk>' b','
    b'and' b'Known' b'his' b'canals' b'to' b'be' b'water' b'Parkway' b',' b'May' b'82' b'by' b'export' b'she' b',' b'who' b'gives' b'offence' b'be' b'on'
    b'her' b'hand' b',' b'you' b'knows' b'me' b'at' b'Gracehope' b'in' b'saying' b'is' b'loved' b'.' b'He' b'Still' b'one' b',' b'tap' b'<unk>' b','
    b'some' b'efficient' b'women' b'...' b'compared' b'that' b'"' b'impossible' b'and' b'initiating' b'style' b'that' b'or' b'You' b'is' b'slow' b',' b'his' b'body' b'Guns'
    b'<unk>' b'through' b'ways' b"'" b'<unk>' b',' b'and' b'Macpherson' b'this' b'was' b'<unk>' b'drawbacks' b'to' b'pass' b'up' b'a' b'mature' b'person' b',' b'however'
    b'as' b'to' b'.' b'It' b'is' b'behind' b'two' b'who' b'has' b'one' b'long' b',' b'all' b'element' b'himself' b'penetrate' b'by' b'locked' b'it' b'into'
    b'a' b'lack' b'of' b'<unk>' b'black' b'opportunities' b'to' b'refer' b'to' b'a' b'<unk>' b';' b'I' b'leave' b'for' b'this' b'phrase' b'after' b'give' b'.'
    b'"' b'To' b'a' b'105' b'@-@' b'95' b'lead' b',' b'1' b'percent' b'of' b'this' b'male' b'show' b',' b'commenting' b'3' b'@.@' b'5' b'%'
    b'varies' b'in' b'diameter' b'.' b'In' b'addition' b',' b'twenty' b'@-@' b'minute' b'unpredictability' b',' b',' b'the' b'Egyptologists' b'<unk>' b'admitted' b'<unk>' b'in' b'a'
    b'little' b'<unk>' b'case' b'while' b'and' b'the' b'manufacturer' b'always' b'burnt' b'on' b'to' b'make' b'a' b'role' b'of' b'equivalent' b'.' b'Purity' b',' b'the'
    b'Suwa' b'Standard' b'swordsman' b'the' b'findings' b'to' b'men' b',' b'and' b'rarely' b',' b'because' b'it' b'is' b'advice' b'for' b'customer' b'displays' b',' b'the'
    b'eye' b'plied' b'back' b'to' b'Earth' b'.' b'He' b'threw' b'but' b'<unk>' b'his' b'amyloid' b'play' b'college' b'<unk>' b'.' b'<eos>' b'<eos>' b'<eos>' b'='
    b'Children' b'=' b'<eos>' b'<eos>' b'<unk>' b'B-' b'and' b'their' b'violent' b'Husband' b'polymerase' b'Jupiter' b'and' b'North' b'Australian' b'Carolina' b'and' b'James' b'Elle' b'.'
    b'not' b'in' b'December' b'lasers' b'October' b'2004' b',' b'the' b'Southern' b'Olympic' b'source' b'was' b'almost' b'loyal' b'to' b'<unk>' b'northeast' b'of' b'return' b'to'
    b'West' b'instituted' b',' b'as' b'well' b'as' b'David' b',' b'and' b'Molecular' b'were' b'recovered' b'by' b'<unk>' b',' b'downloadable' b',' b'leading' b',' b'and'
    b'Talent' b'cover' b'steel' b',' b'and' b'replaced' b'south' b"'s" b'center' b'in' b'some' b'concentrate' b'.' b'He' b'\xe2\x80\x99' b's' b'private' b'potential' b'brought' b'to'
    b'gain' b'interacting' b'enslaved' b'orders' b'India' b',' b'stopping' b'Irish' b'special' b'Commissioner' b'with' b'10' b'%' b'in' b'a' b'loops' b',' b'playing' b'D' b'hoping'
    b'when' b'it' b'deals' b'southwest' b'for' b'the' b'more' b'truly' b',' b'mostly' b'cow' b'Caprices' b'with' b'<unk>' b',' b'even' b'disabled' b'electrophoresis' b'.' b'Notable'
    b'pieces' b'included' b'this' b'research' b'or' b'bearing' b'space' b'on' b'marriage' b'with' b'Throop' b'.' b'They' b'Unfeared' b'the' b'American' b'St.' b'Louis' b'Bang' b'Order'
    b'Sauvignon' b'emigration' b',' b'which' b'showed' b'a' b'succession' b'of' b'ratio' b'and' b'sisters' b',' b'and' b'the' b'<unk>' b'of' b'large' b'or' b'Pleasure' b'Homarus'
    b"'s" b'partner' b'.' b'Jordan' b'Hale' b'said' b'that' b'there' b'are' b'less' b'natural' b'evidence' b'in' b'state' b',' b'and' b'it' b'has' b'been' b'declared'
    b'into' b'this' b'approached' b'game' b'Saprang' b"'s" b'<unk>' b';' b'it' b'has' b'five' b'his' b'50s' b'in' b'all' b'.' b'At' b'rematch' b',' b'March'
    b'30' b',' b'2010' b"'" b'Nuzman' b'makes' b'to' b'considerable' b'danger' b'of' b'the' b'Nazareth' b'Palace' b'<unk>' b'<unk>' b',' b'who' b'would' b'become' b'of'
    b'the' b'Northgate' b'descriptive' b'Cougars' b'displaying' b'respect' b'translated' b'to' b'a' b'outpost' b'interaction' b'from' b'policies' b'from' b'both' b'1' b'@.@' b'8' b'or' b'in'
    b'other' b'layers' b',' b'on' b'varying' b'rule' b'and' b'employment' b'are' b'a' b'deal' b'into' b'several' b'%' b'.' b'Most' b'account' b'often' b'considered' b'Coliseum'
    b'includes' b'school' b'surrounding' b'@-@' b'physical' b'brightness' b'.' b'Then' b',' b'the' b'Ulaid' b'becomes' b'larger' b',' b'and' b'if' b'<unk>' b',' b'according' b','
    b'they' b'know' b'why' b'the' b'<unk>' b'harvest' b'spots' b'can' b'be' b'altered' b'.' b'<eos>' b'<unk>' b'and' b'so' b'the' b'survived' b'between' b'their' b'Sclerodermatineae'
    b'or' b'dress' b',' b'cigars' b'have' b'either' b'yet' b'turned' b'his' b'dual' b'Screenplay' b'(' b'66' b'%' b'as' b'1' b'@,@' b'700' b'assistants' b')'
    b'.' b'A' b'year' b'and' b'15' b'%' b'of' b'the' b'genus' b'cap' b'was' b'still' b'omniscience' b',' b'and' b'establishing' b'the' b'devil' b'being' b'killed'
    b',' b'but' b'<unk>' b'Ellis' b',' b'Anton' b'<unk>' b'and' b'<unk>' b'Ben' b'Arm' b'Margaret' b'Cannon' b'feels' b'another' b'space' b'nor' b'Carlson' b'convened' b'down'
    b'too' b'soft' b'role' b'.' b'<eos>' b'The' b'species' b'was' b'only' b'with' b'1870' b'.' b'Kakapo' b'Meta' b'differ' b'back' b'for' b'Laura' b'<unk>' b"'s"
    b'discovery' b'into' b'religion' b'in' b'1987' b'.' b'<eos>' b'Crash' b'Schmoke' b',' b'a' b'enthusiastic' b'F\xc3\xb6rster' b'firm' b'London' b'complex' b',' b'is' b'a' b'member'
    b'of' b'Baker' b"'s" b'family' b'.' b'Cricket' b'President' b'in' b'the' b'1842' b'language' b'by' b'Mega' b"'Malley" b'used' b'being' b'searching' b'into' b'his' b'interpretation'
    b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Casimir' b'[' b'Know' b'I' b'could' b'be' b'bland' b'The' b'deputy' b'.' b'<eos>' b'<eos>' b'We' b'appears' b'greatly'
    b'in' b'Paris' b',' b'played' b'extensive' b'damage' b'in' b'2008' b'.' b'It' b'was' b'made' b'to' b'build' b'gusts' b'from' b'a' b'St.' b'Block' b'<unk>'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 228.7
    loss: 5.164
    elapsed time (seconds): 156.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  29.807 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
