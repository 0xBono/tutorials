.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'Sox' b'\xe2\x80\x9d' b'and' b'first' b'combine' b'Montagne' b'.' b'<eos>' b'A' b'variety' b'of' b'large' b'wine' b'theorists' b'for' b'service' b'defeated' b'management' b'for'
    b'Cam' b'er' b',' b'Baker' b'was' b'sent' b'written' b'to' b'production' b'the' b'capture' b'of' b'sea' b'training' b'Morgan' b',' b'varying' b'sources' b',' b'organisations'
    b',' b'conception' b'and' b'Listening' b'boilers' b'.' b'Four' b'temples' b'put' b'by' b'character' b'players' b'were' b'inscribed' b'on' b'the' b'issue' b'with' b'Victoria' b"'s"
    b'false' b'journalists' b'of' b'native' b'era' b'(' b'Sufjan' b'Dreamers' b')' b'including' b'whom' b'they' b'are' b'not' b'most' b'once' b'considered' b'without' b'being' b'.'
    b'The' b'brunt' b'of' b'global' b'molecules' b'has' b'"' b'false' b'"' b',' b'but' b'that' b'Letterman' b'has' b'selected' b'any' b'other' b'Wetmore' b'.' b'This'
    b'accounts' b'is' b'responsible' b'that' b'can' b'be' b'"' b'tested' b'to' b'materials' b'"' b'contain' b'an' b'Irish' b'transit' b'.' b'Eight' b'deep' b',' b'the'
    b'Semitic' b'hair' b'assigned' b'to' b'to' b'his' b'potential' b'range' b',' b'and' b'concluded' b'that' b'it' b'mentioned' b'"' b'\xe2\x80\x98' b'"' b'and' b'"' b'Eisenberg'
    b'"' b'.' b'Mendelssohn' b'gives' b'it' b'\xe2\x80\x94' b'adding' b'by' b'a' b'Vehicle' b',' b'a' b'elderly' b'<unk>' b'and' b'Auto' b'<unk>' b'show' b'.' b'Additionally'
    b',' b'after' b'common' b'eggs' b'<unk>' b'Are' b'Joseph' b'1' b'of' b'Weissweiler' b',' b'had' b'experienced' b'to' b'Scrubby' b'154' b'Council' b',' b'described' b'1'
    b'@,@' b'000' b'Amsterdam' b'(' b'7' b'@,@' b'400' b't' b'in' b'58' b'%' b'a' b'year' b')' b',' b'in' b'a' b'staunch' b'trail' b'staff'
    b',' b'<unk>' b'appear' b'the' b'missing' b'priority' b'.' b'<eos>' b'The' b'Symphonic' b'Family' b'rail' b'owner' b'that' b'in' b'largest' b'language' b',' b'McCartney' b'felt'
    b'an' b'Parisian' b'pace' b'in' b'the' b'form' b'of' b'Mana' b':' b'Frost' b'Fogle' b'is' b'easily' b'difficult' b'to' b'translate' b'a' b'dinosaur' b'series' b'through'
    b'practice' b'.' b'"' b'manuscript' b'is' b'a' b'fake' b'comedy' b'"' b',' b'after' b'eats' b'amidst' b'gravestones' b'the' b'nickname' b'town' b'complains' b'and' b'Kratos'
    b'.' b'According' b'to' b'The' b'Box' b'Jessica' b'Leaf' b',' b'Hornung' b'stated' b'that' b'this' b'year' b'will' b"'" b'be' b'quirky' b'in' b'all' b'the'
    b'same' b'<unk>' b'II' b'would' b'be' b'about' b'shifting' b',' b'like' b'its' b'habit' b',' b'it' b'is' b'not' b'serious' b'[' b"'" b']' b'"'
    b']' b'both' b'or' b'can' b'never' b'be' b'killed' b'that' b'certain' b'combined' b'Ireland' b"'" b'racing' b'mood' b'without' b'mating' b'Brown' b'dedicated' b'during' b'his'
    b'conformity' b'.' b'"' b'"' b'Pongsak' b'"' b'is' b',' b'because' b'footage' b'ran' b'spread' b'from' b'Justice' b'Influence' b'<unk>' b'.' b'The' b'Whiskey' b'were'
    b'dismissed' b'by' b'several' b'reasons' b'that' b'has' b'either' b'yet' b'found' b'a' b'coin' b'process' b'.' b'orchestral' b'confidence' b':' b'<eos>' b'Georgian' b'insight' b'where'
    b'it' b'comes' b'in' b'a' b'single' b'popular' b'social' b'fixed' b'as' b'precise' b',' b'but' b'it' b'no' b'1' b'point' b',' b'staples' b',' b','
    b'principally' b'connected' b'out' b'of' b'a' b'female' b'and' b'started' b'their' b'own' b'association' b',' b'all' b'secret' b'resistance' b'up' b'him' b'because' b'it' b'holds'
    b'pillars' b'to' b'floods' b'into' b'.' b"'" b'I' b'give' b'value' b'of' b'great' b'or' b'a' b'dark' b'@-@' b'century' b',' b'leave' b'about' b'4'
    b'miles' b'per' b'hour' b'(' b'possibly' b'with' b'a' b'brush' b'or' b'1' b'hours' b'after' b'to' b'24' b'years' b'per' b'living' b')' b',' b'McDonald'
    b'\xe2\x80\x99' b'adult' b'compelling' b'his' b'body' b'to' b'a' b'alien' b'sense' b'than' b'28' b'points' b',' b'Thutmose' b'a' b'big' b'diameter' b',' b'under' b'a'
    b'body' b'at' b'Commonwealth' b'jackrabbit' b'at' b'2' b':' b'19' b'\xe2\x80\x93' b'5' b':' b'06' b'p.m.' b'@.@' b'5' b'days' b',' b'you' b'will' b'be'
    b'thought' b'to' b'be' b'alone' b'behind' b'that' b'level' b'.' b'But' b'they' b'do' b'followed' b'another' b'notions' b',' b'they' b'don' b"'t" b'be' b'interested'
    b'in' b'the' b'\xe2\x80\x98' b'crescent' b'with' b'an' b'game' b'.' b'Their' b'eyes' b'tell' b'this' b'or' b'lap' b'true' b'throughout' b'the' b'actions' b'of' b'help'
    b'.' b'It' b'is' b'not' b'different' b'?' b'Near' b'a' b'golden' b'eye' b'.' b'And' b'they' b'only' b'give' b'up' b'them' b'no' b'so' b'submerged'
    b'to' b'be' b'.' b'Success' b'is' b'not' b'more' b'fond' b'of' b'Dr.' b'unpopular' b',' b'death' b'fewer' b'starts' b'is' b'scattered' b',' b'praising' b'one'
    b'high' b'or' b'periods' b'or' b'things' b'on' b'a' b'average' b'race' b'.' b'<eos>' b'The' b'eggs' b'are' b'"' b'influenced' b'Cd' b';' b'even' b'Foxworth'
    b',' b'Finch' b',' b'made' b'to' b'speaking' b'sorting' b'sound' b'found' b',' b'and' b',' b'it' b'couldn' b"'t" b'do' b'for' b'thought' b'.' b'"'
    b'<unk>' b'"' b'sizeable' b'and' b'distinguished' b'short' b'"' b'and' b'"' b'both' b'warming' b'"' b'(' b'sometimes' b'monogamous' b')' b',' b'pathway' b'can' b'be'
    b'similar' b'to' b'durable' b'.' b'Twenty' b'eggs' b'such' b'as' b'ends' b'green' b',' b'and' b'other' b'deal' b',' b'and' b'small' b'starlings' b'for' b'crash'
    b'of' b'bony' b'and' b'black' b'culture' b',' b'consists' b'of' b'G' b'it' b'container' b',' b'and' b'fly' b'up' b'to' b'red' b'females' b'.' b'It'
    b'be' b'also' b'introduced' b'to' b'Whitaker' b'of' b'all' b'27' b'years' b'after' b'decisions' b'himself' b',' b'he' b'released' b'<unk>' b'guess' b'down' b'with' b'its'
    b'male' b'interwar' b'as' b'he' b'captains' b'understood' b'at' b'any' b'other' b'to' b'restore' b'another' b'fall' b'.' b'The' b'clear' b'challenge' b'is' b'unique' b'for'
    b'it' b'.' b'<eos>' b'The' b'preservation' b',' b'ungulates' b',' b'is' b'antelope' b'recorded' b'to' b'be' b'used' b'.' b'The' b'species' b'meets' b'<unk>' b'Cause'
    b',' b'<unk>' b'additions' b',' b'<unk>' b',' b'<unk>' b',' b'radius' b'and' b'Tyrrell' b',' b'letting' b'a' b'mild' b'Scout' b'feature' b'.' b'The' b'owl'
    b'attributed' b'in' b'depth' b',' b'and' b',' b'Obo' b',' b'they' b'were' b'on' b'<unk>' b',' b'and' b'occasionally' b'his' b'longer' b'conformity' b',' b'suggests'
    b'they' b'should' b'be' b'killed' b'.' b'Even' b'least' b',' b'they' b'proved' b'embracing' b'this' b'stem' b'.' b'Aerosmith' b'could' b'be' b'points' b'from' b'vegetation'
    b':' b'Dwight' b'rules' b'surgeon' b'<unk>' b'(' b'1692' b'\xe2\x80\x93' b'spring' b')' b',' b'or' b'is' b'Palestine' b'(' b'literally' b'understood' b'searching' b')' b'.'
    b'When' b'this' b'technique' b',' b'in' b'agencies' b',' b'they' b'have' b'"' b'could' b'affect' b'a' b'change' b'.' b'No' b'kakapo' b'are' b'generally' b'obvious'
    b'that' b'they' b'are' b'stationed' b'afterwards' b'at' b'a' b'<unk>' b'and' b'interface' b'<unk>' b'.' b'"' b'If' b'they' b'can' b'summed' b'up' b'the' b'capital'
    b'slip' b',' b'the' b'activities' b'can' b'have' b'taken' b'by' b'inappropriate' b'is' b'an' b'certain' b'character' b'.' b'Some' b'or' b'fewer' b'more' b'rows' b'were'
    b'trained' b'in' b'a' b'combined' b'breeding' b'lottery' b',' b'often' b'Meridian' b'or' b'contain' b'them' b'a' b'natural' b'block' b'to' b'multiple' b'mineral' b'Want' b'.'
    b'A' b'powerful' b'decree' b'notes' b'the' b'breast' b'of' b'1553' b'genuinely' b"'" b'American' b'behaviour' b',' b'and' b'eventually' b'impose' b'these' b'machines' b'.' b'The'
    b'Measure' b'has' b'<unk>' b'any' b'female' b'parrot' b',' b'and' b'by' b'the' b'ground' b'he' b'considered' b'by' b'known' b'help' b'.' b'He' b'gives' b'Gems'
    b'on' b'their' b'right' b'alone' b'with' b'she' b'assigns' b'the' b'protein' b'@-@' b'man' b'on' b'that' b'distance' b'.' b'Perhaps' b'his' b'will' b'so' b'just'
    b'maintained' b'by' b'Ceres' b',' b'resulting' b'for' b'the' b'first' b'females' b'to' b'be' b'doctrines' b',' b'and' b'also' b'escalated' b'and' b'<unk>' b'.' b'Many'
    b'players' b'sing' b'their' b'absolute' b'forehead' b'involving' b'themselves' b'and' b'spread' b'.' b'The' b'Wynne' b'fruitbodies' b'in' b'Jersey' b'stated' b'that' b'they' b'are' b'more'
    b'apparent' b',' b'often' b'cast' b'Algy' b',' b'that' b'he' b'would' b'find' b'the' b'introduction' b'of' b'humans' b'who' b'are' b'altogether' b'wish' b'.' b'storytelling'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 229.6
    loss: 5.164
    elapsed time (seconds): 156.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  30.491 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
