.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'remember' b'the' b'<unk>' b')' b'show' b'"' b'very' b'of' b'the' b'texture' b'"' b'.' b'At' b'normal' b'level' b',' b'surviving' b'and' b'<unk>' b'during'
    b'the' b'same' b'year' b'there' b'was' b'great' b'@-@' b'time' b'terrain' b'to' b'fly' b'on' b'other' b'sides' b',' b'but' b'they' b'began' b'to' b'be'
    b'modified' b',' b'only' b'tropical' b'or' b'place' b'in' b'Europe' b'.' b'<eos>' b'Habitat' b'was' b'found' b'sharply' b'after' b'this' b'race' b',' b'according' b'to'
    b'substantial' b'creatures' b',' b'can' b'be' b',' b'including' b'non' b'@-@' b'spored' b',' b'<unk>' b',' b'and' b'water' b'.' b'However' b',' b'this' b'with'
    b'hospitalization' b'led' b'from' b'protests' b'Chief' b'<unk>' b'James' b',' b'Neil' b'Ransome' b',' b'The' b'closer' b'iconography' b'of' b'"' b'Allah' b'"' b'to' b'promote'
    b'free' b'parrots' b',' b'"' b'<unk>' b'"' b'.' b'Before' b'one' b'@-@' b'central' b'part' b'(' b'pronounced' b'Man' b'Henry' b')' b',' b'Bad' b'figures'
    b'places' b'that' b'they' b'were' b'recreated' b'by' b'bishops' b',' b'"' b'very' b'researchers' b'were' b'originally' b'"' b'.' b'<eos>' b'Towards' b'this' b'point' b'he'
    b'has' b'many' b'other' b'groups' b',' b'which' b'can' b'be' b'featured' b'by' b'his' b'legs' b'for' b'Rothschilds' b'.' b'<unk>' b'group' b'"' b'Philip' b'in'
    b'all' b'rough' b'Day' b'is' b'far' b'to' b'become' b'Valerian' b'.' b'"' b'Similarly' b',' b'it' b'was' b'divided' b'for' b'that' b'next' b'songs' b'in'
    b'the' b'lead' b'Kingdom' b',' b'though' b'without' b'example' b'between' b'Carey' b'and' b'<unk>' b',' b'the' b'other' b'rounded' b'composition' b',' b'Brahma' b',' b'Maid'
    b',' b'<unk>' b',' b'grasses' b',' b'Shampain' b',' b'and' b'903' b'.' b'The' b'tagline' b'Researchers' b'a' b'fox' b',' b'which' b'tank' b'laid' b'the'
    b'opening' b'at' b'least' b'a' b'Biblical' b'survey' b'and' b'Laramide' b'judge' b'for' b'human' b'hearts' b'.' b'The' b'items' b'warns' b'their' b'father' b',' b'a'
    b'form' b'that' b'enter' b'any' b'of' b'the' b"'" b'Seas' b'arising' b"'" b'and' b'stomach' b'teachers' b'<unk>' b'far' b'display' b'not' b'so' b'from' b'them'
    b',' b'to' b'save' b'Paramount' b"'s" b'rape' b'scene' b'over' b'60' b'guys' b'at' b'an' b'attempt' b'"' b',' b'despite' b'support' b'we' b'that' b'twinned'
    b'in' b'2004' b'"' b';' b'despite' b'about' b'250' b'minutes' b'disputes' b'for' b'the' b'efforts' b'of' b'stroke' b'.' b'<eos>' b'O' b'facto' b'.' b"'"
    b"'Malley" b"'" b'Sun' b'is' b'pronounced' b'Berlioz' b'(' b'credited' b'<unk>' b'titles' b')' b'and' b'can' b'have' b'surrounded' b'Ashurbanipal' b'that' b'are' b'a' b'staples'
    b'species' b'.' b'<eos>' b'This' b'first' b'becomes' b'"' b'highly' b'different' b'in' b'protagonist' b'but' b'essential' b'me' b'over' b'as' b'a' b'domestic' b'worship' b'"'
    b'.' b'She' b'finished' b'everything' b'on' b'several' b'occasions' b'of' b'God' b',' b'while' b'of' b'males' b',' b'common' b'abilities' b'married' b'accommodates' b'such' b'as'
    b'biblical' b'work' b'.' b'instituted' b'in' b'Jurek' b',' b'it' b'also' b'turned' b'appear' b'and' b'adopted' b'other' b'estimates' b',' b'such' b'as' b'the' b'speaking'
    b'tama' b'opposing' b'Lithuania' b';' b'.' b'The' b'show' b'was' b'also' b'inherited' b'by' b'Odaenathus' b'.' b'The' b'<unk>' b'of' b'Old' b'Arthur' b'Kreeft' b"'"
    b']' b'Plantain' b'seemed' b'up' b'the' b'accusations' b'<unk>' b'after' b'flames' b'.' b'The' b'game' b'has' b'a' b'common' b'armament' b'that' b'has' b'once' b'been'
    b'identified' b'as' b'part' b'of' b'influence' b'outside' b'short' b'of' b'an' b'few' b'other' b'dimensions' b',' b'while' b'some' b'manufacturers' b'wings' b'are' b'master' b'.'
    b'The' b'first' b'kakapo' b'credit' b'of' b'the' b'series' b'of' b'his' b'secretive' b'phylogenetic' b'\xce\xb2' b'causes' b'ground' b'@-@' b'by' b'@-@' b'hand' b'cell' b','
    b'as' b'so' b'Abbey' b'judge' b'may' b'be' b'seen' b'on' b'a' b'doctor' b'.' b'<eos>' b'The' b'plumage' b'version' b'of' b'Kirkpatrick' b'against' b'the' b'Solar'
    b'family' b'is' b'rich' b'script' b',' b'with' b'fear' b'which' b'reach' b'large' b'opportunity' b'.' b'The' b'males' b'employed' b'by' b'other' b'late' b'human' b'deposits'
    b'comes' b'into' b'the' b'third' b'soil' b'with' b'refraction' b'.' b'The' b'serialization' b'inspired' b'it' b'around' b'a' b'surgical' b'planet' b'that' b'replaced' b'him' b'away'
    b'to' b'a' b'new' b'resolution' b';' b'on' b'the' b'battlefield' b'.' b'Manor' b'can' b'be' b'killed' b'to' b'chroniclers' b',' b'a' b'copper' b'in' b'poor'
    b'the' b'political' b'<unk>' b',' b'then' b'they' b'are' b'edges' b'.' b'Like' b'his' b'females' b'administered' b'him' b',' b'the' b'social' b'colour' b'foil' b'is'
    b'among' b'ancestor' b'in' b'priest' b"'s" b'and' b'a' b'guide' b'post' b'.' b'<eos>' b'Foster' b'(' b'A' b'disputes' b'of' b'europium' b'-' b'water' b'theory'
    b')' b',' b'some' b'probably' b'ibotenic' b'den' b'shows' b'about' b'properties' b'.' b'Other' b'could' b'be' b'thicker' b'(' b'called' b')' b',' b'3' b'@.@'
    b'4' b',' b'40' b'\xe2\x80\x93' b'3' b'feet' b'(' b'9' b'@.@' b'5' b'mi' b')' b'and' b'other' b'plants' b'ranges' b'for' b'a' b'thousand' b'cm'
    b'(' b'4' b'@.@' b'2' b'mi' b')' b'to' b'refuse' b',' b'and' b'yellowish' b'gills' b'occurs' b'out' b'.' b'Fish' b'occupies' b'Skye' b'<unk>' b'arrives'
    b',' b'<unk>' b',' b'and' b'hot' b'other' b'brown' b'button' b',' b'commenting' b'as' b'any' b'or' b'realistic' b'ceratopsids' b',' b'so' b'unlike' b'other' b'elemental'
    b',' b'encourage' b'low' b'or' b'144' b'eggs' b'old' b',' b'99' b'@.@' b'5' b'%' b'of' b'females' b'estimates' b',' b'a' b'total' b'of' b'gold'
    b'compared' b'or' b'well' b'favours' b'grey' b'trees' b'.' b'A' b'star' b')' b'of' b'<unk>' b',' b'monogamous' b',' b'water' b',' b'and' b'nocturnal' b','
    b'is' b'(' b'Concerto' b')' b'and' b',' b'and' b'as' b'it' b'never' b'unnamed' b'the' b'feeding' b'parrot' b'.' b'The' b'tail' b',' b'slightly' b'distinct'
    b',' b'consists' b'of' b'Homs' b'to' b'Brown' b'fuse' b',' b'while' b'because' b'she' b'only' b'the' b'earlier' b'Immortals' b'to' b'be' b'related' b'.' b'<eos>'
    b'The' b'fruiting' b'portrayal' b'of' b'the' b'kakapo' b'finds' b'a' b'small' b'.' b'It' b'enjoyed' b'fewer' b'minutes' b':' b'results' b'deaths' b',' b'and' b'the'
    b'bird' b"'s" b'pupils' b'<unk>' b'Johan' b'<unk>' b'for' b'close' b'Lang' b'and' b'flesh' b'trees' b'.' b'The' b'cap' b',' b'these' b'figures' b'of' b'green'
    b',' b'and' b'house' b'some' b'shooting' b'from' b'it' b'for' b'their' b'food' b'.' b'As' b'however' b',' b'or' b'two' b'females' b'injuries' b'pays' b'dry'
    b'their' b'head' b'maintenance' b'<unk>' b',' b'and' b'(' b'830' b'with' b'iron' b')' b',' b'gone' b'for' b'food' b'.' b'A' b'mycelium' b'art' b'prepared'
    b'through' b'males' b',' b'possibly' b'Greek' b',' b'pointing' b'along' b'to' b'up' b'place' b'(' b'inside' b'the' b'night' b')' b'that' b'left' b'pretty' b'robust'
    b'ringing' b',' b'<unk>' b',' b'gripping' b',' b'<unk>' b',' b'<unk>' b'and' b',' b'secondary' b',' b'sky' b',' b'mechanical' b'beams' b'nearby' b'agent' b'<unk>'
    b'(' b'<unk>' b'lecturing' b')' b',' b'commander' b'or' b'dissolving' b'develop' b'fin' b',' b'wind' b'physical' b',' b'or' b'lightning' b'.' b'<eos>' b'Several' b'hundred'
    b'starlings' b'are' b'documented' b',' b'helping' b'by' b'teeth' b'whose' b'current' b'mitosis' b'by' b'the' b'decrees' b'of' b'bard' b'.' b'If' b'they' b'call' b','
    b'Group' b'floating' b'her' b'to' b'air' b'its' b'nucleus' b'then' b'enter' b'them' b'.' b'Yet' b'with' b'factors' b',' b'Stevens' b'turns' b'to' b'the' b'northeast'
    b'.' b'Earlier' b',' b'it' b'may' b'be' b'highly' b'adolescence' b',' b'including' b'other' b'birds' b'unless' b'by' b'late' b'reading' b'age' b',' b'attacks' b'usually'
    b'face' b'Kaemtjenent' b'has' b'it' b'literacy' b'a' b'mixture' b'of' b'predators' b'below' b'a' b'face' b'when' b'they' b'had' b'affected' b'as' b'sounds' b'to' b'v.'
    b'odor' b'.' b'<eos>' b'Since' b'females' b'are' b'their' b'fundamental' b'nature' b'may' b'be' b'found' b'in' b'relation' b'for' b'their' b'host' b',' b'whereas' b'there'
    b'are' b'no' b'small' b'eggs' b':' b'"' b'The' b'head' b'<unk>' b'"' b'<eos>' b'<unk>' b'or' b'expression' b'off' b'lower' b'starlings' b'and' b'diatoms' b'and'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 231.0
    loss: 5.164
    elapsed time (seconds): 157.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  33.417 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
