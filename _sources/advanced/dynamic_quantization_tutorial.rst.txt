.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'the' b'existence' b'of' b'realizes' b'specimen' b'and' b'Mulder' b',' b'showing' b'large' b'improvements' b'of' b'social' b'Kenai' b'movement' b',' b'on' b'a' b'end' b'that'
    b'enabled' b'the' b'desired' b'flag' b'.' b'No' b'@-@' b'term' b'vessels' b'shoot' b'save' b'instrument' b'@-@' b'composition' b'due' b'to' b'some' b'organelle' b'.' b'After'
    b'this' b'technique' b',' b'Vandernoot' b'is' b'killed' b'by' b'cats' b'.' b'Polyurethane' b'mineral' b'suggests' b'that' b'there' b'were' b'no' b'evolution' b'in' b'without' b'war'
    b'and' b'Coffin' b'species' b',' b'the' b'amount' b'of' b'controversy' b'or' b'religious' b'planners' b',' b'though' b'others' b'they' b'sounds' b'the' b'empire' b'.' b'Further'
    b',' b'creating' b'publishers' b'wards' b',' b'food' b'wish' b'and' b'pictured' b'vengeance' b'grasses' b'sporting' b'Dolphins' b',' b'they' b'gives' b'them' b'to' b'up' b'special'
    b'CAC' b"'ohang" b'as' b'they' b'look' b'together' b'to' b'be' b'a' b'medium' b'or' b'buff' b'@-@' b'Alpha' b'.' b'morally' b'occurs' b'on' b'a' b'product'
    b'of' b'Sicily' b'(' b'Regina' b'1955' b')' b',' b'typically' b'specific' b'whitish' b'spectra' b'because' b'of' b'the' b'presence' b'of' b'the' b'DNA' b'.' b'Others'
    b'occur' b'with' b'eukaryotic' b'@-@' b'yellow' b'head' b',' b'they' b'feed' b'on' b'their' b'results' b'with' b'Russian' b'number' b'use' b'to' b'"' b'heavy' b'oribi'
    b'with' b'a' b'disk' b'to' b'be' b'observed' b'Julius' b'Affleck' b'...' b'that' b'is' b'incorporated' b'to' b'turn' b'off' b'by' b'being' b'lost' b'in' b'good'
    b'Islamic' b',' b'and' b'may' b'be' b'one' b'of' b'his' b'male' b',' b'but' b'others' b'still' b'expertise' b'"' b'.' b'As' b'seen' b'as' b'God'
    b'the' b'roots' b'of' b'males' b'will' b'be' b'attempt' b'to' b'be' b'kind' b'of' b'movement' b'hair' b'or' b'indeed' b',' b'Ireland' b',' b'became' b'thus'
    b'visible' b'to' b'schedule' b'if' b'adults' b'migrate' b'to' b'the' b'philosophical' b'characters' b'in' b'the' b'activity' b',' b'when' b'other' b'opportunities' b'suggests' b'what' b'the'
    b'Solar' b'planet' b'lists' b'its' b'children' b'.' b'The' b'heart' b'of' b'<unk>' b'due' b'to' b',' b'and' b'have' b'both' b'<unk>' b'interests' b'for' b'them'
    b'as' b',' b'being' b'also' b'attested' b'.' b'When' b'they' b'were' b'Menkauhor' b'Toirdelbach' b"'" b'characters' b',' b'venom' b'cannot' b'be' b'another' b'cream' b'allowed'
    b'in' b'a' b'planet' b'as' b'passed' b'by' b'a' b'impact' b"'s" b'ex' b'@-@' b'level' b'sense' b':' b'"' b'What' b'should' b'have' b'finite' b'it'
    b'to' b'the' b'document' b',' b'it' b'has' b'not' b'been' b"'s" b'trouble' b'.' b'"' b'A' b'member' b'of' b'only' b'nine' b'title' b'\xe2\x80\x94' b'on'
    b'the' b'2015' b'hand' b'basis' b',' b'<eos>' b'<eos>' b'=' b'=' b'<unk>' b'=' b'=' b'<eos>' b'<eos>' b'The' b'location' b'of' b'Palmyra' b'was' b'in'
    b'reforms' b'as' b'heavy' b'transmitting' b'.' b'<eos>' b'The' b'kakapo' b'depends' b'on' b',' b'Hindi' b',' b'Karankawa' b'<unk>' b',' b'emanating' b',' b'and' b'<unk>'
    b',' b'after' b'almost' b'<unk>' b'their' b'character' b'.' b'Therefore' b',' b'<unk>' b',' b'climbing' b',' b'accurate' b',' b'naval' b'foxes' b',' b'and' b'physical'
    b'fascination' b'that' b'pull' b'while' b'thus' b'preferred' b'autobiographical' b'offenders' b'.' b'This' b'may' b'be' b'restored' b'in' b'both' b'interphase' b'.' b'Various' b'stages' b'are'
    b'and' b'appraisal' b'v' b',' b'resulting' b'by' b'other' b'nuclei' b',' b'whereas' b'other' b'starlings' b'in' b'society' b'often' b'said' b'the' b'planet' b'/' b'lives'
    b'hold' b'the' b'presence' b'of' b'rocky' b'he' b'gradually' b'greatly' b'traded' b'to' b'12' b'or' b'more' b'stronger' b'stress' b'.' b'The' b'water' b'includes' b'teams'
    b'for' b'a' b'guitar' b'allow' b'with' b'some' b'others' b'with' b'Ceres' b'from' b'genus' b'that' b'he' b'may' b'run' b'their' b'gray' b'<unk>' b'"' b'Most'
    b'known' b'"' b',' b'and' b'privately' b'later' b'prompts' b'of' b'forces' b'such' b'as' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'dubium'
    b',' b'killer' b',' b'etc' b',' b'Notting' b'Jacques' b'wasps' b'for' b'<unk>' b'and' b'goods' b',' b'Husband' b',' b'<unk>' b',' b'<unk>' b'and' b'tularemia'
    b'.' b'The' b'DNA' b'is' b'currently' b'engaged' b'there' b',' b'<unk>' b'symptom' b'throughout' b'the' b'kingdoms' b'of' b'486' b'.' b'In' b'China' b',' b'he'
    b'Zero' b'the' b'press' b',' b'commenting' b'the' b'succession' b'of' b'priest' b'during' b'1859' b'.' b'Hinds' b'involved' b'or' b'prevented' b'small' b'towards' b'some' b'other'
    b'behaviour' b':' b'the' b'OH' b'@-@' b'shaped' b'wind' b'of' b'High' b'starling' b'in' b'Ireland' b',' b'and' b'Nellie' b'in' b'northern' b'.' b'<eos>' b'Right'
    b'prey' b'had' b'cameos' b'a' b'number' b'of' b'Crash' b'der' b'Bang' b'al' b'/' b'Observations' b'five' b'steps' b'later' b',' b'<unk>' b'@-@' b'eyed' b','
    b'the' b'ischemic' b'Vatican' b'Rusticana' b'Church' b'and' b'female' b'flourishing' b'(' b'a' b'balloon' b')' b'and' b'kakapo' b'.' b'<unk>' b'into' b'Karen' b'Lydekker' b'arm'
    b'classifies' b'exposure' b',' b'the' b'other' b'polyurethane' b'which' b'may' b'be' b'seen' b'temperate' b',' b'although' b'their' b'old' b'nuclei' b'can' b'be' b'influenced' b'by'
    b'girlfriends' b'.' b'Both' b'@-@' b'behaviour' b'eat' b'feathers' b'have' b'been' b'at' b'all' b'different' b'male' b'cars' b'where' b'if' b'some' b'killed' b'remaining' b'by'
    b'proper' b'membrane' b'Edmund' b'details' b'the' b'growth' b'of' b'the' b'<unk>' b',' b'the' b'Taoist' b'government' b'being' b'a' b'gleba' b'of' b'roofs' b'.' b'<eos>'
    b'Construction' b'of' b'prose' b'of' b'Hartmann' b'stores' b'(' b'arranged' b'as' b'the' b'first' b'mention' b'of' b'the' b'Arabian' b',' b'more' b'than' b'3' b'million'
    b'individuals' b',' b'only' b'1' b'kilometres' b'per' b'minute' b')' b',' b'during' b'mechanism' b'and' b'even' b'killing' b'at' b'least' b'50' b'million' b'.' b'The'
    b'helmet' b'body' b'Turanoceratops' b',' b'and' b'with' b'much' b'yellowish' b',' b'cluster' b',' b'or' b'parts' b'of' b'their' b'effectiveness' b'.' b'In' b'South' b'America'
    b'who' b'carried' b'feathers' b'and' b'flowers' b'of' b'the' b'Protestant' b'starling' b',' b'like' b'less' b'than' b'over' b'5' b',' b'and' b'a' b'tiger' b'of'
    b'cash' b'are' b'a' b'1' b'@-@' b'bayonet' b'language' b',' b'which' b'are' b'back' b'upon' b'to' b'obtain' b'a' b'eye' b',' b'but' b'they' b'do'
    b'any' b'day' b'as' b'.' b'Many' b'or' b'more' b'carts' b'of' b'paths' b'are' b'audio' b',' b'b6' b'or' b'<unk>' b'.' b'As' b'to' b'work'
    b',' b'they' b'may' b'choose' b'up' b'to' b'up' b'three' b'months' b'but' b'less' b'codified' b'.' b'After' b'one' b'million' b',' b'they' b'are' b'youths'
    b'too' b'on' b'a' b'single' b'hand' b'when' b'they' b'lays' b'dark' b'observation' b'.' b'This' b'variation' b'in' b'interphase' b'by' b'sweet' b'alludes' b':' b'for'
    b'example' b',' b'and' b'chicks' b'see' b'their' b'ears' b'room' b'where' b'one' b'19th-' b'unemployment' b'@-@' b'like' b',' b'spout' b'@-@' b'frequency' b'or' b'developer'
    b'spaces' b',' b'associating' b'Hottest' b'and' b'knowledge' b'of' b'spots' b'.' b'As' b'tournament' b'expression' b'can' b'have' b'seen' b',' b'they' b'declines' b'small' b','
    b'one' b'and' b'more' b'successful' b'gravity' b'on' b'the' b'soil' b'and' b'alter' b'them' b'to' b'play' b'.' b'Finally' b',' b'old' b'@-@' b'eared' b'eggs'
    b'by' b'<unk>' b'and' b'mysticism' b'found' b'<unk>' b',' b'and' b'the' b'Euphrates' b'host' b'mushrooms' b'of' b'meat' b'.' b'At' b'least' b'one' b'of' b'the'
    b'birds' b',' b'such' b'as' b'Old' b'acids' b'can' b'find' b'a' b'bird' b'to' b'place' b'the' b'function' b'of' b'converge' b'.' b'Although' b'they' b'help'
    b'booms' b',' b'they' b'might' b'prefer' b'a' b'poor' b'subunits' b'side' b',' b'though' b'their' b'longer' b'waves' b'may' b'have' b'been' b'confined' b'to' b'legs'
    b',' b'piece' b'instead' b'of' b'listed' b'into' b'how' b'dumping' b'or' b'ease' b'.' b'Garman' b'can' b'be' b'observed' b'by' b'them' b'of' b'burns' b','
    b'of' b'<unk>' b',' b'crop' b',' b'and' b'<unk>' b'six' b'severe' b'isotopes' b'of' b'mature' b'eggs' b',' b'which' b'may' b'be' b'have' b'very' b'associated'
    b'reasonable' b'or' b'relatively' b'of' b'them' b'to' b'be' b'careful' b',' b'by' b'their' b'forward' b'body' b'of' b'other' b'feeding' b'by' b'green' b'starlings' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 224.5
    loss: 5.168
    elapsed time (seconds): 151.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  21.317 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
