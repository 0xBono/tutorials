.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'but' b'through' b'the' b'next' b'half' b',' b'<unk>' b'and' b'Jackie' b'Perrin' b'(' b'Scarlett' b'in' b'immediate' b'bodies' b')' b'learned' b'so' b'printed'
    b',' b'together' b'that' b'would' b'be' b'put' b'down' b'28th' b'State' b'and' b'the' b'Baltimore' b',' b'resulting' b'by' b'Godsmack' b'by' b'a' b'or' b'lesser'
    b'spelling' b'.' b'G.' b'teaching' b'the' b'nest' b'around' b'the' b'clerk' b',' b'after' b'persecuted' b'a' b'arrangement' b'after' b'valid' b'praising' b'the' b'city' b','
    b'laying' b'something' b'only' b'to' b'severe' b',' b'giving' b'the' b'two' b'labor' b'cathedral' b'to' b'leave' b'for' b'a' b'sense' b'of' b'inaccurately' b'.' b'The'
    b'kakapo' b'is' b'few' b'different' b'squadrons' b'by' b'the' b'hundred' b'.' b'It' b'is' b'one' b'of' b'the' b'main' b'city' b'nine' b'stories' b'for' b'noisy'
    b'One' b"'" b'Shipbuilding' b'Special' b',' b'and' b'all' b'her' b'report' b'Stockton' b'.' b'Due' b'to' b'be' b'composite' b'fighting' b',' b'the' b'Blue' b'<unk>'
    b'are' b'<unk>' b'severely' b'as' b',' b'touching' b'a' b'Serge' b'@-@' b'containing' b'sequence' b'empty' b'.' b'<eos>' b'massacre' b'&' b'<unk>' b'<eos>' b'<eos>' b'In'
    b'the' b'autumn' b'of' b'World' b'War' b'I' b'was' b'signed' b'by' b'two' b'screens' b'on' b'Center' b',' b'MacLeod' b',' b'was' b'writing' b'to' b'build'
    b'North' b'America' b'.' b'The' b'G\xc3\xa1lvez' b'Review' b'of' b'Ancients' b'was' b'also' b'a' b'member' b'of' b'<unk>' b',' b'in' b'the' b'United' b'Kingdom' b'and'
    b'Canada' b',' b'which' b'is' b'considered' b'of' b'Forbes' b'Province' b'.' b'As' b'Marjorie' b'margins' b'had' b'three' b'days' b',' b'<unk>' b'the' b'other' b'profound'
    b'exact' b'championship' b'tracks' b'that' b'will' b'be' b'killed' b'.' b'In' b'relation' b',' b'they' b'were' b'attempting' b'to' b'be' b'found' b'to' b'be' b'filled'
    b'to' b'Scottish' b',' b'and' b'even' b'resemble' b'Isiah' b'control' b'.' b'About' b'9' b'\xc2\xb5g' b'yd' b'vital' b'points' b'on' b'the' b'islands' b'at' b'one'
    b'of' b'the' b'same' b'surface' b',' b'arriving' b'in' b'the' b'country' b'drawbacks' b'(' b'<unk>' b')' b',' b'generation' b',' b'and' b'1' b'million' b'('
    b'language' b')' b',' b'formal' b'(' b'2004' b')' b'and' b'1821' b'.' b'The' b'Baghdad' b'were' b'moved' b'into' b'desolate' b'in' b'nuclear' b'England' b'by'
    b'their' b'remnants' b'to' b'strict' b'cotton' b',' b'roughly' b'such' b'at' b'every' b'insurgency' b'in' b'22' b'@.@' b'5' b'million' b'wood' b'(' b'up' b'to'
    b'with' b'more' b',' b'59' b'percent' b',' b'and' b'1' b'@.@' b'17' b'mph' b')' b',' b'a' b'value' b'Mansion' b'published' b'slowly' b'1859' b'('
    b'Michael' b'<unk>' b')' b',' b'its' b'Bruges' b'already' b'connected' b'to' b'east' b'branch' b'of' b'the' b'main' b'season' b'before' b'they' b'will' b'<unk>' b'out'
    b'that' b'there' b'are' b'no' b'damaged' b'system' b'to' b'it' b',' b'and' b'supportive' b'gains' b',' b'for' b'over' b'half' b',' b'respectively' b'.' b'<eos>'
    b'The' b'absence' b'of' b'much' b'\xe2\x80\x93' b'developed' b'inhabitants' b'are' b'identical' b'.' b'In' b'comparison' b',' b'Clamp' b'defeated' b'Australia' b'(' b'Doctor' b'Iberia' b')'
    b',' b'Theakston' b'at' b'telecast' b'in' b'died' b'@-@' b'Duchy' b'in' b'the' b'crowd' b'.' b'His' b'third' b'form' b'to' b'be' b'legislation' b'in' b'only'
    b'place' b',' b'using' b'over' b'7' b'million' b'or' b'depending' b'down' b'into' b'comedic' b'minigames' b'.' b'When' b'same' b'potential' b',' b'when' b'10' b','
    b'other' b'are' b'the' b'more' b'improving' b'classification' b'by' b'those' b'of' b'William' b'360' b',' b'he' b'makes' b'abused' b'portion' b'of' b'nature' b',' b'and'
    b'above' b'a' b'level' b'that' b'will' b'be' b'angry' b'as' b'they' b'can' b'help' b'to' b'be' b'bound' b'by' b'life' b'.' b'He' b'is' b'paternal'
    b'in' b'705' b',' b'showing' b'most' b'short' b'Playboy' b',' b'or' b'numerous' b'items' b'and' b'economic' b'food' b'with' b'them' b'just' b'<unk>' b'.' b'pairs'
    b'also' b'affect' b'the' b'host' b'Bright' b'<unk>' b'of' b'Pugliese' b',' b'gases' b'include' b'their' b'eye' b'at' b'the' b'point' b'and' b'<unk>' b'de' b'boats'
    b'.' b'Nothing' b'are' b'known' b'as' b'additional' b',' b'heavy' b'while' b'reworking' b'by' b'road' b'patterns' b',' b'as' b'she' b'has' b'reached' b'shelter' b'in'
    b'linear' b'groups' b'and' b'one' b'counterpart' b',' b'motion' b'back' b'to' b'biting' b'significantly' b'.' b'Entrance' b'and' b'any' b'concentrates' b'occurred' b'into' b'its' b'main'
    b'sports' b'force' b',' b'and' b'does' b'not' b'fly' b'than' b'leads' b'.' b'Additionally' b',' b'near' b'an' b'distance' b'after' b'calls' b'to' b'its' b'threats'
    b'on' b'about' b'4' b'%' b'of' b'the' b'mastaba' b'in' b'0' b'cm' b'(' b'5' b'@.@' b'2' b'in' b')' b'in' b'length' b',' b'a'
    b'nuclear' b'female' b'exists' b'on' b'<unk>' b',' b'two' b'distant' b'years' b'is' b'often' b'<unk>' b'.' b'Mycological' b'land' b'male' b'is' b'being' b'widely' b'found'
    b'disassembly' b'over' b'high' b'and' b'females' b'.' b'They' b'are' b'probably' b'pale' b'find' b'to' b'length' b'the' b'imitation' b'on' b'its' b'lane' b',' b'while'
    b'their' b'electro' b'small' b'chromosomes' b'are' b'complicated' b',' b'Wales' b',' b'63' b'or' b'28' b'show' b',' b'and' b'six' b'specimens' b'blocked' b'the' b'eye'
    b',' b'one' b'from' b'the' b'night' b'as' b'did' b'switching' b'to' b'fly' b'around' b'100' b'\xc2\xb0' b'eggs' b'.' b'Although' b'many' b'females' b'is' b'standing'
    b',' b'beyond' b'instance' b'the' b'bird' b'also' b'their' b'biggest' b'behaviour' b'to' b'enter' b'right' b'Prairie' b'characteristics' b'such' b'as' b'ear' b'<unk>' b',' b'Bangalore'
    b'<unk>' b'Vogler' b',' b'<unk>' b'organisations' b'and' b'juveniles' b'males' b';' b'they' b'gradually' b'Maian' b'greater' b'starlings' b'of' b'nesting' b'particles' b'rose' b'by' b'small'
    b'pink' b'shapes' b'.' b'<eos>' b'The' b'female' b'of' b'the' b'kakapo' b'with' b'humans' b',' b'over' b'slightly' b',' b'and' b'stadium' b',' b'eye' b'tunnels'
    b',' b'<unk>' b',' b'Junior' b',' b'and' b'mycelial' b'AD' b',' b'they' b'are' b'staying' b'into' b'angel' b'(' b'no' b'as' b'the' b'red' b')'
    b',' b'and' b'in' b'which' b'which' b'are' b'bright' b',' b'with' b'<unk>' b',' b'<unk>' b',' b'sharp' b'cells' b',' b'and' b'other' b'<unk>' b'.'
    b'Also' b',' b'they' b'confess' b'that' b'there' b'was' b'<unk>' b'feeding' b'Kennedy' b'firms' b'and' b'avenged' b'it' b'.' b'This' b'has' b'corners' b'of' b'several'
    b'molecules' b'on' b'the' b'existence' b'of' b'other' b'birds' b'.' b'reformer' b'Emmet' b"'s" b'wit' b'(' b'Veblen' b')' b'is' b'proteins' b',' b'may' b'need'
    b',' b'and' b'angles' b'may' b'be' b'absent' b'for' b'tourism' b'.' b'Males' b'also' b'breed' b'consumed' b'in' b'the' b'low' b'<unk>' b'size' b',' b'and'
    b'may' b'be' b'<unk>' b'.' b'subnuclear' b'primary' b',' b'they' b'may' b'be' b'distinguished' b'by' b'oldest' b'Wood' b'<unk>' b'.' b'There' b'are' b'not' b'than'
    b'specific' b'terrifying' b'fluency' b',' b'it' b'booms' b'today' b'when' b'they' b'<unk>' b',' b'so' b'his' b'competitors' b'usually' b'were' b'eroded' b'or' b'career' b'as'
    b'they' b'<unk>' b'.' b'If' b'cum' b'flocks' b'believed' b'that' b'they' b'can' b'understand' b'one' b'trees' b'is' b'"' b'<unk>' b'with' b'fresh' b',' b'<unk>'
    b'there' b'is' b'alder' b'sunny' b',' b'decaying' b'Species' b',' b'divided' b'a' b'tooth' b'depicting' b'smell' b'of' b'Magdalen' b'potential' b'"' b'.' b'Your' b'worm'
    b'fraction' b'declined' b',' b'especially' b'under' b'the' b'possibility' b'that' b'the' b'European' b'language' b'is' b'comparable' b'.' b'Common' b'North' b'factions' b'kept' b'only' b'have'
    b'been' b'the' b'village' b"'s" b'rich' b'Malay' b'traders' b'.' b'Mount' b'Brat' b'then' b'adopted' b'benign' b'patterns' b'under' b'<unk>' b'Motors' b',' b'which' b'she'
    b'has' b'severe' b'water' b'methods' b',' b'New' b'Zealand' b'(' b'Rifle' b'algae' b')' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Ecology' b'=' b'=' b'<eos>'
    b'<eos>' b'Common' b'starlings' b'departed' b'about' b'2' b'million' b'in' b'depths' b'and' b'allow' b'speckles' b'by' b'presiding' b',' b'even' b'the' b'quiet' b'western' b'or'
    b'more' b'flightless' b'sites' b'as' b'they' b'normally' b'be' b'of' b'primary' b',' b'so' b'it' b'<unk>' b'their' b'home' b'clubs' b',' b'covering' b'every' b'simple'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.8
    loss: 5.168
    elapsed time (seconds): 156.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  26.360 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
