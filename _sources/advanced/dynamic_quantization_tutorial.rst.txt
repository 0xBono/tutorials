.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Greenwich' b'weapons' b'.' b'The' b'accounts' b'of' b'257' b'clothing' b'took' b'place' b'as' b'a' b'tutor' b'of' b'over' b'22' b'%' b'.' b'Anupama' b'had'
    b'a' b'cold' b'record' b',' b'the' b'age' b'of' b'5' b',' b'Venus' b'Burkettsville' b',' b'to' b'five' b'bird' b'if' b'these' b'beachfront' b'needs' b','
    b'he' b'appears' b'to' b'discover' b'<unk>' b'enough' b'after' b'this' b'other' b'race' b'to' b'produce' b'as' b'they' b'can' b'severely' b'give' b'.' b'<eos>' b'But'
    b'though' b'signs' b'of' b'what' b'constitute' b'her' b'intention' b',' b'the' b'head' b'died' b'about' b'melting' b'or' b'.50' b'.' b'A' b'key' b'cage' b'soon'
    b'made' b'fates' b'the' b'supervision' b'of' b'<unk>' b'due' b'to' b'different' b'291' b'conditions' b'under' b'hungry' b'policy' b'.' b'This' b'rough' b'leaves' b'decreased' b'to'
    b'find' b'or' b'failed' b'as' b'he' b'mentions' b'of' b'perpetuating' b',' b'and' b'could' b'certainly' b'earn' b'physical' b'goals' b'.' b'Accordingly' b',' b'Humpty' b"'Malley"
    b'Triumph' b'is' b'exposed' b'or' b'<unk>' b'during' b'October' b'.' b'He' b'<unk>' b'the' b'age' b'of' b'a' b'bell' b'coverage' b'regions' b'.' b'Later' b'this'
    b'bird' b'tell' b'Ceres' b',' b"'" b'Catholicism' b'Are' b'speaks' b',' b'displaying' b'pressure' b'to' b'be' b'overlooked' b'.' b'They' b'must' b'be' b'tortured' b'in'
    b'France' b'.' b'The' b'shattering' b'\xe2\x80\x94' b'in' b'either' b'constant' b',' b'verses' b'blood' b',' b'reveals' b'the' b'concept' b'of' b'physically' b'.' b'The' b'tasks'
    b'of' b'folktales' b'seems' b'earlier' b'when' b'manuscripts' b'have' b'since' b'heated' b'Ceres' b'.' b'They' b'inflicted' b'during' b'this' b'play' b'are' b'shared' b'as' b'.'
    b'If' b'guarantee' b'by' b'only' b'female' b'Li' b'ships' b'dominated' b'by' b'competition' b';' b'it' b'does' b'not' b'be' b'killed' b'up' b'like' b'their' b'sex'
    b'being' b'discovered' b';' b'and' b'their' b'leader' b'finds' b'him' b'other' b'tales' b'to' b'take' b'their' b'<unk>' b'a' b'mixing' b'.' b'As' b'a' b'mirror'
    b',' b'brings' b'of' b'widely' b'pun' b'when' b'they' b'story' b',' b'or' b'prepare' b'.' b'<eos>' b'Crash' b'Innocent' b'Garrett' b'records' b'was' b'pictures' b'for'
    b'required' b'ASCAP' b'that' b'even' b'charged' b'on' b'Commentators' b'when' b'such' b'eighth' b'the' b'female' b'show' b',' b'so' b'stood' b'on' b'the' b'compromise' b'by'
    b'Ishmael' b'in' b'the' b'series' b'via' b'an' b'Viking' b'area' b'.' b'Lone' b'ferreum' b'was' b'integral' b'to' b'floating' b'films' b',' b'and' b'<unk>' b'no'
    b'their' b'own' b'preoccupation' b'to' b'simulate' b'them' b'to' b'obtain' b'a' b'eye' b'or' b'typical' b'them' b'to' b'stand' b'more' b'Wives' b'.' b'<eos>' b'In'
    b'their' b'first' b'game' b'she' b'helps' b'a' b'reputation' b'at' b'night' b'to' b'run' b'cheerful' b'the' b'Leeward' b'woman' b',' b'typecast' b'a' b'mind' b'by'
    b'guard' b',' b'faithful' b'burn' b'leaves' b',' b'evidently' b'fast' b'Chinese' b'particles' b'of' b'Sitriuc' b'and' b'theft' b'.' b'These' b'colony' b'are' b'given' b'by'
    b'practical' b'Adams' b',' b'and' b'the' b'clutch' b'sustained' b'the' b'eggs' b'and' b'kill' b'him' b'themselves' b'.' b'Large' b'blacks' b'have' b'located' b'in' b'words'
    b'that' b'later' b'marry' b'the' b'notices' b'of' b'their' b'arc' b'and' b'thirty' b'\xe2\x80\x93' b'Irish' b'space' b'or' b'tries' b'.' b'<eos>' b'A' b'short' b'inscription'
    b'of' b'Ceres' b'composed' b'on' b'December' b'2' b'they' b'collapsed' b'regarding' b'their' b'allies' b'.' b'the' b'story' b'after' b'the' b'symbol' b'of' b'traps' b')'
    b'is' b'greater' b'.' b'When' b'there' b'are' b'no' b',' b'minimal' b'@-@' b'interest' b',' b'the' b'other' b'permitted' b'status' b'of' b'solitaire' b'(' b'even'
    b'spored' b'at' b'this' b'other' b'lawyers' b')' b'.' b'<eos>' b'A' b'Grade' b"'s" b'shop' b',' b'a' b'lecturer' b'above' b'the' b'kakapo' b'as' b'the'
    b"'" b'Ness' b'organs' b'(' b'Matthew' b')' b';' b'Due' b'to' b'a' b'number' b'of' b'expound' b'to' b'other' b',' b'although' b'less' b'more' b'successful'
    b'as' b'Arabic' b'in' b'columns' b'close' b'to' b'a' b'growing' b'climax' b'it' b'....' b'Many' b'or' b'others' b'from' b'other' b'other' b'Jiu' b'(' b'introduction'
    b')' b'when' b'xenon' b'will' b'be' b'white' b'.' b'Their' b'great' b'interest' b'are' b'pushing' b'microtubules' b'against' b'slower' b',' b'especially' b'their' b'followers' b'Four'
    b'kilometres' b'and' b'sustained' b'it' b'away' b'.' b'<eos>' b'<eos>' b'=' b'=' b'1986' b'=' b'=' b'<eos>' b'<eos>' b'The' b'story' b'of' b'grievances' b'have'
    b'reduced' b'numbers' b'of' b'scholars' b'of' b'human' b'arts' b',' b'but' b'by' b'1200' b'sources' b',' b'<unk>' b'Angus' b'may' b'Squirtle' b'or' b'sea' b'laser'
    b'paper' b'.' b'Galway' b'(' b'major' b'arise' b'suggest' b'they' b'may' b'"' b'ever' b'<unk>' b'"' b')' b'as' b'they' b'are' b'crowded' b'vital' b'due'
    b'to' b'his' b'M\xc4\x81ori' b'.' b'Up' b',' b'since' b'the' b'broad' b'@-@' b'fashioned' b',' b'the' b'sighting' b'feathers' b'are' b'infested' b'for' b'embryo' b'.'
    b'While' b'the' b'people' b'Flight' b'sulfide' b'from' b'areas' b'in' b'1999' b',' b'both' b'specimens' b'noted' b'that' b'nominate' b'impede' b'homes' b'suggests' b'during' b'birth'
    b'to' b'Odaenathus' b'of' b'Ceres' b'.' b'In' b'the' b'mid' b'@-@' b'1899' b'<unk>' b'where' b'females' b'can' b'get' b'to' b'begin' b'with' b'Biddenden' b"'s"
    b'foraging' b'cycle' b'and' b'the' b'current' b'distribution' b',' b'he' b'was' b'barefoot' b'.' b'The' b'village' b'is' b'stronger' b'.' b'Males' b'later' b'pointed' b'to'
    b'4' b'@.@' b'5' b'or' b'2' b'@.@' b'7' b'to' b'4' b'@.@' b'8' b'meters' b'(' b'10' b'@.@' b'60' b'in' b')' b'at' b'million'
    b'Shiva' b',' b'which' b'is' b'considered' b'under' b'that' b'other' b'eggs' b'fail' b'at' b'that' b'time' b'.' b'The' b'kakapo' b'occurs' b'into' b'a' b'period'
    b'in' b'final' b'Europe' b'.' b'Likewise' b',' b'they' b'can' b'have' b'disappeared' b'west' b'content' b'a' b'scattered' b'transverse' b'message' b'.' b'After' b'wide' b'\xe1\x83\x98'
    b',' b'there' b'is' b'no' b'foraging' b'any' b'other' b'scales' b'when' b'they' b'feed' b'.' b'Captive' b'starlings' b'are' b'subjected' b'to' b'some' b'parasites' b','
    b'similar' b'to' b'STD' b'Medieval' b'Suzuki' b'.' b'Common' b'names' b'may' b'be' b'consuming' b'to' b'be' b'a' b'consumption' b'of' b'dubia' b',' b'containing' b'which'
    b'they' b'were' b'moving' b'by' b'short' b'large' b'Bulletin' b'.' b'Other' b'parts' b'of' b'Ceres' b'and' b'metalwork' b'are' b'possible' b'.' b'Glass' b'(' b'lacks'
    b'as' b'<unk>' b')' b'find' b'the' b'chicks' b'throughout' b'it' b'is' b'by' b'aldehyde' b'.' b'In' b'a' b'tree' b'diet' b',' b'it' b'should' b'be'
    b'slightly' b'Unseen' b'for' b'the' b'other' b'<unk>' b'.' b'Females' b'effects' b'group' b':' b'Different' b'subspecies' b'from' b'<unk>' b'due' b'to' b'using' b'one' b'distress'
    b'in' b'Ireland' b'and' b'as' b'they' b'feed' b'.' b'planets' b'interpreted' b'to' b'avoid' b'when' b'he' b'obtained' b'tenth' b'remaining' b'.' b'<eos>' b'Such' b'ferry'
    b',' b'neck' b',' b'lend' b',' b'common' b',' b'and' b'exhausting' b'the' b'description' b'of' b'night' b'save' b'damage' b'when' b'the' b'global' b'yields' b'astronomers'
    b'is' b'really' b'known' b'as' b',' b'after' b'<unk>' b',' b'changes' b',' b'high' b'NMDA' b'Sirius' b'.' b'He' b'concludes' b'that' b'the' b'lubricated' b'predator'
    b'to' b'feed' b'on' b'that' b'fallen' b'.' b'Once' b'none' b'Eventually' b'up' b',' b'they' b'preferred' b'efforts' b'or' b'membrane' b'<unk>' b'is' b'the' b'"'
    b'<unk>' b'"' b'based' b'as' b'antimony' b'hygrometricus' b',' b'hen' b'@-@' b'Celeste' b',' b'cell' b'yellow' b',' b'ridicules' b'jewellery' b',' b'which' b'provide' b'84'
    b'resident' b'compared' b'to' b'consistently' b'of' b'deliberate' b'vegetation' b'.' b'There' b'are' b'fewer' b'brick' b'plants' b'that' b'has' b'the' b'socio' b'territories' b'to' b'die'
    b'and' b'increasing' b'sufficient' b'size' b'.' b'Some' b'butter' b'may' b'be' b'found' b'to' b'be' b'forever' b'to' b'be' b'seen' b',' b'especially' b'eliminate' b'Paley'
    b'if' b'they' b'represent' b'dead' b'or' b'fine' b'rocks' b'.' b'kitsunetsuki' b'gives' b'that' b'they' b'could' b'kill' b'control' b'in' b'tech' b',' b'when' b'they'
    b'must' b'indicate' b'very' b'of' b'their' b'plumage' b'.' b'If' b'ZANLA' b'can' b'be' b'able' b'to' b'reject' b'their' b'sense' b'of' b'healing' b',' b'the'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 236.3
    loss: 5.168
    elapsed time (seconds): 162.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  43.587 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
