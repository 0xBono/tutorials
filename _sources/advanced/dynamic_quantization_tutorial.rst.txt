.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'[' b'they' b'...' b'in' b'solid' b'accomplishments' b'.' b'This' b'story' b'is' b'<unk>' b',' b'but' b'it' b'is' b'not' b'until' b'a' b'star'
    b"'s" b'Pompey' b'within' b'State' b'as' b'they' b'do' b'not' b'have' b'has' b'Andhra' b'Americans' b'who' b'Lu' b'it' b'.' b'When' b'they' b'occur' b','
    b'they' b'do' b'one' b'due' b'to' b'them' b'.' b'The' b'book' b'will' b'be' b'made' b'by' b'from' b'communion' b',' b'so' b'it' b'is' b'not'
    b'<unk>' b'.' b'The' b'fate' b'has' b'little' b'with' b'grayish' b'characters' b',' b'as' b'for' b'other' b'or' b'female' b'dynamite' b',' b'Prime' b'One' b'ground'
    b'deer' b'than' b'80' b'oil' b'linked' b'(' b'or' b'Czech' b'Irish' b'in' b'head' b'@-@' b'Guiry' b')' b',' b'the' b'A' b'constituency' b'of' b'Z.'
    b'Nguyen' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Organization' b'=' b'=' b'<eos>' b'<eos>' b'English' b'Africa' b'is' b'created' b'by' b'United' b'States' b'are' b'meant'
    b'to' b'be' b'<unk>' b'at' b'Observation' b',' b'and' b'appear' b'in' b'another' b'<unk>' b'.' b'In' b'ARIA' b',' b'the' b'number' b'of' b'films' b'in'
    b'its' b'respective' b'sections' b',' b'now' b'reported' b'that' b'site' b'degrees' b'originated' b'100' b'large' b'times' b'and' b'has' b'a' b'prolonged' b'blast' b'.' b'It'
    b'is' b'generally' b'safe' b'December' b'eccentric' b',' b'but' b'booms' b'is' b'trapped' b'significance' b'by' b'<unk>' b'behind' b'the' b'coast' b',' b'where' b'long' b'Erik'
    b'M.' b'Hood' b'(' b'played' b'by' b'congregations' b'interphase' b'as' b'the' b'other' b'exposures' b')' b'have' b'existed' b'in' b'humans' b'.' b'Baker' b'also' b'met'
    b'a' b'flight' b'emperor' b'from' b'each' b'European' b'classification' b',' b'vicar' b',' b'which' b'had' b'employed' b'the' b'Devon' b'<unk>' b'exemptions' b'continued' b'to' b'facilitate'
    b'tortoise' b'forces' b'its' b'body' b'that' b'they' b'do' b'.' b'This' b'use' b'has' b'allowed' b'a' b'active' b'method' b'of' b'breeding' b'females' b',' b'with'
    b'images' b'that' b'are' b'related' b'to' b'consist' b'of' b'predators' b'.' b'Sometimes' b'moving' b',' b'they' b'still' b'vary' b'with' b'feeds' b'on' b'all' b'many'
    b'individuals' b',' b'support' b':' b'<unk>' b',' b'<unk>' b',' b'1530' b',' b'goddesses' b',' b'lightly' b'irregularly' b'and' b'mythology' b'.' b'<unk>' b'and' b'export'
    b',' b'exemplary' b'or' b'fiction' b',' b'may' b'return' b'to' b'a' b'sudden' b'decline' b'even' b'they' b'spread' b'in' b'a' b'dark' b'manner' b',' b'and'
    b'induce' b'sites' b'line' b'were' b'used' b'of' b'Suryanarayana' b'.' b'Nevertheless' b',' b'they' b'claim' b'as' b'little' b'as' b'possible' b'.' b'Chess' b'266' b'intestines'
    b'in' b'over' b'in' b'animal' b'methods' b'known' b'as' b'<unk>' b',' b'transformed' b'on' b'the' b'coast' b'@-@' b'<unk>' b'of' b'a' b'wider' b'species' b'of'
    b'patch' b'(' b'Beyonc\xc3\xa9' b')' b'and' b'Jayma' b'Hits' b'through' b'the' b'mountains' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Irish' b'language' b'=' b'='
    b'=' b'<eos>' b'<eos>' b'At' b'a' b'number' b'of' b'six' b'minutes' b',' b'about' b'4' b'million' b'other' b'or' b'Mediterranean' b',' b'are' b'been' b'reported'
    b'in' b'Japan' b',' b'1930s' b'and' b'spring' b'are' b'renovated' b'as' b'part' b'of' b'trees' b'and' b'caught' b'in' b'Ireland' b'.' b'They' b'pave' b'Mervyn'
    b'areas' b'that' b'are' b'her' b'mishandling' b'of' b'95' b'\xe2\x80\x93' b'9' b'when' b'it' b'allows' b'five' b'stars' b'.' b'Isles' b'may' b'be' b'found' b'at'
    b'high' b'<unk>' b'and' b'with' b'374' b'near' b'a' b'force' b'called' b'"' b'Casimir' b'Jitsu' b'"' b'and' b'has' b'"' b'unusual' b'"' b',' b'were'
    b'a' b'coherent' b'suggests' b'.' b'<eos>' b'Additionally' b',' b'this' b'toxic' b'study' b'is' b'generally' b'suitable' b'where' b'as' b'the' b'results' b',' b'especially' b','
    b'by' b'a' b'adult' b'serve' b'for' b'transcription' b',' b'attached' b'to' b'many' b'males' b',' b'could' b'be' b'facilitate' b'.' b'Both' b'public' b'leaves' b'remains'
    b'in' b'<unk>' b'enlarged' b',' b'including' b'G' b',' b'owl' b',' b'evangelical' b',' b'or' b'food' b',' b'oxygen' b'or' b'seeds' b'.' b'Females' b'generally'
    b'resembles' b'Reactions' b',' b'due' b'to' b'a' b'difference' b'after' b'booms' b'around' b'the' b'Republican' b'Islands' b',' b'a' b'bush' b'that' b'mountain' b'three' b'strategy'
    b',' b'Astraeus' b'prey' b'and' b'lyrics' b'...' b'chicks' b'are' b'frequently' b'consumed' b'to' b'remove' b'it' b'and' b'indicate' b'that' b'they' b'indicates' b'were' b'removed'
    b'and' b'only' b'making' b'wed' b'to' b'their' b'<unk>' b'.' b'As' b'they' b'cannot' b'find' b'their' b'impact' b',' b'they' b'feature' b"'Ouverture" b'to' b'posturing'
    b'from' b'a' b'microscope' b'\xe2\x80\x99' b'than' b'fortnight' b'or' b'even' b'compared' b';' b'of' b'example' b'another' b'system' b'spots' b'creates' b'the' b'ball' b'.' b'Consequently'
    b',' b'female' b'birds' b'in' b'Byron' b'parks' b',' b'and' b'also' b'very' b'long' b',' b'have' b'the' b'Isles' b'a' b'unicameral' b'distribution' b'from' b'Pre'
    b'@-@' b'beetle' b';' b'this' b'will' b'be' b'transcribed' b'or' b'trout' b'throughout' b'items' b'.' b'Several' b'of' b'these' b'parts' b'of' b'certain' b'fish' b'are'
    b'<unk>' b'until' b'musicals' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Province' b'=' b'=' b'<eos>' b'<eos>' b'Hence' b',' b'it' b'is' b'more' b'eggs' b'that'
    b'may' b'be' b'adapted' b',' b'including' b'Karankawa' b'that' b'showed' b'laser' b'parts' b'.' b'Operationally' b',' b'after' b'terrestrial' b'burrows' b'or' b'treated' b'it' b'to'
    b'be' b'uniform' b',' b'they' b'may' b'be' b'capable' b'of' b'effective' b'size' b'he' b'was' b'more' b'<unk>' b'.' b'It' b'is' b'unclear' b'that' b'it'
    b'can' b'be' b'entity' b'.' b'The' b'difference' b'between' b'periods' b'and' b'finds' b'it' b',' b'according' b'to' b'the' b'parrot' b'<unk>' b'its' b'Barremian' b','
    b'and' b'wholly' b'speculation' b'themselves' b',' b'X' b'as' b'it' b'will' b'be' b'.' b'<eos>' b'A' b'pair' b'of' b'<unk>' b'Christian' b',' b'flowers' b'or'
    b'religious' b',' b'drugs' b'indicating' b'her' b'usage' b',' b'with' b'bone' b',' b'food' b',' b'white' b',' b'and' b'Inari' b'that' b'believes' b'@-@' b'diet'
    b',' b'freezing' b'noble' b'legends' b'.' b'Certain' b'number' b'of' b'birds' b'to' b'feed' b'control' b'in' b'low' b'mating' b',' b'indicated' b':' b'"' b'The'
    b'induction' b'of' b'this' b'eclipse' b'of' b'springs' b',' b'another' b'mis' b',' b'persists' b'and' b'<unk>' b'under' b'pale' b'Scotia' b'without' b'tongs' b',' b'religion'
    b',' b'and' b'the' b'beginning' b'of' b'which' b'exported' b'to' b'without' b'its' b'universal' b'parrot' b'scenery' b'.' b'If' b'there' b'started' b'them' b'their' b'death'
    b'himself' b',' b'the' b'open' b'scripts' b'of' b'humans' b'may' b'have' b'experimented' b'92' b'of' b'(' b'50' b';' b'1' b'\xe2\x80\x93' b'4' b')' b'is'
    b'inaccurately' b'longer' b'.' b'The' b'kakapo' b'of' b'Arabic' b'chromosomes' b'breeds' b'altogether' b',' b'and' b'he' b'grows' b'off' b'by' b'Pity' b'and' b'finance' b'him'
    b'never' b'by' b'bird' b'is' b'tail' b'.' b'There' b'is' b'only' b'that' b'or' b'more' b'short' b'range' b',' b'a' b'tails' b'related' b'inhalation' b'after'
    b'throwing' b'her' b'eastward' b'stay' b'.' b'<unk>' b',' b'such' b'as' b',' b'their' b'most' b'<unk>' b',' b'Jerkins' b'cannot' b'be' b'intentionally' b'necessary' b'by'
    b'egg' b'logic' b',' b'in' b'any' b'species' b'of' b'speed' b'including' b'eukaryotic' b'rows' b',' b'and' b'spherical' b'teaching' b'fighting' b'(' b'they' b'has' b'the'
    b'best' b'covers' b'obvious' b')' b'would' b'be' b'observed' b'from' b'more' b'low' b'salmon' b'robes' b'.' b'As' b'they' b'have' b'down' b',' b'they' b'pulled'
    b'alleviate' b',' b'they' b'does' b'spent' b'one' b'other' b'artifact' b'to' b'have' b'several' b'drawn' b'species' b',' b'and' b'reconstruct' b'eggs' b'of' b'their' b'eye'
    b'can' b'protect' b'a' b'singular' b'lives' b'of' b'they' b'have' b'the' b'term' b'<unk>' b'closed' b'.' b'"' b'Helmet' b'sought' b'down' b'when' b'chicks' b'created'
    b'@-@' b'small' b'cats' b',' b'such' b'as' b'greatly' b'opus' b'moments' b',' b'which' b'are' b'recorded' b'on' b'12' b'January' b'.' b'Overall' b',' b'they'
    b'avoid' b'hinder' b'to' b'less' b'berth' b'space' b',' b'mainly' b'there' b'is' b'their' b'apparent' b'inscription' b'of' b'<unk>' b'.' b'Initial' b'bodies' b'make' b'message'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 239.4
    loss: 5.168
    elapsed time (seconds): 164.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  48.875 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
