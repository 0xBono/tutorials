.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'broad' b'@-@' b'interaction' b"'s" b'<unk>' b',' b'and' b'high' b'ears' b'.' b'<eos>' b'The' b'protector' b'in' b'x' b'sex' b':' b'138' b'Austen'
    b'saw' b'a' b'series' b'of' b'extremely' b'than' b'8' b'months' b'included' b'technical' b'medical' b'steps' b';' b'however' b',' b'Kurt' b'\xe2\x80\x93' b'1960' b'put' b'a'
    b'combined' b'distance' b'that' b'make' b'the' b'Viscount' b'"' b'Thistles' b'"' b'and' b'"' b'charming' b'at' b'unheard' b'Stepmother' b'dwarf' b'"' b'.' b'Therefore' b','
    b'that' b'a' b'puppets' b'act' b'display' b'periods' b',' b'he' b'fled' b'the' b'following' b'day' b',' b'but' b'said' b'that' b'this' b'can' b'compete' b'in'
    b'the' b'while' b'Sonny' b'<unk>' b'was' b'popular' b'shortened' b'.' b'<eos>' b'At' b'Sydney' b',' b'Dramatic' b'cars' b'had' b'been' b'found' b'to' b'make' b'immediate'
    b'numbers' b'within' b'shock' b'length' b'.' b'<eos>' b'The' b'following' b'year' b',' b'of' b'six' b'laps' b',' b'the' b'decline' b'of' b'<unk>' b'reunited' b'most'
    b'of' b'the' b'Shapur' b'.' b'The' b'sandy' b'sweetest' b'word' b'that' b'this' b'would' b'be' b'shut' b'to' b'keep' b'but' b'.' b'Stevens' b"'" b'stresses'
    b'band' b'is' b'derived' b'with' b'the' b'smiling' b'natural' b'legal' b',' b'with' b'its' b'intervened' b'with' b'tourists' b',' b'Zatanna' b'and' b'calligraphy' b'ACE' b'('
    b'Helen' b')' b'and' b'perception' b'of' b'<unk>' b',' b'400' b'(' b'Boom' b'Father' b')' b',' b'ABC' b'(' b'puma' b')' b',' b'and' b'finally'
    b'<unk>' b'dead' b'networks' b'(' b'that' b'lion' b',' b'FROG' b'loyalties' b')' b'remained' b'on' b'the' b'bank' b'of' b'FM' b'.' b'These' b'future' b'Eliza'
    b'Sonthi' b'was' b'regarded' b'in' b'England' b'in' b'marijuana' b',' b'which' b'included' b'only' b'a' b'distance' b'in' b'the' b'styles' b'bought' b'after' b'Flynn' b'<unk>'
    b'Fisher' b'region' b'in' b'order' b'to' b'fashion' b',' b'and' b'turned' b'on' b'a' b'early' b'place' b'to' b'detect' b'culture' b'.' b'There' b'are' b'no'
    b'apparent' b'definition' b',' b'though' b'the' b'common' b'astronomer' b'of' b'the' b'"' b'Raffles' b'"' b'is' b'it' b'<unk>' b'Trollope' b',' b'the' b'"' b'Blessed'
    b'"' b'of' b'king' b',' b'and' b'buildings' b'contributed' b'to' b'a' b'complicated' b'location' b'on' b'the' b'ground' b'.' b'<eos>' b'A' b'later' b'man' b'with'
    b'brutality' b'might' b'be' b'smaller' b'handled' b'by' b'David' b'Bow' b'.' b'The' b'original' b'hall' b',' b'which' b'contains' b'his' b'share' b'to' b'eliminate' b'the'
    b'common' b'grounds' b'by' b'theatre' b'union' b',' b'succeeded' b'to' b'decide' b',' b'a' b'idea' b'Miguel' b'Parasite' b'.' b'Over' b'males' b',' b'after' b'other'
    b',' b'four' b'plays' b'after' b'Boadicea' b'Chevaliers' b'such' b'as' b'<unk>' b',' b'<unk>' b',' b'Ilich' b',' b'early' b',' b'chronology' b'for' b'Mah\xc3\xa9' b'.'
    b'In' b'the' b'Republic' b'are' b'moved' b'to' b'its' b'longer' b'air' b'of' b'use' b'and' b'in' b'all' b'same' b'year' b',' b'little' b'gallop' b'from'
    b'sociological' b'rhyme' b'displays' b'appears' b'to' b'have' b'been' b'based' b'delayed' b'and' b'<unk>' b'to' b'intervene' b'for' b'war' b'.' b'In' b'this' b'game' b','
    b'he' b'has' b'four' b'steps' b'with' b'"' b'very' b'mentally' b'B.' b'"' b',' b'D.I.C.E.' b'"' b'literally' b'"' b'(' b'<unk>' b')' b'.' b'The'
    b'next' b'six' b'@-@' b'year' b'trust' b'is' b'now' b'eclipsed' b'.' b'It' b'opened' b'total' b'with' b'Zuniceratops' b'and' b'yellow' b'features' b',' b'which' b'is'
    b'commonly' b'linked' b'to' b'their' b'wife' b'of' b'Ulster' b'as' b'shown' b'.' b'The' b'show' b'consists' b'of' b'the' b'head' b'of' b'shell' b',' b'the'
    b'other' b'most' b'the' b'<unk>' b'(' b'analysis' b')' b',' b'mostly' b'fly' b',' b'showing' b'a' b'large' b'angle' b'over' b'a' b'loud' b'steeplechase' b','
    b'which' b'were' b'held' b'in' b'southwestern' b'rotation' b'when' b'he' b'also' b'translate' b'Peccavi' b'language' b'(' b'1999' b')' b'.' b'The' b'immune' b'Manheim' b'females'
    b'are' b'found' b'by' b'shame' b'.' b'Once' b'the' b'export' b'of' b'his' b'parents' b'is' b'due' b'to' b'NMR' b'telecommunication' b',' b'<unk>' b',' b'mechanized'
    b',' b'and' b'<unk>' b'.' b'This' b'solitaire' b'are' b'plainly' b'pathways' b'.' b'The' b'fact' b'of' b'Sy\xc4\x81dv\xc4\x81da' b'is' b'two' b'years' b',' b'when' b'the'
    b'males' b'really' b'entered' b'a' b'separate' b'season' b'of' b'972' b'in' b'the' b'<unk>' b',' b'around' b'5' b'%' b'in' b'2011' b'.' b'In' b'fact'
    b',' b'during' b'kakapo' b',' b'the' b'common' b'colour' b'is' b'Incubation' b"'s" b'most' b'than' b'30' b'years' b'.' b'By' b'his' b'first' b'years' b'of'
    b'burn' b'\xe2\x80\x93' b'processes' b',' b'with' b'fictional' b'depress' b'@-@' b'salt' b',' b'<unk>' b'by' b'much' b'this' b'process' b'of' b'a' b'more' b'artificial' b'window'
    b',' b'are' b'attempting' b'to' b'protect' b'69' b'or' b'33' b'%' b'of' b'that' b'factor' b'with' b'trees' b'.' b'There' b'are' b'no' b'cases' b'that'
    b'they' b'are' b'Communists' b'by' b'forest' b'covers' b'as' b'they' b'do' b'between' b'jaws' b'.' b'The' b'reforms' b'is' b'conservative' b',' b'whereas' b'that' b'only'
    b'very' b'stable' b'patches' b'of' b'nest' b'situations' b',' b'or' b'the' b'nucleus' b'renovations' b'do' b'not' b'sink' b'.' b'<eos>' b'In' b'the' b'same' b'year'
    b',' b'precipitation' b'had' b'Main' b'\xe2\x80\x99' b'northern' b'partners' b',' b'so' b'these' b'groups' b'called' b'the' b'<unk>' b'Part' b'classic' b';' b'most' b'of' b'these'
    b'have' b'more' b'limited' b'.' b'After' b'be' b'found' b'on' b'Jupiter' b',' b'they' b'later' b'housed' b'their' b'common' b'name' b'with' b'a' b'very' b'surface'
    b'emotional' b'or' b'powerful' b'bird' b"'" b'test' b'in' b'1643' b',' b'and' b'collected' b'it' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Taxonomy' b'and' b'distinctive'
    b'=' b'=' b'<eos>' b'<eos>' b'The' b'term' b'Icy' b'International' b'Church' b'is' b'introduced' b'to' b'lie' b'directly' b'.' b'There' b'are' b'evidence' b'that' b'kakapo'
    b'fund' b',' b'which' b'cellular' b'If' b'roughly' b'making' b'from' b'food' b'.' b'Additionally' b',' b'they' b'are' b'also' b'specialized' b'on' b'<unk>' b',' b'leaving'
    b'one' b'molecular' b'experience' b'.' b'They' b'can' b'oppose' b'in' b'prosecutor' b'units' b',' b'but' b'they' b'made' b'intoxication' b'marry' b'one' b'of' b'the' b'heaviest'
    b'sea' b'.' b'antimonide' b'@-@' b'type' b'cells' b'appear' b'at' b'a' b'level' b'which' b'extends' b'around' b'up' b'minute' b'habitat' b'has' b'led' b'they' b'seen'
    b'out' b'to' b'reflect' b'active' b'.' b'Large' b'mantle' b'or' b'nurses' b'suggest' b'and' b'odor' b'to' b'migrate' b'sink' b"'s" b'ball' b'.' b'If' b'her'
    b'spots' b'may' b'be' b'recalled' b'they' b'have' b'children' b'or' b'as' b'they' b'need' b'to' b'be' b'hurt' b'.' b'When' b'there' b'may' b'go' b'as'
    b'passage' b',' b'they' b'retained' b'accounts' b',' b'or' b'can' b'have' b'relief' b'probably' b'<unk>' b'.' b'If' b'any' b'purity' b'are' b'hoists' b'for' b'carriage'
    b'.' b'Like' b'instance' b',' b'they' b'do' b'headed' b'that' b'males' b'resulted' b'more' b'before' b'reproductive' b'.' b'lion' b'may' b'normally' b'lie' b'by' b'it'
    b',' b'and' b'they' b'might' b'speak' b'in' b'it' b'with' b'all' b'significant' b'habitat' b'.' b'Tessa' b'may' b'sustain' b'the' b'logical' b'snake' b"'d" b'at'
    b'times' b'.' b'Her' b'energy' b'brothers' b'will' b'give' b'obtaining' b'Steiner' b'and' b'compared' b'.' b'Accordingly' b',' b'it' b'would' b'be' b'as' b'on' b'a'
    b'angle' b'where' b'no' b'Chennselaig' b',' b'he' b'realizes' b'they' b'may' b'have' b'emerged' b'into' b'her' b'secondary' b'<unk>' b'<unk>' b'temperature' b',' b'which' b'was'
    b'maintained' b'by' b'fine' b'male' b'masks' b'Trajan' b'being' b'first' b'recommendations' b'.' b'"' b'<eos>' b'<unk>' b',' b'scent' b',' b'is' b'one' b'of' b'many'
    b'hundred' b'foreign' b'responses' b'.' b'However' b',' b'11th' b'all' b'@-@' b'Gaelic' b'species' b'may' b'have' b'minimal' b'<unk>' b',' b'from' b'Quarterback' b'McLean' b','
    b'the' b'fighters' b',' b'will' b'vary' b'to' b'start' b'.' b'A' b'Humanitarian' b'beak' b'by' b'psychiatric' b'perpendicular' b'or' b'resort' b'by' b'wind' b'gleba' b'if'
    b'is' b'relevant' b'to' b'dark' b'expression' b'.' b'They' b'have' b'their' b'prolonged' b'habitat' b'than' b'stem' b',' b'a' b'pair' b'of' b'<unk>' b',' b'or'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 228.9
    loss: 5.168
    elapsed time (seconds): 160.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  33.790 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
