.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b"'s" b'<unk>' b'"' b'universal' b'Feet' b'"' b',' b'Morris' b'"' b'ability' b'"' b'.' b'<eos>' b'In' b'1903' b',' b'his' b'timing' b'with' b'the'
    b'Mechanical' b'legal' b'belt' b'at' b'Ecclestone' b'culminated' b'on' b'October' b'25' b',' b'2015' b'.' b'Crash' b'was' b'the' b'only' b'full' b'@-@' b'Star' b'season'
    b'album' b'record' b'in' b'the' b'history' b'of' b'all' b'8' b'@-@' b'20' b'stars' b'seated' b'on' b'24' b'December' b'1885' b'throughout' b'diverged' b',' b'receiving'
    b'his' b'declining' b'season' b'since' b'the' b'game' b'.' b'In' b'addition' b'for' b'his' b'tax' b'of' b'mortal' b'tests' b'he' b'published' b'atypical' b'@-@' b'coloured'
    b',' b'subsidies' b',' b'and' b'processing' b'Brook' b'Dreamworld' b',' b'which' b'included' b'the' b'story' b'in' b'his' b'place' b'to' b'make' b'the' b'job' b'of'
    b'inquiry' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Synopsis' b'(' b'Venus' b')' b'=' b'<eos>' b'<eos>' b'President' b'Saprang' b'(' b'The' b'Republic' b'of' b'Marathi'
    b'football' b')' b'was' b'a' b'member' b'of' b'John' b'<unk>' b'success' b'of' b'science' b'once' b'with' b'the' b'many' b'charter' b',' b'one' b'in' b'<unk>'
    b'courts' b'one' b'of' b'the' b'civil' b'estate' b'and' b'adapted' b'Dreamscape' b'.' b'Fort' b'arrangements' b'Dual' b'Gillespie' b'also' b'sought' b'to' b'be' b'drawn' b'in'
    b'musical' b'understanding' b'.' b'"' b'The' b'Tallest' b'Cross' b'"' b'is' b'a' b'interview' b'between' b'a' b'DAG' b'named' b'a' b'honorable' b'ranger' b'ruling' b'('
    b'declare' b'in' b'the' b'relation' b')' b',' b'which' b'does' b'managed' b'them' b"'s" b'names' b'rather' b'.' b'For' b'example' b',' b'them' b'directly' b'in'
    b'Paramount' b',' b'Groves' b'pine' b'were' b'described' b'to' b'a' b'area' b'of' b'looking' b'per' b'year' b'in' b'year' b',' b'in' b'amateur' b'years' b';'
    b'the' b'court' b'of' b'the' b'Mississippi' b'/' b'Ireland' b',' b'which' b'gives' b'a' b'sacrifices' b'for' b'himself' b'or' b'tied' b'from' b'the' b'historical' b'speckles'
    b'of' b'transaction' b'"' b'familiar' b'some' b'intensification' b'of' b'different' b'elements' b'"' b',' b'credited' b'in' b'the' b'series' b'on' b'January' b'17' b',' b'2006'
    b',' b'a' b'official' b'after' b'<unk>' b',' b'which' b'is' b'issued' b'by' b'Joseph' b'Steiner' b',' b'a' b'Akitaro' b'Henry' b'Dublin' b'thriller' b',' b'built'
    b'up' b'in' b'1998' b'.' b'It' b'beaver' b',' b'Piazzi' b',' b'and' b'1834' b'were' b'a' b'certain' b'theme' b',' b'which' b'noted' b'that' b'they'
    b"'re" b'"' b'treated' b'out' b'intolerance' b'after' b'"' b'.' b'In' b'Oxford' b',' b'however' b',' b'1816' b',' b'a' b'novel' b'filed' b'over' b'25'
    b'seconds' b'in' b'only' b'10' b'%' b'in' b'a' b'date' b'for' b'the' b'islands' b',' b'and' b'commanded' b'22' b'or' b'44' b'million' b'worldwide' b'of'
    b'the' b'A' b'class' b'.' b'It' b'moved' b'partly' b'until' b'late' b'Mortal' b'1999' b'Schlesinger' b'to' b'provide' b'a' b'decline' b'of' b'debate' b'.' b'Anne'
    b'I' b'was' b'rewarded' b'by' b'<unk>' b'Sophie' b'Miller' b',' b"'" b'tight' b'Duchess' b'EST' b';' b'electricity' b'With' b'critics' b"'" b'efforts' b'.' b'The'
    b'illustration' b'Making' b'him' b'in' b'his' b'death' b'on' b'September' b'8' b',' b'2006' b',' b'and' b'LiSA' b'used' b'the' b'possibility' b'of' b'Menzel' b'an'
    b'game' b'that' b'destroyed' b'Gary' b'<unk>' b'Trigger' b'in' b'Westmoreland' b',' b'Northern' b'Time' b'Sarnia' b',' b'at' b'their' b'"' b'screening' b'Personality' b'travelling' b','
    b'and' b'to' b'respect' b',' b'by' b'the' b"'" b'Web' b'<unk>' b'forging' b'"' b'.' b'In' b'his' b'1986' b'appearance' b'on' b'a' b'<unk>' b'1'
    b',' b'he' b'arranged' b'concert' b'Adam' b'Arthur' b'Clark' b'of' b'the' b'American' b'desert' b',' b'crushing' b'a' b'book' b'or' b'released' b'.' b'The' b'follow'
    b'verse' b'that' b'date' b'Jesus' b'and' b'children' b',' b'PlayStation' b'11' b',' b'is' b'"' b'a' b'apparent' b'indie' b'<unk>' b'effect' b'later' b',' b'9'
    b'lives' b',' b'conspiring' b'<unk>' b'replace' b'college' b'excitement' b'"' b',' b'make' b'it' b'to' b'having' b'three' b'venues' b'.' b'<eos>' b'In' b'DiBiase' b','
    b'Illinois' b'served' b'as' b'a' b'clutch' b'to' b'be' b'important' b'due' b'to' b'something' b'I' b'think' b'for' b'several' b'years' b'after' b'Babyface' b'in' b'adultery'
    b'.' b'Ceres' b'called' b'a' b'few' b'valuable' b'teaching' b'@-@' b'hand' b'<unk>' b'failures' b'recorded' b'as' b'a' b'player' b',' b'and' b'this' b'would' b'be'
    b'used' b'of' b'Hanau' b'and' b'received' b'Ceres' b'to' b'an' b'Public' b'Race' b',' b'but' b'those' b'of' b'his' b'gravitational' b'tendency' b'to' b'be' b'assigned'
    b'to' b'friends' b'.' b'<eos>' b'Hornung' b'grew' b'in' b'five' b'uprisings' b'on' b'26' b'April' b'1938' b',' b'when' b'the' b'seat' b'to' b'force' b'students'
    b'were' b'generally' b'Baltasar' b'.' b'According' b'to' b'the' b'singer' b'of' b'The' b'planet' b',' b'Domnall' b'sought' b'to' b'have' b'been' b'a' b'pet' b'of'
    b'FOCA' b'.' b'The' b'inexpensive' b'convoy' b'remained' b'in' b'mathematics' b'City' b'in' b'1993' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Personal' b'life' b'=' b'='
    b'<eos>' b'<eos>' b'Walpole' b'appears' b'out' b'of' b'1592' b'from' b'Baker' b'in' b'February' b'1939' b'with' b'the' b'attitude' b'of' b'<unk>' b'Devonport' b',' b'a'
    b'lecturer' b'that' b'serve' b'the' b'group' b'an' b'cartwheel' b"'i" b'<unk>' b'Live' b'D\xc3\xadaz' b'.' b'The' b'portrait' b'of' b'Hoglan' b'drove' b'to' b'the' b'website'
    b',' b'after' b'cameraman' b'that' b'legend' b'was' b'adopted' b'at' b'1' b'@.@' b'1' b'%' b',' b'although' b'meeting' b'Bennett' b',' b'sends' b'a' b'80'
    b'@-@' b'year' b'Assembly' b'to' b'define' b'out' b'selling' b'urban' b'voices' b'and' b'experience' b'one' b'of' b'the' b'added' b'<unk>' b'video' b'forces' b'before' b'captured'
    b'and' b'whatever' b'the' b'weir' b'.' b'amenable' b'against' b'their' b'conviction' b'problematic' b'peaked' b'.' b'The' b'Crimson' b'rating' b'of' b'the' b'Four' b'lists' b'to'
    b'have' b'been' b'suggested' b'.' b'<eos>' b'However' b'to' b'the' b'map' b',' b'Orlando' b'director' b'James' b'O' b"'Malley" b'played' b'a' b'civilian' b'touchdown' b'to'
    b'Mike' b'adoration' b',' b'in' b'July' b'retitled' b',' b'before' b'Roy' b'despite' b'moving' b'location' b'Pouw' b'.' b'Mosley' b'introduced' b'them' b'to' b'the' b'game'
    b'at' b'the' b'stake' b',' b'and' b'lost' b'his' b'no' b'election' b'illustrated' b'on' b'1' b'November' b'2009' b'.' b'The' b'emphasis' b'between' b'Ramnagar' b'in'
    b'2012' b'includes' b'conservative' b'missions' b'of' b'being' b'under' b'the' b'Browns' b'at' b'12' b'million' b'nearby' b'inactive' b'teams' b',' b'which' b'treats' b'72' b'disciplinary'
    b'performers' b'from' b'BBC' b'Young' b'Little' b',' b'Dublin' b',' b'a' b'member' b'of' b'35' b'@,@' b'000' b'third' b',' b'clean' b',' b'and' b'had'
    b'lost' b'in' b'its' b'development' b'failed' b'to' b'quit' b'a' b'fourth' b'position' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Texas' b'science' b'2007' b'='
    b'=' b'=' b'<eos>' b'<eos>' b'The' b'spiders' b'necessitated' b'their' b'production' b'detectors' b'and' b'revisiting' b'a' b'eleven' b'wins' b'through' b'broadcast' b'in' b'Wales' b'.'
    b'In' b'this' b'same' b'year' b',' b'a' b'dynamic' b'cultural' b'reception' b'commonly' b'led' b'the' b'center' b'in' b'very' b'easy' b'world' b'or' b'popular' b'biblical'
    b'consoles' b',' b'debuting' b',' b'but' b'did' b'not' b'be' b'certified' b'anything' b'from' b'new' b'areas' b'on' b'Pakistan' b'.' b'They' b',' b'however' b','
    b'Gruffudd' b'led' b'his' b'final' b'unparalleled' b'game' b'in' b'2003' b',' b'with' b'McElroy' b'all' b'to' b'score' b'of' b'these' b'works' b'.' b'He' b'gave'
    b'this' b'day' b'by' b'Jordan' b"'s" b'other' b'acts' b',' b'and' b'recorded' b'the' b'wardrobe' b"'" b'record' b'songs' b'on' b'Richmond' b',' b'but' b'also'
    b'Stony' b"'Malley" b'began' b'and' b'the' b'next' b'year' b'within' b'.' b'Mosley' b'was' b'murdered' b'in' b'Shanghai' b'as' b'a' b'owner' b'that' b'existed' b'as'
    b'a' b'mutual' b'sound' b'in' b'a' b'55' b'@-@' b'year' b'<unk>' b'in' b'1923' b'.' b'<eos>' b'The' b'season' b'was' b'first' b'sold' b'by' b'McCarthy'
    b'that' b'"' b'The' b'Cloud' b'moves' b'[' b'of' b'public' b'hands' b'is' b'expensive' b'and' b'is' b'wealthy' b'than' b'much' b'to' b'do' b'all' b'flesh'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 221.6
    loss: 5.164
    elapsed time (seconds): 153.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  19.361 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
