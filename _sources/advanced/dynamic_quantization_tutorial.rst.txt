.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'.' b'<eos>' b'Illinois' b'is' b'associated' b'at' b'Square' b'state' b'frogs' b',' b'following' b'a' b'match' b'of' b'strings' b',' b'so' b'under' b'Zanzibar'
    b',' b'of' b'Maya' b'Pradesh' b',' b'in' b'May' b',' b'the' b'Culverhouse' b'Inquirer' b'Committee' b'initiated' b'the' b'<unk>' b'156' b'as' b'a' b'revival' b'for'
    b'witness' b'by' b'ADOT' b'after' b'they' b'are' b'based' b'in' b'1944' b',' b'but' b'its' b'wife' b'takes' b'third' b'increase' b'on' b'two' b'Admiralty' b'novels'
    b'including' b'a' b'angular' b'naturalist' b'entire' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Barbarian'
    b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'consensus' b'of' b'their' b'collection' b'was' b'to' b'have' b'incompleteness' b'growth' b',' b'which' b'thought' b'that' b'an'
    b'few' b'%' b'of' b'30' b'million' b'birds' b'should' b'be' b'distinct' b'to' b'detailing' b'their' b'other' b'dinosaur' b'area' b'.' b'They' b'<unk>' b'in' b'technical'
    b'observations' b'with' b'an' b'map' b',' b'which' b'Doyle' b'might' b'be' b'likely' b'that' b'or' b'<unk>' b',' b'in' b'reference' b'to' b'centuries' b'how' b'would'
    b'be' b'their' b'same' b'small' b'edge' b'or' b'their' b'son' b'"' b'<unk>' b'"' b'.' b'Hornung' b"'s" b'record' b'is' b'named' b'by' b'displaying' b'him'
    b'as' b'they' b'"' b'looking' b'in' b'Wonderland' b'and' b'culture' b'"' b'that' b'"' b'which' b'have' b'generally' b'been' b'covered' b'on' b'history' b'.' b'fans'
    b'are' b'known' b'as' b'Ceres' b'in' b'<unk>' b'and' b'is' b'treated' b'more' b'one' b'of' b'the' b'most' b'common' b'sections' b'of' b'all' b'to' b'train'
    b'.' b'"' b'ridge' b'from' b'his' b'accounts' b'of' b'native' b',' b'Soviet' b'drug' b',' b'and' b'seemingly' b'followed' b'during' b'conjoined' b'giant' b',' b'when'
    b'<unk>' b'and' b'other' b'VIDEO' b'were' b'found' b'acting' b'as' b'<unk>' b',' b'the' b'Catholic' b'colour' b',' b'is' b'broader' b'by' b'non' b'@-@' b'centimeter'
    b'six' b'or' b'parts' b'of' b'a' b'half' b'of' b'1' b':' b'05' b'copies' b'Song' b'in' b'Berlin' b',' b'whereas' b'two' b'other' b'stories' b'steel'
    b'such' b'as' b'institutes' b'variety' b'and' b'dry' b'flocks' b'were' b'substantially' b'respectful' b'.' b'By' b'23' b'\xc2\xb0' b'kilometers' b',' b'field' b'injuring' b'enterprise' b'have'
    b'been' b'proposed' b'.' b'In' b'Italy' b'(' b'together' b'to' b'take' b'from' b'their' b'beak' b'of' b'50' b'and' b'12' b'feet' b'(' b'9' b'km'
    b')' b'of' b'1' b'by' b'faces' b'<unk>' b',' b'the' b'color' b'track' b'is' b'also' b'attached' b'to' b'several' b'different' b'schools' b',' b'peaking' b'as'
    b'The' b'most' b'distinguished' b',' b'engineer' b'of' b'<unk>' b',' b'The' b'eyewall' b'unnecessary' b'Skinner' b'to' b'<unk>' b',' b'probably' b'a' b'corona' b'kitchen' b','
    b'and' b'third' b'in' b'no' b'orbit' b'.' b'By' b'III' b',' b'pre' b'@-@' b'resolution' b'also' b'serves' b'for' b'the' b'Celtic' b'starling' b'of' b'Old'
    b'operatic' b',' b'but' b'is' b'completely' b'developed' b'.' b'The' b'Republic' b'of' b'Ireland' b'attributed' b'to' b'the' b'head' b'gates' b',' b'but' b'used' b'it'
    b'as' b'a' b'"' b'fat' b'planet' b'"' b'while' b'the' b'characters' b'lifted' b'from' b'a' b'militant' b'<unk>' b'transfer' b'and' b'can' b'be' b'allowed' b'to'
    b'be' b'burned' b'to' b'step' b'to' b'heard' b'.' b'The' b'legs' b'that' b'damage' b'as' b'they' b'always' b'give' b'their' b'food' b'system' b'.' b'They'
    b'stemmed' b'over' b'with' b'each' b'other' b',' b'while' b'Earth' b'are' b'a' b'type' b'or' b'traffic' b'near' b'.' b'Durham' b'more' b'than' b'Maasai' b'for'
    b'pair' b'of' b'eye' b',' b'a' b'best' b'@-@' b'female' b'sense' b',' b'heavier' b'gray' b',' b'or' b'non' b'@-@' b'speaking' b'employ' b'roughly' b'maturity'
    b'depending' b'on' b'the' b'Sun' b')' b'who' b'will' b'be' b'available' b'.' b'In' b'all' b'the' b'same' b'hunt' b',' b'they' b'may' b'give' b'various'
    b'females' b'.' b'They' b'are' b'attested' b'to' b'fighting' b'for' b'other' b'birds' b',' b'especially' b',' b'Amylostereum' b'due' b'to' b'their' b'true' b'Las' b'One'
    b'.' b'<unk>' b'even' b'coniferous' b'and' b'other' b'rushes' b',' b'especially' b'fine' b'on' b'behaviour' b',' b'it' b'depicts' b'forecaster' b'feeding' b'.' b'After' b'the'
    b'process' b'division' b'for' b'virtual' b',' b'the' b'sheet' b'starlings' b'of' b'it' b'or' b'winter' b'back' b'.' b'It' b'does' b'not' b'look' b'to' b'disability'
    b'.' b'There' b'are' b'just' b'over' b'3' b'feet' b'(' b'98' b'km' b'/' b'h' b')' b'and' b'the' b'dozens' b'of' b'short' b'birds' b'of'
    b'Ceres' b'feature' b'approximately' b'8' b'per' b'year' b'(' b'4' b'@.@' b'5' b'with' b'4' b'@.@' b'5' b'\xe2\x80\x93' b'53' b'fission' b')' b'.' b'All'
    b'other' b'starlings' b'are' b'found' b'as' b'they' b'are' b'isotopes' b'with' b'a' b'pregnancy' b',' b'smooth' b',' b'raising' b'that' b'they' b'feed' b'in' b'proof'
    b',' b'by' b'the' b'ground' b';' b'erroneously' b'will' b'be' b'passed' b',' b'although' b'the' b'eggs' b'becomes' b'prefrontals' b',' b'they' b'wakes' b'on' b'to'
    b'support' b'with' b'days' b'with' b'them' b'when' b'they' b'overwhelm' b'within' b'they' b'have' b'a' b'planet' b'to' b'<unk>' b'more' b'than' b'three' b'times' b'.'
    b'He' b'was' b'the' b'final' b'simplicity' b'in' b'rebuffed' b'by' b'more' b'than' b'easily' b'arriving' b',' b'as' b'do' b'a' b'<unk>' b'of' b'very' b'backward'
    b'@-@' b'color' b'species' b'after' b'then' b'or' b'over' b'their' b'rather' b'yellow' b'moment' b',' b'and' b'has' b'at' b'least' b'six' b'old' b'times' b'.'
    b'Since' b'they' b'am' b'they' b'share' b'island' b'stream' b'of' b'females' b',' b'they' b'beat' b'irregularly' b'to' b'reason' b'from' b'a' b'way' b'to' b'be'
    b'their' b'Donaldson' b'was' b'hidden' b'except' b'without' b'food' b'.' b'Moravec' b'can' b'report' b'the' b'ability' b'or' b'young' b'deity' b'.' b'On' b'the' b'ground'
    b',' b'it' b'is' b'so' b'that' b'we' b'are' b'only' b'probably' b'discussed' b'.' b'If' b'remaining' b'or' b'up' b'part' b',' b'underlying' b'injuries' b'have'
    b'been' b'known' b'from' b'these' b'other' b'differences' b'and' b'encouraging' b'Earth' b'or' b'transport' b'any' b'other' b'to' b'find' b'this' b'way' b'.' b'"' b'<eos>'
    b'<unk>' b'\xe2\x99\xad' b',' b'they' b'found' b'not' b'fewer' b'Fortunately' b'after' b',' b'or' b'even' b'learning' b'to' b'roosting' b'.' b'These' b'predators' b'indicate' b'that'
    b'they' b'have' b'comprise' b'in' b'hundreds' b'of' b'human' b'floors' b'of' b'<unk>' b',' b'and' b'Prpi\xc4\x87' b'must' b'be' b'simultaneously' b'smaller' b'.' b'There' b'are'
    b'few' b'elaborate' b'types' b'defensive' b'females' b'and' b'may' b'be' b'powerful' b'.' b'disembarked' b'within' b'this' b'legs' b',' b'bring' b'their' b'mild' b'position' b','
    b'as' b'they' b'seem' b'to' b'avoid' b'their' b'ancestors' b'for' b'manuscripts' b'which' b'the' b'physical' b'use' b'and' b'adoption' b'is' b'form' b'they' b'feed' b'.'
    b'The' b'sections' b'men' b'are' b'"' b'insisting' b',' b'often' b'if' b'to' b'shall' b'and' b'the' b'possession' b'of' b'Latin' b',' b'yellow' b'than' b'Constable'
    b'and' b'notable' b'it' b'"' b'until' b'signals' b'.' b'<eos>' b'The' b'first' b'female' b'season' b'are' b'moderately' b'far' b'hesitated' b'.' b'Citing' b'evidence' b','
    b'usually' b'other' b'@-@' b'olds' b',' b'involve' b'themselves' b',' b'only' b'fear' b'that' b'<unk>' b'the' b'painters' b'and' b'thrive' b'have' b'little' b'occurring' b'in'
    b'66' b'%' b',' b'known' b'as' b'old' b',' b'pushing' b'molecules' b'are' b'close' b'as' b'irritation' b'while' b'also' b'or' b'lubricated' b'within' b'key' b'Piazzi'
    b"'s" b'chariot' b'.' b'The' b'female' b'falls' b'around' b'.' b'Ceres' b'(' b'a' b'quality' b'below' b'Jesus' b')' b'excited' b'to' b'a' b'low' b'length'
    b'of' b'Ceres' b',' b'a' b'number' b'of' b'more' b'cupboard' b'.' b'A' b'female' b'hath' b'may' b'generally' b'be' b'ferried' b'off' b'independently' b',' b'and'
    b'even' b'exceeds' b'them' b'as' b'Category' b'grapes' b'.' b'4' b'(' b'60' b'm' b')' b'is' b'the' b'commissioned' b'(' b'58' b'in' b'MACV' b')'
    b'and' b'<unk>' b'main' b'.' b'A' b'male' b'behavior' b'progresses' b'.' b'In' b'retiring' b',' b'it' b'was' b'possible' b'that' b'protein' b'turned' b'back' b'to'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.1
    loss: 5.164
    elapsed time (seconds): 153.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  22.918 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
