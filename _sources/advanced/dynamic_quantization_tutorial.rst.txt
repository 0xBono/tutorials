.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'her' b'sisters' b'to' b'die' b'activity' b'.' b'However' b',' b'on' b'this' b'side' b',' b'this' b'may' b'necessarily' b'be' b'unicorn' b'.' b'The' b'punt'
    b'and' b'the' b'close' b'@-@' b'epic' b'Wolves' b'were' b'poor' b'LeChuck' b'and' b'<unk>' b'for' b'decline' b'and' b'a' b'common' b'serious' b'airport' b'.' b'A'
    b'<unk>' b'again' b'was' b'also' b'described' b'on' b'condoms' b'from' b'a' b'Christian' b'surge' b'.' b'Before' b'his' b'prototypes' b'for' b'other' b'masts' b'that' b'bills'
    b'it' b'for' b'Lawrence' b'and' b'plants' b',' b'they' b'were' b'they' b'do' b'not' b'exist' b'may' b'be' b'<unk>' b'.' b'If' b'Cayuga' b'slipped' b'at'
    b'Henry' b'[' b'Nothing' b']' b'all' b'four' b'times' b'(' b'Zoe' b',' b'and' b'other' b'mineral' b'items' b'on' b'seven' b'countries' b',' b'aided' b'60'
    b'drive' b'as' b'resemble' b'long' b'or' b'brownish' b'art' b')' b';' b'George' b'O' b"'t" b'have' b'in' b'the' b'family' b'at' b'this' b'time' b'.'
    b'Although' b'he' b'attributed' b'in' b'a' b'rhinoceros' b',' b'the' b'helmet' b'agreed' b',' b'with' b'instance' b'seen' b'over' b'the' b'imperial' b'network' b',' b'looking'
    b'up' b'by' b'other' b'tank' b'Hipper' b'(' b'AADT' b')' b'.' b'CNN' b'appears' b'up' b'the' b'Pflueger' b',' b'were' b'said' b'to' b'film' b'elements'
    b'between' b'his' b'cricketers' b'.' b'<eos>' b'<eos>' b'=' b'=' b'1980s' b'=' b'=' b'<eos>' b'<eos>' b'ca' b'is' b'developed' b'in' b'1907' b'.' b'<unk>'
    b'Gandhi' b',' b'a' b'Neck' b'private' b'style' b'in' b'newborn' b',' b'is' b'identified' b'by' b'preparing' b'foreign' b'candidates' b'from' b'eye' b'business' b'.' b'The'
    b'NHL' b'dating' b'to' b'a' b'<unk>' b'<unk>' b'that' b'intended' b'the' b'long' b'<unk>' b'or' b'(' b'separates' b'just' b'thought' b'"' b'head' b'VFX' b'"'
    b')' b'<unk>' b'half' b'to' b'signal' b'it' b'Setting' b'Tammy' b',' b'which' b'this' b'was' b'just' b'put' b'into' b'the' b'sector' b'to' b'be' b'the'
    b'evolution' b'of' b'light' b'224' b'.' b'breeding' b'between' b'Earth' b'and' b'ribosomes' b'were' b'designed' b'to' b'come' b'together' b'from' b'around' b'any' b'other' b'gleba'
    b'of' b'any' b'species' b'.' b'Shran' b'first' b'transported' b'<unk>' b',' b'<unk>' b'across' b'reflecting' b'in' b'condition' b'and' b'other' b'it' b'is' b'probably' b'lost'
    b'as' b'regeneration' b'when' b'he' b'remained' b'.' b'<eos>' b'In' b'his' b'first' b'public' b'language' b'as' b'host' b'some' b'heating' b',' b'the' b'planet' b'of'
    b'Britain' b'has' b'been' b'one' b'of' b'Conservation' b"'s" b'advantage' b',' b'albeit' b'in' b'buildings' b'.' b'The' b'placard' b'Chancellor' b'that' b'"' b'also' b'got'
    b'uninfected' b"'" b'years' b']' b'to' b'be' b'it' b'would' b'be' b'omitted' b'.' b'"' b'The' b'state' b'changes' b'before' b'designed' b'on' b'stage' b'of'
    b'Romania' b',' b'Germany' b',' b'and' b'Earth' b'and' b'congregated' b'throughout' b'his' b'respective' b'observations' b',' b'by' b'instead' b'for' b'traditional' b'Rh\xc3\xb4ne' b'or' b'maxilla'
    b'to' b'priest' b"'s" b'value' b'of' b'<unk>' b'.' b'Some' b'vegetation' b'problems' b'and' b'toxicity' b'reported' b'this' b'account' b'to' b'be' b'Florida' b'condemning' b'in'
    b'<unk>' b'.' b'Overall' b',' b'associated' b'on' b'they' b'have' b'prevented' b'a' b'additional' b'image' b'of' b'basketball' b'which' b'may' b'be' b'<unk>' b'Reg' b'.'
    b'There' b'are' b'no' b'different' b'flightless' b'value' b'to' b'prepare' b'for' b'the' b'skull' b'.' b'<eos>' b'The' b'angling' b'authorities' b'show' b'three' b'days' b'in'
    b'dweller' b',' b'Leicester' b'forlorn' b',' b'which' b'of' b'all' b'views' b'in' b'economic' b'cinema' b',' b'5' b'%' b'of' b'corn' b'recovering' b'by' b'involving'
    b',' b'irregular' b'power' b',' b'and' b'a' b'non' b'@-@' b'active' b'snake' b'.' b'The' b'niche' b'of' b'frequency' b'will' b'occur' b'on' b'each' b'other'
    b'singing' b'by' b'merge' b'to' b'those' b'three' b'states' b'.' b'There' b'are' b'no' b'significant' b'activity' b'that' b'provide' b'just' b'.' b'A' b'eight' b'@-@'
    b'metre' b'species' b'describes' b'some' b'individuals' b'some' b'than' b'two' b'pieces' b'of' b'eye' b'but' b'94' b'%' b'attempts' b'.' b'In' b'honour' b',' b'it'
    b'is' b'able' b'to' b'be' b'suitable' b'.' b'superbly' b'and' b'Brandy' b'appeals' b'may' b'<unk>' b'females' b'with' b'only' b'eye' b'periods' b'division' b'where' b'Mariana'
    b'must' b'be' b'memorable' b'from' b'food' b'.' b'There' b'are' b'also' b'evidence' b'that' b'Howard' b"'s" b'external' b'diet' b'looking' b'to' b'critical' b'eggs' b','
    b'such' b'as' b'comprises' b'areas' b'at' b'that' b'time' b',' b'with' b'agencies' b'a' b'eye' b'is' b'either' b'white' b';' b'neither' b'plants' b'were' b'great'
    b'getting' b'.' b'<eos>' b'Ireland' b'cannot' b'have' b'seen' b'a' b'density' b'at' b'<unk>' b'after' b'Dallas' b',' b'when' b',' b'so' b'the' b'island' b'becomes'
    b'roughly' b'20' b'kilometres' b'per' b'spored' b',' b'only' b'on' b'seven' b'interacted' b'.' b'This' b'U\xc3\xad' b'eggs' b'is' b'largely' b'a' b'large' b'temperament' b'.'
    b'Therefore' b',' b'in' b'other' b'cases' b',' b'was' b'usually' b'important' b'to' b'become' b'competing' b'expecting' b'or' b',' b'for' b'example' b',' b'the' b'light'
    b'naturally' b'gamma' b'pore' b'Horse' b'RNA' b'may' b'be' b'<unk>' b'.' b'For' b'example' b',' b'the' b'nudes' b'later' b'is' b'burnt' b'in' b'this' b'species'
    b',' b'while' b'<unk>' b'could' b'be' b'dealt' b'.' b'When' b'they' b'have' b'maintained' b'off' b'driven' b'all' b'other' b'foliage' b'.' b'One' b'birds' b'I'
    b'do' b'Bernis' b'very' b'more' b'remastered' b'when' b'mean' b'on' b'Earth' b"'" b'death' b'.' b'<eos>' b'sat' b',' b'very' b'than' b'9' b'%' b'have'
    b'no' b'limbs' b'and' b'measure' b'a' b'bill' b'before' b'each' b'other' b'E.122' b'or' b'cash' b'<unk>' b'of' b'Julius' b'spots' b'.' b'While' b'there' b'are'
    b'no' b'pairs' b'of' b'young' b',' b'other' b'types' b'of' b'flocks' b'have' b'led' b'eye' b',' b'such' b'as' b'<unk>' b'occurring' b'.' b'If' b'this'
    b'improved' b'flight' b'and' b'2006' b',' b'those' b'of' b'his' b'nest' b',' b'thousands' b'also' b'focused' b'tightly' b'<unk>' b'.' b'<eos>' b'Several' b'of' b'the'
    b'other' b'common' b'starlings' b'formed' b'numbers' b'of' b'normal' b'food' b'or' b'by' b'other' b'others' b',' b'such' b'on' b'support' b'that' b'widespread' b'pants' b','
    b'spread' b',' b'and' b'<unk>' b'diseases' b'.' b'However' b',' b'during' b'the' b'1997' b'season' b',' b'the' b'kakapo' b'is' b'clear' b'only' b'called' b'noisy'
    b'Theft' b'.' b'It' b'gradually' b'supports' b'its' b'eye' b'(' b'from' b'<unk>' b')' b',' b'Boulevard' b',' b'<unk>' b'and' b'green' b',' b'and' b'as'
    b'the' b'most' b'useful' b'bird' b'encompasses' b'spots' b'.' b'M.' b'Amla\xc3\xadb' b'into' b'1804' b',' b'both' b'piston' b'membrane' b'@-@' b'induced' b',' b'is' b'estimated'
    b'to' b'be' b'then' b'painful' b'.' b'This' b'engraving' b'was' b'Rex' b'Lineberger' b',' b'sailing' b'Jesus' b',' b'which' b'contain' b'low' b',' b'altering' b'forming'
    b',' b'<unk>' b',' b'and' b'mate' b'.' b'The' b'metabolic' b'starling' b',' b'the' b'only' b'organic' b',' b'discretion' b',' b'or' b'other' b'other' b'feed'
    b'after' b'caesium' b'by' b'it' b'has' b'been' b'introduced' b'to' b'writings' b'.' b'The' b'zenith' b'of' b'bright' b'monitoring' b'spots' b'are' b'reported' b'on' b'nature'
    b',' b'therefore' b'smaller' b'or' b'even' b'modifications' b'to' b'their' b'spotting' b'.' b'The' b'method' b'that' b'they' b'are' b'Kakapo' b'from' b'Detroit' b',' b'which'
    b'\xe2\x80\x93' b'350' b'@-@' b'green' b',' b'usually' b'structures' b'decreases' b'into' b'mountain' b'algae' b'.' b'In' b'1912' b',' b'they' b'are' b'individual' b'Regina' b'ice'
    b'structures' b'and' b'calls' b'it' b'every' b'single' b'form' b'for' b'leather' b'feeding' b'.' b'They' b'are' b'preceded' b'by' b'Drax' b',' b'therefore' b'turning' b'to'
    b'a' b'variety' b'of' b'edges' b'.' b'If' b'they' b'are' b'located' b'<unk>' b',' b'this' b'bird' b'might' b'expecting' b'offering' b'them' b'following' b'natural' b'restrictions'
    b'.' b'The' b'population' b'of' b'Greek' b'@-@' b'owned' b'<unk>' b'are' b'after' b'pale' b',' b'but' b'within' b'the' b'stem' b'of' b'the' b'bush' b'or'
    b'narrow' b'acid' b',' b'it' b'features' b'one' b'or' b'more' b'concentrated' b'parts' b'with' b'adults' b'.' b'He' b'also' b'escapes' b'directly' b'with' b'a' b'proposed'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 256.1
    loss: 5.168
    elapsed time (seconds): 173.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  14.099 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
