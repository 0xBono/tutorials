.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'@-@' b'motto' b'his' b'except' b'to' b'take' b'high' b'<unk>' b'during' b'a' b'transit' b',' b'with' b'meeting' b'.' b'Harold' b'<unk>' b'is' b'criticized' b'to'
    b'make' b'their' b'final' b'reason' b'instead' b'of' b'home' b'through' b'the' b'53' b'to' b'14' b'years' b'on' b'board' b'.' b'It' b'won' b'\xe2\x82\xb9' b'250'
    b'million' b'(' b'equivalent' b'to' b'$' b'85' b'@,@' b'000' b'shooting' b')' b'well' b'as' b'Palestinian' b'numbers' b';' b'the' b'two' b'in' b'NBA' b','
    b'a' b'suggestions' b'release' b'dated' b'occasionally' b'prepared' b'previously' b'as' b'an' b'countdown' b'.' b'Following' b'media' b'at' b'least' b'five' b'years' b',' b'at' b'all'
    b'other' b'@-@' b'story' b'writers' b'in' b'such' b'in' b'the' b'long' b'half' b'of' b'what' b'speed' b'or' b'from' b'younger' b'farming' b'have' b'just' b'found'
    b'advanced' b'them' b'.' b'Another' b'<unk>' b'suggest' b'that' b'it' b'was' b'Peccavi' b'to' b'continue' b'Kereya' b'areas' b'radicals' b',' b'although' b'he' b'was' b'the'
    b'only' b'royal' b'posture' b'in' b'his' b'English' b'website' b'and' b'special' b'origin' b',' b'but' b'it' b'has' b'lost' b'some' b'time' b'or' b'to' b'be'
    b'best' b'visible' b'out' b'by' b'<unk>' b'.' b'<eos>' b'Breese' b'and' b'Corporations' b'were' b'elevated' b'known' b'for' b'the' b'call' b'in' b'Agaricales' b',' b'Gabon'
    b',' b'<unk>' b',' b'France' b',' b'subsidize' b',' b'<unk>' b',' b'South' b'Korea' b',' b'\xe2\x89\xa4' b',' b'engraving' b',' b'<unk>' b';' b'Barry' b'<unk>'
    b'and' b'<unk>' b'storyline' b'.' b'It' b'will' b'lose' b'career' b'title' b'and' b'those' b'link' b',' b'from' b'Jonny' b'<unk>' b',' b'<unk>' b'and' b'the'
    b'costliest' b'@-@' b'section' b'<unk>' b'<unk>' b'story' b',' b'which' b'was' b'enhanced' b'by' b'James' b'Holmes' b',' b'interfering' b'"' b'in' b'well' b'"' b','
    b'<unk>' b'<unk>' b'Park' b',' b'and' b'FISA' b',' b'who' b'described' b'its' b'final' b'novel' b'as' b'traveling' b'.' b'They' b'has' b'Midge' b'mixed' b'offices'
    b'because' b'first' b'new' b'school' b'students' b'were' b'both' b'upset' b'by' b'proponents' b',' b'and' b'performed' b'the' b'airing' b'was' b'limited' b'to' b'its' b'forfeits'
    b'.' b'In' b'addition' b',' b'Pampa' b'images' b'has' b'Cumbria' b'so' b'notes' b'in' b'crossing' b'networks' b'or' b'GTX' b'some' b'of' b'its' b'treatment' b'.'
    b'Saladin' b'Stewart' b'ruled' b'similar' b'a' b'promotional' b'girl' b'that' b'included' b'the' b'Augustan' b'History' b"'" b'name' b'was' b'issued' b'.' b'John' b'Jenkins' b'was'
    b'actually' b'named' b'as' b'.' b'One' b'publication' b'required' b'about' b'5' b'%' b'of' b'his' b'money' b'between' b'Walpole' b'and' b'Greg' b'Palmer' b'at' b'a'
    b'memoirs' b'for' b'completing' b'books' b'to' b'citations' b'made' b'him' b'always' b'praised' b'.' b'He' b'decides' b'to' b'indicate' b'Park' b'had' b'the' b'triumphant' b'shrub'
    b',' b'as' b'then' b'immediately' b'emphasized' b'as' b'dynamic' b',' b'so' b'is' b'now' b'used' b'of' b'<unk>' b'@-@' b'oriented' b',' b'so' b'feeling' b'they'
    b'have' b'found' b'and' b',' b'as' b'then' b'the' b'justice' b'achieves' b'"' b'at' b'1998' b'"' b'he' b'contacted' b'in' b'all' b'films' b'.' b'Unfortunately'
    b',' b'Scott' b'of' b'the' b'woods' b'on' b'the' b'Palmyrene' b'system' b'of' b'"' b'fear' b',' b'remarkable' b'@-@' b'speaking' b'conception' b'A.' b'Pitman' b'wrote'
    b'Save' b'it' b',' b'<unk>' b'<unk>' b'and' b'reversed' b'both' b'it' b'.' b'We' b'had' b'her' b'support' b'with' b'silver' b'and' b'very' b'confusion' b'to'
    b'this' b'so' b'that' b'helps' b'<unk>' b',' b'and' b',' b'the' b'government' b'is' b'a' b'value' b'of' b'Awareness' b'"' b'which' b'Dead' b'is' b'a'
    b'planet' b'who' b'should' b'have' b'intoxicated' b'.' b'This' b'led' b'the' b'January' b'character' b'excavations' b'at' b'the' b'end' b'of' b'an' b'popular' b'story' b','
    b'which' b'is' b'now' b'AIF' b'mentioned' b'.' b'Ali' b'Attorney' b'Everett' b'(' b'mentioned' b'a' b'somber' b')' b'is' b'called' b'Gharana' b'couguar' b'after' b'the'
    b'kakapo' b"'s" b'early' b'Cerezo' b'...' b'Niagara' b'is' b'a' b'hard' b'Fatality' b'that' b'is' b'situated' b'by' b'a' b'Thatgamecompany' b',' b'who' b'qualified' b'M\xc3\xa9decins'
    b'punishment' b'goddesses' b'Jesuit' b',' b'remarried' b'as' b'her' b'final' b'<unk>' b',' b'which' b'depicts' b'energy' b'to' b'show' b'you' b'compositions' b'.' b'A' b'first'
    b'time' b'from' b'West' b'Halliwell' b'and' b'Motor' b'<unk>' b'(' b'1897' b')' b'appears' b'to' b'seek' b'different' b'misleading' b',' b'Tanaka' b'societal' b'realizes' b'they'
    b'were' b'a' b'<unk>' b'from' b'Senator' b'Aerosmith' b'.' b'<eos>' b'He' b'is' b'only' b'a' b'Fireforce' b'than' b'<unk>' b'at' b'Corbi\xc3\xa8res' b';' b'another' b'exercise'
    b'see' b'Ti' b',' b'chosen' b'car' b',' b'abuse' b',' b'twisted' b'Deputy' b'art' b'and' b'regeneration' b'but' b'they' b'are' b'under' b'any' b'secondary' b'132'
    b'miles' b'.' b'Later' b'in' b'convict' b',' b'as' b'overwhelmed' b'as' b'"' b'summer' b'.' b'This' b'progressed' b'at' b'night' b',' b'in' b'thought' b'that'
    b'any' b'simplified' b'feel' b'is' b'represented' b'during' b'great' b'<unk>' b',' b'there' b'is' b'few' b'dark' b'subjects' b'whose' b'pattern' b',' b'and' b'myeloid' b'Guthrie'
    b'posing' b'by' b'I' b'look' b'that' b'feels' b'.' b'And' b'it' b'is' b'eating' b'a' b'(' b'this' b')' b'police' b'<unk>' b'"' b'(' b'as'
    b'the' b'day' b'of' b'her' b'death' b'is' b'impure' b')' b',' b'he' b'surrounded' b'writing' b'to' b'be' b'seen' b'as' b'a' b'child' b'between' b'three'
    b'technique' b'.' b'Once' b'they' b'\xe2\x80\x99' b'grows' b'one' b'<unk>' b',' b'but' b'the' b'art' b'forced' b'it' b'feel' b'how' b'the' b'fear' b'defeating' b'its'
    b'most' b'thumb' b'fight' b'\xe2\x80\x94' b'he' b'closed' b'real' b',' b'as' b'now' b'much' b'down' b'this' b'side' b'as' b'being' b'poor' b'stable' b'.' b'Various'
    b'female' b'shapes' b'are' b'probably' b'found' b',' b'if' b'<unk>' b',' b'could' b'elevate' b'pinch' b'distinguished' b'or' b'renovated' b'on' b'their' b'rear' b'basis' b','
    b'and' b'by' b'@-@' b'other' b',' b'"' b'it' b'is' b'little' b'yeah' b'he' b'like' b'a' b'better' b'farm' b'who' b'realize' b'they' b'have' b'.'
    b'"' b'Hornung' b'instead' b'stated' b'positively' b'to' b'be' b'a' b'weapon' b',' b'especially' b'(' b'characters' b'not' b'sustained' b'by' b'"' b'milk' b'"' b'or'
    b'"' b'punishment' b'"' b',' b'and' b'Echmarcach' b'pointed' b'her' b'to' b'be' b'the' b'"' b'rare' b'Iron' b'starlings' b'of' b'archaic' b'"' b'by' b'being'
    b'referred' b'to' b'draining' b'poets' b'based' b'as' b'other' b'feeding' b'feet' b')' b'.' b'In' b'the' b'2007' b'Voice' b'Mark' b'attends' b'range' b',' b'David'
    b'odoratus' b',' b'<unk>' b'Gonzalez' b',' b'Karol' b'<unk>' b',' b'Prasad' b'Composer' b',' b'teleplay' b',' b'and' b'Rodriguez' b'focuses' b'disuse' b'at' b'Los' b'Organ'
    b'comics' b',' b'and' b'also' b'seriously' b'were' b'achieved' b'individually' b'.' b'Their' b'highlights' b'involves' b'Eastern' b'mammals' b'and' b'specializes' b'presented' b'with' b'<unk>' b'and'
    b'pain' b'while' b'<unk>' b',' b'for' b'a' b'female' b'in' b'a' b'similar' b'manner' b'collection' b',' b'but' b'Christmastime' b'literacy' b'him' b'to' b'be' b'sensible'
    b'.' b'When' b'it' b'is' b'mainly' b'known' b'for' b'syllables' b',' b'or' b'that' b',' b'they' b'have' b'more' b'good' b"'" b'pond' b'at' b'many'
    b'other' b'<unk>' b'Mary' b'One' b',' b'a' b'member' b'of' b'pale' b'degradation' b',' b'and' b'the' b'last' b'colour' b'that' b'appears' b'well' b'when' b'other'
    b'of' b'Ceres' b'out' b'of' b'people' b'is' b'<unk>' b'when' b'his' b'protagonist' b'killed' b'her' b'sense' b'witnesses' b'.' b'A' b'<unk>' b'of' b'other' b'kakapo'
    b'may' b'think' b'ensure' b'since' b'"' b'<unk>' b'"' b',' b'"' b'economically' b'emotions' b'"' b',' b'being' b'put' b'in' b'1558' b'as' b'a' b'very'
    b'examples' b'of' b'Tempest' b',' b'consulting' b'in' b'Ireland' b'was' b'waited' b'to' b'find' b'when' b'the' b'authority' b'does' b'either' b'show' b'.' b'This' b'bodies'
    b'mostly' b'lack' b'of' b'abundant' b'pop' b'toxicity' b'(' b'or' b'4He' b')' b',' b'lake' b'<unk>' b',' b'and' b'flame' b'disc' b'leaves' b'them' b';'
    b'<unk>' b'authenticity' b',' b'as' b'attractive' b';' b'their' b'low' b'combinations' b'are' b'simply' b'Ideal' b'plants' b'that' b'is' b'being' b'traditionally' b'associated' b'on' b'his'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 233.3
    loss: 5.168
    elapsed time (seconds): 164.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  42.086 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
