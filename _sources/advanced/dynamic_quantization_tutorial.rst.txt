.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Hale' b'short' b'@-@' b'time' b'eyes' b',' b'and' b'was' b'nominated' b'for' b'dissatisfied' b'defeat' b'because' b'of' b'the' b'"' b'eradication' b'of' b'celestial' b'vision'
    b'"' b'.' b'The' b'association' b'in' b'2008' b'against' b'the' b'family' b'reaches' b'Baker' b"'s" b'cottage' b'of' b'rulers' b'in' b'the' b'second' b'season' b','
    b'killing' b'even' b'Patrick' b'unaffected' b'Hornung' b"'s" b'<unk>' b',' b'New' b'York' b'aged' b'u' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'1945' b'\xe2\x80\x93'
    b'2006' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'virtual' b'evidence' b'of' b'Tufaro' b'near' b'Ceres' b'is' b'religious' b',' b'somewhat' b'driven' b'on' b'its'
    b'preparation' b',' b'before' b',' b'only' b'in' b'no' b'Game' b'I' b'.' b'On' b'this' b'reason' b',' b'Diane' b'<unk>' b'Change' b'sought' b'to' b'be'
    b'heard' b',' b'such' b'as' b'Independence' b'Day' b',' b'Jasmine' b'Dor' b',' b'and' b'James' b'<unk>' b'Dick' b'<unk>' b'.' b'By' b'September' b'90' b','
    b'2011' b',' b'that' b'year' b'80' b'@.@' b'5' b'percent' b'comprised' b'it' b'.' b'He' b'gave' b'three' b'of' b'the' b'next' b'to' b'October' b'1'
    b',' b'1995' b',' b'once' b'without' b'nearly' b'two' b'years' b'the' b'band' b'began' b'.' b'On' b'November' b'full' b',' b'DC' b'in' b'Chains' b'has'
    b'taken' b'over' b'26' b'minutes' b'during' b'2008' b'\xe2\x80\x93' b'20' b'(' b'1999' b')' b'.' b'Kelefa' b'an' b'arrangement' b'at' b'fair' b',' b'in' b'her'
    b'cars' b',' b'are' b'a' b'pure' b'case' b'of' b'collection' b'.' b'The' b'<unk>' b'@-@' b'like' b'young' b'season' b'Wolfpack' b'<unk>' b'for' b'50' b'weeks'
    b'apart' b'at' b'a' b'meeting' b'and' b'had' b'three' b'stories' b'and' b'commercial' b'damage' b',' b'gold' b',' b'and' b'its' b'blend' b'of' b'69' b'million'
    b',' b'to' b'promote' b'a' b'public' b'spokesperson' b'with' b'the' b'sluggish' b'acquisition' b'of' b'young' b'municipalities' b'.' b'One' b'scholars' b'on' b'the' b'starling' b'juveniles'
    b'include' b'the' b'plaster' b'and' b'<unk>' b',' b'<unk>' b',' b'frustrated' b',' b'and' b'as' b'difficult' b'to' b'be' b'five' b'@.@' b'33' b'.' b'Each'
    b'type' b'continues' b'to' b'have' b'a' b'option' b'in' b'a' b'Fromental' b'Board' b'roadside' b'uncut' b',' b'which' b'Ted' b'requires' b'the' b'categorization' b'of' b'their'
    b'<unk>' b'cause' b'to' b'the' b'Stanley' b'Cathedral' b'.' b'"' b'In' b'the' b'demise' b'of' b'Mars' b'and' b'moments' b'in' b'places' b'begins' b',' b'which'
    b'can' b'be' b'stopped' b'.' b'The' b'old' b'absolute' b'fuses' b'is' b'a' b'orbit' b',' b'and' b'much' b'characters' b'hunt' b'a' b'maintenance' b'some' b'of'
    b'a' b'very' b'powerful' b'theme' b'.' b'If' b'this' b'fundamental' b',' b'it' b'has' b'one' b'attendant' b'wrong' b'perfectly' b'on' b'all' b'to' b'inspect' b'['
    b'it' b'is' b'the' b'historical' b'word' b'as' b'wish' b'to' b'level' b'.' b'"' b'Whenever' b'that' b'year' b',' b'males' b'conversion' b'from' b'their' b'Broward'
    b'product' b'(' b'260' b'\xe2\x80\x94' b'superhuman' b'Canada' b')' b'around' b'shadows' b'and' b':' b'"' b'guess' b'and' b'consistently' b'"' b'preserve' b',' b'and' b'wonder'
    b'up' b'brown' b'burrowing' b'Spawls' b'.' b'They' b'compared' b'to' b'using' b'the' b'lack' b'of' b'"' b'syllables' b'"' b'analog' b'Parlabane' b'in' b'nicknamed' b'heart'
    b'Feel' b'to' b'their' b'collection' b'it' b'with' b'their' b'"' b'unique' b'"' b'print' b',' b'Meath' b',' b'scavengers' b',' b'Spanish' b'and' b'lack' b'collectively'
    b',' b'or' b',' b'which' b'focused' b'back' b'when' b'ships' b'died' b'and' b'even' b'possession' b'of' b'cause' b'introduced' b';' b'<unk>' b',' b'Middleton' b','
    b'<unk>' b',' b'moves' b',' b'food' b',' b'geography' b',' b'<unk>' b',' b'even' b'diagram' b'arrives' b'in' b'1909' b'.' b'<eos>' b'thumb' b',' b'Khmer'
    b'and' b'tail' b'appears' b'among' b'soul' b',' b'sex' b',' b'<unk>' b',' b'and' b'male' b'<unk>' b',' b'the' b'head' b'made' b'by' b'"' b'Thea'
    b'"' b';' b'she' b'also' b'stated' b'that' b'"' b'I' b'citations' b'Miss' b'"' b'is' b'<unk>' b'.' b'The' b'fact' b'from' b'Mrs.' b"'in" b'Weyden'
    b'would' b'find' b'"' b'Outsider' b'"' b',' b'which' b'are' b'branded' b'by' b'Labour' b'Street' b',' b'who' b'said' b'Ceres' b'\xe2\x80\x94' b'gave' b'that' b'the'
    b'attitude' b'of' b'Allah' b'1264' b'so' b'with' b'one' b'of' b'his' b'songs' b',' b'the' b'word' b'bearing' b'<unk>' b'Christ' b"'" b'latest' b'form' b'"'
    b'until' b'comes' b'into' b'or' b'<unk>' b'in' b'greater' b'instant' b'clothes' b'"' b'.' b'NBC' b'was' b'(' b'reasoned' b'of' b'his' b'father' b"'s" b'successor'
    b')' b'choir' b'she' b'was' b'Hawaii' b'floated' b'from' b'Journal' b'<unk>' b'(' b'Java' b')' b'.' b'In' b'2005' b',' b'<unk>' b'<eos>' b'Chulachomklao' b'critic'
    b'Barbara' b'Bang' b'et' b'(' b'September' b'4' b',' b'2006' b')' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Collymore' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'At' b'the' b'beginning' b'of' b'his' b'death' b',' b'Each' b'films' b'is' b'suited' b'to' b'mocks' b'fox' b'fields' b'of' b'Alicante' b',' b'545' b','
    b'and' b'even' b'can' b'be' b'closely' b'adapted' b'to' b'refine' b'them' b'.' b'In' b'1823' b',' b'when' b'it' b'was' b'known' b'to' b'be' b'discovered'
    b'in' b'reference' b'or' b'usually' b',' b'Dodge' b'appears' b'on' b'his' b'final' b'technical' b'version' b'of' b'dialogue' b'and' b'found' b'a' b'brother' b'with' b'Raffles'
    b'value' b'even' b',' b'Derek' b'Hentz' b',' b'Antrim' b'Moncrieff' b',' b'Christian' b'<unk>' b',' b'Robert' b'Education' b',' b'Miles' b'"' b'Dream' b'and' b'Charmbracelet'
    b'"' b',' b'comeback' b'horror' b',' b'Pym' b',' b'and' b'<unk>' b'Ball' b';' b'Mark' b'Mike' b'journeyed' b'Vol' b',' b'others' b'remarkably' b'gamers' b','
    b'and' b'cited' b'certain' b'religious' b'rumor' b'.' b'Here' b',' b'appearing' b'on' b'<unk>' b'(' b'Jesse' b'Frost' b')' b'in' b'Athletics' b'were' b'introduced' b'to'
    b'ii' b'.' b'Tales' b':' b'the' b'Symphonic' b'Machine' b'Boom' b'Race' b'effort' b'again' b'against' b'impossibility' b'to' b'fruition' b'near' b'krypton' b',' b'which' b'includes'
    b'her' b'name' b'at' b'himself' b'and' b'regarding' b'other' b'members' b'of' b'staples' b',' b'such' b'as' b'Kaori' b"'s" b'other' b'similar' b'internal' b'whose' b'singers'
    b'(' b'like' b'flight' b'@-@' b'husband' b')' b',' b'and' b'constructed' b'that' b'congregation' b'were' b'permitted' b'to' b'be' b'the' b'company' b'\xe2\x80\x94' b'and' b'with'
    b'his' b'mild' b'background' b'on' b'the' b'Trollope' b'!' b'model' b'<unk>' b'Football' b'science' b'verge' b'.' b'The' b'story' b'in' b'the' b'book' b'was' b'invited'
    b'to' b'have' b'published' b'a' b'adult' b'farming' b',' b'especially' b'if' b'the' b'game' b'will' b'be' b'written' b'.' b'Now' b'when' b'he' b'falls' b','
    b'according' b'to' b'a' b'death' b'of' b'an' b'youthful' b'troubles' b':' b'Lanois' b'(' b'vi' b')' b';' b'a' b'female' b'Nordic' b'reproduction' b'which' b"'ll"
    b'be' b'self' b'@-@' b'Islamic' b'<unk>' b'Myles' b',' b'created' b'the' b'songs' b'that' b'many' b'other' b'characters' b'are' b'<unk>' b'between' b'the' b'Arabic' b'and'
    b'convict' b'.' b'As' b'an' b'victim' b',' b'aged' b'1648' b'had' b'questioned' b'as' b'response' b'on' b'life' b'is' b'given' b'a' b'planet' b'flip' b'<unk>'
    b',' b'while' b'he' b'is' b'serviced' b'in' b'the' b'squat' b',' b'praising' b'"' b"'s" b'head' b'they' b'"' b'but' b'autoharp' b'hoping' b'too' b','
    b'<unk>' b'when' b'this' b'thought' b'is' b'recording' b'by' b'impossible' b'to' b'give' b'him' b'bearing' b'.' b'However' b',' b'that' b'requests' b'companies' b'does' b'insist'
    b'such' b'as' b'galaxy' b'as' b'"' b'<unk>' b'making' b'herb' b'that' b'there' b'are' b'no' b'evidence' b'that' b'philanthropist' b'aren' b"'t" b'reign' b'like' b'it'
    b'wasn' b"'t" b'get' b'anything' b'certain' b'insignia' b'portraits' b'of' b'tree' b'technology' b'"' b'.' b'Manufacturers' b'language' b'discussed' b'Doyle' b'with' b'his' b'Hermes' b':'
    b'"' b'I' b"'m" b'a' b'set' b'<unk>' b'with' b'driving' b'space' b'like' b'attend' b'<unk>' b'from' b'<unk>' b'mythology' b'.' b'His' b'evidence' b'might' b'be'
    b'connected' b',' b'Death' b'at' b'the' b'fourth' b'time' b'old' b'.' b'"' b'<eos>' b'The' b'book' b'did' b'not' b'handle' b'his' b'Englishwoman' b'I' b'grown'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 217.7
    loss: 5.168
    elapsed time (seconds): 152.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  15.296 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
