.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'as' b'Jewish' b'<unk>' b'.' b'According' b'to' b'Liberal' b'Talking' b',' b'the' b'bloody' b'monument' b'on' b'Brett' b'Huguenots' b'have' b'no' b'Charmed' b'frigates' b'for'
    b'Newfoundland' b'.' b'<eos>' b'Bon' b'was' b'a' b'spruces' b'compared' b'before' b'<unk>' b'colonial' b'mansions' b',' b'which' b'mentions' b'do' b'not' b'die' b'from' b'.'
    b'<unk>' b'in' b'brilliantly' b'the' b'game' b'task' b'in' b'her' b'apartment' b'condemned' b'numbers' b'of' b'spare' b'mechanical' b'material' b',' b'many' b'nuclei' b'dinosaur' b'Reader'
    b',' b'Saudi' b'tsu' b',' b'and' b'virtuosity' b'.' b'The' b'only' b'cable' b'flight' b'system' b',' b'including' b'which' b'rendering' b'zero' b'emperor' b'when' b'is'
    b'found' b'out' b'or' b'hence' b'to' b'blockbuster' b',' b'effect' b'for' b'several' b'years' b'.' b'Many' b'of' b'these' b'are' b'of' b'large' b'accounts' b','
    b'rather' b'than' b'there' b'are' b'more' b'attached' b',' b'while' b'fledged' b'the' b'academy' b'and' b'objects' b'of' b'the' b'origins' b'of' b'whether' b'refers' b'to'
    b'their' b'tail' b'is' b'very' b'far' b'.' b'If' b'they' b'may' b're' b'@-@' b'out' b'occur' b'in' b'the' b'last' b'century' b',' b'past' b'every'
    b'record' b'of' b'secondary' b'similar' b'fuel' b'reporter' b'that' b'represents' b'trioxide' b'and' b'Sitriuc' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Applications' b'=' b'=' b'<eos>'
    b'<eos>' b'Ireland' b"'s" b'highest' b'two' b'performances' b'had' b'four' b'.' b'<unk>' b'the' b'tore' b'Baltimore' b'Mode' b'in' b'PPCLI' b'by' b'use' b'There' b'was'
    b'over' b'an' b'strength' b'of' b'22' b'ft' b'(' b'14' b'@.@' b'8' b'in' b')' b',' b'which' b'had' b'4' b'reviews' b'to' b'the' b'Irish'
    b'period' b',' b'but' b'demands' b'<unk>' b'in' b'Indian' b',' b'covered' b'with' b'its' b'inauguration' b',' b'stretching' b'that' b'he' b'still' b'spread' b'.' b'Males'
    b'will' b'be' b'beneficial' b'off' b'high' b'and' b'black' b'bird' b'brown' b'poles' b'when' b'stored' b'it' b'.' b'He' b'indigo' b'from' b'Domnall' b'include' b'its'
    b'family' b'even' b'favor' b'around' b'speech' b'and' b'in' b'Icy' b'@-@' b'metre' b'areas' b',' b'who' b'consists' b'of' b'much' b'revised' b'or' b'elicit' b'practices'
    b'.' b'The' b'trees' b'<unk>' b'reformed' b'that' b'there' b'is' b'no' b'good' b'eggs' b'.' b'winters' b'may' b'"' b'keep' b'exceptional' b'smoking' b'in' b'processing'
    b'ribosomes' b',' b'among' b'hundreds' b'and' b'empty' b'their' b'explanation' b'of' b'Gaiety' b'or' b'other' b'their' b'wings' b'from' b'male' b'documents' b'.' b'"' b'Each'
    b'steals' b'it' b',' b'often' b'read' b'moving' b'from' b'it' b'for' b'time' b',' b'that' b'Sikh' b'boxes' b',' b'exposed' b'going' b'to' b'be' b'analyzed'
    b'.' b'Suvarnabhumi' b'<unk>' b'maintains' b'emotional' b'are' b'volcanoes' b'with' b'those' b'of' b'Yorkshire' b'and' b'one' b'small' b'chin' b',' b'most' b'kakapo' b'wolf' b'and'
    b'aerial' b',' b'light' b',' b'or' b'<unk>' b'Europe' b'.' b'Above' b'for' b'diet' b'often' b'regulate' b'by' b'rise' b',' b'pair' b'have' b'pivotal' b'across'
    b'the' b'former' b'<unk>' b'body' b',' b'in' b'which' b'under' b'agricultural' b'studies' b'such' b'as' b'<unk>' b'wavelength' b'@-@' b'shaped' b'many' b'diet' b',' b'or'
    b'collapsing' b'several' b'environments' b'and' b'foraging' b'mm' b'in' b'intelligent' b'acceptance' b'.' b'If' b'<unk>' b'throughout' b'<unk>' b',' b'due' b'to' b'they' b'have' b'thrown'
    b'up' b'many' b'are' b'.' b'Up' b'this' b'species' b'culture' b'stood' b',' b'just' b'of' b'whom' b'does' b'not' b'arise' b'under' b'them' b'such' b'as'
    b'Path' b'or' b'Indolence' b'.' b'A' b'caliber' b'library' b',' b'parades' b',' b'or' b'stowage' b'such' b'as' b'<unk>' b'plant' b'woodlands' b',' b'feathers' b','
    b'subdivided' b'and' b'flies' b'bodies' b',' b'only' b'exist' b'.' b'In' b'Bloody' b'Carroll' b"'s" b'native' b'agricultural' b',' b'and' b'most' b'Burrows' b',' b'short'
    b'ignorance' b'open' b'a' b'Mt' b'range' b'(' b'accidentally' b'of' b'beaches' b')' b',' b'of' b'seated' b'the' b'structural' b'Balkan' b'(' b'forefront' b')' b','
    b'not' b'connected' b'for' b'rains' b'during' b'Europe' b'.' b'In' b'this' b'weight' b',' b'women' b'limbs' b'(' b'sometimes' b'hostile' b',' b'filming' b'or' b'trio'
    b')' b',' b'phrase' b'males' b',' b'<unk>' b'and' b'deliberate' b'wrangling' b',' b'and' b'at' b'the' b'University' b'.' b'In' b'invertebrates' b',' b'it' b'slip'
    b'along' b'a' b'stream' b'of' b'mitosis' b',' b'while' b'very' b'<unk>' b'diseases' b'(' b'2005' b')' b'may' b'be' b'twin' b'by' b'whereas' b'they' b"'re"
    b'3' b'\xe2\x80\x93' b'18' b'\xc2\xb5m' b'.' b'This' b'has' b'turned' b'down' b'to' b'flocks' b'in' b'the' b'longest' b'of' b'depends' b'on' b'Lambeosaurus' b',' b'flies'
    b'with' b'currencies' b'.' b'Male' b'birds' b'collected' b'their' b'<unk>' b'control' b',' b'a' b'spaceship' b'with' b'Celtic' b'fundamental' b'pesos' b'and' b'drugs' b'.' b'After'
    b'they' b'occur' b'their' b'Inari' b'width' b',' b'the' b'presence' b'of' b'their' b'plumage' b'other' b'likely' b',' b'height' b'over' b'Curtain' b'.' b'They' b'may'
    b'represent' b'such' b'\xe2\x80\x91' b'establishments' b'<unk>' b'.' b'Nonetheless' b',' b'isotopes' b'do' b'replaces' b'any' b'of' b'any' b'way' b'because' b'it' b'may' b'be' b'fist'
    b'and' b'the' b'<unk>' b'.' b'<eos>' b'In' b'1903' b',' b'<unk>' b'(' b'also' b'labelled' b'roughly' b'60' b'million' b'starlings' b'are' b'unknown' b',' b'which'
    b'remained' b'Bell' b')' b'and' b'the' b'bowls' b'wealth' b'in' b'amino' b'populations' b'and' b'the' b'Viscount' b"'s" b'2008' b'\xe2\x80\x93' b'09' b'season' b',' b'carry'
    b'to' b'many' b'birds' b',' b',' b'register' b'levels' b'throughout' b'drawing' b'habits' b'.' b'Situated' b'in' b'pre' b'@-@' b'rich' b'devotees' b',' b'types' b'calculated'
    b'sense' b'proposes' b'transcription' b',' b'and' b'karyopherins' b'are' b'introduced' b'on' b'how' b'they' b'are' b'<unk>' b'.' b'Another' b'lek' b'stem' b'may' b'be' b'found'
    b'to' b'be' b'mutiny' b'.' b'viewers' b'are' b'example' b'for' b'their' b'pair' b'which' b'does' b'not' b'gather' b'short' b'common' b'starlings' b'.' b'Gaboon' b'accounts'
    b'is' b'use' b'of' b'something' b'human' b'.' b'Character' b'Irish' b'<eos>' b'These' b'abnormalities' b'are' b'<unk>' b'plumage' b'.' b'Lady' b'<unk>' b'lead' b'towards' b'other'
    b'broods' b'<unk>' b'cargo' b'fruit' b'noise' b'.' b'That' b'advantage' b'are' b'an' b'Emerald' b'eggs' b'(' b'originally' b'one' b'that' b'they' b'contrary' b'is' b'at'
    b'least' b'12' b'km' b'per' b'hour' b'(' b'7' b'@.@' b'9' b'in' b')' b'respectively' b',' b'so' b'they' b'are' b'close' b'on' b'a' b'Baptiste'
    b'pigment' b'for' b'the' b'head' b'between' b'5' b'and' b'9' b'years' b'.' b'Males' b'have' b'English' b'fewer' b'features' b',' b'and' b'14' b'females' b'are'
    b'viewed' b'as' b'an' b'IRA' b'movement' b'that' b'they' b'reach' b'chicks' b'due' b'to' b'.' b'In' b'some' b'way' b',' b'this' b'may' b'be' b'true'
    b'or' b'quite' b'enough' b'to' b'be' b'treated' b';' b'even' b'that' b'it' b'will' b'be' b'therefore' b'seen' b'as' b'they' b'contribute' b'to' b'some' b'for'
    b'the' b'unity' b'of' b'amino' b'acids' b'.' b'With' b'all' b'other' b'regions' b',' b'they' b'were' b'Huey' b'gloves' b'slowly' b'.' b'Therefore' b',' b'it'
    b'gives' b'no' b'<unk>' b'is' b'more' b'<unk>' b'.' b'His' b'family' b'denial' b'was' b'at' b'Saint' b'Place' b',' b'and' b'radiates' b'as' b'another' b'barren'
    b'stripe' b'.' b'The' b'archipelago' b'abilities' b'has' b'sheep' b'Magdalena' b'straw' b'.' b'<eos>' b'<eos>' b'=' b'=' b'In' b'his' b'existence' b'=' b'=' b'<eos>'
    b'<eos>' b'The' b'common' b'starling' b'expanded' b'sequences' b'in' b'size' b'throughout' b'the' b'2005' b'race' b'(' b'Species' b')' b',' b'The' b'resulting' b'price' b'on'
    b'Potter' b'in' b'way' b'.' b'A' b'sixteen' b'@-@' b'degree' b'chestnut' b'account' b'for' b'a' b'short' b'National' b'team' b',' b'the' b'Greek' b'asteroid' b','
    b'central' b'side' b'of' b'<unk>' b',' b'is' b'only' b'a' b'phenomenon' b'.' b'Later' b'there' b'were' b'short' b'molecules' b'with' b'six' b'or' b'females' b'.'
    b'In' b'the' b'abdominal' b',' b'the' b'kakapo' b'does' b'jumping' b',' b'and' b'operate' b'to' b'nectar' b',' b'the' b'adults' b'evangelical' b'them' b'and' b'deployed'
    b'a' b'range' b'of' b'bird' b'.' b'Soyuz' b',' b'they' b'have' b'remind' b',' b'(' b'by' b'some' b'display' b'of' b'<unk>' b')' b'on' b'one'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 240.8
    loss: 5.168
    elapsed time (seconds): 169.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  55.794 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
