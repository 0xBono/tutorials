.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'for' b'gunpowder' b'kilometers' b'as' b'the' b'1950s' b',' b'which' b'is' b'<unk>' b'by' b'Victoria' b'and' b'Bell' b',' b'but' b'also' b'impose' b'them' b','
    b'so' b'by' b'Palm' b'County' b'inscriptions' b'mentioned' b'this' b'area' b'of' b'man' b'to' b'continue' b'both' b'the' b'series' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Present' b'sales' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Name' b'of' b'incoming' b'steppe' b',' b'fake' b'@-@' b'green' b'sockeye' b'monkeys' b'and' b'fir' b'have'
    b'been' b'organelle' b'to' b'celebrate' b'security' b';' b'and' b'Mhalsa' b',' b'32nd' b'%' b'per' b'numbered' b'birds' b'were' b'found' b'for' b'about' b'3' b'to'
    b'5' b'%' b'to' b'become' b'the' b'city' b"'s" b'son' b'of' b'white' b'first' b'.' b'In' b'the' b'fourth' b'game' b'of' b'the' b'<unk>' b','
    b'in' b'the' b'town' b'they' b'are' b'able' b'to' b'shift' b'to' b'their' b'<unk>' b'Point' b',' b'Athletics' b',' b'which' b'may' b'continue' b'exclusive' b'as'
    b'they' b'cannot' b'lead' b'their' b'slavery' b'.' b'<unk>' b'do' b'not' b'classify' b'the' b'FIA' b"'s" b'life' b',' b'but' b'they' b',' b'they' b'consider'
    b'them' b'to' b'have' b'maintained' b'Bayud' b'from' b'his' b'impact' b'.' b'Slate' b'have' b'suggested' b'then' b'comprehensive' b'affect' b'reception' b'in' b'different' b'areas' b'.'
    b'A' b'feature' b'population' b'has' b'currently' b'allowed' b'with' b'a' b'interest' b'.' b'According' b'to' b'H.' b'<unk>' b'Stefan' b'Apostolid\xc3\xa8s' b'suggests' b'that' b'it' b'is'
    b'exactly' b'that' b'the' b'church' b'itself' b'did' b'not' b'be' b'held' b'.' b'It' b'is' b'suggested' b'that' b'a' b'Formula' b'One' b'very' b'valuable' b'race'
    b'should' b'be' b'found' b'to' b'Rogatti' b',' b'however' b',' b'suggests' b'that' b'religious' b'cultural' b'amounts' b'of' b'Odaenathus' b'tend' b'to' b'expel' b'another' b'explosive'
    b'breeze' b'.' b'To' b'eat' b'other' b'faces' b',' b'they' b'explores' b'this' b'conference' b'very' b'completely' b'to' b'make' b'<unk>' b'Center' b'programs' b',' b'in'
    b'1961' b',' b'namely' b'a' b'fitting' b'implement' b'of' b'ceramics' b',' b'jerseys' b',' b'mechanism' b',' b'<unk>' b',' b'derivatives' b'and' b'<unk>' b';' b'a'
    b'<unk>' b'of' b'steeple' b',' b'take' b'by' b'a' b'total' b'of' b'nails' b'period' b',' b'Korvettenkapit\xc3\xa4n' b'<unk>' b'regarding' b'<unk>' b',' b'<unk>' b',' b'Moray'
    b'and' b'ascend' b'using' b'twenty' b'passages' b'throughout' b'1990' b'@-@' b'report' b'<unk>' b',' b'one' b',' b'Borders' b'perpetrator' b',' b'<unk>' b',' b'food' b','
    b'Avignon' b',' b'mechanized' b'and' b'development' b'.' b'This' b'sheep' b'game' b'or' b'was' b'reserved' b'by' b'massive' b'further' b'pounding' b'.' b'A' b'portion' b'of'
    b'three' b'churches' b'left' b'to' b'prevent' b'translation' b'(' b'Plum' b'algae' b')' b'include' b'a' b'group' b'of' b'18' b'\xe2\x80\x93' b'9' b'Texas' b',' b'which'
    b'should' b'not' b'be' b'lowest' b';' b'retiring' b'"' b'Enduring' b'toxicity' b'of' b'any' b'time' b'"' b'was' b'allowed' b'that' b'to' b'indicate' b'that' b'a'
    b'variety' b'of' b'new' b'tombs' b'on' b'many' b'countries' b'are' b'required' b'but' b'even' b'might' b'<unk>' b'700' b'centimetres' b'(' b'260' b'km' b')' b'wide'
    b'.' b'Despite' b'some' b'these' b'birds' b',' b'some' b'estimate' b'often' b'pork' b'demanded' b'them' b'to' b'be' b'severe' b'.' b'They' b'first' b'wanted' b'to'
    b'be' b'a' b'predator' b'since' b'they' b'are' b'very' b'rapidly' b'in' b'any' b'honour' b'or' b'way' b'.' b'<eos>' b'Outside' b'after' b'polka' b',' b'or'
    b'far' b'to' b'starling' b'other' b'value' b',' b'many' b'Jupiter' b'kakapo' b'have' b'many' b'risk' b'for' b'the' b'first' b'time' b'to' b'avoid' b'and' b'if'
    b'it' b'should' b'be' b'inhalation' b'.' b'As' b'Voce' b'for' b'repairing' b'males' b',' b'none' b'by' b'protein' b'observations' b'maid' b'totals' b'well' b'as' b'scenic'
    b',' b'food' b',' b'perch' b',' b'arrangement' b',' b'Doping' b',' b'M.' b'Davenport' b',' b'rice' b',' b'<unk>' b',' b'@-@' b'verified' b',' b'iron'
    b'plants' b',' b'and' b'<unk>' b'.' b'This' b'Anglo' b'@-@' b'spored' b'summarized' b'three' b'or' b'even' b'out' b',' b'(' b'encouragement' b'being' b'certain' b'as'
    b'suggesting' b'when' b'the' b'combination' b'of' b'fertilizers' b'<unk>' b'or' b'acid' b'or' b'<unk>' b')' b'.' b'Opinions' b'might' b'be' b'environmental' b'after' b'God' b','
    b'but' b'as' b'they' b'are' b'<unk>' b'.' b'They' b'have' b'large' b',' b'beast' b',' b'even' b'doubtful' b'@-@' b'known' b',' b'with' b'parrot' b'and'
    b'hypotheses' b',' b'those' b'that' b'might' b'be' b'to' b'be' b'tradition' b'of' b'forth' b'during' b'the' b'winter' b'when' b'they' b'can' b'kills' b'a' b'true'
    b'tree' b'.' b'<unk>' b'can' b'be' b'suggested' b'for' b'rapid' b'distraught' b',' b'and' b'induction' b'males' b'aged' b'.' b'Once' b',' b'they' b'use' b'when'
    b'their' b'topical' b'condition' b'occurred' b'down' b'as' b',' b'they' b'do' b'not' b'contain' b'any' b'<unk>' b'.' b'As' b'there' b'was' b'some' b'tornadoes' b','
    b'the' b'leaders' b'were' b'remarkable' b'extend' b'through' b'46' b'years' b'but' b'operation' b',' b'and' b'often' b"'d" b',' b'set' b'during' b'some' b'years' b'that'
    b'they' b'feature' b'their' b'pursuit' b'and' b'their' b'cause' b'.' b'Nevertheless' b',' b'trees' b'requirements' b'diminished' b'until' b'one' b'states' b'for' b'its' b'mother' b"'s"
    b'body' b'.' b'refer' b'to' b'other' b'structures' b',' b'they' b'will' b'begin' b'the' b'evidence' b'was' b'depleted' b'.' b'They' b'allows' b'blurred' b'activities' b'over'
    b'their' b'aim' b'to' b'own' b'<unk>' b'.' b'2008' b'then' b'enter' b'responses' b'over' b'Statement' b'on' b'an' b'planet' b"'s" b'body' b'minute' b',' b'so'
    b'they' b'should' b'require' b'it' b'of' b'tool' b'one' b'.' b'Even' b'that' b'there' b'is' b'no' b'theme' b',' b'they' b'feed' b'by' b'Astoria' b'.'
    b'He' b'can' b'identify' b'many' b'pairs' b'of' b'food' b'game' b',' b'the' b'task' b'of' b'<unk>' b'and' b'ne' b'the' b'Cajal' b'atmosphere' b'with' b'Kusanagi'
    b',' b'he' b'putting' b'them' b'to' b'be' b'able' b'to' b'progress' b'so' b'on' b'particular' b'.' b'If' b'not' b'they' b',' b'they' b'are' b'impossible'
    b'to' b'be' b'other' b'alpha' b'.' b'employing' b'very' b'distinct' b'eggs' b'upon' b'they' b'do' b'those' b'occur' b',' b'instead' b'under' b'carved' b'square' b'days'
    b'face' b'.' b'Jain' b'eggs' b'have' b'been' b'reduced' b',' b'with' b'an' b'dark' b'spot' b'for' b'an' b'average' b'deal' b'.' b'For' b'example' b'there'
    b'is' b'numerous' b'widespread' b'people' b'that' b'may' b'be' b'difficult' b'.' b'In' b'Connecticut' b'Kody' b'Papert' b'outward' b'at' b'gamma' b',' b'and' b'is' b'Marion'
    b'@-@' b'bearing' b'Fischer' b'bears' b'yellow' b'.' b'Each' b'male' b'may' b'feed' b'on' b'3' b'September' b'1941' b',' b'which' b'in' b'certain' b'season' b'.'
    b'<eos>' b')' b'is' b'normally' b'known' b'for' b'of' b'nesting' b'or' b'ash' b'.' b'The' b'bird' b'has' b'a' b'range' b'of' b'signal' b'from' b'smallest'
    b'observations' b'from' b'an' b'change' b'before' b'it' b'may' b'be' b'too' b'determined' b'.' b'Common' b'unnatural' b'plumage' b'could' b'be' b'killed' b'when' b'Z.' b'allows'
    b'wars' b':' b'weakness' b'.' b'Their' b'core' b'in' b'grief' b'is' b'less' b'natural' b'.' b'Observations' b'who' b'instead' b'greatly' b'killed' b'Inari' b',' b'birds'
    b'and' b'or' b'the' b'surprising' b'segment' b',' b'measured' b'by' b'genes' b'of' b'comparisons' b',' b'equal' b'conditions' b'of' b'pine' b',' b'creatures' b',' b'vertical'
    b',' b'paler' b'and' b'<unk>' b'may' b'be' b'align' b'.' b'This' b'demand' b'masses' b'have' b'no' b'intact' b',' b'body' b',' b'estates' b',' b'literary'
    b',' b'forming' b'or' b'even' b'they' b'produce' b'insignia' b'.' b'It' b'exists' b'when' b'a' b'eye' b'is' b'organized' b'on' b'freshman' b'(' b'ATV' b')'
    b',' b'approximately' b'4' b'%' b',' b'and' b'a' b'eye' b'lives' b'between' b'eye' b'females' b',' b'and' b'path' b'around' b'its' b'<unk>' b'or' b'deadly'
    b',' b'then' b'playing' b',' b'on' b'going' b'a' b'243' b'or' b'5' b'hour' b'(' b'9' b'@.@' b'3' b'in' b')' b'from' b'their' b'torso'
    b'.' b'<eos>' b'In' b'Switzerland' b',' b'females' b'can' b'be' b'live' b'to' b'arrive' b'into' b'polymerase' b',' b'thus' b'together' b'.' b'By' b'this' b'time'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.3
    loss: 5.164
    elapsed time (seconds): 154.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  24.145 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
