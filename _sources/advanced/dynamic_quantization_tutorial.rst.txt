.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Bob' b'to' b'<unk>' b'a' b'copy' b'of' b'a' b'blow' b'between' b'Kitsune' b'and' b'border' b'from' b'<unk>' b'.' b'Hornung' b"'s" b'<unk>' b'pitch' b'refers'
    b'to' b'the' b'newspaper' b',' b'Santa' b'<unk>' b',' b'on' b'October' b'20' b',' b'1914' b'.' b'In' b'"' b'Grace' b'Me' b'Us' b'"' b','
    b'which' b'is' b'absorbed' b'with' b'the' b'estate' b',' b'a' b'preferred' b'starling' b'suggests' b'that' b'$' b'40' b'@,@' b'000' b'dollars' b'per' b'year' b'could'
    b'be' b'city' b'compared' b'to' b'ice' b'circles' b'.' b'Ruiz' b'scales' b'were' b'removed' b'to' b'continue' b'before' b'accompanied' b'a' b'tension' b'.' b'manufacturing' b'two'
    b'chicks' b'Duncan' b'the' b'Baez' b'insult' b'a' b'cup' b'concert' b'crossover' b'by' b'girls' b'(' b'B.' b'Traill' b')' b',' b'containing' b'Bassermann' b'<unk>' b'('
    b'"' b'W\xc5\x82adys\xc5\x82aw' b'"' b')' b'and' b'"' b'Friedrich' b'Primarily' b'Down' b'Broom' b'"' b'.' b'<eos>' b'The' b'content' b'of' b'a' b'affair' b'between' b'species'
    b'and' b'adults' b'stems' b'at' b'a' b'intersection' b'on' b'30' b'September' b'2014' b'.' b'The' b'church' b'was' b'announced' b'to' b'have' b'been' b'a' b'number'
    b'of' b'Christian' b'tours' b'than' b'Antarctica' b',' b'along' b'with' b'the' b'2008' b'Japan' b'fewest' b'holdings' b'.' b'The' b'diet' b'moderate' b'Plensa' b'as' b'the'
    b'SEC' b'State' b'Hurt' b'Awards' b'reception' b',' b'who' b'of' b'the' b'most' b'part' b'have' b'had' b'lost' b'to' b'Australia' b'.' b'David' b'Evans' b'was'
    b'rated' b'until' b'the' b'last' b'game' b'of' b'natural' b'games' b'in' b'a' b'recording' b'court' b'in' b'2003' b'.' b'slot' b'admitted' b'one' b'playground' b'over'
    b'the' b'planet' b',' b'which' b'were' b'probably' b'ranked' b'in' b'a' b'duke' b'under' b'that' b'of' b'a' b'collection' b'for' b'a' b'unusual' b'theatre' b'game'
    b'.' b'The' b'quotation' b'of' b'a' b'alpha' b'can' b'be' b'found' b'as' b'"' b'ever' b'at' b'all' b'free' b'film' b'yet' b'in' b'Somerset' b','
    b'a' b'tangle' b'of' b'traditional' b'circles' b'that' b'were' b'just' b'very' b'syndicate' b'led' b'with' b'their' b'"' b'<unk>' b'(' b'"' b'selfish' b'or' b'most'
    b'social' b'who' b'residing' b'in' b'a' b'planet' b'"' b')' b',' b'Lane' b'densities' b'(' b'counter' b'to' b'Queensland' b')' b'in' b'the' b'7th' b'and'
    b'Irish' b'87th' b'(' b'910' b'structure' b')' b'.' b'To' b'play' b'this' b'matter' b'18' b'%' b'per' b'million' b'are' b'referred' b'to' b'as' b'happened'
    b'in' b'American' b'history' b'.' b'When' b'Coombs' b'is' b'pale' b'called' b'a' b'planet' b',' b'they' b'speak' b'to' b'play' b',' b'making' b'them' b'to'
    b'Argosy' b'on' b'how' b'I' b'heard' b'it' b'.' b'If' b'he' b"'re" b'consistently' b',' b'Odaenathus' b'was' b'able' b'to' b'get' b'it' b'into' b'the'
    b'novel' b',' b'suggesting' b'that' b'he' b'could' b'facilitate' b'to' b'be' b'ready' b'to' b'sleep' b'.' b'However' b',' b'he' b'criticized' b'Guildford' b"'s" b'connections'
    b'and' b'was' b'Assistant' b'Judge' b'<unk>' b"'" b'in' b'the' b'first' b'<unk>' b',' b'because' b'he' b'allegedly' b'wrote' b'it' b'"' b'signed' b'a' b'suite'
    b'of' b'<unk>' b'(' b'a' b'makers' b'for' b'Hairan' b'Johnson' b'grown' b'"' b')' b'.' b'The' b'choice' b'of' b'Phineas' b'tricks' b'S.' b'Mosley' b'against'
    b'Enemy' b"'s" b'body' b',' b'a' b'mini' b'@-@' b'operative' b'I' b'caused' b'a' b'shipment' b'of' b'his' b'players' b',' b'who' b'moved' b'good' b'Storrington'
    b',' b'promoted' b'of' b'an' b'game' b'to' b'rescue' b'his' b'father' b'Union' b'.' b'However' b',' b'<unk>' b'and' b'by' b'his' b'death' b'suggests' b'of'
    b'Cole' b'to' b'bombing' b'the' b'loyalty' b'for' b'America' b'.' b'A' b'character' b'of' b'Mfume' b'in' b'television' b':' b'M.' b"'Malley" b'wrote' b'a' b'novel'
    b'to' b'Modern' b'phenomenon' b'which' b'will' b'need' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Championship' b'@-@' b'race' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b'conquered'
    b'his' b'later' b'parents' b'in' b'his' b'<unk>' b'to' b'identities' b'or' b'Kitana' b'42' b'could' b'speak' b',' b'and' b'nothing' b',' b'comment' b'transmuted' b','
    b'and' b'<unk>' b'rear' b'tickets' b'to' b'<unk>' b',' b'Lester' b',' b'<unk>' b',' b'<unk>' b'(' b'bodyline' b')' b'and' b'Eduardo' b'Curtis' b'(' b'died'
    b'August' b'1944' b')' b',' b'his' b'next' b'wife' b'I' b',' b'and' b'the' b'early' b'instrument' b'.' b'The' b'Annals' b'of' b'Justice' b'put' b'by'
    b'Cameroon' b',' b'CB' b',' b'was' b'published' b'as' b'part' b'of' b'the' b'Jordan' b'downloadable' b'knock' b'of' b'1994' b'.' b'It' b'was' b'not' b'at'
    b'Shakey' b',' b'a' b'unofficial' b'anniversary' b'for' b'a' b'wanting' b'to' b'perform' b'when' b'make' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Statistics' b'=' b'='
    b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Crash' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Chen' b'Laboratory' b'James' b'<unk>' b'went' b'to' b'forestry' b'Park'
    b',' b'jewelry' b'.' b'User' b"'s" b'moody' b'claimed' b'to' b'try' b'saving' b'another' b'wife' b'I' b'quickly' b'Baltimore' b',' b'while' b'proportionate' b'Trap' b'breeds'
    b'on' b',' b'and' b'revealed' b'how' b'"' b'it' b'never' b'desired' b'in' b'a' b'scholar' b'"' b'.' b'His' b'military' b'engineering' b'were' b'extended' b'to'
    b'alongside' b'an' b'synthesizer' b'policy' b',' b'which' b'none' b'of' b'the' b'PSP' b'spot' b'now' b'being' b'burned' b'.' b'The' b'sisters' b'proved' b'to' b'have'
    b'a' b'violet' b'planet' b'called' b'says' b'to' b'simulate' b'like' b'.' b'It' b'seems' b'to' b'exist' b',' b'indeed' b'gravity' b'that' b',' b'if' b'Earth'
    b'searches' b'into' b'temperature' b'a' b'first' b'VH1' b',' b'noted' b'Peshkin' b'therapist' b'O' b"'Malley" b'.' b'He' b'attempted' b'all' b'after' b'his' b'horrific' b'work'
    b'in' b'Meyerbeer' b',' b'because' b'considering' b'scripted' b'such' b'Afterward' b'.' b'Over' b'his' b'work' b'climate' b',' b'A' b'African' b'Party' b'pastor' b'(' b'died'
    b'simply' b')' b'personally' b'from' b'the' b'goalball' b'election' b'after' b'husband' b'Havana' b'at' b'<unk>' b'Park' b"'s" b'friendly' b'deputy' b'Dublin' b':' b'"' b'['
    b't' b']' b'He' b'my' b'favorite' b'all' b'to' b'get' b'but' b'I' b'have' b'Economics' b'.' b'It' b'don' b"'t" b'look' b'each' b'side' b'.'
    b'"' b'<unk>' b'found' b'as' b'"' b'strong' b',' b'respects' b'Music' b',' b'and' b'Aralt' b'is' b'mostly' b'slated' b'to' b'have' b'seen' b'himself' b'.'
    b'"' b'O' b"'Malley" b'was' b'Walpole' b'<unk>' b'to' b'coining' b',' b'where' b'in' b'a' b'novel' b'from' b'his' b'classmate' b'Blish' b'the' b'biographer' b'begins'
    b'for' b'scenarios' b'to' b'keep' b'it' b"'s" b'experiment' b"'" b'mob' b'with' b'herself' b'hit' b'.' b'Two' b'their' b'aristocratic' b'stories' b'take' b'the' b'term'
    b'<unk>' b'and' b'his' b'<unk>' b'Games' b'moon' b'in' b'order' b'.' b'In' b'comment' b'on' b'the' b'modern' b'track' b',' b'Golden' b'Entertainment' b'now' b'again'
    b'antagonistic' b'of' b'the' b'country' b',' b'and' b'one' b'to' b'vice' b';' b'writing' b'is' b'propose' b'by' b'both' b'animation' b'at' b'the' b'end' b'of'
    b'a' b'decision' b'.' b'<eos>' b'There' b'was' b'additionally' b'performers' b'that' b'help' b'moot' b'for' b'<unk>' b',' b'Marseille' b',' b'counts' b'that' b',' b'or'
    b'the' b'other' b'increasing' b'.' b'Some' b'notable' b'stories' b'are' b'stored' b'on' b'their' b'hand' b'.' b'Other' b'were' b'probably' b'pulled' b'for' b'Raffles' b'.'
    b"'" b'theater' b'reviewer' b'Bendis' b'(' b'NHL' b'Aircraft' b')' b'is' b'Japanese' b',' b'and' b'culturally' b'might' b'die' b'to' b'a' b'angry' b'Herries' b'woman'
    b'.' b'By' b'a' b'moment' b'that' b'took' b'trying' b',' b'factors' b'appear' b'to' b'extend' b'during' b'true' b'or' b'distance' b'.' b'<eos>' b'The' b'conclusion'
    b'of' b'classification' b'eventually' b'subject' b'to' b'control' b'of' b'Ceres' b'to' b'secure' b'how' b'future' b'.' b'presumably' b'are' b'swampy' b'and' b'sometimes' b'erased' b'with'
    b'the' b'body' b'.' b'They' b'eventually' b'replies' b'that' b'that' b'<unk>' b'are' b'dropped' b'by' b'Ceres' b',' b'but' b'under' b'places' b'<unk>' b'.' b'They'
    b'for' b'those' b'of' b'Tennyson' b"'s" b'use' b'is' b'told' b'due' b'to' b'their' b'own' b'surface' b'Norton' b'will' b'be' b'real' b',' b'there' b'is'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 235.7
    loss: 5.168
    elapsed time (seconds): 161.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  43.042 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
