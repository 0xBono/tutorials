.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'As' b'of' b'January' b'20' b',' b'2006' b',' b'Hornung' b'was' b'officially' b'found' b'for' b'a' b'four' b'@-@' b'hour' b'performance' b'but' b'additional'
    b'stories' b'are' b'still' b'planted' b';' b'the' b'Bruins' b'won' b'as' b'being' b'Portree' b',' b'destroyed' b'so' b'held' b'on' b'the' b'adolescent' b'position' b'.'
    b'After' b'1868' b',' b'Louis' b'Johnson' b'used' b'a' b'plan' b'to' b'cook' b'music' b'in' b'a' b'connection' b'with' b'national' b'assemblies' b'.' b'In' b'this'
    b'book' b',' b'Jordan' b'has' b'not' b'seen' b'knights' b'ever' b'been' b'trapped' b'during' b'Him' b"'s" b'1983' b'settlement' b'to' b'be' b'Christian' b'and' b'Biringuccio'
    b'because' b'of' b'missions' b',' b'such' b'as' b'the' b'<unk>' b'<unk>' b',' b'and' b'beginning' b'to' b'Ulster' b"'s" b'release' b',' b'"' b'solid' b'the'
    b'missing' b'head' b'from' b'.' b'"' b'Crash' b'Lodge' b'O' b'lucaris' b'lists' b'much' b'of' b'its' b'correspondence' b'in' b'a' b'26' b'@-@' b'year' b'<unk>'
    b',' b'mainly' b'three' b'individual' b'inspired' b'by' b'<unk>' b'stories' b',' b'with' b'writer' b'Clinton' b"'s" b'own' b'production' b'(' b'a' b'school' b'drugged' b'Tecolutla'
    b')' b',' b'acting' b'as' b'background' b'Governor' b',' b'who' b'was' b'praised' b'.' b'Harihara' b'was' b'completed' b'as' b'a' b'supporter' b'prior' b'to' b'the'
    b'original' b'town' b',' b'citing' b'since' b'Bol\xc3\xadvar' b',' b'Hamels' b'died' b'for' b'once' b'writers' b'improved' b'because' b'he' b'created' b'young' b'or' b'justify' b'in'
    b'Formula' b'One' b'I' b'Park' b',' b'which' b'is' b'later' b'an' b'film' b',' b'who' b'knows' b'for' b'"' b'...' b'implementation' b'that' b'I' b"'m"
    b'<unk>' b'gunfight' b'.' b'"' b'<eos>' b'According' b'to' b'Gracie' b"'s" b'Mosley' b'the' b'Beatles' b'decided' b'to' b'cycles' b'instead' b'.' b'One' b'page' b'organisations'
    b'mentioned' b'by' b'David' b'Davenport' b',' b'who' b'had' b'stern' b'a' b'List' b'for' b'"' b'<unk>' b'mail' b'"' b',' b'after' b'the' b'first' b'well'
    b'member' b'of' b'only' b'full' b'in' b'his' b'Majors' b',' b'Thunderbirds' b'Daly' b'was' b'"' b'not' b'discretionary' b'and' b'Palmyrene' b',' b'but' b'died' b'is'
    b'a' b'emotional' b'theme' b'"' b'.' b'The' b'fact' b'that' b'Ingres' b'lead' b'to' b'the' b'works' b'of' b'Montagu' b',' b'see' b'how' b'Raffles' b'"'
    b'saw' b'husbands' b':' b'these' b'merit' b'in' b'<unk>' b'his' b'reward' b'credit' b'short' b'colleague' b'Jay' b'Wesley' b'<unk>' b'"' b'(' b'finding' b'O' b"'t"
    b'speak' b'the' b'Game' b"'s" b'Oates' b',' b'highly' b'rosary' b'Walpole' b"'" b'story' b')' b',' b'from' b'that' b'Silverstone' b',' b'stated' b'"' b'Crash'
    b'out' b'"' b'was' b'said' b'by' b'J.' b'Perrin' b',' b'along' b'with' b'The' b'June' b'7' b',' b'2001' b'rector' b'he' b'author' b'speculation' b';'
    b'mysteriously' b'demonstrated' b'their' b'brother' b'as' b'election' b'Dinorah' b'.' b'Without' b'a' b'ruling' b'girl' b',' b'Brobbel' b'assists' b'collided' b'with' b'Baker' b"'s" b'life'
    b'for' b'"' b'playing' b'"' b'fowle' b'for' b'<unk>' b';' b'the' b'Academy' b'dies' b'has' b'an' b'third' b'wife' b',' b'with' b'travels' b'to' b'the'
    b'Courage' b'in' b'of' b'a' b'same' b'side' b'or' b'<unk>' b'Novoselic' b',' b'and' b'its' b'crew' b',' b'and' b'the' b'other' b'sales' b'of' b'the'
    b'game' b'he' b'was' b'limited' b',' b'while' b'the' b'second' b'image' b'was' b'Mr' b'Patrick' b'I' b'(' b'is' b'able' b'to' b'stay' b'points' b'or'
    b'phosphate' b')' b'.' b'<eos>' b'The' b'main' b'inclusive' b'story' b',' b'"' b'The' b'How' b'"' b'helped' b'to' b'be' b'encouraged' b'in' b'cranial' b'Somerset'
    b'.' b'The' b'show' b'was' b'made' b'for' b'enthusiastically' b'on' b'its' b'first' b'tour' b',' b'where' b'taped' b'Manders' b'of' b'Gryposaurus' b'spot' b'all' b'stands'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Death' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'Family' b'listing' b'=' b'=' b'<eos>' b'<eos>' b'Metallica'
    b'began' b'and' b'entered' b'the' b'journal' b'race' b'to' b'London' b',' b'rare' b'two' b'in' b'their' b'lifetime' b',' b'with' b'the' b'37th' b'bond' b'procedures'
    b'for' b'Seems' b'venues' b'on' b'a' b'17' b'@-@' b'minute' b'Gamecocks' b'for' b'February' b'18' b',' b'2003' b',' b'with' b'the' b'fact' b'in' b'39'
    b'deals' b'.' b'<eos>' b'The' b'character' b'seems' b'to' b'attract' b'Madero' b"'" b'pink' b'accompaniment' b',' b'but' b'in' b'1989' b'Wi\xc5\x9bniowiecki' b'was' b'nominated' b'in'
    b'Ludlow' b'instead' b'to' b'produce' b'his' b'own' b'protest' b',' b'which' b'included' b'for' b'a' b'2009' b'version' b'of' b'The' b'Starfleet' b'Telegraph' b'album' b'Night'
    b'Australia' b'in' b'honour' b'retired' b'a' b'old' b'number' b'.' b'However' b',' b'in' b'the' b'Midlands' b',' b'Walpole' b'and' b'Terry' b'predict' b'Jordan' b'in'
    b'stadium' b'such' b'as' b'the' b'worst' b'Halley' b',' b'ultimately' b'<unk>' b'Jack' b'on' b'the' b'second' b'minute' b',' b'27' b'times' b'each' b'delayed' b'an'
    b'pair' b'of' b'150' b'mph' b'(' b'six' b'mph' b')' b'in' b'the' b'race' b'.' b'\xe2\x80\x93' b'Lost' b'Library' b'was' b'hired' b'in' b'Austria' b','
    b'<unk>' b'as' b'a' b'promotional' b'eclipse' b'but' b'had' b'also' b'settled' b'strategist' b'Hornung' b'in' b'1896' b'.' b'<eos>' b'Lanxess' b'had' b'been' b'brought' b'to'
    b'All' b'zones' b',' b'issued' b'popularised' b'in' b'1998' b'by' b'WDTV' b"'s" b'Hoysala' b'masterly' b'stores' b',' b'loss' b'further' b'five' b'relationships' b'.' b'In'
    b'this' b'time' b'he' b'would' b'be' b'underground' b'any' b'modest' b'assaults' b',' b'and' b'point' b'only' b'of' b'he' b'dismissed' b'a' b'number' b'of' b'stories'
    b'.' b'Burr' b'later' b'speculates' b'that' b'that' b'"' b'this' b'want' b'it' b'as' b'most' b'scientific' b',' b'he' b'\xe2\x80\x99' b's' b'lead' b'his' b'prey'
    b'agent' b'.' b'That' b'can' b'stage' b'it' b'to' b'any' b'time' b'.' b'Though' b'there' b'will' b'be' b'so' b'another' b'burial' b'because' b'he' b"'ll"
    b'fight' b'there' b'were' b'a' b'mission' b'to' b'understood' b'great' b'mouth' b'or' b'Ordinary' b'beef' b'and' b'he' b'MeV' b'come' b'in' b'a' b'loud' b'game'
    b'forcing' b'his' b'all' b'time' b'he' b'on' b'a' b'lock' b'.' b'After' b'you' b'now' b'now' b'right' b'a' b'Rhett' b',' b'and' b'a' b'strong'
    b'lot' b'of' b'ECW' b',' b'and' b'nice' b'from' b'the' b'next' b'to' b'throw' b'team' b'Croatia' b'to' b'become' b'lowered' b'by' b'the' b'humour' b'Review'
    b'the' b'<unk>' b'and' b'other' b'life' b'I' b'merit' b'in' b'a' b'tribute' b'europium' b',' b'which' b'help' b'it' b'a' b'toy' b'Corcoran' b'talking' b'Lesser'
    b'100th' b'to' b'excavate' b'into' b'a' b'<unk>' b'inside' b'removed' b'with' b'world' b',' b'not' b'to' b'instant' b'not' b'.' b'So' b'a' b'mark' b'of'
    b'story' b'"' b'.' b'The' b'<unk>' b'includes' b'var.' b'Osbourne' b',' b'who' b'turned' b'in' b'far' b'his' b'insistence' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Artificial' b'life' b'=' b'=' b'<eos>' b'<eos>' b'Shelley' b'and' b'Mariah' b'shovel' b'always' b'developed' b'Judith' b"'" b'occupation' b'the' b'series' b'by' b'jackets' b'in'
    b'the' b'crime' b'servant' b'Council' b',' b'and' b'owned' b'pressing' b'on' b'<unk>' b'.' b'The' b'September' b'44' b'performances' b'honors' b'driver' b'<unk>' b'scripted' b'he'
    b'also' b'signed' b'a' b'tent' b'shows' b'on' b'her' b'Stepmother' b'Ten' b'gets' b'in' b'Sisters' b'.' b'On' b'Australia' b',' b'his' b'Madras' b'Dutchman' b'Larry'
    b'Graeme' b'Shimitsu' b'to' b'become' b'apex' b'to' b'visit' b'"' b'fast' b'numbers' b'and' b',' b'being' b'its' b'longer' b'run' b'"' b'.' b'Hornung' b'was'
    b'apparently' b'repaired' b'in' b'competitions' b'just' b'prior' b'to' b'doing' b'after' b'fame' b'.' b'The' b'moniker' b'began' b'to' b'move' b'to' b'Shea' b',' b'which'
    b'wear' b'CRE' b'(' b'from' b'R' b"'Malley" b'Come' b'snap' b'icy' b')' b'at' b'a' b'Newton' b'de' b'\xe2\x85\x93' b'Pack' b'Show' b',' b'helped' b'with'
    b'energy' b'Portage' b'on' b'the' b'University' b'of' b'Tennessee' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Promotion' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The'
    b'planet' b'marked' b'Kyle' b'Chris' b'Jean' b'on' b'the' b'February' b'20' b',' b'2008' b'issue' b'to' b'set' b'on' b'Shiva' b"'s" b'collection' b':' b'he'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 235.9
    loss: 5.168
    elapsed time (seconds): 167.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  48.158 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
