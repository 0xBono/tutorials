.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b"'s" b'<unk>' b'pool' b'fell' b'in' b'pre' b'@-@' b'minds' b',' b'but' b'that' b'no' b'message' b',' b'by' b'why' b'nonviolent' b',' b'Stephen' b'features'
    b'lives' b'.' b'<eos>' b'tracks' b'50' b'<unk>' b',' b'commanders' b'.' b'Marlborough' b'and' b'O' b'Traill' b'may' b'be' b'hired' b'to' b'be' b'viziers' b'designer'
    b'because' b'he' b'transported' b'his' b'real' b'analysis' b'where' b'previous' b'innovations' b'has' b'undergo' b'such' b'old' b'heroes' b',' b'and' b'how' b'this' b'period' b'"'
    b'is' b'a' b'<unk>' b'woman' b'"' b'.' b'More' b'successful' b'gave' b'by' b'famous' b'police' b'standards' b'indicates' b'its' b'castle' b'.' b'The' b'Melody' b'was'
    b'the' b'only' b'parrot' b'home' b'in' b'Northern' b'America' b'in' b'430' b'years' b',' b'with' b'only' b'pair' b'year' b'building' b'.' b'In' b'2006' b'the'
    b'Hokies' b'would' b'<unk>' b'a' b'feudal' b'population' b'began' b'before' b'a' b'local' b'fiction' b'tour' b'Ball' b'result' b'that' b'"' b'<unk>' b'"' b'towards' b'Ace'
    b'Fire' b'became' b'represented' b'by' b'Frenchman' b'<unk>' b'Price' b'I' b'wrote' b'meant' b'that' b'using' b'madness' b'who' b'compared' b'to' b'Fortune' b'restored' b'The' b'story'
    b'to' b'have' b'been' b'"' b'subject' b'to' b'human' b'species' b'"' b',' b'which' b'Basanti' b'ruled' b',' b'without' b'birds' b'that' b'have' b'necessitated' b'their'
    b'desired' b'queen' b'with' b'enlisted' b'military' b'times' b'remain' b'to' b'come' b'a' b'Palmyrene' b'supplemented' b',' b'alternatively' b'becomes' b'only' b'meeting' b'by' b'these' b'Bernard'
    b"'" b'pitchers' b',' b'so' b'there' b'allows' b'a' b'planet' b'of' b'non' b'@-@' b'silent' b'.' b'The' b'concepts' b'turned' b'when' b'it' b'received' b'him'
    b'up' b'Dallas' b'in' b'an' b'bowl' b'silver' b'movement' b'to' b'rule' b'hood' b',' b'using' b'nearby' b'Basel' b',' b'and' b'an' b'claim' b'of' b'53'
    b'in' b'54' b'or' b'980' b'attacks' b'.' b'The' b'first' b'inspiration' b',' b'more' b'female' b'humour' b',' b'which' b'is' b'grown' b'down' b',' b'is'
    b'set' b'in' b'a' b'pair' b'to' b'vote' b'and' b'that' b'we' b'usually' b'migrate' b'to' b'back' b'lectures' b'to' b'U\xc3\xad' b'State' b'has' b'their' b'confession'
    b'are' b'emphasis' b'.' b'The' b'Church' b'of' b'various' b'languages' b'are' b'television' b'and' b'by' b'weights' b'to' b'<unk>' b'and' b'evolved' b'out' b'discount' b'every'
    b'planet' b'bearing' b'a' b'surviving' b'fusion' b',' b'ending' b'by' b'tears' b'to' b'Earth' b':' b'the' b'constellation' b'The' b'frilled' b'Islands' b',' b'and' b'its'
    b'text' b'as' b'making' b'to' b'have' b'many' b'times' b'but' b'effected' b'to' b'.' b'<eos>' b'River' b'herding' b'feathers' b',' b'including' b'animal' b'sculpture' b','
    b'showed' b'grapes' b'improved' b'them' b'to' b'God' b'directly' b'to' b'simply' b'electors' b'@-@' b'measure' b',' b'even' b'general' b'appealed' b',' b'but' b'kill' b'work'
    b'of' b'them' b'with' b'kakapo' b'.' b'In' b'France' b',' b'calls' b'may' b'reach' b'to' b'other' b'female' b'nuclei' b',' b'while' b'their' b'partner' b'are'
    b'spreading' b'to' b'have' b'a' b'significant' b'species' b'of' b'older' b'headdress' b'abdomen' b'calls' b'.' b'They' b'have' b'a' b'long' b'four' b'days' b',' b'but'
    b'the' b'most' b'massive' b'star' b'(' b'Come' b')' b'rudders' b'throughout' b'his' b'wings' b'with' b'its' b'cutter' b'of' b'a' b'overhead' b'will' b'be' b'burned'
    b'to' b'regulate' b'artistic' b'bodies' b',' b'especially' b'a' b'concentrate' b',' b'but' b'Torchwood' b'does' b'not' b'be' b'written' b',' b'and' b'the' b'probes' b'ascended'
    b'close' b'into' b'the' b'behavior' b'of' b'very' b'aggression' b'.' b'One' b'styles' b'is' b'due' b'to' b'the' b'internal' b'starling' b'question' b',' b'about' b'5'
    b'%' b'each' b'during' b'other' b'levels' b'of' b'native' b'partners' b'.' b'Another' b'brief' b'starling' b'may' b'be' b'more' b'frequently' b'as' b'fast' b'as' b'if'
    b'tests' b'may' b'be' b'occurs' b'by' b'their' b'policing' b'.' b'Brown' b'will' b'be' b'distinguished' b'by' b'their' b'meat' b'name' b'.' b'<unk>' b'by' b'<unk>'
    b':' b'may' b'see' b'parts' b'of' b'Sword' b'during' b'the' b'neck' b',' b'they' b'may' b'have' b'pushing' b'its' b'Charter' b'Bulim' b'left' b'from' b'their'
    b'will' b'die' b'and' b'hunters' b'.' b'-' b'it' b'is' b'six' b'hundred' b'they' b'headed' b'they' b'do' b'the' b'same' b'ball' b',' b'taking' b'place'
    b'from' b'a' b'full' b'greater' b'attack' b'or' b'target' b'birds' b'have' b'not' b'taking' b'his' b'percentage' b'around' b'this' b'other' b'.' b'One' b'other' b'sources'
    b'were' b'shore' b'to' b'Allah' b'or' b'therefore' b'necessarily' b'scratch' b'no' b'old' b',' b'though' b'there' b'is' b'no' b'<unk>' b',' b'so' b'mortars' b'are'
    b'there' b'to' b'386' b'.' b'It' b'is' b'uncertain' b'that' b'the' b'size' b'of' b'family' b',' b'diversity' b'patrol' b'effective' b'from' b'poetic' b'lanthanides' b'from'
    b'heavier' b'birds' b'that' b'may' b'find' b'human' b'nests' b'followed' b'by' b'Talok' b'as' b'rats' b'on' b'a' b'female' b'of' b'old' b'object' b'may' b'be'
    b'spored' b'.' b'This' b'may' b'<unk>' b'a' b'shrine' b'that' b'may' b'be' b'yielding' b'by' b'<unk>' b'by' b'Dreyfus' b'and' b'lung' b'extremes' b'.' b'Once'
    b'they' b'lost' b'they' b'decide' b',' b'their' b'feathers' b'were' b'away' b'falling' b'in' b'their' b'nests' b'.' b'There' b'are' b'two' b'evidence' b'of' b'fossil'
    b'populations' b',' b'hatch' b'up' b'to' b'lamps' b',' b'whereas' b'cohort' b'can' b'have' b'lived' b'and' b'were' b'wrong' b'for' b'him' b'.' b'These' b'kakapo'
    b'may' b'be' b'distinguished' b'identified' b'on' b'his' b'protein' b'surface' b',' b'cheese' b'or' b'anger' b'in' b'<unk>' b',' b'instead' b'of' b',' b'<unk>' b','
    b'open' b'or' b'cold' b'or' b'Indiana' b'.' b'overland' b'is' b'also' b'able' b'to' b'they' b'polarization' b'.' b'To' b'begin' b'on' b'Pakistan' b',' b'<unk>'
    b',' b'<unk>' b',' b'mobbing' b'when' b'feed' b'following' b'they' b'were' b'clearly' b'creation' b'.' b'As' b'this' b'source' b'symptoms' b',' b'their' b'season' b'is'
    b'loosely' b'brought' b'.' b'The' b'pores' b'enjoy' b'Ceres' b'into' b'formal' b'groups' b',' b'morels' b'lamps' b',' b'has' b'kept' b'numerous' b'gifts' b'of' b'Cincinnati'
    b',' b'Boletus' b'Irving' b',' b'and' b'bonds' b'excels' b'in' b'1629' b'.' b'<unk>' b'once' b'includes' b'four' b'levels' b'for' b'repentance' b'.' b'eSport' b','
    b'one' b'pathway' b'and' b'square' b'eggs' b'vented' b'<unk>' b'mainly' b'with' b'globular' b'carbon' b'.' b'Childhood' b'with' b'correctly' b',' b'<unk>' b',' b'can' b'first'
    b'be' b'unlikely' b'to' b'fight' b'or' b'it' b'will' b'turn' b'across' b'human' b'locations' b'.' b'<unk>' b'can' b'catch' b'fatal' b'where' b'they' b'no' b'trip'
    b'.' b'A' b'bird' b'that' b'mediate' b'a' b'food' b'Joey' b'(' b'called' b'Respect' b')' b'is' b'packed' b'into' b'man' b'on' b'other' b'occasions' b'.'
    b'They' b'walks' b'with' b'different' b'birds' b'of' b'fatigue' b'and' b'linear' b'their' b'WHO' b'<unk>' b'.' b'Once' b'after' b'Boise' b'variants' b'is' b'occasionally' b'extremely'
    b'folded' b'above' b'these' b'thread' b',' b'many' b'or' b'<unk>' b',' b'non' b'@-@' b'variations' b'.' b'<eos>' b'plumage' b'of' b'reality' b'Siloeman' b'males' b'is'
    b'often' b'held' b'during' b'its' b'nests' b'.' b'They' b'Hume' b'dissolved' b'his' b'resources' b'of' b'basal' b'levels' b'of' b'Ceres' b'during' b'its' b'common' b'form'
    b'.' b'Other' b'birds' b'appear' b'<unk>' b'and' b'often' b'drink' b'during' b'any' b'other' b'or' b'high' b'bird' b'cases' b'.' b'Such' b'activity' b'call' b'and'
    b',' b'fly' b'400' b'minutes' b',' b'features' b'up' b'.' b'However' b',' b'when' b'up' b',' b'such' b'as' b'xenon' b'adds' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Commentators' b'=' b'=' b'<eos>' b'<eos>' b'As' b'of' b'1989' b',' b'frequently' b'interviewed' b'significant' b'starlings' b'and' b'often' b'recommended' b'what' b'undertaken'
    b'kakapo' b'when' b'weakening' b'in' b'common' b'chords' b',' b'however' b',' b'they' b'find' b'international' b'concentrations' b'in' b'abilities' b'to' b'patrolled' b'humans' b'from' b'individuals'
    b'.' b'"' b'nest' b'chicks' b'"' b'hotels' b'have' b'three' b'ordinance' b'or' b'mannerisms' b'(' b'all' b'clone' b',' b'though' b'18' b'or' b'half' b')'
    b',' b'highest' b'submerged' b',' b'any' b'smaller' b'feet' b'or' b'cover' b'.' b'The' b'chicks' b'occurs' b'as' b'food' b'or' b'spread' b'to' b'attribution' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.945726
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 220.9
    loss: 5.168
    elapsed time (seconds): 151.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  17.411 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
