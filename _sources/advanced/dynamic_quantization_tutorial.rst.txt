.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - _dynamic quantization_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'machine' b'or' b'over' b'the' b'same' b'half' b'in' b'Ayyubid' b';' b'in' b'odds' b'they' b'appear' b'to' b'be' b'Scotia' b'by' b'nations' b'.'
    b'Indiana' b'supply' b'generally' b'less' b'recently' b'roll' b';' b'if' b'Finn' b'reveal' b'to' b'agree' b'due' b'to' b'the' b'Provisional' b'protagonist' b'.' b'The' b'paramilitary'
    b'introduced' b'his' b'metallicity' b'and' b'improve' b'the' b'hetman' b'village' b'Baron' b'Begley' b'in' b'order' b'to' b'say' b'a' b'simplified' b'planet' b'for' b'us' b'textbook'
    b'David' b'Brooks' b'along' b'with' b'indicate' b',' b'Jordan' b'and' b'walks' b'from' b'disguised' b'evidence' b'stadia' b'natural' b',' b'and' b'during' b'that' b'television' b','
    b'others' b'do' b'set' b'part' b'of' b'a' b'backdrop' b'understood' b'to' b'gain' b'them' b'to' b'Antiquities' b'they' b'might' b'"' b'habits' b',' b'the' b'Dramatic'
    b'scrutiny' b'of' b'Kodipetta' b'"' b'.' b'Males' b'himself' b'<unk>' b'as' b'a' b'lawyer' b'memorandum' b'(' b'now' b'having' b'gathered' b'"' b'like' b'Walk' b'Recovery'
    b'"' b',' b'tied' b'with' b'gravitational' b'numbers' b')' b',' b'enormous' b'classify' b',' b'\xe2\x80\x9c' b'Communists' b'British' b'advertising' b',' b'trends' b'and' b'exhibit' b'.'
    b'counseling' b'atoms' b'wears' b'silently' b'Suu' b',' b'Aransas' b'Mark' b'Houston' b',' b'at' b'Stevens' b"'s" b'Choice' b',' b'a' b'pupil' b'based' b'in' b'his'
    b'Greenwich' b'counterpart' b'was' b'also' b'at' b'fact' b'.' b'In' b'the' b'other' b'provinces' b'of' b'Omar' b',' b'common' b'religions' b'universities' b',' b'including' b'co'
    b'@-@' b'allegiance' b'computers' b',' b'how' b'independent' b'spots' b'do' b'not' b'be' b'rewritten' b'.' b'As' b'many' b'authors' b'of' b'teams' b'were' b'not' b'widely'
    b'variable' b'during' b'Bayern' b'mammals' b',' b'the' b'ordinance' b'was' b'had' b'split' b'like' b'.' b'The' b'railways' b'Monsen' b'is' b'a' b'way' b'between' b'Jackie'
    b'Heartbreak' b'and' b'<unk>' b'Brandywine' b'Operations' b'and' b'even' b'Traill' b'.' b'As' b'she' b'is' b'hoped' b'to' b'begin' b'forces' b',' b'they' b'are' b'<unk>'
    b'with' b'thousands' b'of' b'Meaning' b',' b'clear' b',' b'and' b'other' b'common' b'way' b'of' b'D\xc3\xadaz' b',' b'coating' b'in' b'2006' b',' b'York' b','
    b'<unk>' b',' b'and' b'<unk>' b'for' b'seed' b'Georgian' b'practices' b'and' b'relatively' b'<unk>' b'or' b'brown' b'.' b'seeds' b'<unk>' b'can' b'be' b'functional' b'at'
    b'<unk>' b',' b'<unk>' b'.' b'It' b'is' b'a' b'different' b'flightless' b'<unk>' b'to' b'create' b'each' b'knight' b'blue' b',' b'however' b',' b'and' b'a'
    b'men' b'from' b'<unk>' b'later' b',' b'or' b'who' b'introduced' b'a' b'constitution' b'to' b'obtain' b'purposely' b'.' b'In' b'February' b',' b'however' b',' b'this'
    b'ancient' b'engineering' b'efforts' b'could' b'be' b'made' b'.' b'As' b'when' b'Celtic' b',' b'they' b'embarked' b'in' b'outside' b'Cilicia' b',' b'but' b'the' b'traditional'
    b'coating' b'gray' b'Damon' b'sexpunctatus' b'(' b'sun' b'<unk>' b'Harstad' b')' b'by' b'the' b'naked' b'dubious' b'<unk>' b'are' b'initially' b'drying' b'.' b'By' b'Van'
    b'amplexus' b',' b'a' b'input' b'was' b'identical' b'in' b'bracelets' b'die' b'being' b'1832' b'with' b'its' b'ancestors' b'.' b'Campbell' b'was' b'not' b'actively' b'considered'
    b'having' b'on' b'a' b'7' b'\xe2\x80\x93' b'3' b'season' b'in' b'Nature' b',' b'February' b'19' b',' b'2001' b'.' b'The' b'double' b'starling' b'is' b'sometimes'
    b'used' b'as' b'it' b'"' b'Rodney' b'"' b'is' b'more' b'common' b'than' b'the' b'very' b'Nazi' b'rites' b'in' b'piece' b'Garc\xc3\xada' b"'t" b'tails' b'on'
    b'.' b'A' b'six' b'@-@' b'year' b'mention' b'by' b'ten' b'years' b'(' b'whose' b'is' b'Salmon' b"'" b'River' b',' b'either' b'fired' b'second' b'by'
    b'Shiva' b',' b'single' b'\xe2\x80\x93' b'power' b')' b'and' b'NL' b'(' b'10' b'or' b'39' b'points' b')' b'.' b'Ryder' b'forms' b'to' b'leave' b'francs'
    b'in' b'existence' b'in' b'<unk>' b',' b'in' b'which' b'there' b'were' b'no' b'principle' b'to' b',' b'they' b'engages' b'in' b'2005' b'.' b'But' b'the'
    b'victim' b'of' b'confession' b'covers' b',' b'to' b'the' b'eggs' b'in' b'Western' b'Australia' b',' b'the' b'dominant' b'structure' b'from' b'Ceres' b'is' b'probably' b'exhausted'
    b',' b'and' b'they' b'were' b'inflicted' b'to' b'leave' b'trees' b'in' b'ancient' b'starlings' b'.' b'As' b'they' b'were' b'allowed' b'by' b'long' b'areas' b','
    b'the' b'has' b'reached' b'later' b'fed' b'creatures' b'to' b'manage' b'it' b'by' b'Lomonosov' b'.' b'<unk>' b'under' b'concerns' b',' b'lamented' b'that' b'they' b'have'
    b'not' b'believed' b'dating' b'about' b'he' b'wears' b'repairs' b'or' b'chewing' b'spelt' b'.' b'Mosley' b'laterally' b'down' b'that' b'the' b'larger' b'color' b'damage' b'on'
    b'account' b'and' b'sight' b'may' b'be' b'Scapteriscus' b'drinking' b'with' b'matter' b'or' b'sending' b'offerings' b'of' b'hurricanes' b'.' b'Each' b'same' b'star' b'is' b'responsible'
    b'to' b'the' b'context' b'of' b'circulation' b'or' b'<unk>' b',' b'greatly' b'as' b'they' b'don' b'sufficient' b'inner' b'starlings' b',' b'responded' b'stripe' b'in' b'arsenic'
    b'.' b'pathetic' b'is' b'first' b'suggested' b'to' b'assume' b'biological' b'food' b'when' b'they' b'have' b'long' b'long' b'.' b'<eos>' b'wind' b'magnetic' b'fusion' b'pine'
    b'include' b'precious' b'abilities' b'in' b'row' b',' b'and' b'several' b'methods' b'have' b'been' b'distinguished' b'.' b'There' b'are' b'also' b'satisfied' b'total' b'and' b'jurisdictions'
    b',' b'including' b'other' b'of' b'his' b'eye' b',' b'formerly' b'habitat' b',' b'and' b'<unk>' b',' b'when' b'larger' b'females' b'may' b'involve' b'spectrum' b'to'
    b'undergo' b'natural' b'methods' b'between' b'settlement' b'or' b'clean' b'analyses' b',' b'prefer' b'all' b'other' b'mature' b'females' b'spherical' b'homosexuals' b'.' b'In' b'turn' b','
    b'they' b'humans' b'1' b'men' b',' b'<unk>' b'(' b'1836' b')' b',' b'insights' b'(' b'only' b'or' b'serve' b'from' b'four' b'below' b'study' b'being'
    b'increasing' b'to' b'identify' b'three' b'or' b'two' b')' b'for' b'food' b',' b'and' b'their' b'external' b'function' b'are' b'observed' b'to' b'execute' b'their' b'original'
    b'for' b'<unk>' b'.' b'It' b'may' b'have' b'delegated' b'increased' b'similar' b'being' b'powerful' b',' b'humans' b'may' b'clearly' b'undergo' b'all' b'methods' b'about' b'.'
    b'Heavy' b'feathers' b'will' b'relieve' b'amounts' b'on' b'many' b'or' b'water' b'birds' b'.' b'Common' b'numbers' b'would' b'his' b'taste' b'as' b'they' b'are' b'unclear'
    b'the' b'<unk>' b'.' b'If' b'at' b'around' b'higher' b',' b'it' b'is' b'clear' b'that' b'ecological' b'water' b'body' b'away' b'early' b'.' b'They' b'also'
    b'indicated' b'that' b'there' b'are' b'more' b'more' b'fast' b'molecules' b'were' b'broomstick' b'.' b'<eos>' b'Stars' b',' b'by' b'Caen' b',' b'is' b'another' b'source'
    b'of' b'fantasy' b'or' b'combining' b'an' b'food' b'<unk>' b'rate' b'.' b'The' b'entire' b'tissues' b'are' b'on' b'the' b'ground' b'birds' b'whereas' b'<unk>' b','
    b'they' b'understood' b'excellent' b'methods' b'with' b'birds' b'.' b'A' b'kitsune' b'imply' b'<unk>' b',' b'which' b'lived' b'upon' b',' b'may' b'cause' b'corn' b','
    b'then' b'with' b'<unk>' b',' b'and' b'<unk>' b',' b'but' b'associated' b'into' b'food' b'to' b'be' b'adults' b'typical' b'as' b'they' b'are' b'pale' b'effectively'
    b'or' b'variable' b'.' b'It' b'may' b'be' b'on' b'through' b'decline' b'and' b'trouble' b'.' b'Each' b'house' b'that' b'would' b'split' b'mechanical' b'animals' b'on'
    b'the' b'ground' b',' b'although' b'they' b'can' b'be' b'beneficial' b'out' b'that' b'they' b'do' b'not' b'classify' b'able' b'to' b'population' b'familiar' b'.' b'Males'
    b'include' b'mating' b'at' b'Island' b'muzzle' b',' b'5' b'@.@' b'5' b'metres' b'(' b'990' b'ft' b')' b'per' b'hour' b'puppeteers' b',' b'with' b'20'
    b'kg' b'(' b'0' b'@.@' b'77' b'in' b')' b'.' b'<eos>' b'Before' b'a' b'speeds' b'of' b'six' b'thousand' b'hours' b'will' b'undergo' b'W\xc5\x82adys\xc5\x82aw' b'semicircular'
    b',' b'they' b'may' b'be' b'modified' b'after' b'they' b'can' b'leave' b'9' b'to' b'befriending' b'out' b'a' b'ice' b'for' b'.' b'This' b'female' b'may'
    b'be' b'qualified' b'but' b'most' b'real' b'nuclei' b'are' b'are' b'capable' b'across' b'transcription' b',' b'and' b'may' b'be' b'participate' b'.' b'<unk>' b'Sirex' b'conifers'
    b'sizes' b'wrote' b',' b'"' b'these' b'common' b'sequence' b'species' b'shorter' b'recorded' b'.' b'A.' b'research' b'has' b'cue' b'the' b'<unk>' b'soils' b'delay' b'around'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:


.. code-block:: default


    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 108.1
    loss: 5.168
    elapsed time (seconds): 169.9


Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  42.428 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
