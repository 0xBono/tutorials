.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'for' b'Prize' b'to' b'have' b'was' b'reinforced' b'to' b'character' b'excavations' b'at' b'Eurasia' b'.' b'<eos>' b'An' b'small' b'version' b'of' b'Lisbon' b'formed' b'in'
    b'Baltimore' b'not' b'slick' b',' b'debate' b',' b'<unk>' b',' b'<unk>' b',' b'W.' b',' b'S.S.' b'<unk>' b',' b'Ralph' b'Eliot' b',' b'Lea' b'Blow'
    b',' b'King' b'saying' b'Animals' b'Matthew' b'Lewis' b'as' b'"' b'big' b'documentation' b'for' b'the' b'worst' b'time' b'and' b'dealt' b'towards' b'promoting' b'his' b'Xingyi'
    b'in' b'1800s' b'with' b'small' b',' b'they' b'didn' b"'t" b'think' b'them' b'with' b'<unk>' b';' b'\xe2\x80\x98' b'begin' b'Wales' b'.' b'"' b'Both' b'opposing'
    b'labyrinth' b'have' b'pushed' b'together' b'in' b'<unk>' b',' b'a' b'sophomore' b'star' b'in' b'which' b'<unk>' b'accounted' b'are' b'introduced' b'.' b'In' b'this' b'case'
    b',' b'it' b'is' b'a' b'distinctive' b'McGill' b'known' b'time' b',' b'which' b'it' b'possessed' b'go' b'away' b'they' b"'ve" b'spends' b'much' b'period' b'of'
    b'Lake' b'&' b'America' b'by' b'...' b'William' b',' b'the' b'body' b'developed' b'patient' b'in' b'Once' b',' b'by' b'using' b'The' b'other' b'method' b'of'
    b'Keys' b'.' b'<eos>' b'<unk>' b'4' b'@.@' b'3' b'\xe2\x88\x92' b'10' b'stuff' b',' b'Fort' b'Stroud' b',' b'as' b'they' b'were' b'expelled' b'as' b'a'
    b'case' b'D\xc3\xa1il' b',' b'said' b'on' b'"' b'Mulder' b'of' b'shortlist' b'"' b'.' b'In' b'an' b'attempt' b'to' b'opt' b'like' b'the' b'Four' b'Shadow'
    b'economist' b'of' b'metres' b',' b'L' b'sexpunctatus' b'tried' b'logged' b'Abydos' b'replacing' b'a' b'pleas' b',' b'and' b'looks' b'on' b'.' b'Because' b'of' b'them'
    b',' b'the' b'cold' b'clothes' b'is' b'<unk>' b'.' b'milestone' b';' b'this' b'has' b'praised' b'corsage' b'and' b'also' b'filled' b'shorter' b'damage' b'long' b'.'
    b'Its' b'treatment' b'of' b'these' b'Leonard' b'Study' b'@-@' b'Jayatilleke' b'is' b'also' b'ready' b'to' b'incorporate' b'old' b'countries' b'(' b'specific' b'B.' b'times' b')'
    b'varies' b'.' b'They' b'cross' b'a' b'Cajal' b'ratio' b'of' b'crowded' b'@-@' b'writers' b'shaft' b'blowing' b'for' b'they' b'require' b'them' b'to' b'the' b'same'
    b'level' b'.' b'Oriana' b'notes' b'they' b'effectively' b'just' b'sing' b'all' b'of' b'these' b'predators' b',' b'all' b'makes' b'evacuation' b'if' b'you' b'might' b'be'
    b'intricate' b'.' b'When' b'we' b'know' b'that' b'you' b'know' b'in' b'Rum' b'"' b'is' b'a' b'dangerous' b'source' b'traditional' b'surface' b'in' b'Paris' b'"'
    b'.' b'(' b'therefore' b'in' b'other' b'reviewers' b'during' b'a' b'life' b'from' b'Alexander' b'hawthorn' b',' b'continuous' b'delicate' b'at' b'tiny' b'he' b'is' b'synonymous'
    b'by' b'the' b'planet' b')' b',' b'breaks' b'in' b'favors' b'across' b'a' b'bird' b',' b'ca' b',' b'1' b'out' b',' b'and' b'(' b'mass'
    b'species' b')' b'.' b'lion' b'rejects' b'a' b'holder' b'male' b'(' b'several' b'the' b'blacks' b'of' b'movement' b',' b'a' b'first' b')' b'of' b'orbit'
    b',' b'probably' b'the' b'male' b'planets' b'and' b'decreasing' b',' b'regardless' b'of' b'over' b'ten' b'hours' b'ago' b',' b'catchment' b'or' b'length' b'carrying' b'.'
    b'However' b',' b'they' b'are' b'very' b'deeply' b'losing' b'immigration' b'every' b'long' b'minute' b'with' b'yellow' b'threads' b'.' b'Both' b'males' b'are' b'mixed' b'to'
    b'their' b'longer' b'money' b'and' b'say' b'that' b'be' b'slightly' b'settler' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'<unk>' b'=' b'=' b'=' b'<eos>'
    b'<eos>' b'Aside' b'semen' b'from' b'the' b'ground' b',' b'other' b'humans' b'have' b'ample' b'infections' b'\xe2\x80\x94' b'on' b'their' b'irregular' b'body' b',' b'fossil' b','
    b'and' b'with' b'the' b'ears' b'center' b'.' b'Not' b'these' b',' b'he' b'amplexus' b'in' b'both' b'other' b'areas' b',' b'and' b'ingested' b'specimens' b'have'
    b'lay' b'long' b'value' b'on' b'site' b'.' b'Those' b',' b'usually' b'heavily' b'log' b'a' b'planet' b'plays' b'often' b'and' b'inhabit' b'food' b'.' b'When'
    b'they' b'act' b'two' b'chicks' b'.' b'These' b'replacement' b'provides' b'a' b'arrangement' b'of' b'levels' b'on' b'each' b'side' b'or' b'swiftly' b'or' b'the' b'Gaboon'
    b'<unk>' b'asking' b'it' b'too' b'brownish' b'.' b'When' b'a' b'low' b'Barkley' b'is' b'smaller' b',' b'twelve' b'birds' b'attempted' b'to' b'ask' b'to' b'the'
    b'ensuing' b',' b'it' b'turns' b'to' b'other' b'islands' b'together' b'from' b'their' b'husband' b'.' b'integrity' b'who' b'fits' b'the' b'fears' b'for' b'both' b'bird'
    b'or' b'they' b'recognised' b'dating' b'rapidly' b',' b'so' b'also' b'much' b'return' b'to' b'4' b'years' b'.' b'Humpty' b'\xe2\x80\x99' b'wood' b'invasive' b'anything' b'must'
    b'rarely' b'be' b'suspect' b'to' b'be' b'<unk>' b'by' b'by' b'their' b'reflecting' b'head' b'"' b'to' b'find' b'other' b'dioceses' b'of' b'Felis' b'and' b'glossy'
    b'"' b'.' b'Hence' b',' b'Editors' b'have' b'already' b'calculated' b'a' b'hunter' b'and' b'a' b'circulation' b'black' b'Popular' b'resolution' b'about' b'the' b'overblown' b'yellowish'
    b',' b'which' b'is' b'known' b'by' b'a' b'colour' b'@-@' b'frequency' b'to' b'refer' b'to' b'levels' b'of' b'which' b'fish' b'to' b'a' b'Earth' b','
    b'where' b'they' b'do' b'mate' b'agree' b'to' b'a' b'peak' b'song' b'.' b'A' b'pair' b'of' b'white' b'female' b'of' b'their' b'devolved' b'<unk>' b'connecting'
    b'that' b'he' b'cannot' b'normally' b'have' b'long' b'as' b'he' b'loves' b'him' b'by' b'its' b'father' b"'s" b'one' b'.' b'The' b'Henryson' b'pierced' b'on'
    b'bone' b'fruits' b'with' b'her' b'early' b'origin' b'of' b',' b'the' b'spots' b',' b'fishing' b',' b'ankylosaurian' b',' b'and' b'nostrils' b'.' b'However' b','
    b'it' b'does' b'not' b'sit' b'on' b'author' b'playoffs' b'in' b'long' b',' b'<unk>' b':' b'<unk>' b'egg' b'Magdalene' b',' b'either' b'love' b'@-@' b'king'
    b'.' b'Whereas' b'that' b'they' b'lay' b'between' b'a' b'nest' b'frontal' b',' b'they' b'were' b'able' b'to' b'incorporate' b'so' b'their' b'outer' b'ancestral' b'<unk>'
    b',' b'which' b'have' b'any' b'other' b'pieces' b'of' b'pain' b'that' b'have' b'<unk>' b'specialized' b',' b'on' b'parts' b'that' b'will' b'be' b'able' b'to'
    b'gain' b',' b'they' b'or' b'therefore' b'\xe2\x80\x93' b'inflated' b'them' b'into' b'virtue' b'such' b'as' b'dialogues' b';' b'requiring' b'feeding' b'and' b'cardiac' b'minds' b'.'
    b'Tennyson' b'often' b'relied' b'on' b'likely' b'the' b'game' b'.' b'The' b'hyphae' b'to' b'legally' b'may' b'be' b'effective' b':' b'"' b'<unk>' b'them' b'.'
    b'And' b'it' b'was' b'cancelled' b'that' b'at' b'the' b'boat' b',' b'and' b'the' b'same' b'kind' b'of' b'very' b'bad' b'India' b'to' b'face' b'it'
    b',' b'and' b'because' b'they' b'goes' b'close' b'.' b'"' b'nucleoplasm' b'lamented' b'that' b'"' b'booms' b'in' b'reality' b'<unk>' b'likely' b'and' b'not' b'steered'
    b'that' b'anything' b'needs' b'that' b'they' b'grows' b'by' b'its' b'head' b'cook' b'controls' b'so' b'commonsense' b'food' b"'s" b'vague' b'lead' b'.' b'This' b'Without'
    b'him' b'in' b'a' b'reformer' b'across' b'26' b'and' b'to' b'friends' b'.' b'If' b'they' b'shall' b'dead' b'restraint' b'they' b'get' b'in' b'light' b'action'
    b'or' b'out' b'to' b'select' b'in' b'it' b'.' b'Many' b'finds' b'it' b'is' b'an' b"'" b'beautiful' b'"' b'or' b'"' b'subversion' b'"' b'for'
    b'her' b',' b'going' b'to' b'incorporate' b'roughly' b'up' b'for' b'mean' b',' b'"' b'Mycena' b'like' b'eyes' b'"' b'forerunner' b',' b'especially' b'it' b'is'
    b',' b'when' b'many' b'is' b'thought' b'to' b'be' b'limited' b'.' b'The' b'Arabic' b'reality' b'of' b'annual' b'starling' b'was' b'to' b'locate' b'Interaction' b'upon'
    b'an' b'circulation' b'even' b'as' b'their' b'cave' b'application' b'showed' b'its' b'right' b',' b'and' b'after' b'the' b'theme' b'of' b'Alfonso' b'nonoxynol' b'on' b'RCA'
    b',' b'a' b'number' b'of' b'in' b'his' b'wife' b',' b'appears' b'to' b'him' b'Xi' b"'s" b'approach' b'.' b'The' b'characters' b'do' b'not' b'appear'
    b'very' b'praying' b',' b'so' b'it' b'also' b'<unk>' b'the' b'chromatin' b'with' b'plastic' b',' b'making' b'.' b'<unk>' b'does' b'not' b'die' b'up' b'Elizabeth'
    b'the' b'planet' b'on' b'a' b'male' b'A' b'Meeting' b'.' b'The' b'marriage' b'then' b',' b'pointing' b'touching' b'of' b'her' b'case' b'alone' b'and' b'Ferdinand'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 223.8
    loss: 5.168
    elapsed time (seconds): 155.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  24.065 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
