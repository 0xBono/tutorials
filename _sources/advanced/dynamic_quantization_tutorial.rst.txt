.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'The' b'creation' b'of' b'Appeal' b'while' b'however' b',' b'in' b'67' b'times' b'Chagas' b'peak' b'26' b'@-@' b'expansion' b'<unk>' b',' b'in' b'conjunction' b'around'
    b'linebackers' b'years' b'in' b'South' b'America' b'.' b'The' b'dry' b'complement' b'was' b'lined' b'from' b'Oxford' b'to' b'mac' b'Chapman' b'(' b'Conrad' b'or' b'Parasaurolophus'
    b')' b',' b'which' b'had' b'been' b'published' b'strong' b'cars' b'during' b'the' b'chorus' b'\xe2\x80\x94' b'and' b'the' b'most' b'recent' b'interviewed' b'forms' b'football' b','
    b'in' b'1963' b',' b'Africa' b'Amano' b',' b'proclaimed' b'roughly' b'40' b'%' b'of' b'ten' b'bike' b'areas' b'.' b'(' b'Hall' b'of' b'sterigmata' b')'
    b'before' b'accepting' b'at' b'a' b'vertical' b'space' b'and' b'a' b'half' b'of' b'7' b'by' b'1870s' b'in' b'2004' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'History' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'Legal' b'history' b'=' b'=' b'<eos>' b'<eos>' b'A' b'later' b'employing' b'1777' b'committee' b'in'
    b'categorized' b'variation' b'on' b'existing' b'homes' b'ran' b'in' b'Tyre' b',' b'in' b'Guatemala' b'demographics' b'with' b'Gaboon' b'spp' b'yolk' b'for' b'books' b',' b'and'
    b'were' b'similar' b'to' b'tiny' b'places' b'.' b'Legislative' b'damage' b'of' b'the' b'Wine' b'Bible' b'Controversy' b'and' b'southern' b'issue' b'shape' b'in' b'Ireland' b'are'
    b'1686' b',' b'but' b'only' b'offered' b'by' b'around' b'2' b'pounds' b'(' b'a' b'wide' b'tunnel' b'of' b'$' b'12' b'million' b')' b'of' b'background'
    b'airfields' b'.' b'It' b'is' b'minimal' b'to' b'date' b'that' b'almost' b'pointed' b'until' b'South' b'America' b',' b'a' b'plant' b'by' b'1' b'@.@' b'7'
    b'million' b'miles' b'(' b'7' b'@.@' b'2' b'in' b')' b'per' b'loop' b'and' b'from' b'half' b'date' b'.' b'This' b'is' b'generally' b'a' b'settlement'
    b'of' b'females' b',' b'mostly' b'so' b'above' b'Joseph' b'\xe2\x80\x93' b'completed' b',' b'when' b'it' b'is' b'associated' b'into' b'mines' b'they' b'don' b"'t" b'are'
    b'miss' b'.' b'At' b'every' b'415' b'feet' b'and' b'neo' b'@-@' b'worker' b'of' b'slippage' b',' b'abnormal' b'over' b'a' b'year' b'dated' b'its' b'malls'
    b'as' b'well' b',' b'caught' b'it' b'and' b'even' b'electric' b'route' b'.' b'<eos>' b'Mycena' b'Grasses' b'invaded' b'55' b'heat' b',' b'in' b'matches' b'taking'
    b'specifically' b'to' b'its' b'supply' b'of' b'oneself' b'from' b'Supernatural' b',' b'and' b'moralitas' b',' b'dealing' b'to' b'Elk' b'of' b'a' b'major' b'or' b'attack'
    b'during' b'Amitabh' b'supports' b'south' b'.' b'As' b'of' b'o' b'Crash' b'buttresses' b',' b'there' b'is' b'no' b'towns' b'that' b'females' b'be' b'water' b'and'
    b'brought' b'about' b'its' b'length' b'.' b'Common' b'plants' b'believed' b'that' b'because' b'it' b'was' b'found' b'after' b'after' b'searching' b'in' b'Grandmaster' b'burying' b'they'
    b'later' b'believe' b'their' b'taller' b'climates' b',' b'their' b'food' b',' b'mountain' b',' b'nature' b',' b'advocates' b',' b'Franglen' b',' b'and' b'trees' b'\xe2\x80\x93'
    b'are' b'found' b'by' b'eliminating' b'their' b'chicks' b',' b'and' b'during' b'Regional' b'.' b'Ceres' b'nurses' b'even' b'due' b'to' b'Abusir' b'positively' b'with' b'very'
    b'successful' b'<unk>' b',' b'though' b'there' b'is' b'easily' b'nearly' b'<unk>' b'or' b'killed' b'organic' b'prey' b',' b'habitat' b'<unk>' b'to' b'restore' b'Lviv' b'are'
    b'necessary' b'to' b'exaggerated' b';' b'cold' b',' b'they' b'will' b'discreetly' b'they' b'beat' b'Mars' b'.' b'William' b'<unk>' b'as' b'follows' b'and' b'functioning' b'a'
    b'exit' b'at' b'all' b'Anatolia' b'to' b'learn' b'about' b'space' b'for' b'them' b'for' b'stadion' b'until' b'her' b'rule' b'.' b'There' b'are' b'only' b'good'
    b'texts' b',' b'females' b',' b'and' b'Tampico' b'.' b'A' b'non' b'@-@' b'migration' b'fired' b'154Eu' b'from' b'its' b'size' b'based' b'on' b'<unk>' b'off'
    b'in' b'drowned' b'and' b'are' b'in' b'other' b'criticized' b',' b'whereas' b'in' b'the' b'well' b',' b'they' b'can' b'act' b'after' b'by' b'therefore' b'as'
    b'they' b'can' b'be' b'a' b'curator' b'to' b'<unk>' b'.' b'As' b'they' b'database' b',' b'they' b'restricted' b'each' b'other' b',' b'if' b'savage' b'may'
    b'grow' b'directly' b'.' b'<unk>' b'in' b'.' b'allowing' b'trout' b'own' b'stars' b',' b'often' b'targeted' b'its' b'three' b'<unk>' b',' b'form' b'@-@' b'iconography'
    b',' b'and' b'many' b'regions' b'of' b'city' b',' b'Fan' b'<unk>' b',' b'yellowish' b'and' b'<unk>' b'.' b'Due' b'to' b'some' b'major' b'diversity' b'that'
    b'are' b'divided' b'by' b'foraging' b',' b'it' b'has' b'become' b'fully' b'known' b'for' b'brown' b',' b'and' b'how' b'had' b'twenty' b'attempt' b'since' b'commemorated'
    b'in' b'village' b',' b'and' b'it' b'became' b'to' b'be' b'open' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Early' b'career' b'and' b'<unk>' b'=' b'='
    b'<eos>' b'<eos>' b'hygrometricus' b'Swans' b',' b'Cork' b',' b'environmental' b',' b'<unk>' b',' b'brawl' b',' b'MacLeod' b'stalled' b',' b'Hastings' b'groups' b',' b'Johannes'
    b'IslandTM' b',' b'and' b'Scleroderma' b'.' b'citadel' b'generally' b'follows' b'soil' b'structures' b',' b'and' b'called' b'costs' b'that' b'\xe2\x80\x9c' b',' b'heavy' b'markings' b'@-@'
    b'sounding' b',' b'lasted' b'and' b'black' b'<unk>' b'surrounded' b'and' b'wide' b'large' b'fire' b'.' b'New' b'Jersey' b'have' b'distantly' b'fossils' b'often' b'skulls' b','
    b'some' b'of' b'whom' b'is' b'not' b'synthesized' b',' b'the' b'same' b'name' b'when' b'their' b'"' b'body' b'"' b'dialectic' b'has' b'been' b'<unk>' b'.'
    b'To' b'deal' b'from' b'severe' b'birds' b',' b'only' b'picturesque' b'architectural' b'wolves' b',' b'are' b'outside' b'by' b'Family' b'Thutmose' b'.' b'According' b'to' b'the'
    b'night' b'that' b'extensive' b'kakapo' b'may' b'have' b'protested' b'so' b'attempts' b'to' b'avoid' b'bears' b'stronger' b',' b'when' b'females' b'do' b'not' b'have' b'minimal'
    b'tract' b'.' b'Sometimes' b'there' b'are' b'common' b'snakes' b'regarding' b'this' b',' b'it' b'comes' b'against' b'Ceres' b',' b'and' b'so' b'they' b'have' b'just'
    b'its' b'absolute' b'animal' b'\xe2\x80\x94' b'and' b'their' b'experience' b'are' b'short' b'as' b'pinkish' b',' b'including' b'"' b'dusk' b'"' b'.' b'The' b'kakapo' b'warned'
    b'that' b'it' b'will' b'be' b'hit' b'by' b'City' b'.' b'The' b'outer' b'starling' b'females' b'and' b'onion' b'represented' b'fir' b':' b'"' b'narrow' b')'
    b'magazine' b'of' b'lobbying' b',' b'i.e.' b',' b'entertainment' b',' b'he' b"'s" b'respect' b'out' b'to' b'the' b'face' b'of' b',' b'fronts' b'and' b'leak'
    b'.' b'A' b'average' b'of' b'same' b'show' b'.' b'"' b'The' b'head' b'ferox' b'are' b'unknown' b'and' b'<unk>' b'to' b'Europe' b'.' b'Hollandia' b'polarization'
    b'aids' b'is' b'smaller' b'and' b'sometimes' b'concentrated' b'by' b'deployments' b'.' b'It' b'also' b'asci' b'some' b'ships' b',' b'though' b'whether' b'R\xc3\xa9union' b'leave' b'the'
    b'overall' b'at' b'least' b'four' b'minutes' b',' b'happening' b'gun' b',' b'which' b'newcomers' b'learnt' b'a' b'few' b'more' b'precious' b'gravity' b'.' b'These' b'grace'
    b'but' b'bacteria' b'are' b'reduced' b',' b'and' b'aircraft' b'has' b'match' b'fumes' b'(' b'including' b'example' b',' b'present' b',' b'body' b')' b'and' b'measure'
    b'AD' b',' b'though' b'often' b'is' b'a' b'very' b'\xe2\x80\x93' b'"' b'vassal' b'method' b'of' b'<unk>' b'"' b'.' b'They' b'watch' b'their' b'path' b'forever'
    b'-' b'those' b'cells' b'result' b'the' b'pale' b'Celtic' b'language' b',' b'face' b'inclination' b'which' b'Meteorology' b'up' b'within' b'a' b'simple' b'planet' b',' b'is'
    b'often' b'.' b'The' b'spots' b'are' b'mention' b'as' b'they' b'are' b'rising' b'to' b'produce' b'his' b'origin' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Common'
    b'species' b'=' b'=' b'<eos>' b'<eos>' b'It' b'is' b'known' b'on' b'the' b'killed' b'on' b'August' b'4' b',' b'2003' b',' b'when' b'of' b'Robinson'
    b'and' b'Australia' b'conception' b'Day' b',' b'is' b'referred' b'to' b'as' b'published' b'by' b'confiscate' b'Augustus' b'as' b'of' b'Nuskhuri' b',' b'and' b'includes' b'the'
    b'Islamic' b'Review' b'of' b'contingent' b'.' b'During' b'its' b'typical' b'length' b'of' b'GASAR' b',' b'it' b'has' b'a' b'associated' b'majority' b'in' b'Weekly' b'New'
    b'Zealand' b'Eurasia' b'(' b'a' b'particularly' b'Curry' b'from' b'<unk>' b'co' b'\xe2\x80\x93' b'seedlings' b')' b'Pocantico' b'feed' b'on' b'a' b'<unk>' b'highway' b'row' b';'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 251.5
    loss: 5.168
    elapsed time (seconds): 172.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  8.877 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
