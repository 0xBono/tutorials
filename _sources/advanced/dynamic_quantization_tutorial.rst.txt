.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'North' b'New' b'Angeles' b',' b'saw' b'the' b'company' b'regarding' b'seven' b'historically' b'based' b'in' b'<unk>' b'.' b'In' b'the' b'race' b'placing' b'noting' b'saying'
    b'that' b'helping' b',' b'<unk>' b'details' b'the' b'instrument' b'with' b'thousands' b'of' b'eggs' b'was' b'<unk>' b'in' b'Afghanistan' b'.' b'Schmoke' b"'" b'interests' b'is'
    b'fully' b'always' b'distributed' b'in' b'a' b'single' b'tree' b':' b'fort' b'in' b'Shandong' b'representing' b'blue' b',' b'paper' b',' b'often' b'hit' b'to' b'a'
    b'Solis' b'.' b'Henry' b'ligand' b'preferring' b'listed' b'Gatrell' b"'s" b'previous' b'athletic' b'success' b',' b'reflects' b'of' b'some' b'of' b'the' b'three' b'African' b'generals'
    b',' b'within' b'her' b'period' b'on' b'4' b'October' b'.' b'<eos>' b'In' b'2000' b',' b'the' b'extras' b'were' b'"' b'more' b'views' b'like' b'in'
    b'manufacture' b'"' b',' b'as' b'threatened' b'while' b'inhospitable' b'Dublin' b'had' b'suggested' b'that' b'Stevens' b'would' b'be' b'inaccurate' b'in' b'nature' b'.' b'Critics' b'praised'
    b'Cheshire' b',' b'especially' b'some' b'critics' b'in' b'the' b'Times' b',' b'that' b'visiting' b'<unk>' b'Petra' b',' b'described' b'by' b'Hairan' b'Sport' b',' b'imbalance'
    b'for' b'skeptical' b'old' b'and' b'Videos' b',' b'then' b'men' b'a' b'grandson' b'of' b'Christie' b'.' b'<unk>' b'the' b'cause' b'of' b'his' b'associated' b'children'
    b'on' b'public' b'projects' b';' b'Avloed' b'concluded' b'"' b'We' b'were' b'only' b'a' b'kind' b'of' b'people' b',' b'a' b'deprived' b'knife' b'into' b'passing'
    b'the' b'grave' b',' b'or' b'in' b'getting' b'trouble' b',' b'let' b'"' b',' b'and' b'I' b'always' b'wanted' b'to' b'better' b'sing' b'they' b'are'
    b'him' b'after' b'its' b'death' b'.' b'relevance' b'of' b'Adrian' b'<unk>' b'is' b'a' b'good' b'defeat' b'on' b'connects' b'with' b'a' b'fund' b'which' b'he'
    b'is' b'named' b'the' b'Viscount' b'if' b'the' b'philosophy' b'is' b'forced' b'to' b'get' b'a' b'enemy' b'possession' b'for' b'that' b'of' b'bowling' b'.' b'He'
    b'uses' b'that' b'it' b'is' b'distinguished' b'with' b'a' b'something' b'<unk>' b'for' b'mobile' b'<unk>' b'exile' b'.' b'The' b'number' b'of' b'planets' b'have' b'read'
    b'<unk>' b'=' b'Various' b'colonists' b'offended' b'a' b'focused' b'@-@' b'out' b'Ride' b'nor' b'will' b'be' b'a' b'eye' b'.' b'Another' b'cap' b'of' b'Victorian'
    b'instructions' b'were' b'deemed' b'of' b'mechanism' b',' b'where' b'<unk>' b'<unk>' b'enamel' b'Netherlandish' b'horizontally' b'and' b'infertility' b'Horton' b'starts' b'where' b'they' b'are' b'inspired'
    b'by' b'the' b'approximate' b'angle' b'.' b'The' b'"' b'Sighting' b'god' b'fat' b'"' b'is' b'often' b'at' b'a' b'location' b'of' b'ruined' b'leaves' b'the'
    b'highest' b'man' b'was' b'sick' b'.' b'The' b'is' b'Hungary' b'"' b'a' b'linear' b'fingers' b'in' b'habitat' b'so' b'him' b'in' b'many' b'divorce' b'and'
    b'1.e4' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'n\xc4\x81sti' b',' b'hormones' b',' b'<unk>' b',' b'James' b',' b'<unk>' b','
    b'tail' b',' b'<unk>' b',' b'items' b'for' b'<unk>' b'field' b',' b'Sephiroth' b',' b'languages' b',' b'and' b'apricot' b'metals' b',' b'while' b'Tehuantepec' b'surprise'
    b'up' b'that' b'outflow' b'may' b'<unk>' b'in' b'my' b'species' b',' b'credit' b'there' b'Sutra' b',' b'out' b'as' b'such' b'as' b'4' b'children' b','
    b'and' b'are' b'sexy' b'.' b'"' b'<eos>' b'In' b'the' b'first' b'quarter' b',' b'unique' b'school' b'may' b'be' b'known' b'with' b'universal' b'historian' b'@-@'
    b'1160' b',' b'particularly' b'while' b'they' b'feeds' b';' b'Christianity' b'Sharon' b'was' b'forced' b'to' b'produce' b'apply' b'expulsion' b',' b'and' b'is' b'therefore' b'depressed'
    b',' b'as' b'their' b'USSR' b'infiltrated' b'independently' b'from' b'many' b'other' b'testing' b'and' b'present' b'conservation' b'(' b'so' b'responsible' b')' b'.' b'<eos>' b'They'
    b'involved' b'a' b'moon' b'before' b'they' b'have' b'long' b'deviate' b'before' b'.' b'(' b'lesser' b'song' b'is' b'rescued' b'by' b'the' b'egg' b',' b'as'
    b'she' b'hiss' b'as' b'the' b'<unk>' b'"' b'Living' b'"' b')' b'and' b'love' b';' b'a' b'male' b'symbolic' b'integrity' b'may' b'be' b'fused' b'.'
    b'Overall' b',' b'other' b'different' b'offerings' b'convinced' b'.' b'<eos>' b'The' b'technique' b'for' b'beak' b',' b'so' b'also' b'lighting' b',' b'the' b'morphology' b'revealed'
    b'the' b'Dark' b'Hebrides' b'offering' b'A' b'person' b'to' b'protect' b'for' b'now' b'this' b'is' b'a' b'active' b'planet' b'or' b'the' b'sudden' b'economic' b'mate'
    b'will' b'reach' b',' b'and' b'so' b'they' b'still' b'rise' b'to' b'other' b'flightless' b'suffering' b'records' b'they' b'are' b'doing' b'to' b'humans' b'invaded' b'Earth'
    b',' b'can' b'die' b'early' b'.' b'James' b'walks' b'by' b'<unk>' b'<unk>' b'.' b'While' b'eyes' b'leave' b'them' b'understood' b'in' b'human' b'Eurasia' b'then'
    b'headed' b',' b'they' b'should' b'examine' b'pass' b'to' b'Treehouse' b',' b'covering' b'one' b'software' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Early' b'regime'
    b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'kakapo' b"'s" b'male' b'<unk>' b'empty' b'between' b'pairs' b'in' b'the' b'Berlin' b'difference' b'with' b'each' b'species'
    b'of' b'cheetah' b'with' b'head' b'from' b'<unk>' b'and' b'MLA' b'taking' b'at' b'least' b'two' b'birds' b',' b'and' b'of' b'other' b'birds' b',' b'technology'
    b',' b'and' b'winter' b'.' b'While' b'their' b'need' b'from' b'the' b'kakapo' b'must' b'also' b'be' b'grown' b'due' b'to' b'examples' b',' b'they' b'might'
    b'happen' b'all' b'on' b'the' b'common' b'way' b'when' b'they' b'do' b'as' b'pure' b'as' b'they' b'spend' b'moral' b'starling' b'.' b'Massive' b'fusion' b'plants'
    b'Ich' b'Sue' b'convinced' b'that' b'Daniel' b'of' b'a' b'nymphs' b"'" b'outstandingly' b'origin' b'is' b'generally' b'pink' b',' b'so' b'when' b'it' b'encounters' b'his'
    b'tails' b'or' b'reverted' b'on' b'risky' b',' b'they' b'get' b'in' b'a' b'large' b'<unk>' b'yourself' b',' b'but' b'these' b'courses' b'are' b'not' b'performed'
    b'as' b'little' b'.' b'By' b'example' b',' b'when' b'extensive' b'birds' b'are' b'<unk>' b'up' b'at' b'E.' b'<unk>' b',' b'some' b'of' b'the' b'people'
    b',' b'including' b'a' b'male' b'nurse' b':' b'<unk>' b'(' b'Japanese' b'fallout' b')' b'is' b'long' b'brightness' b';' b'Kate' b'seated' b'as' b'being' b'sensitive'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b"'ohang" b',' b'conversion' b'=' b'=' b'=' b'<eos>' b'<eos>' b'<unk>' b'natural' b':' b'At' b'first' b'wars'
    b',' b'driving' b'usually' b'in' b'metallic' b'areas' b',' b'in' b'the' b'past' b',' b'"' b'the' b'<unk>' b',' b'rice' b'Russo' b'or' b'conditioning' b','
    b'now' b'monogamous' b',' b'the' b'most' b'simplified' b',' b'folds' b'also' b'<unk>' b'.' b'This' b'is' b'maturity' b'to' b'a' b'pair' b'of' b'wish' b'to'
    b'come' b'to' b'voters' b'.' b'such' b'to' b'Ceres' b',' b'there' b'is' b'Cajal' b'Knowles' b'Holloway' b'.' b'If' b'both' b'Stalin' b'is' b'as' b'an'
    b'large' b'expression' b',' b'it' b'has' b'likely' b'<unk>' b'is' b'internationally' b',' b'though' b'it' b'was' b'a' b'personal' b'student' b'"' b'.' b'<eos>' b'In'
    b'late' b'2007' b',' b'300' b'%' b'of' b'an' b'male' b'population' b'of' b'66' b'million' b'Ceres' b'are' b'types' b'of' b'New' b'Zealand' b'on' b'Eu2O3'
    b'.' b'The' b'clear' b'Riata' b'(' b'bullied' b'at' b'a' b'Age' b'play' b')' b'marry' b'M.' b'Antonio' b'All\xc4\x81h' b'follows' b'9' b'@.@' b'5' b'in'
    b'(' b'14' b'\xe2\x80\x93' b'16' b':' b'Martyn' b'+' b'51' b')' b',' b'limbs' b'(' b'<unk>' b')' b',' b'These' b'cheilocystidia' b'(' b'67' b','
    b'and' b'2006' b')' b'but' b'an' b'unnamed' b'populace' b'of' b'egg' b'lb' b'.' b'It' b'is' b'a' b'three' b'distinct' b'white' b'species' b',' b'especially'
    b'with' b'most' b'or' b'four' b'brown' b'soft' b'or' b'female' b'sweet' b'parrot' b',' b'in' b'sentences' b'that' b'activated' b'during' b'a' b'794' b'functions' b'white'
    b',' b'which' b'will' b'be' b'seen' b'in' b'young' b'areas' b'.' b'Despite' b'one' b'\xe2\x86\x92' b'review' b',' b'it' b'is' b'two' b'more' b'frequently' b'drawn'
    b'with' b'gunners' b'.' b'There' b'are' b'up' b'three' b'mRNA' b'people' b',' b'Charles' b'shame' b',' b'and' b'hence' b'formal' b'look' b'remain' b'via' b'environments'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 238.0
    loss: 5.168
    elapsed time (seconds): 163.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  46.476 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
