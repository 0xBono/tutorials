.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'two' b'Amedeo' b';' b'another' b'and' b'the' b'world' b'were' b'deeply' b'seen' b'into' b'an' b'old' b'role' b'based' b'in' b'<unk>' b'Die' b','
    b'in' b'this' b'game' b'.' b'<eos>' b'Regardless' b',' b'including' b'the' b'PSP' b',' b'like' b'access' b'to' b'Steve' b'<unk>' b'(' b'winner' b'of' b'GameSpot'
    b')' b'services' b'were' b'in' b'most' b'rehabilitated' b'ways' b'.' b'Eight' b'spots' b'travel' b'to' b'15' b':' b'00' b'<unk>' b'February' b'20' b',' b'1977'
    b'.' b'He' b'adopted' b'no' b'post' b'of' b'the' b'few' b'stars' b'on' b'his' b'awareness' b',' b'27' b'years' b'old' b',' b'010' b'speed' b','
    b'and' b'allowing' b'the' b'"' b'legal' b'junctions' b'"' b'stallion' b'"' b'<unk>' b'"' b'shop' b',' b'which' b'benefit' b'Intelligence' b'State' b'Williams' b'as' b'a'
    b'lecturer' b'@-@' b'to' b'@-@' b'stage' b'game' b'.' b'<eos>' b'For' b'2008' b',' b'it' b'was' b'posted' b'to' b'Australia' b'against' b'Public' b'Water' b'School'
    b'in' b'Robert' b'II' b"'s" b'place' b'to' b'a' b'Rockefeller' b'report' b',' b'Elemental' b'<unk>' b'The' b'"' b'The' b'Figgins' b'of' b'Sultanate' b'"' b','
    b'as' b'especially' b'seen' b'in' b'the' b'United' b'States' b'on' b'the' b'1954' b'200' b'May' b'2011' b'season' b'of' b'Mykelti' b'.' b'<eos>' b'153' b'stories'
    b'in' b'Fisheries' b',' b'Somerset' b',' b'was' b'invited' b'to' b'suggest' b'a' b'8' b'@-@' b'pound' b'.' b'Maria' b'R.' b'EMI' b'has' b'competed' b'on'
    b'<unk>' b'.' b'The' b'state' b'was' b'numbers' b'of' b'west' b"'s" b'retired' b'popularity' b'from' b'The' b'eleven' b'@-@' b'TV' b'film' b'genre' b'.' b'A'
    b'alternative' b'Image' b'meant' b':' b'"' b'The' b'bright' b'starling' b'of' b'great' b':' b'15' b'and' b'24' b'May' b'Camptosaurus' b'.' b'"' b'The' b'year'
    b'was' b'published' b'in' b'December' b'1' b',' b'2009' b':' b'the' b'book' b'struck' b'the' b'playing' b'one' b'more' b'than' b'120' b'letters' b'for' b'the'
    b'song' b'at' b'1191' b'.' b'In' b'his' b'2015' b'trilogy' b',' b'Games' b'Side' b'levels' b'split' b'in' b'development' b'and' b'colouration' b'time' b'that' b'appear'
    b'ridiculed' b'the' b'game' b',' b'so' b'O' b"'Malley" b'bricks' b'for' b',' b'on' b'July' b'17' b',' b'2009' b'.' b'LucasArts' b'moved' b'for' b'and'
    b'fell' b'on' b'the' b'October' b'22' b'leading' b'season' b'of' b'the' b'game' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'PlayStation' b'Angeles' b'=' b'='
    b'=' b'<eos>' b'<eos>' b'A' b'number' b'of' b'women' b'announced' b'that' b'he' b'feels' b'to' b'accept' b'the' b'FIA' b'are' b'deceived' b';' b'Roger' b'Lindsay'
    b'is' b'the' b'seat' b'of' b'the' b'first' b'pair' b'in' b'World' b'War' b'I' b'established' b'back' b'by' b'the' b'Indonesian' b'race' b'in' b'2001' b'.'
    b'It' b'is' b'the' b'final' b'game' b'since' b'the' b'continued' b'game' b'titled' b'"' b'First' b'One' b'"' b'.' b'Greg' b'McAllister' b'received' b'extreme' b'acclaim'
    b'from' b'critics' b'after' b'none' b'of' b'his' b'paused' b'as' b'"' b'poorly' b'realise' b'"' b';' b'"' b'Bradman' b'and' b'[' b'sic' b']' b'('
    b'Come' b'denies' b'little' b'a' b'naturally' b'@-@' b'yet' b'man' b')' b'Hector' b'angry' b'is' b'content' b'.' b'This' b'allows' b'two' b'different' b'bills' b'where'
    b'month' b',' b'their' b'poet' b'stained' b'him' b'has' b'sleep' b',' b'harmonies' b',' b'and' b'[' b'they' b'feature' b'still' b'ain' b"'t" b'be' b'a'
    b'kind' b'of' b'graceful' b'to' b'portray' b'"' b'.' b'The' b'album' b'neared' b'a' b'overall' b'reception' b'of' b'"' b'Fantasy' b'of' b'Surrender' b'"' b','
    b'and' b'wrote' b'special' b'evidence' b',' b'and' b'some' b'of' b'the' b'aim' b'of' b'"' b'Single' b'of' b'Surrender' b'"' b'and' b'written' b'music' b'for'
    b'a' b'wedding' b'for' b'"' b'entertainment' b'"' b'and' b'"' b'failing' b'to' b'wait' b'"' b'as' b'they' b'gets' b'in' b'his' b'MIT' b'racing' b'shirt'
    b'between' b'Charlotte' b'and' b'subscription' b'fans' b'that' b'Cook' b'<unk>' b'<unk>' b'Number' b'Mike' b'Simone' b'is' b'"' b'flexible' b'when' b'he' b'was' b'found' b'by'
    b',' b'hard' b'than' b'friends' b'.' b'"' b'The' b'Season' b'regarded' b'as' b'a' b'vintner' b'at' b'the' b'age' b'of' b'Poole' b'(' b'London' b')'
    b'in' b'the' b'2012' b'concert' b'race' b'that' b'were' b'63' b'in' b'(' b'<unk>' b'issue' b')' b',' b'The' b'Sub' b'definitive' b'cut' b'of' b'the'
    b'Infinity' b'with' b'Don' b'One' b'Hornung' b'fellow' b'violence' b'musicians' b'.' b'The' b'crew' b'then' b'questioned' b'Evan' b'Wilson' b'in' b'Chains' b'and' b'awarded' b'only'
    b'much' b'comment' b'make' b'the' b'public' b'with' b'the' b'defeats' b'only' b'natured' b',' b'compared' b'despite' b'the' b'control' b'of' b'Denardo' b'<unk>' b'and' b'publisher'
    b'Rose' b'.' b'In' b'his' b'play' b'he' b'wrote' b'Ross' b"'s" b'apparent' b'phone' b'"' b'The' b'cruel' b'land' b'to' b'win' b'themselves' b'that' b'they'
    b'would' b'still' b'put' b'1' b'people' b',' b'but' b'do' b'not' b'think' b'that' b'why' b'it' b'brings' b'biographies' b'witness' b'.' b'And' b'"' b'The'
    b'three' b'of' b'his' b'highlights' b'were' b'a' b'event' b'that' b'said' b'about' b'.' b'The' b'record' b'wrote' b'that' b'he' b'was' b'not' b'<unk>' b','
    b'had' b'stated' b'that' b'of' b'signing' b'the' b'beliefs' b'about' b'the' b'scenes' b',' b'"' b'Hornung' b'is' b'not' b'a' b'tree' b'...' b'I' b"'m"
    b'certainly' b'altogether' b'and' b'hurt' b'we' b"'ve" b'been' b'singing' b'that' b'it' b'threatened' b'energy' b'.' b'"' b'The' b'A.V.' b'called' b'"' b'The' b'Hornung'
    b'holiday' b"'" b'He' b'would' b'be' b'a' b'parody' b'of' b'Bobby' b'societal' b',' b'[' b'I' b'purchase' b'.' b'"' b'Writing' b'in' b'accordance' b'with'
    b'Hornung' b"'s" b'story' b',' b'Raffles' b'was' b'also' b'announced' b'to' b'be' b'short' b'in' b'the' b'Charmbracelet' b'Uprising' b'.' b'He' b'does' b'not' b'enter'
    b'Germany' b'in' b'the' b'1930' b'film' b'"' b'The' b'Winter' b'"' b'Recordings' b'at' b'the' b'1994' b'Summer' b'Arena' b'.' b'Greg' b'Merrill' b'tied' b'his'
    b'training' b'to' b'a' b'voice' b'ITV' b',' b'citing' b'toy' b'feelings' b',' b'in' b'two' b'seasons' b',' b'Germany' b',' b'Alex' b'Lester' b'and' b'Southwest'
    b'<unk>' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Background' b'=' b'=' b'<eos>' b'<eos>' b'Folk' b'Quite' b'Vanya' b'called' b'the' b'story' b',' b'Harmonix' b'and'
    b'Volumes' b'the' b'patron' b'were' b'better' b'San' b'Hornung' b'sample' b',' b'but' b'featured' b'"' b'the' b'graceful' b'believer' b'<unk>' b'social' b'guitar' b'"' b','
    b'culminating' b'in' b'the' b'ABC' b'Play' b'Animation' b'Herodianus' b'(' b'compared' b'to' b'the' b'e' b'Johnson' b')' b'in' b'1999' b',' b'sang' b'in' b'a'
    b'Robbie' b'Michigan' b'Studio' b'1992' b"'s" b'town' b'her' b'own' b'aspects' b'that' b'included' b'The' b'business' b'up' b'the' b'poem' b'were' b'to' b'justify' b'"'
    b'talk' b',' b'We' b'speaks' b'"' b',' b'then' b'on' b'line' b'about' b'18-' b'to' b'keep' b'how' b'they' b'do' b'not' b'expect' b'because' b'he'
    b',' b'it' b'that' b'wants' b'a' b'"' b'checkpoints' b'Mullen' b'"' b'was' b'"' b'understanding' b'@-@' b'dancing' b'"' b',' b'in' b'which' b'he' b'wrote'
    b'her' b'Jack' b'(' b'The' b'Cash' b'Supper' b')' b'so' b'run' b'it' b'.' b'The' b'Dictionary' b'was' b'murder' b'when' b'he' b'threw' b'an' b'desires'
    b'tag' b'to' b'apply' b'a' b'tribute' b'to' b'Walpole' b'.' b'"' b'When' b'I' b'can' b'manage' b'an' b'doors' b'to' b'be' b'merely' b'a' b'yacht'
    b'for' b'a' b'sample' b'that' b'people' b'describes' b'[' b'MacLeod' b']' b'that' b'every' b'lot' b',' b'we' b'enjoyed' b'divorce' b'vegetables' b'"' b'.' b'Entertainment'
    b'felt' b'of' b'backing' b'writing' b"'s" b'works' b'to' b'remove' b'emotions' b'internal' b',' b'and' b'no' b'inauguration' b'underside' b'Never' b'in' b'2011' b'.' b'A'
    b'change' b'to' b'"' b'Udaynath' b'ramps' b'said' b'"' b'undergoes' b'the' b'mobile' b'evidence' b'of' b'issues' b'.' b'He' b'admitted' b'her' b'vocals' b'in' b'reference'
    b'to' b'to' b'courage' b'.' b'The' b'title' b'\xe2\x80\x94' b'Jim' b'Diarmata' b'settled' b'flaws' b'from' b'a' b'"' b'fellow' b'familiar' b'star' b',' b'<unk>' b'Landing'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 227.4
    loss: 5.168
    elapsed time (seconds): 153.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  26.171 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
