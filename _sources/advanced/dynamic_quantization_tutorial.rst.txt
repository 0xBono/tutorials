.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - _dynamic quantization_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'bring' b'with' b'dissertation' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Strip' b'=' b'=' b'<eos>' b'<eos>' b'For' b'there' b'is' b'two' b'playable' b'support' b'on'
    b'natural' b',' b'regular' b'leaving' b'support' b'from' b'anthem' b'were' b'provided' b'in' b'Tamil' b'under' b'steel' b'capitals' b'such' b'as' b'his' b'own' b'temper' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Masters' b'=' b'=' b'<eos>' b'<eos>' b'A' b'large' b'analysis' b'of' b'a' b'income' b'Finance' b"'s" b'book' b'(' b'assigns'
    b'saturated' b'KPA' b'at' b'a' b'End' b'nakedness' b')' b'lived' b'at' b'a' b'native' b'meeting' b'place' b'while' b'lineages' b'received' b'more' b'than' b'nine' b'games'
    b'created' b'by' b'(' b'260' b')' b',' b'648' b'and' b'dubious' b'TWh' b'including' b'its' b'father' b',' b'or' b'28' b'folds' b',' b'three' b'times'
    b'of' b'four' b'encompass' b'stories' b',' b'and' b'published' b'by' b'males' b'<unk>' b'fossils' b'and' b'former' b'causes' b'in' b'the' b'islands' b'.' b'<unk>' b'WWE'
    b'and' b'(' b'Echmarcach' b')' b'in' b'west' b'of' b'Ecology' b',' b'Higher' b'exceptionally' b',' b'adjacent' b'to' b'the' b'Asomtavruli' b'Uncle' b'!' b'District' b','
    b'often' b'deeper' b'in' b'1997' b'.' b'The' b'moth' b'creator' b'Diarmait' b'allowed' b'looking' b'the' b'decline' b'of' b'different' b'themes' b'increasingly' b'travel' b',' b'although'
    b'much' b'others' b'may' b'report' b'.' b'Joseph' b'revenues' b'PlayStation' b'rulership' b',' b'with' b'eleven' b'in' b'his' b'separate' b'borders' b',' b'was' b'also' b'ulama'
    b'segregated' b'for' b'communion' b'but' b'<unk>' b',' b'and' b'there' b'are' b'no' b'collection' b'of' b'humans' b',' b'providing' b'do' b'not' b'limited' b'possible' b'or'
    b'intensification' b'.' b'One' b'of' b'the' b'common' b'classes' b'make' b'approximately' b'75' b'years' b'(' b'121' b'million' b'kilometers' b')' b'coat' b',' b'with' b'nine'
    b'eggs' b'from' b'historically' b'rarely' b'collective' b'or' b'down' b'ten' b'times' b'.' b'According' b'to' b'its' b'terrestrial' b'agents' b',' b'each' b'other' b'names' b'would'
    b'be' b'<unk>' b',' b'forming' b'\xe6\x94\xbb\xe6\xae\xbb\xe6\xa9\x9f\xe5\x8b\x95\xe9\x9a\x8a' b'and' b'difficulty' b',' b'including' b'usually' b'<unk>' b'form' b'the' b'glee' b'opposing' b'branch' b'of' b'1770' b'.' b'It'
    b'occurs' b'it' b'where' b'32' b'their' b'existence' b'is' b'inhabited' b'under' b'their' b'mass' b'.' b'They' b'reaches' b'boasted' b'Ceres' b'was' b'dramatically' b'fully' b'pronounced'
    b',' b'with' b'thousands' b'of' b'women' b'(' b'<unk>' b')' b',' b'100' b',' b'148' b',' b'and' b'grasses' b'.' b'They' b'indicate' b'for' b'<unk>'
    b'CDs' b';' b'Parvati' b'attributed' b'little' b'colonisation' b'being' b'applied' b'by' b'their' b'reflection' b'around' b'injuring' b'Hugo' b'Billa' b'.' b'Wodehouse' b'attempted' b'to' b'be'
    b',' b'according' b'to' b'a' b'giant' b'<unk>' b',' b'venomous' b'for' b'<unk>' b',' b'understanding' b'@-@' b'especially' b'feminist' b'characteristics' b'(' b'Colman' b')' b'directed'
    b'an' b'surface' b'method' b'of' b'25' b'%' b',' b'then' b'during' b'more' b'mediate' b'ft' b'boxing' b'.' b'In' b'Europe' b',' b'a' b'version' b'line'
    b'offers' b'a' b'"' b'ruined' b'among' b'traditional' b'unrest' b'"' b',' b'and' b'rock' b'Responses' b'derived' b'into' b'a' b'suite' b',' b'on' b'a' b'Widacki'
    b'with' b'mid' b'@-@' b'<unk>' b',' b'being' b'translated' b'in' b'1961' b'and' b'Cardinal' b'bees' b'.' b'In' b'this' b'unconventional' b'world' b'islands' b',' b'training'
    b'leader' b'apartments' b'associated' b'two' b'subspecies' b'to' b'accommodate' b'it' b'that' b'it' b'has' b'<unk>' b'the' b'fruits' b'of' b'the' b'validity' b'of' b'DNA' b'losing'
    b'to' b'leave' b'in' b'1840' b'.' b'The' b'black' b'transmission' b'of' b'extensive' b'indication' b',' b'carved' b',' b'but' b'rarely' b'bend' b',' b'may' b'be'
    b'location' b',' b'with' b'many' b'or' b'hot' b'or' b'dark' b'or' b'Parasaurolophus' b'to' b'protect' b'habitats' b'are' b'close' b'to' b'their' b'Protestant' b'patch' b'in'
    b'the' b'practices' b'of' b'money' b'.' b'Common' b'chicks' b'Giddens' b'reduced' b'widespread' b'control' b'for' b'inner' b'common' b'markings' b'and' b'torture' b',' b'such' b'as'
    b'their' b'<unk>' b'glass' b'sex' b'.' b'They' b'shall' b'need' b':' b',' b'and' b'eat' b'gills' b',' b'showing' b'them' b'to' b'fight' b',' b'who'
    b'does' b'not' b'check' b',' b'and' b'frequent' b'nests' b'away' b'after' b'Geller' b'.' b'<eos>' b'Almost' b'four' b'times' b',' b'each' b'of' b'birds' b'allows'
    b'70' b'%' b'of' b'England' b'suggest' b'that' b'the' b'kakapo' b'handles' b'its' b'tying' b'texts' b'and' b'waiting' b'through' b'it' b',' b'abbreviation' b'.' b'A'
    b'curtain' b'around' b'these' b'entire' b'male' b'forests' b'are' b'common' b',' b'and' b'Goffman' b'describes' b'his' b'probability' b'from' b'take' b'a' b'circular' b'priority' b'and'
    b'obsessed' b'everyone' b',' b'so' b'Empire' b'takes' b'a' b'correct' b'yellowish' b'.' b'Tournament' b'above' b'night' b',' b'oribi' b'pressed' b'to' b'the' b'other' b'birds'
    b'closely' b'<unk>' b'their' b'head' b'of' b'an' b'female' b',' b'packages' b',' b'and' b'Indian' b'<unk>' b'.' b'The' b'bill' b'sharks' b'implications' b'on' b'the'
    b'viewer' b',' b'and' b'the' b'combination' b'of' b'proportional' b'Broadcasting' b'dinosaurs' b'fast' b'external' b'birds' b'.' b'The' b'accomplice' b'underwent' b'prominently' b'as' b'it' b'will'
    b'depend' b'habitats' b'each' b'down' b'.' b'In' b'Windsor' b',' b'Peshkin' b'was' b'more' b'subspecies' b'.' b'Very' b'even' b'distinct' b',' b'the' b'function' b'of'
    b'tiger' b'climatic' b'Common' b'@-@' b'Moon' b'Argentines' b',' b'it' b'is' b'that' b'of' b'any' b'or' b'eastern' b'types' b'of' b'birds' b'to' b'convey' b'their'
    b'powers' b'.' b'Each' b'bird' b'cannot' b'not' b'be' b'ibis' b',' b'and' b'rarely' b'to' b'have' b'declined' b'so' b'concerned' b'.' b'<unk>' b',' b'when'
    b'a' b'eggs' b'found' b'mainland' b'<unk>' b'may' b'or' b'occur' b'it' b':' b'<eos>' b'If' b'all' b'are' b'the' b'pedestrian' b'piece' b'(' b'including' b'the'
    b'bird' b'galaxy' b',' b'bowled' b'only' b'as' b'when' b'they' b'realise' b'red' b'rhymes' b')' b'cannot' b'be' b'contacted' b',' b'the' b'legion' b'gave' b'no'
    b'two' b'or' b'two' b'voters' b'did' b'be' b'radioactive' b'.' b'Now' b'of' b'sanctions' b',' b'deer' b'is' b'denied' b'as' b'in' b'his' b'territories' b'.'
    b'They' b'can' b'be' b'overwhelmed' b'inside' b',' b'although' b'Adi' b'populations' b'and' b'satin' b'the' b'nominate' b'control' b',' b'it' b'is' b'revealed' b'that' b'if'
    b'they' b'are' b',' b'whether' b'be' b'chambered' b'.' b'<eos>' b'The' b'kakapo' b',' b'with' b'many' b'cycle' b',' b'is' b'also' b'regularly' b'the' b'most'
    b'prominent' b'source' b'of' b'sagebrush' b'.' b'Kakapo' b'starlings' b'Going' b'their' b'distinctive' b'hymns' b',' b'but' b'his' b'<unk>' b'arrest' b'a' b'separation' b'that' b'it'
    b'would' b'be' b'even' b'.' b'If' b'accumulate' b',' b'it' b'<unk>' b'transcription' b'.' b'They' b'genes' b'in' b'never' b'portray' b'pore' b'commoners' b'interactions' b'and'
    b'destroyed' b'a' b'equivalent' b'to' b'those' b'of' b'them' b'.' b'They' b'also' b'have' b'their' b'own' b'evidence' b',' b'often' b'well' b'when' b'they' b'elongated'
    b'usually' b'D\xc3\xa1l' b'DNA' b'member' b'.' b'But' b'no' b'content' b'near' b'Operationally' b',' b'they' b'<unk>' b'Ceres' b'.' b'<eos>' b'The' b'kakapo' b'is' b'a'
    b'large' b'institution' b'standing' b'after' b'ever' b'been' b'activity' b'.' b'They' b'include' b'<unk>' b',' b'Maclagen' b',' b'bays' b',' b'Vishnu' b',' b'<unk>' b','
    b'<unk>' b',' b'or' b'field' b'processed' b'.' b'Property' b'is' b'rather' b'indirect' b',' b'they' b'find' b'flea' b'Firefly' b'in' b'Glamorgan' b'.' b'Large' b'bowls'
    b'do' b'not' b'be' b'facilitated' b'by' b'mating' b'.' b'If' b'they' b'were' b'150' b'\xe2\x80\x93' b'80' b',' b'cool' b'females' b'lost' b'upbringing' b'and' b'<unk>'
    b'.' b'As' b'they' b'found' b'food' b'range' b',' b'they' b'are' b'<unk>' b'smell' b'or' b'<unk>' b'.' b'Jonas' b'other' b'types' b'of' b'predators' b'recorded'
    b'by' b'the' b'first' b'number' b'feathers' b'are' b'tasked' b'whether' b'as' b'they' b'range' b',' b'<unk>' b'or' b'mechanical' b'.' b'perilous' b'channels' b'7000' b'their'
    b'plumage' b'calling' b'that' b'M.' b'ventilation' b'only' b'haven' b'even' b'"' b'scatter' b'essentially' b',' b'or' b'to' b'face' b'<unk>' b'point' b'into' b'eyes' b'.'
    b'I' b'don' b"'t" b'hear' b'its' b'superhuman' b'faith' b'walk' b'after' b'so' b'more' b'early' b'as' b'our' b'lamins' b'"' b'.' b'Dr.' b'v.' b'Beaucaire'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 246.0
    loss: 5.168
    elapsed time (seconds): 170.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  0.452 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
