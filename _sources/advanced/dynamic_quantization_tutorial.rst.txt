.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'surroundings' b'be' b'not' b'always' b'literally' b'like' b'and' b'inadvertently' b'was' b'defeated' b'.' b'But' b'they' b'all' b'only' b'of' b'Maryland' b'being' b'Stefan'
    b'<unk>' b',' b'others' b'instructed' b'a' b'short' b'hero' b'in' b'<unk>' b',' b'most' b'of' b'which' b'are' b'recorded' b'by' b'the' b'deceased' b'gap' b'from'
    b'Sarajevo' b'placed' b'as' b'an' b'separation' b'center' b'.' b'An' b'ice' b'of' b'blank' b'formula' b'on' b'the' b'exterior' b'(' b'without' b'France' b')' b','
    b'a' b'combination' b'of' b'pyrite' b',' b'is' b'an' b'process' b'of' b'fetishist' b'Jesus' b'and' b'<unk>' b'abundant' b',' b'such' b'as' b'scrimmage' b'to' b'signatures'
    b'in' b'2008' b'.' b'O' b"'Malley" b"'s" b'skills' b'of' b'Kerch' b'whose' b'vote' b'may' b'gather' b'their' b'core' b'forces' b',' b'taking' b'place' b'2'
    b'@.@' b'5' b'%' b'apart' b'to' b'Z.' b'tide' b'.' b'<eos>' b'Despite' b'this' b'sound' b',' b'there' b'are' b'always' b'evidence' b'to' b'be' b'ambiguous'
    b'from' b'other' b'space' b'.' b'The' b'nest' b'is' b'closed' b'by' b'similar' b'royal' b'protests' b'and' b'only' b'sides' b'of' b'nine' b'new' b'fold' b','
    b'their' b'ability' b'to' b'continue' b'<unk>' b'brown' b'storage' b',' b'which' b'is' b'visible' b'by' b'the' b'Republic' b'of' b'Conservation' b'.' b'The' b'predecessor' b'also'
    b'gives' b'males' b'defeating' b'a' b'second' b'migration' b'since' b'he' b'could' b"'t" b'prefer' b'more' b'than' b'1' b'@.@' b'5' b'mph' b'(' b'21' b'@.@'
    b'8' b'in' b')' b',' b'and' b'any' b'other' b'half' b'involved' b'.' b'On' b'September' b'26' b',' b'1933' b',' b'there' b'are' b'225' b'writers'
    b'(' b'with' b'$' b'17' b'million' b'per' b'year' b')' b',' b'and' b'Mahesh' b'estimates' b'like' b'<unk>' b',' b'to' b'1' b'centimetres' b'(' b'240'
    b'km' b'/' b'h' b')' b',' b'1' b'%' b'of' b'<unk>' b',' b'olives' b',' b'or' b'Greek' b'birds' b'in' b'use' b'(' b'533' b'\xe2\x80\x93'
    b'1' b')' b'and' b'Z' b'(' b'242' b'reddish' b'one' b')' b'and' b'numbers' b'hall' b'(' b'fascist' b')' b'.' b'There' b'are' b'one' b'winning'
    b'featuring' b'these' b'times' b'during' b'<unk>' b'(' b'35' b'@.@' b'5' b'%' b')' b'using' b'New' b'Zealand' b'in' b'the' b'village' b'within' b'his' b'origin'
    b'.' b'Mayer' b'tolerance' b'appear' b'agreement' b',' b'and' b'they' b'were' b'four' b'fire' b'powered' b'at' b'<unk>' b'<unk>' b'(' b'520' b'(' b'paperback' b')'
    b'.' b'Flooding' b'later' b'lived' b'.' b'The' b'occurrence' b'of' b'simplicity' b'is' b'largely' b'parallel' b',' b'which' b'used' b'out' b'maintenance' b'holders' b',' b'whom'
    b'it' b'increased' b'often' b'due' b'to' b'<unk>' b',' b'Robert' b'CR' b'al' b'Frost' b',' b'a' b'drinking' b'specimen' b'of' b'walking' b',' b'a' b'Davies'
    b'acid' b'port' b'yellow' b',' b'whose' b'mating' b'Egitto' b'is' b'a' b'basal' b'farmer' b'\xe2\x80\x94' b'and' b'a' b'Mesa' b'riddle' b'which' b'had' b'<unk>' b','
    b'whose' b'results' b'is' b'seen' b'in' b'The' b'same' b'year' b'.' b'Along' b',' b'one' b'of' b'her' b'larger' b'actions' b'are' b'unknown' b',' b'when'
    b'the' b'kakapo' b'is' b'or' b'only' b'hatch' b'to' b'low' b'when' b'maintaining' b'outside' b'Tulsidas' b'.' b'The' b'Collector' b'is' b'swept' b'into' b'D.' b'Shakespeare'
    b',' b'near' b'a' b'depiction' b'tower' b',' b'added' b'that' b'Province' b'follows' b'Berry' b'County' b'and' b'Marsh' b'(' b'assigned' b'to' b'metals' b')' b'of'
    b'a' b'powerful' b'or' b'charitable' b'species' b',' b'often' b'so' b'<unk>' b'and' b'hypothesized' b'as' b'they' b'have' b'a' b'pointing' b'for' b'trees' b'.' b'However'
    b',' b'his' b'symbiosis' b'find' b'analysed' b'both' b'solid' b',' b'they' b"'re" b'said' b'to' b'be' b'transmitted' b'.' b'In' b'addition' b'for' b'zinc' b'sex'
    b',' b'males' b'are' b'present' b'.' b"'" b'<unk>' b'of' b'this' b'terrorist' b'behavior' b'elsewhere' b'koreanus' b'around' b'4' b'\xe2\x80\x93' b'3' b',' b'5' b'in'
    b',' b'substance' b',' b'and' b'explains' b'be' b'compelled' b'to' b'enter' b'closely' b'if' b'in' b'a' b'Phase' b'sequence' b'.' b'As' b'<unk>' b'anek\xc4\x81ntav\xc4\x81da' b','
    b'males' b'are' b'strongly' b'able' b'to' b'prefer' b'Ireland' b'.' b'Many' b'of' b'their' b'connections' b',' b'such' b',' b'and' b'affect' b'outgrowth' b'between' b'Ha'
    b'de' b'M.' b'la' b'<unk>' b',' b'may' b'also' b'indicate' b'to' b'be' b'thicker' b'rather' b'than' b'about' b'20' b'%' b'of' b'longer' b'.' b'1'
    b'in' b'the' b'Cererian' b'limits' b',' b'done' b',' b'exits' b',' b'slip' b'and' b'A.' b'throated' b"'an" b'which' b'may' b'be' b'supplied' b'by' b'manifestation'
    b'(' b'with' b'New' b'Zealand' b'of' b'Black' b'nomenclature' b')' b'and' b'the' b'rib' b'case' b'(' b'1896' b')' b';' b'in' b'2' b'\xe2\x80\x93' b'5'
    b'packaged' b'on' b'a' b'life' b'than' b'15' b',' b'290' b'on' b'and' b'from' b'3' b'July' b'to' b'4' b'\xe2\x80\x93' b'4' b'April' b'.' b'<eos>'
    b'Common' b'starlings' b'and' b'dark' b'damage' b'exist' b'after' b'its' b'will' b'can' b'reach' b'to' b'wind' b'models' b'and' b'structural' b'<unk>' b'@-@' b'frequency' b'.'
    b'Once' b'effectively' b',' b'or' b',' b'lost' b'so' b'she' b'wears' b'a' b'tree' b'being' b'directly' b'so' b'specifically' b'and' b'even' b'Torah' b'throughout' b'part'
    b'.' b'Around' b'its' b'dense' b'starling' b'show' b',' b'however' b',' b'some' b'species' b'are' b'only' b'depicted' b'before' b'The' b'kakapo' b'become' b'flanked' b'.'
    b'M\xc4\x81ori' b'can' b'degree' b',' b'although' b'their' b'bird' b'would' b'be' b'guarded' b'by' b'much' b'insects' b'.' b'Although' b'Shrubs' b',' b'it' b'outer' b'philosophies'
    b'generally' b'feed' b',' b'and' b'less' b'populous' b'structures' b'compared' b'by' b'many' b'nests' b'and' b'other' b'conspiracy' b'(' b'increased' b'other' b'materials' b')' b'.'
    b'Like' b'be' b'black' b',' b'any' b'common' b'venomous' b'parrot' b'may' b'extend' b'all' b'more' b'.' b'Although' b'it' b'is' b'out' b'that' b'if' b'it'
    b'occurs' b'to' b'another' b',' b'however' b',' b'they' b'subnuclear' b'1260' b'along' b'heavily' b'to' b'be' b'integrated' b'conditions' b'throughout' b'very' b'recent' b'.' b'It'
    b'spread' b'to' b'either' b'function' b'of' b'draining' b'attacks' b'at' b'least' b'two' b'years' b'from' b'1841' b'.' b'Inside' b'themselves' b',' b'they' b'originated' b'touch'
    b'thirteenth' b'times' b'.' b'Latex' b'numbers' b'from' b'12' b'%' b'of' b'the' b'new' b'size' b'in' b'the' b'rear' b'of' b'conversion' b'are' b'shifting' b'.'
    b'They' b'do' b'made' b'numbers' b'of' b'maximum' b'<unk>' b'ranging' b'.' b'<unk>' b'decide' b',' b'it' b'is' b'finding' b'that' b'canoes' b',' b'reducing' b'Adel'
    b'or' b'microscopic' b'soluble' b'delivering' b'<unk>' b'and' b'swept' b'ceiling' b'.' b'When' b'evidence' b'or' b'winged' b'include' b'that' b'this' b'comparison' b'rhymes' b',' b'fish'
    b'they' b'feed' b'in' b'public' b'areas' b',' b'Bass' b'and' b'insects' b'.' b'Kaboom' b'differs' b'by' b'demand' b'from' b'each' b'other' b'can' b'be' b'found'
    b'until' b'terms' b'of' b'other' b'or' b'answers' b'structural' b'origin' b'.' b'<eos>' b'Naoko' b'lights' b'are' b'usually' b'common' b'to' b'present' b'role' b'all' b'of'
    b'a' b'star' b"'s" b'arrogance' b',' b'as' b'when' b'microscopy' b'criticized' b'.' b'The' b'prevention' b'also' b'takes' b'their' b'advantage' b'of' b'spread' b'.' b'<eos>'
    b'The' b'common' b'starling' b'is' b'underline' b'by' b'Iwo' b',' b'in' b'charge' b'such' b'as' b'molecules' b'for' b'dark' b'illustrations' b'and' b'sixteen' b'habitat' b'.'
    b'The' b'rocks' b'are' b'estimated' b'after' b'lamb' b',' b'although' b'tissue' b'Calendar' b'orientation' b'by' b'ballads' b',' b'one' b'of' b'<unk>' b',' b'each' b'other'
    b'may' b'be' b'present' b'@-@' b'or' b'@-@' b'brown' b'or' b'ground' b'.' b'They' b'go' b'and' b'also' b'explain' b'military' b'health' b'and' b'polyurethane' b'more'
    b'<unk>' b'.' b'Odaenathus' b'Fountain' b'describes' b'.' b'In' b'this' b'few' b'or' b'nest' b'bird' b'arts' b',' b'fewer' b'birds' b'are' b'certain' b'during' b'any'
    b'other' b'time' b',' b'although' b'increased' b'<unk>' b'from' b'other' b'other' b'leaves' b'Biscayne' b'lamina' b',' b'in' b'longer' b'areas' b'are' b'shown' b'.' b'As'
    b'the' b'British' b'rear' b',' b'<unk>' b'soup' b'may' b'be' b'changed' b'as' b'they' b'need' b'to' b'have' b'prey' b'their' b'costly' b'plumage' b'.' b'It'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 225.9
    loss: 5.164
    elapsed time (seconds): 154.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  26.524 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
