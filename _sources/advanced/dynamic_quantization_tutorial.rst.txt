.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'high' b'non' b'@-@' b'animals' b'in' b'Rome' b'.' b'This' b'has' b'absorbed' b'five' b'continuously' b'to' b'four' b'books' b'during' b'his' b'centres' b'of' b'Return'
    b'Earth' b'.' b'<eos>' b'When' b'of' b'this' b'time' b',' b'the' b'National' b'Division' b'surrendered' b'jaws' b'along' b'after' b'each' b'other' b',' b'and' b'requested'
    b'roughly' b'17' b'%' b'of' b'Ceres' b'.' b'Since' b'this' b'context' b'insurrectionists' b'was' b'recorded' b'into' b'Australia' b',' b'with' b'other' b'illustration' b'to' b'become'
    b'put' b'for' b'his' b'great' b'fast' b'new' b'relationship' b':' b'20' b'%' b'of' b'about' b'spherical' b'dollars' b'.' b'No' b'interesting' b'versions' b'marked' b'$'
    b'5' b'million' b'each' b'years' b'to' b'compare' b'in' b'the' b'organization' b'simultaneously' b'.' b'It' b'has' b'17' b'm' b'(' b'48' b'km' b')' b'of'
    b'Franks' b'crime' b'when' b'she' b'will' b'meet' b'under' b'each' b'other' b',' b'because' b'its' b'Waternish' b'@-@' b'nitrogen' b'bears' b'its' b'Lyceum' b'in' b'too'
    b'bowls' b',' b'at' b'1792' b';' b'old' b'throw' b'other' b'times' b'sent' b'together' b'on' b'their' b'head' b'alone' b'to' b'"' b'occupy' b'a' b'complex'
    b'southeast' b'of' b'the' b'British' b'Navy' b'"' b'.' b'The' b'play' b'forms' b'action' b'time' b'of' b'Ethiopia' b'include' b'<unk>' b'as' b'his' b'possessed' b'role'
    b',' b'indicating' b'less' b'accepted' b'murals' b'when' b'refers' b'to' b'the' b'Sister' b'Non' b',' b'of' b'the' b'entire' b'barley' b'and' b'other' b'donor' b'areas'
    b'on' b'six' b'islands' b',' b'midfielder' b'and' b'<unk>' b',' b'the' b'two' b'of' b'the' b'origin' b'of' b'common' b'Bible' b'spear' b'or' b'woodlands' b'.'
    b'<eos>' b'In' b'Belfast' b',' b'McLaren' b'und' b'sexpunctatus' b'signed' b'these' b'of' b'these' b'of' b'styling' b'records' b',' b'this' b'objects' b'and' b',' b'after'
    b'the' b'games' b'to' b'yellowish' b',' b'the' b'heavy' b'criteria' b'.' b'eggs' b'with' b'over' b'62' b'%' b'of' b'large' b'franchise' b'remains' b'of' b'US'
    b'rhythms' b'are' b'named' b'@-@' b'Bogart' b'.' b'The' b'archaic' b'inscription' b'is' b'commonly' b'identified' b'as' b'being' b'spreading' b'on' b'"' b'recoilless' b'practices' b'"'
    b',' b'which' b'may' b'have' b'did' b'when' b'<unk>' b'is' b'very' b'different' b'.' b'It' b'is' b'generally' b'going' b'to' b'be' b'relay' b'as' b'there'
    b'is' b'<unk>' b'over' b'Haifa' b',' b'Ch' b'on' b'entire' b'older' b'main' b'feed' b'as' b'males' b'pointed' b'holes' b',' b'food' b',' b'so' b'the'
    b'Horse' b'is' b'increasingly' b'simply' b'growing' b'.' b'By' b'his' b'injury' b'that' b'has' b'Organisation' b'a' b'herbivore' b',' b'the' b'<unk>' b'subjects' b'may' b'be'
    b'sustained' b'in' b'lbw' b'starlings' b'(' b'Lomonosov' b'Germany' b',' b'1990s' b')' b',' b'pre' b'\xe2\x80\x93' b'36' b'.' b'The' b'large' b'starling' b'is' b'seen'
    b'as' b'mark' b',' b'and' b'above' b'roads' b'they' b'also' b'operated' b'both' b'dots' b'are' b'<unk>' b'(' b'<unk>' b')' b'.' b'<eos>' b'The' b'kakapo'
    b'of' b'Parvati' b'became' b'since' b'Freeman' b',' b'where' b'they' b'<unk>' b'continues' b'as' b'a' b'<unk>' b',' b'whereas' b'its' b'three' b'short' b'birds' b'can'
    b'be' b'available' b':' b'<eos>' b'<unk>' b'the' b'body' b'with' b'adapted' b'males' b',' b'from' b'those' b'surface' b',' b'tissue' b',' b'and' b'on' b'pressure'
    b'in' b'the' b'inner' b'Scotland' b'.' b'There' b'is' b'little' b'temperate' b'compounds' b'who' b'have' b'occurred' b'from' b'extinct' b'their' b'beak' b'.' b'Numbers' b'must'
    b'have' b'struggled' b'on' b'plastic' b',' b'she' b'and' b'his' b'parameters' b'are' b'usually' b'a' b'source' b'of' b'five' b'to' b'seize' b',' b'uses' b'forth'
    b'across' b'decoration' b'when' b'it' b'begins' b'fourth' b'into' b'unusual' b'to' b'trace' b'them' b',' b'at' b'a' b'13th' b'@-@' b'century' b'scene' b'input' b'.'
    b'They' b'usually' b'seem' b'to' b'have' b'been' b'automatically' b'mg' b'.' b'<eos>' b'The' b'common' b'starling' b'(' b'branching' b'which' b'"' b'USAID' b'"' b'is'
    b'Munei' b'below' b'helium' b')' b'was' b'discovered' b'by' b'<unk>' b'(' b'14' b')' b',' b'the' b'kakapo' b'notably' b'a' b'industrialist' b'among' b'nine' b'features'
    b'.' b'In' b'1962' b',' b'in' b'variation' b'on' b'1' b'February' b'2001' b',' b'<unk>' b'(' b'M.' b'McCarthy' b')' b'has' b'an' b'large' b'form'
    b'of' b'popular' b'growth' b'.' b'Their' b'large' b'consensus' b'specialised' b'near' b'it' b'as' b'well' b'as' b'USD' b'by' b'motor' b'sizes' b'concurred' b'is' b'perhaps'
    b'called' b'by' b'"' b'geared' b'and' b'fist' b'"' b'so' b'somewhat' b'used' b'by' b'many' b'species' b'sleeves' b'that' b'these' b'contributes' b'elements' b'of' b'scientists'
    b'can' b'be' b'a' b'controversial' b'bird' b'to' b'place' b'administrative' b'teeth' b'common' b'DNA' b'shrines' b'.' b'<eos>' b'In' b'1999' b'Male' b'assembly' b'sexpunctatus' b'was'
    b'bright' b'240s' b'.' b'Vins' b'525' b'was' b'replaced' b'by' b'<unk>' b'<unk>' b'Robert' b'Ministry' b',' b'to' b'uphold' b'them' b'to' b'be' b'supervisory' b'.'
    b'However' b',' b'and' b'shatpadi' b'school' b',' b'the' b'least' b'power' b'are' b'probably' b'greatly' b'both' b'seen' b'as' b'LED' b'owning' b'with' b'140' b'their'
    b'<unk>' b'<unk>' b'making' b'or' b'Odessa' b',' b'fell' b'into' b'three' b'to' b'be' b'absorbed' b'by' b'officials' b'.' b'"' b'Horowitz' b'genre' b'"' b'B.'
    b'Shaddad' b'likened' b'them' b'to' b'Miles' b'John' b'<unk>' b',' b'V.' b'Cai' b'Sussman' b'<eos>' b'blind' b'her' b'first' b'literary' b'fungus' b'named' b'David' b'@-@'
    b'Marie' b'capital' b'were' b'hydrogen' b'in' b'Ireland' b',' b'on' b'22' b'December' b'1901' b'.' b'One' b'of' b'his' b'dubbed' b'post' b'@-@' b'root' b'described'
    b'to' b'the' b'ethnic' b'content' b'consisted' b'of' b'more' b'than' b'14' b'%' b',' b'as' b'in' b'Australia' b'.' b'The' b'ends' b'is' b'Solitude' b'and'
    b'universal' b'Epiphany' b',' b'along' b'around' b'28' b'tridentata' b'from' b'2' b'miles' b'(' b'3' b'@.@' b'4' b'in' b')' b'from' b'a' b'staircase' b','
    b'drew' b'in' b'54' b'reviews' b'and' b'three' b'half' b'those' b',' b'are' b'elevated' b'simultaneously' b',' b'72' b'@-@' b'present' b'species' b'per' b'<unk>' b'L\xc3\xa9gion'
    b'articulated' b',' b'which' b'may' b'be' b'lived' b'before' b'areas' b'has' b'feed' b'\xe2\x80\x93' b'larger' b',' b'Abolition' b',' b'Chief' b',' b'white' b',' b'('
    b'US' b')' b',' b'Billie' b',' b'133' b',' b'and' b'depth' b',' b'declaring' b'ostrich' b'in' b'oil' b'or' b'even' b'transmitted' b',' b'spotted' b'off'
    b'.' b'A' b'female' b'bone' b'makes' b'itself' b'.' b'<eos>' b'decay' b',' b'with' b'several' b'caves' b',' b'Zygoballus' b'(' b'No' b')' b',' b'begins'
    b'from' b'over' b'6' b'million' b'of' b'year' b',' b'2' b'\xc2\xb0' b'proteins' b',' b'it' b'is' b'currently' b'published' b'for' b'five' b'tracks' b',' b'southeasterly'
    b',' b'over' b'eight' b'note' b'and' b'thick' b',' b'brown' b'.' b'Analysis' b'do' b'also' b'contain' b'"' b'opening' b',' b'a' b'task' b'that' b'happens'
    b'"' b',' b'always' b'to' b'be' b'used' b'by' b'<unk>' b'@-@' b'Childe' b',' b'American' b'Celtic' b'associated' b',' b'Angela' b'from' b'New' b'England' b'and'
    b'mb' b'from' b'Majesty' b"'" b'bird' b'up' b'residential' b'gifts' b',' b'for' b'example' b'pelts' b'<unk>' b'.' b'The' b'behavior' b'of' b'the' b'kakapo' b'can'
    b'be' b'colonised' b'until' b'spring' b'.' b'Ceres' b'they' b'represent' b'its' b'two' b'mineral' b'offerings' b'for' b'the' b'field' b'.' b'<eos>' b'Oxbow' b'starlings' b'spread'
    b'at' b'their' b'ecliptic' b'@-@' b'beak' b'behind' b'<unk>' b',' b'the' b'common' b'wing' b'and' b'Qedar' b"'" b'sites' b';' b'the' b'demon' b'is' b'usually'
    b'pointed' b',' b'though' b'touches' b'move' b'to' b'pin' b',' b'although' b'the' b'1133' b'often' b'.' b'The' b'forehead' b',' b'strong' b',' b'here' b','
    b'and' b'taxing' b'white' b'metals' b',' b'are' b'caninus' b'.' b'After' b'the' b'footage' b'to' b'Pola' b',' b'the' b'older' b'starling' b'changes' b'a' b'access'
    b'to' b'Chalukyas' b',' b'Farrell' b'and' b'seater' b',' b'with' b'O' b'Lopez' b',' b'the' b'red' b'inferior' b'function' b'of' b'<unk>' b',' b'wild' b'power'
    b'and' b'qualifiers' b'intended' b'to' b'exercise' b'their' b'<unk>' b'.' b'It' b'is' b'uncertain' b'that' b'her' b'even' b'requirement' b'<unk>' b'that' b'is' b'now' b'in'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 79.734661


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.7
    loss: 5.168
    elapsed time (seconds): 153.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  17.609 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
