.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'the' b'game' b'.' b'The' b'couple' b'Clyde' b'Nicholas' b'<unk>' b'noted' b'as' b'being' b'more' b'enthusiastic' b',' b'mid' b',' b'being' b'hired' b'only' b'yet'
    b',' b'but' b'better' b'Zygoballus' b'Liam' b'popularised' b'the' b'<unk>' b'Monte' b'firm' b'perianth' b'.' b'They' b'has' b'previously' b'learned' b'since' b'the' b'name' b'and'
    b'issued' b'both' b'dismay' b'in' b'the' b'NBA' b'.' b'Jordan' b'put' b'the' b'short' b'winemaking' b'white' b'significant' b'estate' b'launch' b'to' b'assist' b'security' b'and'
    b'even' b'nearby' b',' b'such' b'as' b'make' b'Mosley' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'='
    b'=' b'Ratings' b'=' b'=' b'=' b'<eos>' b'<eos>' b'As' b'an' b'feminist' b'Roman' b'trilogy' b',' b'opposition' b'can' b'be' b'seen' b'for' b'TV' b','
    b'Genoa' b',' b'scenery' b',' b'Counterfeit' b',' b'showing' b'notes' b'to' b'support' b'the' b'Sun' b'for' b'two' b'months' b',' b'not' b'yet' b'<unk>' b'protestors'
    b'.' b'His' b'timetable' b'to' b'the' b'planet' b'would' b'translate' b'the' b'wall' b'of' b'metres' b'.' b'O' b'One' b'is' b'now' b'proposed' b'by' b'the'
    b'Roman' b'wars' b'.' b'As' b'care' b'of' b'completing' b'their' b'northbound' b'number' b'of' b'scientists' b',' b'are' b'a' b'goal' b'cross' b'piercing' b'disruption' b','
    b'the' b'astronomical' b'patch' b'of' b'any' b'other' b'unrest' b'in' b'characters' b',' b'virtual' b'people' b',' b'open' b',' b'water' b'and' b'grey' b',' b'and'
    b'<unk>' b'space' b';' b'there' b'are' b'no' b'possible' b'act' b'high' b'in' b'the' b'1800s' b'rather' b'than' b'30' b'minutes' b'could' b'be' b're' b'@-@'
    b'vegetarian' b'.' b'The' b'exact' b'match' b'of' b'sight' b'cannot' b'be' b'preserved' b'.' b'Though' b'doing' b'for' b'being' b'been' b'killed' b'.' b'<eos>' b'In'
    b'the' b'1950s' b',' b'Box' b'fungi' b'is' b'expecting' b'with' b'food' b'sites' b'.' b'This' b'results' b'due' b'to' b'their' b'taking' b'having' b'the' b'first'
    b'song' b'of' b'100' b'to' b'9' b'years' b',' b'though' b'regions' b'those' b'of' b'twenty' b'died' b'per' b'grooves' b'around' b'top' b'11' b'birds' b','
    b'drawn' b'Swedish' b'or' b'fixed' b'per' b'player' b'.' b'It' b'was' b'a' b'consistent' b'armored' b'term' b'of' b'these' b'amend' b'@-@' b'brick' b',' b'by'
    b'white' b'points' b'handled' b'by' b'Dawn' b'.' b'The' b'average' b'body' b'when' b'The' b'orbit' b'of' b'modern' b'burns' b'has' b'an' b'target' b'of' b'5'
    b'.' b'In' b'chapter' b'years' b',' b'the' b'system' b'lived' b'during' b'much' b'@-@' b'gravity' b',' b'such' b'as' b'<unk>' b',' b'water' b',' b'skills'
    b',' b'and' b'placing' b'\xe2\x80\x91' b'numbers' b'while' b'they' b'Venus' b'lives' b'with' b'initiate' b'prey' b'.' b'Both' b'Samart' b'quickly' b'normally' b'turns' b'it' b'with'
    b'Newport' b'spleen' b',' b'muscular' b',' b'bye' b'video' b'items' b'.' b'<eos>' b'<eos>' b'=' b'=' b'celestial' b'countries' b'=' b'=' b'<eos>' b'<eos>' b'Because'
    b'of' b'the' b'common' b'genera' b'in' b'escalating' b'forests' b',' b'they' b'were' b'fed' b'by' b'some' b'ways' b',' b'but' b'some' b'appropriate' b'species' b'are'
    b'also' b'pensioners' b'.' b'It' b'is' b'known' b',' b'Jews' b',' b'and' b'Lawler' b'.' b'Sometimes' b'<unk>' b',' b'although' b'they' b'are' b'for' b'prevailing'
    b'217' b',' b'they' b'can' b'arise' b'power' b'in' b'other' b'regions' b'and' b'form' b'.' b'On' b'5' b'June' b',' b'Cam' b'it' b',' b'optics'
    b',' b'cheese' b',' b'geography' b',' b'movement' b',' b'and' b'Farley' b'@-@' b'million' b'areas' b'barriers' b',' b'a' b'one' b'known' b'known' b'outside' b'and'
    b'millimeters' b'to' b'diabetes' b'support' b'.' b'Peter' b'plumes' b',' b'but' b'their' b'roommate' b'Myles' b'already' b'\xe2\x80\x98' b'the' b'title' b'of' b'each' b'parts' b'of'
    b'identify' b'.' b'A' b'large' b'variety' b'serves' b'simultaneously' b'by' b'M\xc4\x81ori' b'hadrosaurs' b',' b'as' b'and' b'acyclic' b'lamps' b'can' b'be' b'seen' b',' b'but'
    b'on' b'a' b'large' b'keeps' b'species' b'of' b'low' b'leg' b',' b'or' b'to' b'central' b'breeding' b',' b'compared' b'to' b'some' b'behaviour' b'under' b'such'
    b'further' b',' b'lacking' b'they' b'should' b'find' b'it' b'knowing' b',' b'even' b'their' b'size' b'before' b'catchment' b'.' b'Perhaps' b',' b'most' b'much' b'workers'
    b'takes' b'to' b'these' b',' b'high' b'or' b'attractive' b',' b'they' b'were' b'even' b'successful' b'if' b'they' b'know' b'to' b'assume' b'they' b'were' b'attacked'
    b'upon' b'to' b'feed' b'.' b'Several' b'young' b'birds' b'enter' b'their' b'length' b'four' b'to' b'be' b'exposed' b'.' b'<unk>' b'experiments' b'repetitive' b'.' b'A'
    b'female' b'has' b'dominated' b'the' b'female' b',' b'driving' b'recording' b'new' b'limits' b',' b'or' b'that' b'in' b',' b'is' b'sometimes' b'different' b',' b'<unk>'
    b'or' b'plant' b',' b'Reproduction' b',' b'grenadiers' b',' b'and' b'<unk>' b'Eu2O3' b'.' b'However' b',' b'then' b'genome' b',' b'economies' b'have' b'changed' b'in'
    b'a' b'<unk>' b'or' b'yellow' b'spiders' b'but' b'typically' b'<unk>' b',' b'as' b'they' b'face' b'in' b'other' b'Macquarie' b'players' b'indications' b'to' b'be' b'made'
    b'.' b'Therefore' b',' b'much' b'innings' b'may' b'be' b'able' b'to' b'be' b'males' b'to' b'black' b'drive' b'even' b'if' b'they' b'need' b'into' b'creating'
    b'them' b'.' b'Then' b',' b'birds' b'have' b'94' b'lines' b'in' b'2014' b',' b'bouncers' b'taxa' b'forced' b'anti' b'@-@' b'173' b'metres' b'guns' b'in'
    b'his' b'luminosity' b':' b'3' b'@.@' b'5' b'in' b'(' b'2' b'@.@' b'2' b'in' b')' b'leaflets' b',' b'and' b'are' b'only' b'more' b'comparable'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Demographics' b'=' b'=' b'<eos>' b'<eos>' b'Common' b'starlings' b'decreased' b'praised' b'to' b'over' b'26' b'million' b'females' b'.'
    b'The' b'two' b'kakapo' b'features' b'angling' b'occurs' b'approximately' b'25' b'common' b'birds' b'.' b'Once' b'males' b'are' b'required' b'to' b'be' b'found' b'.' b'<eos>'
    b'One' b'of' b'the' b'first' b'female' b'meat' b'is' b'mentioned' b'to' b'their' b'distinctive' b'length' b',' b'and' b'their' b'nucleus' b'was' b'cut' b'to' b'short'
    b'ones' b'.' b'<eos>' b'To' b'be' b'classified' b'to' b'refer' b'to' b'metallic' b'shrub' b',' b'sedentary' b',' b'or' b'<unk>' b'.' b'Each' b'Dandenong' b'sound'
    b'likely' b'will' b'be' b'greatly' b'aligned' b',' b'if' b'they' b'spread' b'with' b'elaborate' b'habitats' b'with' b'Hiller' b',' b'they' b'worked' b'and' b'therefore' b'became'
    b'slowly' b'.' b'"' b'<unk>' b'seaweed' b'O' b'Chariot' b',' b'in' b'contrast' b',' b'G' b'rationing' b'as' b'a' b'sky' b',' b'physically' b'fly' b'<unk>'
    b',' b'and' b'perfect' b'mostly' b'minus' b'visible' b',' b'pushing' b'thousands' b'of' b'so' b'directly' b'.' b'"' b'Ceres' b'noted' b'the' b'type' b'of' b'population'
    b'(' b'2004' b'and' b'to' b'become' b'all' b'hot' b'species' b'of' b'Christians' b')' b',' b'only' b'in' b'the' b'presence' b',' b'one' b'of' b'more'
    b'than' b'eight' b'or' b'100' b'%' b',' b'in' b'gaming' b'and' b'tough' b'females' b'.' b'In' b'Mexico' b',' b'Ireland' b'is' b'safely' b'classified' b'from'
    b'gills' b',' b'so' b'the' b'protective' b'toxicity' b'beneath' b'a' b'sheep' b'made' b'down' b'recent' b'south' b'and' b'Parvati' b'damage' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'=' b'Concept' b'=' b'=' b'=' b'<eos>' b'<eos>' b'From' b'its' b'17th' b'century' b're' b'minutes' b'from' b'AML' b',' b'the' b'kakapo' b','
    b'enlarged' b'by' b'birds' b',' b'are' b'other' b'to' b'only' b'qualify' b'to' b'calculate' b'their' b'irregularly' b'and' b'25' b'kilometers' b',' b'often' b'that' b'exists'
    b';' b'or' b'very' b'terminus' b'inches' b',' b'falling' b'to' b'15' b'%' b'of' b'food' b'or' b'<unk>' b'.' b'With' b'those' b'season' b'kickoff' b','
    b'it' b'enters' b'25' b'successfully' b'drive' b'when' b'they' b'are' b'houses' b'.' b'One' b'of' b'the' b'other' b'surviving' b'measurements' b'of' b'males' b'is' b'known'
    b'.' b'Several' b'are' b'raised' b'Radiation' b'and' b'Widacki' b'molecules' b'were' b'comparatively' b'easy' b'.' b'By' b'males' b'in' b'Ireland' b',' b'they' b'need' b'to'
    b'keep' b'helicopter' b'agricultural' b'brown' b'(' b'anywhere' b'to' b'present' b'to' b'be' b'high' b'RNA' b',' b'particularly' b'or' b'possibly' b'Rover' b'bred' b')' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.73992


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.8
    loss: 5.168
    elapsed time (seconds): 149.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  14.288 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
