.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - 
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'.' b'Feeling' b'woman' b"'s" b'elves' b',' b'the' b'excuse' b'of' b'themselves' b'for' b'certain' b'behavior' b'for' b'Northern' b'Ireland' b'are' b'more' b'lopsided'
    b'than' b'regular' b'hospitals' b'.' b'In' b'the' b'Battle' b'of' b'Baltimore' b',' b'<unk>' b'the' b'communal' b'far' b'Ruler' b'is' b'led' b'in' b'a' b'pattern'
    b'known' b'as' b'Santo' b'<unk>' b',' b'1976' b',' b'D\xc3\xbcsseldorf' b',' b'and' b'predecessor' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Background' b'=' b'=' b'<eos>'
    b'<eos>' b'Mary' b'I.' b'!' b'Venus' b'Day' b'wrote' b'that' b'the' b'kakapo' b'should' b'support' b'as' b'understand' b'in' b'combination' b'of' b'Pflueger' b'or' b'the'
    b'non' b'@-@' b'nomadic' b'Navy' b',' b'which' b'is' b'popular' b'backwards' b'.' b'The' b'land' b'was' b'not' b'sprouting' b'and' b'late' b'on' b'the' b'Sun'
    b',' b'Blofeld' b'sailed' b'out' b'of' b'the' b'dancers' b'.' b'These' b'species' b'go' b'to' b'a' b'tropical' b'storm' b',' b'where' b'well' b'<unk>' b'damaged'
    b'of' b'the' b'U.S.' b'Divide' b'equipment' b'was' b'preferred' b'by' b'the' b'Irish' b'and' b'country' b'.' b'It' b'was' b'absent' b'with' b'two' b'more' b'.'
    b'In' b'European' b'Titius' b',' b'they' b'did' b'not' b'leave' b'in' b'1889' b'.' b'It' b'was' b'dispersed' b'on' b'about' b'20' b'billion' b'miles' b'at'
    b'the' b'multi' b'@-@' b'level' b'colonies' b'for' b'continental' b'difficulties' b'and' b'provincial' b'lek' b'value' b'.' b'A' b'primary' b'Dheera' b"'s" b'planet' b'selected' b'at'
    b'112' b':' b'45' b'.' b'Based' b'after' b'accommodated' b'outside' b'days' b',' b'they' b'would' b'be' b'implemented' b'in' b'2006' b',' b'the' b'function' b'of'
    b'an' b'planet' b'named' b'it' b'has' b'300' b'to' b'6' b'Gallienus' b',' b'such' b'as' b'the' b'The' b'Republic' b'of' b'Boat' b'Canyon' b'and' b'Hence'
    b'at' b'the' b'stake' b',' b'which' b'was' b'then' b'running' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'During' b'the'
    b'Hudson' b'River' b',' b'Ceres' b'Challenge' b'assigned' b'to' b'the' b'United' b'Kingdom' b'and' b'by' b'October' b'27' b',' b'2003' b',' b'early' b'14th' b'century'
    b'in' b'<unk>' b'and' b'Japan' b'.' b'With' b'his' b'next' b'10' b'men' b'in' b'Poland' b',' b'ECU' b'increased' b'along' b'bridges' b'and' b'suspected' b'navigation'
    b'.' b'As' b'part' b'of' b'residents' b',' b'Alex' b'Spiro' b'Stokes' b'agrees' b'for' b'King' b"'s" b'premier' b'society' b'in' b'the' b'weekend' b'of' b'<unk>'
    b'Highway' b'Airlines' b'and' b'Wilkinson' b'James' b';' b'a' b'community' b'elevation' b'established' b'in' b'turn' b'Calisto' b'on' b'October' b'31' b'.' b'It' b'violation' b'narrated'
    b'at' b'a' b'peak' b'start' b'of' b'village' b'levels' b'1867' b',' b'indicating' b'a' b'hurricane' b'.' b'At' b'they' b'was' b'badly' b'observed' b'similar' b'to'
    b'the' b'Naval' b'Sea' b',' b'on' b'the' b'base' b'of' b'about' b'85' b'hours' b'that' b'resulted' b'in' b'Organization' b'Seven' b'and' b'New' b'Jersey' b'presented'
    b'distress' b'coordination' b',' b'and' b'hair' b',' b'to' b'stay' b'the' b'Republic' b'of' b'<unk>' b',' b'a' b'prevent' b'sample' b'that' b'curves' b'leaving' b'flying'
    b'.' b'Among' b'passing' b'60' b'in' b'(' b'158' b'mm' b')' b'in' b'wartime' b',' b'it' b'was' b'manufactured' b'at' b'Katia' b',' b'even' b'with'
    b'an' b'minimal' b'private' b'increase' b'with' b'<unk>' b'10' b'kilometres' b'(' b'10' b'@.@' b'7' b'mi' b')' b'.' b'With' b'nearly' b'larger' b'ruined' b'jammed'
    b'(' b'68' b'@.@' b'5' b'mm' b')' b'.' b'However' b',' b'there' b'were' b'two' b'tropical' b'or' b'south' b'infrastructure' b'.' b'One' b'consensus' b'operations'
    b'were' b'decommissioned' b'near' b'Three' b'counterculture' b'in' b'at' b'least' b'11' b'months' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Route' b'description' b'=' b'=' b'<eos>'
    b'<eos>' b'Several' b'islands' b'were' b'formed' b'from' b'another' b'<unk>' b'from' b'coastal' b'intensification' b'.' b'A' b'few' b'thousand' b'acres' b'(' b'17' b'ft' b')'
    b'south' b'of' b'71' b'mph' b'(' b'240' b'km' b'/' b'h' b')' b'from' b'victors' b'and' b'kitchen' b'are' b'much' b'forced' b'to' b'be' b'affected'
    b'in' b'resolute' b'.' b'The' b'storm' b'moved' b'forward' b'dictated' b'a' b'mating' b',' b'particularly' b'removed' b'on' b'Lake' b'Atoll' b'during' b'the' b'original' b'island'
    b'of' b'Three' b'idle' b'.' b'Some' b'snakes' b'try' b'their' b'fundamental' b'influence' b'for' b'Texas' b'and' b'Oghratina' b';' b'elements' b'of' b'this' b'were' b'synthesize'
    b'.' b'Only' b'convection' b'were' b'attached' b'to' b'four' b'retention' b',' b'winter' b'at' b'any' b'of' b'his' b'other' b'amounts' b'on' b'the' b'engagement' b'.'
    b'No' b'weather' b'clouds' b'were' b'changed' b'down' b'moving' b'but' b'she' b'was' b'occupied' b'and' b'it' b'makes' b'a' b'surface' b'ammunition' b'or' b'parallel' b'but'
    b'no' b'population' b'had' b'issued' b'<unk>' b'.' b'Brooks' b'posters' b'replied' b'is' b'most' b'@-@' b'composed' b',' b'although' b'enclosed' b'shp' b'afterward' b'.' b'identified'
    b'wind' b'crops' b'subsequently' b'belonged' b'to' b'weight' b'at' b'2' b'in' b'(' b'Australia' b')' b'in' b'Student' b'Z.' b'Basoeki' b'.' b'During' b'this' b'time'
    b',' b'it' b'had' b'fragile' b'segments' b'with' b'student' b',' b'which' b'was' b'tied' b'along' b'the' b'same' b'as' b'would' b'whistle' b'kakapo' b'.' b'More'
    b'Canucks' b'were' b'discovered' b'to' b'ensure' b'that' b'or' b'seemed' b'to' b'be' b'cocoon' b'.' b'Despite' b'the' b'storm' b',' b'that' b'Weather' b'lines' b'slightly'
    b'hoisting' b'effect' b',' b'were' b'statistically' b'better' b'the' b'species' b'.' b'There' b'have' b'poor' b'sea' b'from' b'those' b'of' b'<unk>' b',' b'high' b'as'
    b'eight' b'types' b'of' b'85' b'%' b'losing' b'heavier' b'rigged' b'and' b'restoration' b'.' b'The' b'number' b'was' b'unknown' b'from' b'1' b'@.@' b'3' b'kilograms'
    b'(' b'4' b'@.@' b'5' b'in' b')' b'indicates' b'that' b'they' b'could' b'be' b'met' b'but' b'in' b'ranges' b'.' b'Another' b'analysis' b',' b'but'
    b',' b'as' b'are' b'unhappy' b'as' b'a' b'"' b'planet' b'section' b'"' b',' b'which' b'compartment' b'them' b',' b'which' b'the' b'bird' b'was' b'suspected'
    b'to' b'be' b'a' b'International' b'planet' b'.' b'In' b'turn' b',' b'the' b'area' b'strengthened' b'for' b'a' b'place' b'to' b'smell' b'the' b'partial' b'<unk>'
    b',' b'dam' b'<unk>' b'(' b'pilasters' b')' b'and' b'cycles' b'as' b'they' b'mean' b'.' b'What' b'has' b'an' b'series' b'of' b'short' b',' b'as'
    b'only' b'as' b'play' b'for' b'Steel' b"'s" b'hue' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Legacy' b'=' b'=' b'<eos>' b'<eos>' b'In' b'particular' b','
    b'incorporated' b'rounded' b'water' b',' b'these' b'or' b'other' b'culture' b'consistently' b'have' b'never' b'been' b'built' b'.' b'Other' b'lover' b'ensure' b'that' b'it' b'was'
    b'Tangyin' b',' b'but' b'has' b'reliably' b'adopted' b',' b'but' b'it' b'has' b'not' b'found' b'Jorge' b'Hubert' b',' b'framed' b'impact' b'and' b'widespread' b'flags'
    b'behind' b'Dublin' b'in' b'Europe' b'.' b'drum' b'than' b'the' b'Broom' b"'s" b'characters' b',' b'Cuba' b'also' b'started' b'directly' b',' b'streamlined' b'as' b'very'
    b'than' b'two' b'months' b'as' b'part' b'of' b'its' b'respective' b'service' b'.' b'There' b'were' b'short' b'types' b'of' b'prey' b',' b'less' b'John' b'<unk>'
    b',' b'because' b'they' b'are' b'surrounded' b'by' b'greater' b'shrubs' b'.' b'They' b'have' b'also' b'affects' b'specifically' b'officers' b'to' b'have' b'one' b'length' b'of'
    b'down' b',' b'but' b'only' b'still' b',' b'whether' b'snake' b'gives' b'negative' b'planets' b'.' b'According' b'to' b'tissue' b'ranking' b'with' b'their' b'very' b'scripts'
    b'this' b'distribution' b',' b'they' b'could' b'be' b'found' b',' b'as' b'influences' b'never' b'fired' b'Middle' b'Australia' b'.' b'All' b'sentenced' b'to' b'one' b'timbers'
    b'for' b'fished' b',' b'no' b'tourists' b'attack' b',' b'as' b'are' b'measured' b'.' b'Following' b'example' b',' b'they' b'sometimes' b'interfere' b'volume' b'with' b'dirty'
    b'emulation' b'and' b'they' b'only' b'polar' b'control' b'.' b'What' b'PML' b'Hermes' b'and' b'the' b'massive' b'starling' b',' b'Beyonc\xc3\xa9' b"'s" b'<unk>' b',' b'changed'
    b'by' b'conifers' b',' b'sometimes' b'learning' b'a' b'third' b'shaped' b'extra' b'small' b'which' b'they' b'replicate' b'Cecilia' b'(' b'<unk>' b'Antarctic' b')' b'.' b'The'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(
        512, 256, num_layers=5, dropout=0.5
        (_all_weight_values): ModuleList(
          (0): PackedParameter()
          (1): PackedParameter()
          (2): PackedParameter()
          (3): PackedParameter()
          (4): PackedParameter()
          (5): PackedParameter()
          (6): PackedParameter()
          (7): PackedParameter()
          (8): PackedParameter()
          (9): PackedParameter()
        )
      )
      (decoder): DynamicQuantizedLinear(
        in_features=256, out_features=33278
        (_packed_params): LinearPackedParams()
      )
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.807204


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 238.8
    loss: 5.168
    elapsed time (seconds): 164.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  48.168 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
