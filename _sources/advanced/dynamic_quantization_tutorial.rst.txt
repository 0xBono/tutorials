.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - _dynamic quantization_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'of' b'the' b'Government' b',' b'and' b'as' b'of' b'any' b'vision' b'21' b'weeks' b',' b'<unk>' b'and' b'anatomical' b'start' b',' b'which' b'are' b'known'
    b'for' b'international' b'languages' b'spaces' b',' b'more' b'than' b'99th' b'.' b'<eos>' b'In' b'some' b'areas' b',' b'problems' b'generally' b'embark' b'ordering' b'chronic' b'Taking'
    b'and' b'flattened' b'raw' b',' b'using' b'villains' b',' b'their' b'<unk>' b',' b'<unk>' b',' b'or' b'projections' b'with' b'they' b'sneak' b'.' b'These' b'areas'
    b'were' b'individually' b'leaked' b',' b'but' b'spreading' b'to' b'care' b'on' b'the' b'three' b'combinations' b'from' b'first' b'over' b'7' b':' b'00' b'.' b'dunes'
    b'fungi' b',' b'Baden' b',' b'venom' b',' b'and' b'punishing' b'letters' b"'Africaine" b'were' b'than' b'10' b'%' b',' b'19' b'%' b'of' b'its' b'happened'
    b',' b'and' b'lower' b'men' b',' b'Hindenburg' b',' b'and' b'police' b'pairs' b'per' b'arise' b'.' b'This' b'legs' b'is' b'dancing' b',' b'because' b'women'
    b'do' b'not' b'manipulate' b',' b'so' b'much' b'they' b'killed' b'their' b'right' b'time' b'by' b'begin' b'16' b'@,@' b'000' b't' b'items' b'.' b'It'
    b'is' b'apparent' b'by' b'"' b'man' b'of' b'Dalmeny' b'"' b'.' b'There' b'was' b'no' b'direct' b'variation' b'of' b'appeal' b'.' b'They' b'and' b'Knobbs'
    b'approach' b'around' b'the' b'age' b'of' b'Ceres' b',' b'hymns' b'.' b'The' b'care' b'of' b'the' b'sobriquet' b'varies' b'for' b'+' b'4' b'@.@' b'5'
    b'in' b'(' b'36' b'mm' b')' b'of' b'times' b'at' b'<unk>' b'level' b'(' b'330' b'\xc2\xb0' b'birds' b')' b',' b'with' b'only' b'62' b'%'
    b'of' b'Stupa' b'birds' b'.' b'If' b'extensive' b'in' b'the' b'1980s' b',' b'many' b'more' b'ones' b'quartered' b'2' b'@.@' b'50' b'individuals' b',' b'it'
    b'is' b'convicted' b'to' b'remain' b'elements' b'of' b'food' b'.' b'However' b',' b'Gabon' b"'" b'high' b'breeding' b'only' b'carry' b'back' b'students' b'because' b'they'
    b'do' b'not' b'straight' b'so' b',' b'it' b'should' b'missed' b'that' b'they' b'speed' b'still' b'floor' b'themselves' b',' b'and' b'I' b'may' b'occur' b'so'
    b'they' b'were' b'because' b'they' b'be' b'taken' b'between' b'any' b'.' b'There' b'is' b'other' b'attention' b'to' b'quite' b'four' b'hours' b'to' b'each' b'other'
    b'.' b'<eos>' b'There' b'are' b'no' b'of' b'50' b'@.@' b'5' b'million' b',' b'during' b'the' b'first' b'half' b',' b'and' b'31' b'points' b','
    b'can' b'be' b'caught' b'.' b'This' b'female' b'bird' b'will' b'be' b'variety' b'of' b'or' b'immersed' b'about' b'these' b'.' b'<unk>' b'for' b'each' b'other'
    b',' b'cross' b',' b'rituals' b'would' b'be' b'so' b'distinguished' b'on' b'nascent' b'and' b'which' b'might' b'be' b'nowhere' b'at' b'an' b'invasion' b'of' b'8'
    b'woodlands' b',' b'maintain' b'only' b'any' b'orbit' b'.' b'About' b'5' b'%' b'of' b'twenty' b'or' b'2' b'attempts' b'listed' b'in' b'about' b'schools' b','
    b'more' b'than' b'3' b'million' b'deep' b'birds' b'off' b'a' b'relationship' b'between' b'nine' b'@-@' b'four' b'families' b'in' b'all' b'regions' b',' b'and' b'1'
    b'@.@' b'9' b'\xce\xbcm' b'controlled' b'@.@' b'8' b'million' b'F' b'(' b'4' b'in' b')' b'.' b'As' b'total' b'Sauber' b',' b'each' b'females' b'continues'
    b'to' b'prepare' b',' b'and' b'anyone' b'displaced' b'issues' b'heat' b'.' b'Such' b'of' b'these' b'birds' b'inhabited' b'only' b'around' b'in' b'a' b'total' b'of'
    b'Chiapas' b'in' b'combat' b'2013' b',' b'and' b'even' b'thus' b'attend' b'Kickstarter' b'.' b'Inari' b'is' b'currently' b'controlled' b'as' b'28' b'as' b'other' b'people'
    b',' b'from' b'4' b'@.@' b'Morocco' b'to' b'2' b'%' b'of' b'the' b'country' b',' b'playing' b'at' b'least' b'six' b'items' b'and' b'one' b'pamphlets'
    b'.' b'Nagoya' b'(' b'including' b'male' b'@-@' b'gum' b')' b'includes' b'booms' b'for' b'insects' b',' b'a' b'straight' b'resembles' b'mother' b'onto' b'wings' b'rifles'
    b',' b'so' b'it' b'is' b'represented' b'and' b'are' b'organized' b',' b'of' b'many' b'distinct' b'species' b'.' b'It' b'is' b'one' b'of' b'a' b'precise'
    b'star' b',' b'which' b'may' b'be' b'CHOK' b'.' b'In' b'2009' b',' b'they' b'are' b'also' b'visible' b'to' b'attract' b'their' b'flesh' b'within' b'such'
    b'female' b'range' b'.' b'<unk>' b'cap' b'may' b'often' b'be' b'traces' b'of' b'adult' b'@-@' b'colors' b'.' b'<eos>' b'Common' b'starlings' b'may' b'be' b'categorised'
    b'in' b'the' b'cloud' b',' b'and' b'their' b'common' b'common' b'starling' b'muscles' b'can' b'be' b'successful' b'.' b'The' b'common' b'starling' b'have' b'a' b'seat'
    b'first' b'with' b'a' b'5' b'@.@' b'5' b'km' b'(' b'2' b'@.@' b'9' b'mi' b')' b'of' b'a' b'Gulf' b'increase' b'in' b'Sweden' b'and'
    b'order' b',' b'whose' b'back' b'better' b'or' b'five' b'days' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Awards' b'=' b'=' b'<eos>' b'<eos>' b'Kakapo' b'Campus'
    b'are' b'set' b'off' b'both' b'in' b'the' b'north' b'and' b'west' b'of' b'dinosaurs' b'in' b'his' b'<unk>' b',' b'with' b'a' b'wide' b'or' b'tribal'
    b'of' b'them' b'.' b'There' b'are' b'just' b'evidence' b'when' b'males' b'broke' b'two' b'51st' b',' b'even' b'resulting' b'in' b'trees' b'course' b'walls' b';'
    b'they' b'are' b'reported' b'to' b'occupy' b'its' b'tendency' b'of' b'feeding' b'played' b'into' b'mark' b'.' b'Ingrid' b'found' b'financial' b'sword' b',' b'they' b'prepared'
    b'extensive' b'Royston' b"'s" b'radius' b',' b'so' b'<unk>' b'Sergeant' b'posters' b'has' b'not' b'said' b'that' b'it' b'species' b'from' b'its' b'thin' b'form' b'<unk>'
    b'.' b'Henry' b'H.' b'Harris' b"'s" b'cult' b'that' b'stood' b'on' b'the' b'Municipal' b'next' b'@-@' b'term' b',' b'opening' b'with' b'a' b'25' b'@.@'
    b'5' b'm' b'(' b'4' b'@.@' b'7' b'in' b')' b'high' b'length' b'mean' b'that' b'a' b'average' b'blood' b'stay' b'after' b'an' b'body' b'on'
    b'the' b'eggs' b'.' b'Because' b'more' b'bullpen' b'have' b'an' b'scales' b'around' b'worship' b',' b'and' b'a' b'burn' b'generally' b'put' b'to' b'a' b'halt'
    b'that' b'is' b'closely' b'part' b'of' b'advances' b',' b'though' b'completely' b'<unk>' b'Mac' b',' b'the' b'song' b'between' b'590' b'astronomical' b'membranes' b'marks' b'their'
    b'art' b',' b'dark' b'as' b'fly' b'as' b'one' b'of' b'the' b'Nazis' b'.' b'After' b'dedicating' b'its' b'first' b'gamma' b'starling' b',' b'it' b'is'
    b'unclear' b'by' b'<unk>' b',' b'couples' b'and' b'members' b'Singh' b'.' b'In' b'Splitsider' b',' b'they' b'does' b'not' b'eat' b'that' b'they' b'extend' b'when'
    b'they' b'eroded' b'areas' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Development' b'=' b'=' b'<eos>' b'<eos>' b'Currently' b',' b'their' b'entire' b'ranges' b'as' b'six'
    b'species' b';' b'it' b'does' b'focus' b'on' b'to' b'take' b'by' b'very' b'devout' b'native' b'WA' b'.' b'When' b'they' b'engage' b'living' b'before' b'typically'
    b'infantry' b',' b'even' b'as' b'hidden' b'when' b'it' b'appears' b'it' b'to' b'be' b'until' b'the' b'mid' b'@-@' b'sixteenth' b'century' b'.' b'It' b'won'
    b'generally' b'a' b'significant' b'twisted' b'pair' b'of' b'30' b'\xe2\x80\x93' b'4' b'@.@' b'4' b'in' b'(' b'<unk>' b')' b',' b'taking' b'over' b'the' b'wild'
    b'with' b'sea' b'.' b'Among' b'in' b'bird' b',' b'the' b'600' b'@.@' b'5' b'million' b'are' b'reduced' b'among' b'Darwis' b',' b'making' b'them' b'to'
    b'twenty' b'@-@' b'level' b'eggs' b'.' b'\xc2\xb5g' b'governs' b'shrine' b'dies' b'.' b'They' b'lack' b'are' b'that' b'it' b'may' b'be' b'another' b'remnant' b','
    b'and' b'its' b'male' b'respect' b'often' b'calls' b'.' b'margin' b'submerged' b'by' b'protein' b'fruits' b'by' b'pale' b',' b'mating' b',' b'so' b'<unk>' b','
    b'or' b'organised' b'their' b'game' b'afterward' b'.' b'Most' b'male' b'farms' b'gradually' b'be' b'required' b'to' b'disrupt' b'cool' b'or' b'since' b'@-@' b'eye' b','
    b'and' b'sometimes' b'survives' b'.' b'A' b'male' b'facility' b'was' b'quickly' b'vigorously' b'resembles' b'by' b'short' b'trees' b'so' b'organized' b'for' b'<unk>' b';' b'asking'
    b'since' b'cut' b'to' b'2' b'knots' b'(' b'12' b'@.@' b'8' b'mi' b')' b'at' b'structures' b'funerary' b'rays' b',' b'making' b'it' b'to' b'two'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 247.2
    loss: 5.168
    elapsed time (seconds): 172.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 7 minutes  4.640 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
