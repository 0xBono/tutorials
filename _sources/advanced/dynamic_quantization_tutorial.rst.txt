.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'(' b'@-@' b'disc' b')' b'in' b'western' b'@-@' b'America' b'.' b'He' b'recorded' b'a' b'322' b'of' b'41' b'@.@' b'2' b'AU' b',' b'having'
    b'23' b'proposed' b'records' b',' b'and' b'a' b'2' b'in' b'(' b'53' b'@.@' b'5' b'km' b'/' b'h' b')' b',' b'55' b'@.@' b'5'
    b'g' b'(' b'31' b'@.@' b'46' b'm2' b')' b'long' b'parallels' b'Bharata' b'showing' b'by' b'the' b'female' b'Mountain' b'back' b',' b'his' b'longer' b'and'
    b'consists' b'or' b'lose' b'24' b'@.@' b'8' b'in' b'(' b'83' b'mm' b')' b'minute' b'loading' b',' b'and' b'dark' b'brown' b'sections' b'are' b'present'
    b'and' b'there' b'are' b'no' b'wages' b'between' b'480' b'and' b'East' b'atmosphere' b'.' b'it' b'is' b'an' b'incidence' b'for' b'not' b'visible' b'until' b'<unk>'
    b',' b'amber' b',' b'cities' b',' b'goats' b',' b'<unk>' b',' b'Dawn' b',' b'<unk>' b',' b'<unk>' b'<unk>' b',' b'and' b'<unk>' b',' b'even'
    b'or' b'appearance' b'in' b'rockets' b'.' b'It' b'is' b'distant' b'from' b'to' b'take' b'up' b'a' b'human' b'body' b',' b'after' b'another' b'large' b'spread'
    b'.' b'<eos>' b'The' b'Kakapo' b'Family' b'ratio' b"'" b'Leonard' b'Off' b'rich' b'heavy' b'degrees' b':' b'<eos>' b'The' b'number' b'of' b'Dumah' b'in' b'a'
    b'planet' b',' b'produced' b'by' b'at' b'times' b',' b'is' b'missing' b'by' b'circumstances' b'.' b'There' b'are' b'suggested' b'that' b'there' b'are' b'distinct' b'damage'
    b',' b'or' b'not' b'worshipped' b'.' b'<eos>' b'Entering' b'Bernis' b'are' b'first' b'associated' b'by' b'Granada' b'@-@' b'phosphate' b'or' b'hot' b'incomplete' b'corona' b'Park'
    b'to' b'breeding' b'throughout' b'Tanzania' b'and' b'can' b'miss' b'Its' b'form' b'infrastructure' b'of' b'God' b'Ames' b'in' b'1808' b'.' b'<eos>' b'While' b'this' b'species'
    b'was' b'largely' b'lacking' b'throughout' b'South' b'America' b',' b'retains' b'an' b'cold' b'average' b'prices' b'before' b'still' b'a' b'saprotrophic' b'paper' b',' b'this' b'regular'
    b'antelope' b',' b'Caizhou' b',' b'and' b'wild' b'campuses' b'because' b'their' b'banks' b'was' b'approaching' b'into' b'other' b'species' b'of' b'amateur' b'birds' b'regret' b'at'
    b'T.' b'Ysabel' b',' b'may' b'have' b'recognised' b'food' b'sniper' b'membranes' b'.' b'It' b'is' b'most' b'clear' b'to' b'be' b'<unk>' b'as' b'merchants' b'due'
    b'to' b'a' b'northern' b',' b'cup' b'@-@' b'laser' b'distance' b'with' b'their' b'loss' b'southeast' b'of' b'easy' b'cult' b'reported' b'.' b'A' b'other' b'number'
    b'Palestinian' b'acts' b'flooded' b',' b'and' b'perhaps' b'Wuzhu' b'otherwise' b'authored' b'the' b'Irish' b'Ministry' b'.' b'<eos>' b'The' b'common' b'starlings' b'are' b'tested' b'with'
    b'by' b'birds' b',' b'as' b'well' b'as' b'gravitationally' b'1555' b'.' b'<eos>' b'The' b'kakapo' b'assigned' b'to' b'<unk>' b'@-@' b'<unk>' b'characteristic' b'of' b'between'
    b'least' b'below' b'many' b'more' b'than' b'25' b'saints' b'.' b'It' b'is' b'often' b'somewhat' b'marketed' b'by' b'blue' b',' b'rational' b',' b'poverty' b','
    b'ballads' b',' b'or' b'pledging' b'M.' b'galericulata' b'.' b'At' b'Victoria' b'and' b'<unk>' b',' b'in' b'response' b'to' b'small' b'lots' b',' b'observes' b'that'
    b'the' b'kakapo' b'demands' b',' b'"' b'nominal' b'power' b'and' b'doubt' b'people' b'caring' b'a' b'series' b'of' b'refuge' b'down' b'of' b'Singapore' b',' b'prayer'
    b',' b'volatile' b',' b'barrier' b',' b'and' b'yellow' b'mound' b'of' b'continental' b'fauna' b',' b'<unk>' b',' b'<unk>' b',' b'gems' b',' b'suppliers' b'and'
    b'and' b'<unk>' b'"' b'\xe2\x80\x94' b'"' b'weapon' b'feelings' b'"' b',' b'the' b'kakapo' b'feature' b'(' b'particularly' b'known' b'as' b'"' b'Ha' b'Theft' b'"'
    b')' b',' b'but' b'has' b'Omaha' b"'s" b'retractable' b'intensity' b'(' b'sandy' b'central' b'subject' b')' b'is' b'confiscated' b'in' b'portions' b'of' b'nestlings' b'that'
    b'are' b'"' b'females' b'"' b'\xe2\x80\x94' b'stopping' b'genus' b'<unk>' b'after' b'the' b'Babylonian' b'name' b'from' b'the' b'Japanese' b'Iberia' b'.' b'The' b'Crusaders' b'have'
    b'sweep' b'about' b'one' b'species' b'old' b'than' b'hunt' b'off' b'forces' b',' b'with' b'advisors' b'and' b'elected' b'limits' b'.' b'This' b'technique' b'has' b'ain'
    b'lubricants' b'among' b'its' b'legitimacy' b',' b'reads' b',' b'where' b'they' b'should' b'be' b'found' b'a' b'actual' b'.' b'<eos>' b'Soon' b'on' b'Anglo' b'@-@'
    b'major' b'areas' b'and' b'Odaenathus' b'issues' b'and' b'Kriegsmarine' b',' b'the' b'bird' b'turns' b'into' b'six' b'categories' b',' b'with' b'both' b'over' b'37' b'million'
    b'kilometres' b'(' b'cool' b')' b',' b'a' b'man' b"'s" b'restricted' b'body' b'that' b'are' b'likely' b'to' b'measure' b'during' b'its' b'range' b'.' b'<eos>'
    b'The' b'kakapo' b'of' b'a' b'500' b'@-@' b'day' b'bulb' b',' b'is' b'a' b'font' b'of' b'temporary' b',' b'regulating' b'ballad' b',' b'and' b'1'
    b'@.@' b'05' b'%' b'of' b'snake' b'/' b'L' b'.' b'The' b'radius' b'at' b'the' b'moon' b'cried' b'above' b'how' b'they' b'have' b'been' b'very'
    b'likely' b';' b'its' b'male' b'560' b'fable' b'is' b'taught' b'into' b'early' b'his' b'south' b'@-@' b'year' b'planners' b'.' b'Now' b',' b'a' b'host'
    b'corrector' b"'s" b'older' b'Policy' b',' b'topped' b'by' b'a' b'stela' b',' b'has' b'"' b'<unk>' b'incidents' b'of' b'which' b'is' b'Administration' b'.' b'What'
    b'makes' b'it' b'"' b',' b'and' b'is' b'generally' b'found' b'as' b'of' b'1914' b'.' b'The' b'Financial' b'courtship' b'language' b'is' b'Mary' b'and' b'Jesse'
    b'<unk>' b'(' b'simply' b'known' b'as' b'"' b'mahogany' b'(' b'<unk>' b')' b'"' b'such' b'as' b'wedding' b'combination' b',' b'and' b'related' b'to' b'Private'
    b'chirps' b'as' b'anticipating' b'there' b'was' b'determined' b'that' b'it' b'was' b'stout' b'.' b'Banksia' b'retain' b'a' b'considerable' b'range' b'on' b'filtered' b',' b'by'
    b'which' b'the' b'true' b'DNA' b'remains' b'Kuraki' b'includes' b'stone' b'with' b'<unk>' b',' b'and' b'his' b'diet' b'are' b'reliable' b',' b'if' b'they' b'playing'
    b'much' b'other' b'offenders' b'might' b'support' b'within' b'densely' b'periods' b';' b'Guide' b'states' b'that' b'a' b'attack' b'in' b'even' b'rowlock' b'up' b'between' b'millions'
    b'of' b'natural' b'riverside' b'crews' b',' b'among' b'most' b'genera' b'(' b'though' b'when' b'@-@' b'diameter' b'meaning' b'may' b'be' b'briefly' b"'" b'growing' b'or'
    b'bassist' b'AU' b'networks' b')' b',' b'people' b'often' b'should' b'Mansion' b'by' b'sulfides' b'or' b'completely' b'brass' b',' b'they' b"'ll" b'Eurasia' b'late' b'.'
    b'For' b'binary' b'predators' b',' b'this' b'species' b'is' b'not' b'required' b'to' b'be' b'ruined' b',' b'and' b'probably' b'partially' b'often' b'developed' b'boards' b'.'
    b'The' b'origin' b'of' b'main' b'activity' b'is' b'the' b'only' b'with' b'individuals' b'to' b'feature' b',' b'and' b'pose' b'its' b'obstacles' b'and' b'shape' b'<unk>'
    b'them' b'.' b'The' b'gate' b'leaves' b'a' b'retreat' b':' b'indeed' b',' b'125' b'or' b'400' b'or' b'more' b'compact' b'their' b'observation' b',' b'has'
    b'occur' b',' b'with' b'many' b'more' b'than' b'10' b'inches' b'and' b'more' b'retired' b'gameplay' b',' b'and' b'it' b'is' b'captured' b'.' b'Specific' b'fields'
    b'is' b'absence' b'for' b'<unk>' b'days' b'so' b'become' b'known' b'as' b'Secretary' b'unruly' b'.' b'But' b'that' b'be' b'mainly' b'so' b'Isesi' b'alone' b','
    b'the' b'effects' b'that' b'such' b',' b'much' b'unique' b'tracks' b'were' b'loud' b'.' b'<eos>' b'M.' b'galericulata' b"'s" b'common' b'name' b'razed' b'their' b'skin'
    b'.' b'By' b'18' b'season' b'(' b'transits' b'\xe2\x80\x93' b'36' b'p.m.' b'BCE' b')' b',' b'they' b'were' b'relegated' b'to' b'work' b',' b'which' b'is'
    b'included' b'by' b'illuminate' b'\xe2\x80\x9d' b'and' b'absorption' b'or' b'membranes' b'.' b'If' b'a' b'pure' b'cell' b'must' b'be' b'structured' b'as' b'possible' b',' b'depending'
    b'on' b'their' b'host' b'robotic' b'place' b'.' b'Early' b'it' b'are' b'known' b',' b'conversion' b',' b'and' b'<unk>' b'Drax' b',' b'and' b'ban' b'or'
    b'Pocket' b',' b'with' b'open' b'wings' b'each' b'occurs' b'over' b'humans' b'.' b'When' b'not' b'hears' b',' b'food' b'shark' b'twigs' b'are' b'enjoyed' b'by'
    b'almost' b'most' b'of' b'any' b'other' b'from' b'her' b'surroundings' b'.' b'The' b'other' b'two' b'<unk>' b'leaves' b'they' b'will' b'<unk>' b'with' b'stimmi' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.94579
    Size (MB): 79.739984


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 239.1
    loss: 5.168
    elapsed time (seconds): 167.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  52.199 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
