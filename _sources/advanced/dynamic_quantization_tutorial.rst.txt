.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(experimental) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization - _dynamic quantization_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'since' b'a' b'acquaintance' b',' b'independent' b'interests' b'when' b'the' b'company' b'around' b'his' b'dominated' b'the' b'childish' b'popcorn' b'Durga' b'<unk>' b'devastation' b',' b'other'
    b'of' b'whom' b'are' b'thought' b'to' b'have' b'recently' b'collected' b'a' b'brief' b'remnant' b'role' b',' b'on' b'August' b'7' b',' b'2006' b'.' b'<eos>'
    b'<eos>' b'=' b'=' b'Meteorological' b'season' b'=' b'=' b'<eos>' b'<eos>' b'The' b'common' b'character' b'are' b'roughly' b'$' b'5' b'million' b',' b'indicating' b'time'
    b'in' b'Austria' b'Sea' b'as' b'part' b'of' b'Latin' b',' b'growing' b',' b'Margaret' b'summers' b',' b'Trotternish' b',' b'<unk>' b',' b'culture' b',' b'congregationalists'
    b',' b'Dilke' b',' b'<unk>' b',' b'Native' b'galericulata' b',' b'<unk>' b',' b'Albert' b'@-@' b'e' b'and' b'northwesterly' b'.' b'However' b',' b'destroyed' b'by'
    b'Atoll' b'in' b'1909' b',' b'King' b'repeated' b'time' b'in' b'there' b'.' b'Each' b'important' b'character' b'are' b'Bet' b'.' b'The' b'use' b'of' b'short'
    b'rule' b'brought' b'to' b'Pryce' b'.' b'Males' b'also' b'lived' b'in' b'Hakim' b"'s" b'death' b'and' b'Shoshone' b'several' b'to' b'90' b'gotten' b'including' b'28'
    b'years' b'as' b'a' b'poor' b'methods' b'and' b'a' b'obscured' b'start' b'to' b'counter' b'they' b'moves' b'Neighbors' b'as' b'clear' b':' b'adults' b'or' b'dynamics'
    b'(' b'approximately' b'identities' b'near' b'2' b'lb' b')' b'.' b'The' b'nest' b"'s" b'<unk>' b'Tower' b'consists' b'of' b'internal' b'head' b'management' b'will' b'"'
    b'well' b'two' b'times' b'from' b'its' b'pews' b'in' b'Lynx' b'/' b'Norway' b',' b'whereas' b'all' b'male' b'~' b'or' b'ed' b'containers' b'Pampas' b'looks'
    b'into' b'her' b'relatively' b'distinct' b'prevalence' b'of' b'wood' b'Guy' b',' b'Cassandra' b'or' b'backup' b'situations' b',' b'a' b'half' b'of' b'female' b'masses' b'around'
    b'spots' b'had' b'used' b'by' b'1' b'@.@' b'1' b'in' b'(' b'overall' b')' b'.' b'L.' b'tomorrow' b'pointing' b'expert' b',' b'and' b'a' b'fatality'
    b'never' b'rifled' b'It' b'intoxicated' b'.' b'Ka\xc3\xbalza' b'there' b'has' b'been' b'fewer' b'test' b'women' b'.' b'He' b'typically' b'felt' b'it' b'is' b'standoff' b'several'
    b'times' b'having' b'already' b'called' b'Allah' b',' b'and' b'to' b'be' b'light' b'so' b'able' b'to' b'get' b'again' b'for' b'them' b'to' b'be' b'much'
    b'bequeathed' b'away' b'.' b'"' b'Other' b'methods' b'are' b'typically' b'told' b'to' b'be' b'extended' b'or' b'used' b'in' b'Olga' b'$' b'20' b'million' b','
    b'called' b'their' b'size' b'.' b'Later' b',' b'Ross' b'liked' b'its' b'bodies' b'to' b'routine' b'attempts' b'overturned' b'with' b'twisted' b'factors' b'around' b'S.' b'Barrier'
    b'Izumo' b',' b'stiff' b'and' b'abide' b'.' b'These' b'diversity' b"'" b'scholars' b'include' b'found' b'special' b'gates' b'.' b'In' b'this' b'reason' b'they' b'have'
    b'very' b'distinct' b'escape' b'for' b'895' b'invertebrates' b'.' b'Unlike' b'this' b'period' b'of' b'<unk>' b',' b'they' b'will' b'need' b'to' b'respond' b'into' b'earthstar'
    b'group' b'and' b'there' b'are' b'host' b'possesses' b'plumage' b'as' b'one' b'figure' b',' b'<unk>' b',' b'and' b'cause' b'@-@' b'up' b'pair' b'.' b'This'
    b'species' b'is' b'covered' b'by' b'food' b'.' b'<eos>' b'Despite' b'the' b'eastern' b'straight' b'of' b'the' b'meat' b'nature' b',' b'members' b'of' b'planets' b'levels'
    b'were' b'not' b'bounded' b'.' b'They' b'also' b'Ibarguren' b'to' b'generate' b'to' b'their' b'large' b'offspring' b'such' b'as' b'handicapped' b',' b'although' b'again' b'creating'
    b'their' b'head' b',' b'tonality' b',' b'then' b'also' b'recorded' b',' b'evacuated' b'it' b'to' b'fighting' b'some' b'historians' b'begin' b'back' b'to' b'<eos>' b'As'
    b'010' b'sodium' b'molten' b'CH' b',' b'it' b'is' b'possible' b'that' b'Ceres' b'could' b'be' b'useful' b'<unk>' b'by' b'10' b'or' b'4' b'or' b'2'
    b'.' b'These' b'nests' b'may' b'be' b'interested' b'around' b'the' b'carriage' b',' b'also' b'and' b'<unk>' b'when' b'if' b'other' b'for' b'they' b'were' b'be'
    b'packaged' b'to' b'their' b'all' b'at' b'a' b'small' b'angle' b'.' b'<eos>' b'The' b'<unk>' b'(' b'milk' b')' b'may' b'be' b'seen' b'from' b'a'
    b'dispute' b'with' b'Donald' b'uncover' b'that' b'are' b'both' b'possible' b'by' b'high' b',' b'seeing' b'\xe2\x80\x93' b'sex' b'back' b'.' b'By' b'corn' b',' b'they'
    b'can' b'be' b'introduced' b'to' b'fire' b'a' b'atmosphere' b'known' b'where' b'a' b'learning' b'triangle' b'does' b'not' b'need' b'to' b'emerge' b'and' b'target' b'rich'
    b'standards' b'from' b'sex' b'.' b'Other' b'u' b'may' b'be' b'more' b'culling' b'for' b'pair' b'of' b'<unk>' b',' b'including' b'them' b'so' b'consisting' b'of'
    b'lane' b',' b'house' b'or' b'em' b'that' b'they' b'discredit' b'.' b'area' b'are' b'believed' b'to' b'explain' b'way' b'Willard' b'@-@' b'keepers' b',' b'who'
    b'<unk>' b'those' b'other' b'environment' b'and' b'legs' b'period' b'.' b'There' b'are' b'numerous' b':' b'<eos>' b'Ceres' b'handwriting' b'any' b'other' b'bird' b',' b'so'
    b'felt' b'outside' b'<unk>' b'containing' b'two' b'riders' b'and' b'a' b'highly' b'rare' b'step' b'to' b'those' b'magnetic' b'injuries' b'when' b'it' b'is' b'so' b'as'
    b'their' b'appropriate' b',' b'and' b'they' b'leave' b'a' b'female' b'measuring' b'or' b'rock' b'.' b'Both' b'female' b'cells' b'feature' b'that' b'risks' b'may' b'represent'
    b'it' b'.' b'...' b'we' b'can' b'lose' b'to' b'a' b'degree' b'to' b'have' b'"' b'48' b'.' b'Sometimes' b'things' b'in' b'hospitals' b',' b'as'
    b',' b'you' b'will' b'not' b'be' b'reptile' b'in' b'color' b',' b'pupils' b'presents' b'them' b'to' b'link' b'them' b'seven' b'times' b'each' b'still' b'will'
    b'have' b'the' b'dislike' b'of' b'their' b'beak' b'winds' b'that' b'has' b'collectively' b'such' b'as' b'<unk>' b'.' b'"' b'If' b'named' b'nearby' b',' b'they'
    b'carried' b'its' b'peak' b'from' b'their' b'less' b'mortem' b',' b'ranging' b'from' b'humans' b'.' b'They' b'seems' b'to' b'undergo' b'their' b'need' b',' b'whereas'
    b'by' b'Beyonc\xc3\xa9' b',' b'they' b'applied' b'on' b'furs' b'.' b'A' b'specific' b'variety' b'of' b'unhealthy' b'kakapo' b'began' b'about' b'as' b'they' b'are' b'slightly'
    b'uncertain' b'or' b'usually' b'burn' b'on' b'their' b'opening' b'hundreds' b'.' b'Sword' b'prevents' b'starlings' b',' b'so' b'other' b'evidence' b'has' b'maximum' b'waste' b'bond'
    b'such' b'as' b'<unk>' b',' b'habit' b'of' b'combat' b'and' b'one' b'cricket' b'changes' b'.' b'They' b'resembles' b'that' b'TBSA' b'does' b'not' b'eat' b'Mecca'
    b'.' b'They' b'feed' b'on' b'bacteria' b'may' b'be' b'rare' b'plan' b'that' b'they' b'made' b'up' b'to' b'a' b'expression' b'of' b'vigorous' b'exciting' b'.'
    b'Pfeiffer' b'consists' b'without' b'arrive' b'with' b'human' b'ones' b'and' b'events' b'.' b'The' b'kakapo' b'structured' b'a' b'single' b'pattern' b',' b'but' b'less' b'recently'
    b'tries' b'.' b'Common' b'studies' b'groups' b',' b'although' b'their' b'remains' b'is' b'posted' b',' b'often' b'found' b'for' b'food' b'Shiva' b',' b'then' b'light'
    b'as' b'he' b'occurs' b'.' b'The' b'old' b'starling' b'has' b'been' b'a' b'narrow' b'perfect' b',' b'\xe3\x80\x88' b'Schur' b'subseries' b'Perimeter' b'(' b'<unk>' b'grant'
    b')' b',' b'Missouri' b'(' b'P.' b'Called' b')' b',' b'and' b'male' b'peregrine' b'impoverished' b'(' b'South' b')' b'helium' b'.' b'<eos>' b'Regardless' b','
    b'when' b'New' b'Zealand' b'had' b'found' b'as' b'too' b'than' b',' b'segments' b'to' b'Horror' b'Rica' b'and' b'Bond' b',' b'they' b'are' b'just' b'analyzed'
    b'as' b'with' b'hairy' b'male' b'and' b'<unk>' b'or' b"'Addario" b'.' b'While' b'then' b',' b'they' b'newly' b'neutron' b'starling' b',' b'resulting' b'and' b'thus'
    b'negative' b'pore' b'adults' b'between' b'birds' b'and' b'northern' b'topic' b'both' b'occur' b'up' b'around' b'<unk>' b'.' b'Horvath' b'occurs' b'on' b'conservation' b'points' b','
    b'even' b'<unk>' b',' b'aliens' b'and' b'membership' b'.' b'In' b'keeping' b',' b'those' b'can' b'not' b'be' b'used' b'to' b'make' b'small' b'direction' b'with'
    b'Milton' b',' b'thus' b'particles' b'during' b'he' b'sounds' b'the' b'ice' b'schools' b'.' b'Towards' b'their' b'very' b'third' b'examples' b'of' b'coffee' b'@-@' b'shaped'
    b'populations' b',' b'rather' b'than' b'152' b'@.@' b'5' b'times' b'from' b'hawks' b',' b'about' b'every' b'relatively' b'recent' b'element' b'.' b'One' b'large' b'birds'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].view(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, scale=1.0, zero_point=0)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.941574
    Size (MB): 76.80671


Second, we see faster inference time, with no difference in evaluation loss:

Note: we number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 243.6
    loss: 5.168
    elapsed time (seconds): 170.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  59.039 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
